
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  0000943e  000094d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000943e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000072d  008001b4  008001b4  00009586  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00009586  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005f5  00000000  00000000  00009626  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000523a  00000000  00000000  00009c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a54  00000000  00000000  0000ee55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000040f8  00000000  00000000  0000f8a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000580  00000000  00000000  000139a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fcd  00000000  00000000  00013f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004a68  00000000  00000000  00014ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00019959  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__ctors_end>
       4:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
       8:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
       c:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      10:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      14:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      18:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      1c:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      20:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      24:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      28:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      2c:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      30:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      34:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      38:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      3c:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      40:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      44:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      48:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      4c:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      50:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__vector_20>
      54:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      58:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      5c:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      60:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      64:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      68:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      6c:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      70:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      74:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>
      78:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__bad_interrupt>

0000007c <__c.3069>:
      7c:	29 3a 20 00                                         ): .

00000080 <__c.3067>:
      80:	74 6f 6f 20 6d 61 6e 79 20 61 72 67 75 6d 65 6e     too many argumen
      90:	74 73 28 00                                         ts(.

00000094 <__c.2994>:
      94:	45 78 69 74 69 6e 67 0a 00                          Exiting..

0000009d <__c.2992>:
      9d:	78 00                                               x.

0000009f <__c.2990>:
      9f:	0a 00                                               ..

000000a1 <__c.2988>:
      a1:	0a 4e 75 6d 62 65 72 20 6f 66 20 65 73 63 61 70     .Number of escap
      b1:	65 20 63 68 61 72 61 63 74 65 72 73 20 6e 65 65     e characters nee
      c1:	64 65 64 3a 20 00                                   ded: .

000000c7 <__c.2983>:
      c7:	45 6e 74 65 72 20 6e 75 6d 62 65 72 20 6f 66 20     Enter number of 
      d7:	65 73 63 61 70 65 20 63 68 61 72 61 63 74 65 72     escape character
      e7:	73 20 74 6f 20 6c 6f 6f 6b 20 66 6f 72 3a 20 00     s to look for: .

000000f7 <__c.2980>:
      f7:	36 00                                               6.

000000f9 <__c.2978>:
      f9:	0a 00                                               ..

000000fb <__c.2976>:
      fb:	0a 4e 65 77 20 65 73 63 61 70 65 20 63 68 61 72     .New escape char
     10b:	61 63 74 65 72 3a 20 00                             acter: .

00000113 <__c.2974>:
     113:	45 6e 74 65 72 20 61 20 6e 65 77 20 65 73 63 61     Enter a new esca
     123:	70 65 20 63 68 61 72 61 63 74 65 72 3a 20 00        pe character: .

00000132 <__c.2972>:
     132:	35 00                                               5.

00000134 <__c.2970>:
     134:	4e 65 77 20 66 69 6c 65 20 6e 75 6d 62 65 72 20     New file number 
     144:	72 65 73 65 74 20 74 6f 20 7a 65 72 6f 0a 00        reset to zero..

00000153 <__c.2968>:
     153:	34 00                                               4.

00000155 <__c.2966>:
     155:	43 6f 6d 6d 61 6e 64 20 70 72 6f 6d 70 74 0a 00     Command prompt..

00000165 <__c.2964>:
     165:	33 00                                               3.

00000167 <__c.2962>:
     167:	41 70 70 65 6e 64 20 66 69 6c 65 20 6c 6f 67 67     Append file logg
     177:	69 6e 67 0a 00                                      ing..

0000017c <__c.2960>:
     17c:	32 00                                               2.

0000017e <__c.2958>:
     17e:	4e 65 77 20 66 69 6c 65 20 6c 6f 67 67 69 6e 67     New file logging
     18e:	0a 00                                               ..

00000190 <__c.2956>:
     190:	31 00                                               1.

00000192 <__c.2952>:
     192:	78 29 20 45 78 69 74 0a 00                          x) Exit..

0000019b <__c.2950>:
     19b:	36 29 20 4e 75 6d 62 65 72 20 6f 66 20 65 73 63     6) Number of esc
     1ab:	61 70 65 20 63 68 61 72 61 63 74 65 72 73 0a 00     ape characters..

000001bb <__c.2948>:
     1bb:	35 29 20 4e 65 77 20 65 73 63 61 70 65 20 63 68     5) New escape ch
     1cb:	61 72 61 63 74 65 72 0a 00                          aracter..

000001d4 <__c.2946>:
     1d4:	34 29 20 52 65 73 65 74 20 6e 65 77 20 66 69 6c     4) Reset new fil
     1e4:	65 20 6e 75 6d 62 65 72 0a 00                       e number..

000001ee <__c.2944>:
     1ee:	33 29 20 43 6f 6d 6d 61 6e 64 20 70 72 6f 6d 70     3) Command promp
     1fe:	74 0a 00                                            t..

00000201 <__c.2942>:
     201:	32 29 20 41 70 70 65 6e 64 20 66 69 6c 65 20 6c     2) Append file l
     211:	6f 67 67 69 6e 67 0a 00                             ogging..

00000219 <__c.2940>:
     219:	31 29 20 4e 65 77 20 66 69 6c 65 20 6c 6f 67 67     1) New file logg
     229:	69 6e 67 0a 00                                      ing..

0000022e <__c.2938>:
     22e:	43 68 61 6e 67 65 20 74 6f 3a 0a 00                 Change to:..

0000023a <__c.2936>:
     23a:	0a 00                                               ..

0000023c <__c.2934>:
     23c:	20 78 20 00                                          x .

00000240 <__c.2932>:
     240:	43 75 72 72 65 6e 74 20 65 73 63 61 70 65 20 63     Current escape c
     250:	68 61 72 61 63 74 65 72 20 61 6e 64 20 61 6d 6f     haracter and amo
     260:	75 6e 74 3a 20 00                                   unt: .

00000266 <__c.2930>:
     266:	0a 00                                               ..

00000268 <__c.2928>:
     268:	43 6f 6d 6d 61 6e 64 00                             Command.

00000270 <__c.2926>:
     270:	41 70 70 65 6e 64 20 66 69 6c 65 00                 Append file.

0000027c <__c.2924>:
     27c:	4e 65 77 20 66 69 6c 65 00                          New file.

00000285 <__c.2922>:
     285:	43 75 72 72 65 6e 74 20 62 6f 6f 74 20 6d 6f 64     Current boot mod
     295:	65 3a 20 00                                         e: .

00000299 <__c.2920>:
     299:	0a 53 79 73 74 65 6d 20 43 6f 6e 66 69 67 75 72     .System Configur
     2a9:	61 74 69 6f 6e 0a 00                                ation..

000002b0 <__c.2902>:
     2b0:	0a 45 78 69 74 69 6e 67 0a 00                       .Exiting..

000002ba <__c.2900>:
     2ba:	78 00                                               x.

000002bc <__c.2898>:
     2bc:	0a 47 6f 69 6e 67 20 74 6f 20 31 31 35 32 30 30     .Going to 115200
     2cc:	62 70 73 2e 2e 2e 0a 00                             bps.....

000002d4 <__c.2896>:
     2d4:	37 00                                               7.

000002d6 <__c.2894>:
     2d6:	0a 47 6f 69 6e 67 20 74 6f 20 35 37 36 30 30 62     .Going to 57600b
     2e6:	70 73 2e 2e 2e 0a 00                                ps.....

000002ed <__c.2892>:
     2ed:	36 00                                               6.

000002ef <__c.2890>:
     2ef:	0a 47 6f 69 6e 67 20 74 6f 20 33 38 34 30 30 62     .Going to 38400b
     2ff:	70 73 2e 2e 2e 0a 00                                ps.....

00000306 <__c.2888>:
     306:	35 00                                               5.

00000308 <__c.2886>:
     308:	0a 47 6f 69 6e 67 20 74 6f 20 31 39 32 30 30 62     .Going to 19200b
     318:	70 73 2e 2e 2e 0a 00                                ps.....

0000031f <__c.2884>:
     31f:	34 00                                               4.

00000321 <__c.2882>:
     321:	0a 47 6f 69 6e 67 20 74 6f 20 39 36 30 30 62 70     .Going to 9600bp
     331:	73 2e 2e 2e 0a 00                                   s.....

00000337 <__c.2880>:
     337:	33 00                                               3.

00000339 <__c.2878>:
     339:	0a 47 6f 69 6e 67 20 74 6f 20 34 38 30 30 62 70     .Going to 4800bp
     349:	73 2e 2e 2e 0a 00                                   s.....

0000034f <__c.2876>:
     34f:	32 00                                               2.

00000351 <__c.2874>:
     351:	0a 47 6f 69 6e 67 20 74 6f 20 32 34 30 30 62 70     .Going to 2400bp
     361:	73 2e 2e 2e 0a 00                                   s.....

00000367 <__c.2872>:
     367:	31 00                                               1.

00000369 <__c.2868>:
     369:	78 29 20 45 78 69 74 0a 00                          x) Exit..

00000372 <__c.2866>:
     372:	37 29 20 31 31 35 32 30 30 20 62 70 73 0a 00        7) 115200 bps..

00000381 <__c.2864>:
     381:	36 29 20 35 37 36 30 30 20 62 70 73 0a 00           6) 57600 bps..

0000038f <__c.2862>:
     38f:	35 29 20 33 38 34 30 30 20 62 70 73 0a 00           5) 38400 bps..

0000039d <__c.2860>:
     39d:	34 29 20 31 39 32 30 30 20 62 70 73 0a 00           4) 19200 bps..

000003ab <__c.2858>:
     3ab:	33 29 20 39 36 30 30 20 62 70 73 0a 00              3) 9600 bps..

000003b8 <__c.2856>:
     3b8:	32 29 20 34 38 30 30 20 62 70 73 0a 00              2) 4800 bps..

000003c5 <__c.2854>:
     3c5:	31 29 20 32 34 30 30 20 62 70 73 0a 00              1) 2400 bps..

000003d2 <__c.2852>:
     3d2:	43 68 61 6e 67 65 20 74 6f 3a 0a 00                 Change to:..

000003de <__c.2850>:
     3de:	30 30 20 62 70 73 0a 00                             00 bps..

000003e6 <__c.2848>:
     3e6:	31 31 35 32 00                                      1152.

000003eb <__c.2846>:
     3eb:	35 37 36 00                                         576.

000003ef <__c.2844>:
     3ef:	33 38 34 00                                         384.

000003f3 <__c.2842>:
     3f3:	31 39 32 00                                         192.

000003f7 <__c.2840>:
     3f7:	39 36 00                                            96.

000003fa <__c.2838>:
     3fa:	32 34 00                                            24.

000003fd <__c.2836>:
     3fd:	34 38 00                                            48.

00000400 <__c.2834>:
     400:	43 75 72 72 65 6e 74 3a 20 00                       Current: .

0000040a <__c.2832>:
     40a:	0a 42 61 75 64 20 43 6f 6e 66 69 67 75 72 61 74     .Baud Configurat
     41a:	69 6f 6e 3a 0a 00                                   ion:..

00000420 <__c.2825>:
     420:	62 61 75 64 09 09 09 3a 20 4d 65 6e 75 20 74 6f     baud...: Menu to
     430:	20 63 6f 6e 66 69 67 75 72 65 20 62 61 75 64 20      configure baud 
     440:	72 61 74 65 0a 00                                   rate..

00000446 <__c.2823>:
     446:	73 65 74 09 09 09 3a 20 4d 65 6e 75 20 74 6f 20     set...: Menu to 
     456:	63 6f 6e 66 69 67 75 72 65 20 73 79 73 74 65 6d     configure system
     466:	20 62 6f 6f 74 20 6d 6f 64 65 0a 00                  boot mode..

00000472 <__c.2821>:
     472:	0a 4d 65 6e 75 73 3a 0a 00                          .Menus:..

0000047b <__c.2819>:
     47b:	73 79 6e 63 09 09 09 3a 20 45 6e 73 75 72 65 73     sync...: Ensures
     48b:	20 61 6c 6c 20 62 75 66 66 65 72 65 64 20 64 61      all buffered da
     49b:	74 61 20 69 73 20 77 72 69 74 74 65 6e 20 74 6f     ta is written to
     4ab:	20 74 68 65 20 63 61 72 64 0a 00                     the card..

000004b6 <__c.2817>:
     4b6:	69 6e 69 74 09 09 09 3a 20 52 65 69 6e 69 74 69     init...: Reiniti
     4c6:	61 6c 69 7a 65 73 20 61 6e 64 20 72 65 6f 70 65     alizes and reope
     4d6:	6e 73 20 74 68 65 20 6d 65 6d 6f 72 79 20 63 61     ns the memory ca
     4e6:	72 64 0a 00                                         rd..

000004ea <__c.2815>:
     4ea:	64 69 73 6b 09 09 09 3a 20 53 68 6f 77 73 20 63     disk...: Shows c
     4fa:	61 72 64 20 6d 61 6e 75 66 61 63 74 75 72 65 72     ard manufacturer
     50a:	2c 20 73 74 61 74 75 73 2c 20 66 69 6c 65 73 79     , status, filesy
     51a:	73 74 65 6d 20 63 61 70 61 63 69 74 79 20 61 6e     stem capacity an
     52a:	64 20 66 72 65 65 20 73 74 6f 72 61 67 65 20 73     d free storage s
     53a:	70 61 63 65 0a 00                                   pace..

00000540 <__c.2813>:
     540:	73 69 7a 65 20 3c 66 69 6c 65 3e 09 09 3a 20 57     size <file>..: W
     550:	72 69 74 65 20 73 69 7a 65 20 6f 66 20 66 69 6c     rite size of fil
     560:	65 20 74 6f 20 74 65 72 6d 69 6e 61 6c 0a 00        e to terminal..

0000056f <__c.2811>:
     56f:	72 65 61 64 20 3c 66 69 6c 65 3e 20 3c 73 74 61     read <file> <sta
     57f:	72 74 3e 20 3c 6c 65 6e 67 74 68 3e 09 09 3a 20     rt> <length>..: 
     58f:	57 72 69 74 65 73 20 41 53 43 49 49 20 3c 6c 65     Writes ASCII <le
     59f:	6e 67 74 68 3e 20 70 61 72 74 73 20 6f 66 20 3c     ngth> parts of <
     5af:	66 69 6c 65 3e 20 74 6f 20 74 68 65 20 74 65 72     file> to the ter
     5bf:	6d 69 6e 61 6c 20 73 74 61 72 74 69 6e 67 20 61     minal starting a
     5cf:	74 20 3c 73 74 61 72 74 3e 2e 20 4f 6d 6d 69 74     t <start>. Ommit
     5df:	20 3c 73 74 61 72 74 3e 20 61 6e 64 20 3c 6c 65      <start> and <le
     5ef:	6e 67 74 68 3e 20 74 6f 20 72 65 61 64 20 77 68     ngth> to read wh
     5ff:	6f 6c 65 20 66 69 6c 65 0a 00                       ole file..

00000609 <__c.2809>:
     609:	63 61 74 20 3c 66 69 6c 65 3e 09 09 3a 20 57 72     cat <file>..: Wr
     619:	69 74 65 73 20 61 20 68 65 78 64 75 6d 70 20 6f     ites a hexdump o
     629:	66 20 3c 66 69 6c 65 3e 20 74 6f 20 74 68 65 20     f <file> to the 
     639:	74 65 72 6d 69 6e 61 6c 0a 00                       terminal..

00000643 <__c.2807>:
     643:	6c 73 09 09 09 3a 20 53 68 6f 77 73 20 74 68 65     ls...: Shows the
     653:	20 63 6f 6e 74 65 6e 74 20 6f 66 20 74 68 65 20      content of the 
     663:	63 75 72 72 65 6e 74 20 64 69 72 65 63 74 6f 72     current director
     673:	79 2e 20 55 73 65 20 77 69 6c 64 63 61 72 64 20     y. Use wildcard 
     683:	74 6f 20 64 6f 20 61 20 77 69 6c 64 63 61 72 64     to do a wildcard
     693:	20 6c 69 73 74 69 6e 67 20 6f 66 20 66 69 6c 65      listing of file
     6a3:	73 20 69 6e 20 63 75 72 72 65 6e 74 20 64 69 72     s in current dir
     6b3:	65 63 74 6f 72 79 0a 00                             ectory..

000006bb <__c.2805>:
     6bb:	63 64 20 2e 2e 09 09 3a 20 43 68 61 6e 67 65 73     cd ....: Changes
     6cb:	20 74 6f 20 6c 6f 77 65 72 20 64 69 72 65 63 74      to lower direct
     6db:	6f 72 79 20 69 6e 20 74 72 65 65 0a 00              ory in tree..

000006e8 <__c.2803>:
     6e8:	63 64 20 3c 64 69 72 65 63 74 6f 72 79 3e 09 09     cd <directory>..
     6f8:	3a 20 43 68 61 6e 67 65 73 20 63 75 72 72 65 6e     : Changes curren
     708:	74 20 77 6f 72 6b 69 6e 67 20 64 69 72 65 63 74     t working direct
     718:	6f 72 79 20 74 6f 20 3c 64 69 72 65 63 74 6f 72     ory to <director
     728:	79 3e 0a 00                                         y>..

0000072c <__c.2801>:
     72c:	6d 64 20 3c 64 69 72 65 63 74 6f 72 79 3e 09 3a     md <directory>.:
     73c:	20 43 72 65 61 74 65 73 20 61 20 64 69 72 65 63      Creates a direc
     74c:	74 6f 72 79 20 63 61 6c 6c 65 64 20 3c 64 69 72     tory called <dir
     75c:	65 63 74 6f 72 79 3e 0a 00                          ectory>..

00000765 <__c.2799>:
     765:	72 6d 20 3c 66 69 6c 65 3e 09 09 3a 20 44 65 6c     rm <file>..: Del
     775:	65 74 65 73 20 3c 66 69 6c 65 3e 2e 20 55 73 65     etes <file>. Use
     785:	20 77 69 6c 64 63 61 72 64 20 74 6f 20 64 6f 20      wildcard to do 
     795:	61 20 77 69 6c 64 63 61 72 64 20 72 65 6d 6f 76     a wildcard remov
     7a5:	61 6c 20 6f 66 20 66 69 6c 65 73 0a 00              al of files..

000007b2 <__c.2797>:
     7b2:	77 72 69 74 65 20 3c 66 69 6c 65 3e 20 3c 6f 66     write <file> <of
     7c2:	66 73 65 74 3e 09 3a 20 57 72 69 74 65 73 20 74     fset>.: Writes t
     7d2:	65 78 74 20 74 6f 20 3c 66 69 6c 65 3e 2c 20 73     ext to <file>, s
     7e2:	74 61 72 74 69 6e 67 20 66 72 6f 6d 20 3c 6f 66     tarting from <of
     7f2:	66 73 65 74 3e 2e 20 54 68 65 20 74 65 78 74 20     fset>. The text 
     802:	69 73 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65     is read from the
     812:	20 55 41 52 54 2c 20 6c 69 6e 65 20 62 79 20 6c      UART, line by l
     822:	69 6e 65 2e 20 46 69 6e 69 73 68 20 77 69 74 68     ine. Finish with
     832:	20 61 6e 20 65 6d 70 74 79 20 6c 69 6e 65 0a 00      an empty line..

00000842 <__c.2795>:
     842:	61 70 70 65 6e 64 20 3c 66 69 6c 65 3e 09 09 3a     append <file>..:
     852:	20 41 70 70 65 6e 64 73 20 74 65 78 74 20 74 6f      Appends text to
     862:	20 65 6e 64 20 6f 66 20 3c 66 69 6c 65 3e 2e 20      end of <file>. 
     872:	54 68 65 20 74 65 78 74 20 69 73 20 72 65 61 64     The text is read
     882:	20 66 72 6f 6d 20 74 68 65 20 55 41 52 54 20 69      from the UART i
     892:	6e 20 61 20 73 74 72 65 61 6d 20 61 6e 64 20 69     n a stream and i
     8a2:	73 20 6e 6f 74 20 65 63 68 6f 65 64 2e 20 46 69     s not echoed. Fi
     8b2:	6e 69 73 68 20 62 79 20 73 65 6e 64 69 6e 67 20     nish by sending 
     8c2:	43 74 72 6c 2b 7a 20 28 41 53 43 49 49 20 32 36     Ctrl+z (ASCII 26
     8d2:	29 0a 00                                            )..

000008d5 <__c.2793>:
     8d5:	6e 65 77 20 3c 66 69 6c 65 3e 09 09 3a 20 43 72     new <file>..: Cr
     8e5:	65 61 74 65 73 20 3c 66 69 6c 65 3e 0a 00           eates <file>..

000008f3 <__c.2791>:
     8f3:	41 76 61 69 6c 61 62 6c 65 20 63 6f 6d 6d 61 6e     Available comman
     903:	64 73 3a 0a 00                                      ds:..

00000908 <__c.2789>:
     908:	0a 4f 70 65 6e 4c 6f 67 20 76 31 2e 36 31 0a 00     .OpenLog v1.61..

00000918 <__c.2488>:
     918:	7e 00                                               ~.

0000091a <__c.2486>:
     91a:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     92a:	20 66 69 6c 65 0a 00                                 file..

00000931 <__c.2484>:
     931:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     941:	20 66 69 6c 65 0a 00                                 file..

00000948 <__c.2481>:
     948:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     958:	20 66 69 6c 65 0a 00                                 file..

0000095f <__c.2479>:
     95f:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     96f:	20 66 69 6c 65 0a 00                                 file..

00000976 <__c.2465>:
     976:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     986:	20 66 69 6c 65 0a 00                                 file..

0000098d <__c.2463>:
     98d:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     99d:	20 66 69 6c 65 0a 00                                 file..

000009a4 <__c.2455>:
     9a4:	21 65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f     !error seeking o
     9b4:	6e 20 00                                            n .

000009b7 <__c.2452>:
     9b7:	21 65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00     !error opening .

000009c7 <__c.2353>:
     9c7:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 3a     unknown command:
     9d7:	20 00                                                .

000009d9 <__c.2351>:
     9d9:	65 72 72 6f 72 20 73 79 6e 63 69 6e 67 20 64 69     error syncing di
     9e9:	73 6b 0a 00                                         sk..

000009ed <__c.2349>:
     9ed:	73 79 6e 63 00                                      sync.

000009f2 <__c.2347>:
     9f2:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 64     error creating d
     a02:	69 72 65 63 74 6f 72 79 3a 20 00                    irectory: .

00000a0d <__c.2344>:
     a0d:	6d 64 00                                            md.

00000a10 <__c.2342>:
     a10:	61 70 70 65 6e 64 00                                append.

00000a17 <__c.2339>:
     a17:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     a27:	20 66 69 6c 65 0a 00                                 file..

00000a2e <__c.2335>:
     a2e:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     a3e:	20 00                                                .

00000a40 <__c.2332>:
     a40:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000a4f <__c.2328>:
     a4f:	77 72 69 74 65 00                                   write.

00000a55 <__c.2326>:
     a55:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     a65:	69 6c 65 3a 20 00                                   ile: .

00000a6b <__c.2323>:
     a6b:	6e 65 77 00                                         new.

00000a6f <__c.2318>:
     a6f:	65 72 72 6f 72 20 64 65 6c 65 74 69 6e 67 20 66     error deleting f
     a7f:	69 6c 65 3a 20 00                                   ile: .

00000a85 <__c.2315>:
     a85:	72 6d 00                                            rm.

00000a88 <__c.2312>:
     a88:	73 69 7a 65 00                                      size.

00000a8d <__c.2310>:
     a8d:	65 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 69     error reading di
     a9d:	73 6b 20 69 6e 66 6f 0a 00                          sk info..

00000aa6 <__c.2308>:
     aa6:	64 69 73 6b 00                                      disk.

00000aab <__c.2301>:
     aab:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     abb:	20 00                                                .

00000abd <__c.2298>:
     abd:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000acc <__c.2295>:
     acc:	72 65 61 64 00                                      read.

00000ad1 <__c.2283>:
     ad1:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000ae0 <__c.2280>:
     ae0:	63 61 74 00                                         cat.

00000ae4 <__c.2270>:
     ae4:	6c 73 00                                            ls.

00000ae7 <__c.2268>:
     ae7:	64 69 72 65 63 74 6f 72 79 20 6e 6f 74 20 66 6f     directory not fo
     af7:	75 6e 64 3a 20 00                                   und: .

00000afd <__c.2264>:
     afd:	63 64 00                                            cd.

00000b00 <__c.2262>:
     b00:	73 65 74 00                                         set.

00000b04 <__c.2260>:
     b04:	62 61 75 64 00                                      baud.

00000b09 <__c.2258>:
     b09:	68 65 6c 70 00                                      help.

00000b0e <__c.2256>:
     b0e:	3f 00                                               ?.

00000b10 <__c.2254>:
     b10:	46 69 6c 65 20 73 79 73 74 65 6d 20 69 6e 69 74     File system init
     b20:	69 61 6c 69 7a 65 64 0a 00                          ialized..

00000b29 <__c.2252>:
     b29:	43 6c 6f 73 69 6e 67 20 64 6f 77 6e 20 66 69 6c     Closing down fil
     b39:	65 20 73 79 73 74 65 6d 0a 00                       e system..

00000b43 <__c.2250>:
     b43:	69 6e 69 74 00                                      init.

00000b48 <__c.2760>:
     b48:	66 72 65 65 3a 20 20 20 00                          free:   .

00000b51 <__c.2758>:
     b51:	66 6f 72 6d 61 74 3a 20 00                          format: .

00000b5a <__c.2756>:
     b5a:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

00000b63 <__c.2754>:
     b63:	63 6f 70 79 3a 20 20 20 00                          copy:   .

00000b6c <__c.2752>:
     b6c:	4d 42 0a 00                                         MB..

00000b70 <__c.2750>:
     b70:	73 69 7a 65 3a 20 20 20 00                          size:   .

00000b79 <__c.2748>:
     b79:	64 61 74 65 3a 20 20 20 00                          date:   .

00000b82 <__c.2746>:
     b82:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

00000b8d <__c.2744>:
     b8d:	72 65 76 3a 20 20 20 20 00                          rev:    .

00000b96 <__c.2742>:
     b96:	70 72 6f 64 3a 20 20 20 00                          prod:   .

00000b9f <__c.2740>:
     b9f:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

00000ba8 <__c.2738>:
     ba8:	6d 61 6e 75 66 3a 20 20 30 78 00                    manuf:  0x.

00000bb3 <__c.2230>:
     bb3:	21 54 6f 6f 20 6d 61 6e 79 20 6c 6f 67 73 3a 32     !Too many logs:2
     bc3:	21 00                                               !.

00000bc5 <__c.2226>:
     bc5:	21 54 6f 6f 20 6d 61 6e 79 20 6c 6f 67 73 3a 31     !Too many logs:1
     bd5:	21 00                                               !.

00000bd7 <__c.2214>:
     bd7:	45 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 53     Error creating S
     be7:	45 51 4c 4f 47 0a 00                                EQLOG..

00000bee <__c.2211>:
     bee:	43 72 65 61 74 69 6e 67 20 53 45 51 4c 4f 47 0a     Creating SEQLOG.
	...

00000bff <__c.2085>:
     bff:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 63 6f     error opening co
     c0f:	6e 66 69 67 20 66 69 6c 65 00                       nfig file.

00000c19 <__c.2052>:
     c19:	32 00                                               2.

00000c1b <__c.2050>:
     c1b:	31 00 00                                            1..

00000c1e <__ctors_end>:
     c1e:	11 24       	eor	r1, r1
     c20:	1f be       	out	0x3f, r1	; 63
     c22:	cf ef       	ldi	r28, 0xFF	; 255
     c24:	d0 e1       	ldi	r29, 0x10	; 16
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	cd bf       	out	0x3d, r28	; 61

00000c2a <__do_copy_data>:
     c2a:	11 e0       	ldi	r17, 0x01	; 1
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b1 e0       	ldi	r27, 0x01	; 1
     c30:	ee e3       	ldi	r30, 0x3E	; 62
     c32:	f4 e9       	ldi	r31, 0x94	; 148
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <.do_copy_data_start>

00000c36 <.do_copy_data_loop>:
     c36:	05 90       	lpm	r0, Z+
     c38:	0d 92       	st	X+, r0

00000c3a <.do_copy_data_start>:
     c3a:	a4 3b       	cpi	r26, 0xB4	; 180
     c3c:	b1 07       	cpc	r27, r17
     c3e:	d9 f7       	brne	.-10     	; 0xc36 <.do_copy_data_loop>

00000c40 <__do_clear_bss>:
     c40:	18 e0       	ldi	r17, 0x08	; 8
     c42:	a4 eb       	ldi	r26, 0xB4	; 180
     c44:	b1 e0       	ldi	r27, 0x01	; 1
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <.do_clear_bss_start>

00000c48 <.do_clear_bss_loop>:
     c48:	1d 92       	st	X+, r1

00000c4a <.do_clear_bss_start>:
     c4a:	a1 3e       	cpi	r26, 0xE1	; 225
     c4c:	b1 07       	cpc	r27, r17
     c4e:	e1 f7       	brne	.-8      	; 0xc48 <.do_clear_bss_loop>
     c50:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <main>
     c54:	0c 94 1d 4a 	jmp	0x943a	; 0x943a <_exit>

00000c58 <__bad_interrupt>:
     c58:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c5c <__vector_20>:
char setting_max_escape_character; //Number of escape chars before break logging, default is 3

//Circular buffer UART RX interrupt
//Is only used during append
ISR(USART0_RX_vect)
{
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	2f 93       	push	r18
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
	input_buffer[read_spot] = UDR0;
     c70:	e0 91 bd 04 	lds	r30, 0x04BD
     c74:	f0 91 be 04 	lds	r31, 0x04BE
     c78:	80 91 c6 00 	lds	r24, 0x00C6
     c7c:	eb 53       	subi	r30, 0x3B	; 59
     c7e:	fb 4f       	sbci	r31, 0xFB	; 251
     c80:	80 83       	st	Z, r24
	read_spot++;
     c82:	80 91 bd 04 	lds	r24, 0x04BD
     c86:	90 91 be 04 	lds	r25, 0x04BE
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	90 93 be 04 	sts	0x04BE, r25
     c90:	80 93 bd 04 	sts	0x04BD, r24
	STAT1_PORT ^= (1<<STAT1); //Toggle the STAT1 LED each time we receive a character
     c94:	85 b1       	in	r24, 0x05	; 5
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	89 27       	eor	r24, r25
     c9a:	85 b9       	out	0x05, r24	; 5
	if(read_spot == BUFF_LEN) read_spot = 0;
     c9c:	80 91 bd 04 	lds	r24, 0x04BD
     ca0:	90 91 be 04 	lds	r25, 0x04BE
     ca4:	80 50       	subi	r24, 0x00	; 0
     ca6:	94 40       	sbci	r25, 0x04	; 4
     ca8:	21 f4       	brne	.+8      	; 0xcb2 <__vector_20+0x56>
     caa:	10 92 be 04 	sts	0x04BE, r1
     cae:	10 92 bd 04 	sts	0x04BD, r1
}
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	9f 91       	pop	r25
     cb8:	8f 91       	pop	r24
     cba:	2f 91       	pop	r18
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	0f 90       	pop	r0
     cc2:	1f 90       	pop	r1
     cc4:	18 95       	reti

00000cc6 <set_default_settings>:
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     cc6:	f9 99       	sbic	0x1f, 1	; 31
     cc8:	fe cf       	rjmp	.-4      	; 0xcc6 <set_default_settings>
	EEARH = uiAddress >> 8; //Set up address and data registers
     cca:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     cd0:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     cd2:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     cd4:	f9 9a       	sbi	0x1f, 1	; 31
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     cd6:	f9 99       	sbic	0x1f, 1	; 31
     cd8:	fe cf       	rjmp	.-4      	; 0xcd6 <set_default_settings+0x10>
	EEARH = uiAddress >> 8; //Set up address and data registers
     cda:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     ce0:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     ce2:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     ce4:	f9 9a       	sbi	0x1f, 1	; 31
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     ce6:	f9 99       	sbic	0x1f, 1	; 31
     ce8:	fe cf       	rjmp	.-4      	; 0xce6 <set_default_settings+0x20>
	EEARH = uiAddress >> 8; //Set up address and data registers
     cea:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     cec:	85 e0       	ldi	r24, 0x05	; 5
     cee:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     cf0:	8a e1       	ldi	r24, 0x1A	; 26
     cf2:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     cf4:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     cf6:	f9 9a       	sbi	0x1f, 1	; 31
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     cf8:	f9 99       	sbic	0x1f, 1	; 31
     cfa:	fe cf       	rjmp	.-4      	; 0xcf8 <set_default_settings+0x32>
	EEARH = uiAddress >> 8; //Set up address and data registers
     cfc:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     cfe:	86 e0       	ldi	r24, 0x06	; 6
     d00:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     d06:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     d08:	f9 9a       	sbi	0x1f, 1	; 31
	//Reset number of escape characters to 3
	EEPROM_write(LOCATION_MAX_ESCAPE_CHAR, 3);

	//These settings are not recorded to the config file
	//We can't do it here because we are not sure the FAT system is init'd
}
     d0a:	08 95       	ret

00000d0c <read_system_settings>:
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     d0c:	f9 99       	sbic	0x1f, 1	; 31
     d0e:	fe cf       	rjmp	.-4      	; 0xd0c <read_system_settings>
	EEARH = uiAddress >> 8; //Set up address and data registers
     d10:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	91 bd       	out	0x21, r25	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
     d16:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
     d18:	80 b5       	in	r24, 0x20	; 32
//If anything looks weird, reset setting to default value
void read_system_settings(void)
{
	//Read what the current UART speed is from EEPROM memory
	//Default is 9600
	setting_uart_speed = EEPROM_read(LOCATION_BAUD_SETTING);
     d1a:	80 93 c2 04 	sts	0x04C2, r24
	if(setting_uart_speed > 10) 
     d1e:	8b 30       	cpi	r24, 0x0B	; 11
     d20:	50 f0       	brcs	.+20     	; 0xd36 <read_system_settings+0x2a>
	{
		setting_uart_speed = BAUD_9600; //Reset UART to 9600 if there is no speed stored
     d22:	90 93 c2 04 	sts	0x04C2, r25
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     d26:	f9 99       	sbic	0x1f, 1	; 31
     d28:	fe cf       	rjmp	.-4      	; 0xd26 <read_system_settings+0x1a>
	EEARH = uiAddress >> 8; //Set up address and data registers
     d2a:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     d30:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     d32:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     d34:	f9 9a       	sbi	0x1f, 1	; 31
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     d36:	f9 99       	sbic	0x1f, 1	; 31
     d38:	fe cf       	rjmp	.-4      	; 0xd36 <read_system_settings+0x2a>
	EEARH = uiAddress >> 8; //Set up address and data registers
     d3a:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
     d40:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
     d42:	80 b5       	in	r24, 0x20	; 32
		EEPROM_write(LOCATION_BAUD_SETTING, setting_uart_speed);
	}

	//Determine the system mode we should be in
	//Default is NEWLOG mode
	setting_system_mode = EEPROM_read(LOCATION_SYSTEM_SETTING);
     d44:	80 93 bc 04 	sts	0x04BC, r24
	if(setting_system_mode > 5) 
     d48:	86 30       	cpi	r24, 0x06	; 6
     d4a:	50 f0       	brcs	.+20     	; 0xd60 <read_system_settings+0x54>
	{
		setting_system_mode = MODE_NEWLOG; //By default, unit will turn on and go to new file logging
     d4c:	10 92 bc 04 	sts	0x04BC, r1
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     d50:	f9 99       	sbic	0x1f, 1	; 31
     d52:	fe cf       	rjmp	.-4      	; 0xd50 <read_system_settings+0x44>
	EEARH = uiAddress >> 8; //Set up address and data registers
     d54:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     d5a:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     d5c:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     d5e:	f9 9a       	sbi	0x1f, 1	; 31
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     d60:	f9 99       	sbic	0x1f, 1	; 31
     d62:	fe cf       	rjmp	.-4      	; 0xd60 <read_system_settings+0x54>
	EEARH = uiAddress >> 8; //Set up address and data registers
     d64:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     d66:	85 e0       	ldi	r24, 0x05	; 5
     d68:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
     d6a:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
     d6c:	80 b5       	in	r24, 0x20	; 32
		EEPROM_write(LOCATION_SYSTEM_SETTING, setting_system_mode);
	}

	//Read the escape_character
	//ASCII(26) is ctrl+z
	setting_escape_character = EEPROM_read(LOCATION_ESCAPE_CHAR);
     d6e:	80 93 c7 08 	sts	0x08C7, r24
	if(setting_escape_character == 0 || setting_escape_character == 255) 
     d72:	81 50       	subi	r24, 0x01	; 1
     d74:	8e 3f       	cpi	r24, 0xFE	; 254
     d76:	60 f0       	brcs	.+24     	; 0xd90 <read_system_settings+0x84>
	{
		setting_escape_character = 26; //Reset escape character to ctrl+z
     d78:	8a e1       	ldi	r24, 0x1A	; 26
     d7a:	80 93 c7 08 	sts	0x08C7, r24
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     d7e:	f9 99       	sbic	0x1f, 1	; 31
     d80:	fe cf       	rjmp	.-4      	; 0xd7e <read_system_settings+0x72>
	EEARH = uiAddress >> 8; //Set up address and data registers
     d82:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     d84:	85 e0       	ldi	r24, 0x05	; 5
     d86:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     d88:	8a e1       	ldi	r24, 0x1A	; 26
     d8a:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     d8c:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     d8e:	f9 9a       	sbi	0x1f, 1	; 31
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     d90:	f9 99       	sbic	0x1f, 1	; 31
     d92:	fe cf       	rjmp	.-4      	; 0xd90 <read_system_settings+0x84>
	EEARH = uiAddress >> 8; //Set up address and data registers
     d94:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     d96:	86 e0       	ldi	r24, 0x06	; 6
     d98:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
     d9a:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
     d9c:	80 b5       	in	r24, 0x20	; 32
		EEPROM_write(LOCATION_ESCAPE_CHAR, setting_escape_character);
	}

	//Read the number of escape_characters to look for
	//Default is 3
	setting_max_escape_character = EEPROM_read(LOCATION_MAX_ESCAPE_CHAR);
     d9e:	80 93 bf 04 	sts	0x04BF, r24
	if(setting_max_escape_character == 0 || setting_max_escape_character == 255) 
     da2:	81 50       	subi	r24, 0x01	; 1
     da4:	8e 3f       	cpi	r24, 0xFE	; 254
     da6:	60 f0       	brcs	.+24     	; 0xdc0 <read_system_settings+0xb4>
	{
		setting_max_escape_character = 3; //Reset number of escape characters to 3
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	80 93 bf 04 	sts	0x04BF, r24
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     dae:	f9 99       	sbic	0x1f, 1	; 31
     db0:	fe cf       	rjmp	.-4      	; 0xdae <read_system_settings+0xa2>
	EEARH = uiAddress >> 8; //Set up address and data registers
     db2:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     db4:	86 e0       	ldi	r24, 0x06	; 6
     db6:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     db8:	83 e0       	ldi	r24, 0x03	; 3
     dba:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     dbc:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     dbe:	f9 9a       	sbi	0x1f, 1	; 31
     dc0:	08 95       	ret

00000dc2 <EEPROM_write>:
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     dc2:	f9 99       	sbic	0x1f, 1	; 31
     dc4:	fe cf       	rjmp	.-4      	; 0xdc2 <EEPROM_write>
	EEARH = uiAddress >> 8; //Set up address and data registers
     dc6:	92 bd       	out	0x22, r25	; 34
	EEARL = uiAddress; //Set up address and data registers
     dc8:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     dca:	60 bd       	out	0x20, r22	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     dcc:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     dce:	f9 9a       	sbi	0x1f, 1	; 31
}
     dd0:	08 95       	ret

00000dd2 <EEPROM_read>:

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     dd2:	f9 99       	sbic	0x1f, 1	; 31
     dd4:	fe cf       	rjmp	.-4      	; 0xdd2 <EEPROM_read>
	EEARH = uiAddress >> 8; //Set up address and data registers
     dd6:	92 bd       	out	0x22, r25	; 34
	EEARL = uiAddress; //Set up address and data registers
     dd8:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
     dda:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
     ddc:	80 b5       	in	r24, 0x20	; 32
}
     dde:	08 95       	ret

00000de0 <delay_us>:
//Uses internal timer do a fairly accurate 1us
//Because we are using 16MHz and a prescalar of 8 on Timer0, we have to double x
void delay_us(uint16_t x)
{
	//External 16MHz resonator hack.
	x *= 2;	
     de0:	9c 01       	movw	r18, r24
     de2:	22 0f       	add	r18, r18
     de4:	33 1f       	adc	r19, r19
	
	while(x > 256)
	{
		TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer0
     de6:	91 e0       	ldi	r25, 0x01	; 1
		TCNT0 = 20; //Preload Timer0 for 236 clicks. Should be 1us per click
     de8:	84 e1       	ldi	r24, 0x14	; 20
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <delay_us+0x18>
	//External 16MHz resonator hack.
	x *= 2;	
	
	while(x > 256)
	{
		TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer0
     dec:	95 bb       	out	0x15, r25	; 21
		TCNT0 = 20; //Preload Timer0 for 236 clicks. Should be 1us per click
     dee:	86 bd       	out	0x26, r24	; 38
		while( (TIFR0 & (1<<TOV0)) == 0);
     df0:	a8 9b       	sbis	0x15, 0	; 21
     df2:	fe cf       	rjmp	.-4      	; 0xdf0 <delay_us+0x10>
		
		x -= 256;
     df4:	20 50       	subi	r18, 0x00	; 0
     df6:	31 40       	sbci	r19, 0x01	; 1
void delay_us(uint16_t x)
{
	//External 16MHz resonator hack.
	x *= 2;	
	
	while(x > 256)
     df8:	41 e0       	ldi	r20, 0x01	; 1
     dfa:	21 30       	cpi	r18, 0x01	; 1
     dfc:	34 07       	cpc	r19, r20
     dfe:	b0 f7       	brcc	.-20     	; 0xdec <delay_us+0xc>
		while( (TIFR0 & (1<<TOV0)) == 0);
		
		x -= 256;
	}

	TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 256 - x; //256 - 125 = 131 : Preload Timer0 for x clicks. Should be 1us per click
     e04:	82 2f       	mov	r24, r18
     e06:	81 95       	neg	r24
     e08:	86 bd       	out	0x26, r24	; 38
	while( (TIFR0 & (1<<TOV0)) == 0);
     e0a:	a8 9b       	sbis	0x15, 0	; 21
     e0c:	fe cf       	rjmp	.-4      	; 0xe0a <delay_us+0x2a>
}
     e0e:	08 95       	ret

00000e10 <delay_ms>:

//General short delays
void delay_ms(uint16_t x)
{
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	ec 01       	movw	r28, r24
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <delay_ms+0x12>
	for ( ; x > 0 ; x--)
		delay_us(1000);
     e18:	88 ee       	ldi	r24, 0xE8	; 232
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	0e 94 f0 06 	call	0xde0	; 0xde0 <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
	for ( ; x > 0 ; x--)
     e20:	21 97       	sbiw	r28, 0x01	; 1
     e22:	20 97       	sbiw	r28, 0x00	; 0
     e24:	c9 f7       	brne	.-14     	; 0xe18 <delay_ms+0x8>
		delay_us(1000);
}
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <blink_error>:
}


//Blinks the status LEDs to indicate a type of error
void blink_error(uint8_t ERROR_TYPE)
{
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	c0 e0       	ldi	r28, 0x00	; 0
     e36:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		for(int x = 0 ; x < ERROR_TYPE ; x++)
     e38:	08 2f       	mov	r16, r24
     e3a:	10 e0       	ldi	r17, 0x00	; 0
     e3c:	0b c0       	rjmp	.+22     	; 0xe54 <blink_error+0x28>
		{
			sbi(STAT1_PORT, STAT1);
     e3e:	28 9a       	sbi	0x05, 0	; 5
			delay_ms(100);
     e40:	84 e6       	ldi	r24, 0x64	; 100
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 08 07 	call	0xe10	; 0xe10 <delay_ms>
			cbi(STAT1_PORT, STAT1);
     e48:	28 98       	cbi	0x05, 0	; 5
			delay_ms(100);
     e4a:	84 e6       	ldi	r24, 0x64	; 100
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 08 07 	call	0xe10	; 0xe10 <delay_ms>
//Blinks the status LEDs to indicate a type of error
void blink_error(uint8_t ERROR_TYPE)
{
	while(1)
	{
		for(int x = 0 ; x < ERROR_TYPE ; x++)
     e52:	21 96       	adiw	r28, 0x01	; 1
     e54:	c0 17       	cp	r28, r16
     e56:	d1 07       	cpc	r29, r17
     e58:	94 f3       	brlt	.-28     	; 0xe3e <blink_error+0x12>
			delay_ms(100);
			cbi(STAT1_PORT, STAT1);
			delay_ms(100);
		}
		
		delay_ms(2000);
     e5a:	80 ed       	ldi	r24, 0xD0	; 208
     e5c:	97 e0       	ldi	r25, 0x07	; 7
     e5e:	0e 94 08 07 	call	0xe10	; 0xe10 <delay_ms>
     e62:	c0 e0       	ldi	r28, 0x00	; 0
     e64:	d0 e0       	ldi	r29, 0x00	; 0
     e66:	f6 cf       	rjmp	.-20     	; 0xe54 <blink_error+0x28>

00000e68 <check_emergency_reset>:

//Check to see if we need an emergency UART reset
//Scan the RX pin for 2 seconds
//If it's low the entire time, then return 1
char check_emergency_reset(void)
{
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
	DDRD |= (1<<0); //Turn the RX pin into an input
     e6e:	50 9a       	sbi	0x0a, 0	; 10
	PORTD |= (1<<0); //Push a 1 onto RX pin to enable internal pull-up
     e70:	58 9a       	sbi	0x0b, 0	; 11

	//Quick pin check
	if( (PIND & (1<<0)) == 1) return 0;
     e72:	48 99       	sbic	0x09, 0	; 9
     e74:	1c c0       	rjmp	.+56     	; 0xeae <check_emergency_reset+0x46>

	//Wait 2 seconds, blinking LEDs while we wait
	sbi(STAT2_PORT, STAT2); //Set the STAT2 LED
     e76:	29 9a       	sbi	0x05, 1	; 5
     e78:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i = 0 ; i < 40 ; i++)
	{
		delay_ms(25);
		STAT1_PORT ^= (1<<STAT1); //Blink the stat LEDs
     e7a:	ff 24       	eor	r15, r15
     e7c:	f3 94       	inc	r15

		if( (PIND & (1<<0)) == 1) return 0;

		delay_ms(25);
		STAT2_PORT ^= (1<<STAT2); //Blink the stat LEDs
     e7e:	02 e0       	ldi	r16, 0x02	; 2

	//Wait 2 seconds, blinking LEDs while we wait
	sbi(STAT2_PORT, STAT2); //Set the STAT2 LED
	for(uint8_t i = 0 ; i < 40 ; i++)
	{
		delay_ms(25);
     e80:	89 e1       	ldi	r24, 0x19	; 25
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 08 07 	call	0xe10	; 0xe10 <delay_ms>
		STAT1_PORT ^= (1<<STAT1); //Blink the stat LEDs
     e88:	85 b1       	in	r24, 0x05	; 5
     e8a:	8f 25       	eor	r24, r15
     e8c:	85 b9       	out	0x05, r24	; 5

		if( (PIND & (1<<0)) == 1) return 0;
     e8e:	48 99       	sbic	0x09, 0	; 9
     e90:	0e c0       	rjmp	.+28     	; 0xeae <check_emergency_reset+0x46>

		delay_ms(25);
     e92:	89 e1       	ldi	r24, 0x19	; 25
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 08 07 	call	0xe10	; 0xe10 <delay_ms>
		STAT2_PORT ^= (1<<STAT2); //Blink the stat LEDs
     e9a:	85 b1       	in	r24, 0x05	; 5
     e9c:	80 27       	eor	r24, r16
     e9e:	85 b9       	out	0x05, r24	; 5

		if( (PIND & (1<<0)) == 1) return 0;
     ea0:	48 99       	sbic	0x09, 0	; 9
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <check_emergency_reset+0x46>
	//Quick pin check
	if( (PIND & (1<<0)) == 1) return 0;

	//Wait 2 seconds, blinking LEDs while we wait
	sbi(STAT2_PORT, STAT2); //Set the STAT2 LED
	for(uint8_t i = 0 ; i < 40 ; i++)
     ea4:	1f 5f       	subi	r17, 0xFF	; 255
     ea6:	18 32       	cpi	r17, 0x28	; 40
     ea8:	59 f7       	brne	.-42     	; 0xe80 <check_emergency_reset+0x18>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <check_emergency_reset+0x48>
     eae:	80 e0       	ldi	r24, 0x00	; 0
		if( (PIND & (1<<0)) == 1) return 0;
	}		

	//If we make it here, then RX pin stayed low the whole time
	return 1;
}
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	08 95       	ret

00000eb8 <count_cmd_args>:
//These functions were added for wild card delete and search
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
     eb8:	e4 eb       	ldi	r30, 0xB4	; 180
     eba:	f1 e0       	ldi	r31, 0x01	; 1
     ebc:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	89 2b       	or	r24, r25
     ec4:	19 f0       	breq	.+6      	; 0xecc <count_cmd_args+0x14>
     ec6:	82 81       	ldd	r24, Z+2	; 0x02
     ec8:	81 11       	cpse	r24, r1
			count++;
     eca:	2f 5f       	subi	r18, 0xFF	; 255
     ecc:	33 96       	adiw	r30, 0x03	; 3
//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	e0 3c       	cpi	r30, 0xC0	; 192
     ed2:	f8 07       	cpc	r31, r24
     ed4:	a1 f7       	brne	.-24     	; 0xebe <count_cmd_args+0x6>
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
			count++;

	return count;
}
     ed6:	82 2f       	mov	r24, r18
     ed8:	08 95       	ret

00000eda <add_cmd_arg>:
	return 0;
}

//Safe adding of command line arguments
void add_cmd_arg(char* buffer, uint8_t buffer_length)
{
     eda:	ac 01       	movw	r20, r24
     edc:	e4 eb       	ldi	r30, 0xB4	; 180
     ede:	f1 e0       	ldi	r31, 0x01	; 1
     ee0:	20 e0       	ldi	r18, 0x00	; 0
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	89 2b       	or	r24, r25
     ee8:	19 f0       	breq	.+6      	; 0xef0 <add_cmd_arg+0x16>
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	81 11       	cpse	r24, r1
			count++;
     eee:	2f 5f       	subi	r18, 0xFF	; 255
     ef0:	33 96       	adiw	r30, 0x03	; 3
//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	e0 3c       	cpi	r30, 0xC0	; 192
     ef6:	f8 07       	cpc	r31, r24
     ef8:	a1 f7       	brne	.-24     	; 0xee2 <add_cmd_arg+0x8>

//Safe adding of command line arguments
void add_cmd_arg(char* buffer, uint8_t buffer_length)
{
	uint8_t count = count_cmd_args();
	if (count < MAX_COUNT_COMMAND_LINE_ARGS)
     efa:	24 30       	cpi	r18, 0x04	; 4
     efc:	60 f4       	brcc	.+24     	; 0xf16 <add_cmd_arg+0x3c>
	{
		cmd_arg[count].arg = buffer;
     efe:	82 2f       	mov	r24, r18
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	fc 01       	movw	r30, r24
     f04:	ee 0f       	add	r30, r30
     f06:	ff 1f       	adc	r31, r31
     f08:	e8 0f       	add	r30, r24
     f0a:	f9 1f       	adc	r31, r25
     f0c:	ec 54       	subi	r30, 0x4C	; 76
     f0e:	fe 4f       	sbci	r31, 0xFE	; 254
     f10:	51 83       	std	Z+1, r21	; 0x01
     f12:	40 83       	st	Z, r20
		cmd_arg[count].arg_length = buffer_length;
     f14:	62 83       	std	Z+2, r22	; 0x02
     f16:	08 95       	ret

00000f18 <is_number>:
}

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
     f18:	ac 01       	movw	r20, r24
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < buffer_length; i++)
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	0d c0       	rjmp	.+26     	; 0xf3c <is_number+0x24>
		if (!isdigit(buffer[i]))
     f22:	fa 01       	movw	r30, r20
     f24:	e2 0f       	add	r30, r18
     f26:	f3 1f       	adc	r31, r19
     f28:	80 81       	ld	r24, Z
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	c0 97       	sbiw	r24, 0x30	; 48
     f2e:	0a 97       	sbiw	r24, 0x0a	; 10
     f30:	18 f0       	brcs	.+6      	; 0xf38 <is_number+0x20>
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <is_number+0x2a>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
     f38:	2f 5f       	subi	r18, 0xFF	; 255
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	26 17       	cp	r18, r22
     f3e:	37 07       	cpc	r19, r23
     f40:	84 f3       	brlt	.-32     	; 0xf22 <is_number+0xa>
		if (!isdigit(buffer[i]))
			return 0;

	return buffer;
}
     f42:	ca 01       	movw	r24, r20
     f44:	08 95       	ret

00000f46 <wildcmp>:

//Wildcard string compare.
//Written by Jack Handy - jakkhandy@hotmail.com
//http://www.codeproject.com/KB/string/wildcmp.aspx
uint8_t wildcmp(const char* wild, const char* string)
{
     f46:	fc 01       	movw	r30, r24
     f48:	db 01       	movw	r26, r22
     f4a:	08 c0       	rjmp	.+16     	; 0xf5c <wildcmp+0x16>
	const char *cp = 0;
	const char *mp = 0;

	while (*string && (*wild != '*'))
	{
		if ((*wild != *string) && (*wild != '?'))
     f4c:	89 17       	cp	r24, r25
     f4e:	21 f0       	breq	.+8      	; 0xf58 <wildcmp+0x12>
     f50:	8f 33       	cpi	r24, 0x3F	; 63
     f52:	11 f0       	breq	.+4      	; 0xf58 <wildcmp+0x12>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	08 95       	ret
		return 0;

		wild++;
     f58:	31 96       	adiw	r30, 0x01	; 1
		string++;
     f5a:	11 96       	adiw	r26, 0x01	; 1
{

	const char *cp = 0;
	const char *mp = 0;

	while (*string && (*wild != '*'))
     f5c:	9c 91       	ld	r25, X
     f5e:	99 23       	and	r25, r25
     f60:	f1 f0       	breq	.+60     	; 0xf9e <wildcmp+0x58>
     f62:	80 81       	ld	r24, Z
     f64:	8a 32       	cpi	r24, 0x2A	; 42
     f66:	91 f7       	brne	.-28     	; 0xf4c <wildcmp+0x6>
     f68:	1a c0       	rjmp	.+52     	; 0xf9e <wildcmp+0x58>
		string++;
	}

	while (*string)
	{
		if (*wild == '*')
     f6a:	80 81       	ld	r24, Z
     f6c:	8a 32       	cpi	r24, 0x2A	; 42
     f6e:	59 f4       	brne	.+22     	; 0xf86 <wildcmp+0x40>
		{
			if (!(*(++wild)))
     f70:	31 96       	adiw	r30, 0x01	; 1
     f72:	80 81       	ld	r24, Z
     f74:	88 23       	and	r24, r24
     f76:	11 f4       	brne	.+4      	; 0xf7c <wildcmp+0x36>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	08 95       	ret
				return 1;

			mp = wild;
			cp = string+1;
     f7c:	9d 01       	movw	r18, r26
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	af 01       	movw	r20, r30
     f84:	10 c0       	rjmp	.+32     	; 0xfa6 <wildcmp+0x60>
		}
		else if ((*wild == *string) || (*wild== '?'))
     f86:	89 17       	cp	r24, r25
     f88:	11 f0       	breq	.+4      	; 0xf8e <wildcmp+0x48>
     f8a:	8f 33       	cpi	r24, 0x3F	; 63
     f8c:	19 f4       	brne	.+6      	; 0xf94 <wildcmp+0x4e>
		{
			wild++;
     f8e:	31 96       	adiw	r30, 0x01	; 1
			string++;
     f90:	11 96       	adiw	r26, 0x01	; 1
     f92:	09 c0       	rjmp	.+18     	; 0xfa6 <wildcmp+0x60>
		}
		else
		{
			wild = mp;
			string = cp++;
     f94:	fa 01       	movw	r30, r20
     f96:	d9 01       	movw	r26, r18
     f98:	2f 5f       	subi	r18, 0xFF	; 255
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <wildcmp+0x60>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0

		wild++;
		string++;
	}

	while (*string)
     fa6:	9c 91       	ld	r25, X
     fa8:	99 23       	and	r25, r25
     faa:	f9 f6       	brne	.-66     	; 0xf6a <wildcmp+0x24>
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <wildcmp+0x6a>
			string = cp++;
		}
	}

	while (*wild == '*')
		wild++;
     fae:	31 96       	adiw	r30, 0x01	; 1
			wild = mp;
			string = cp++;
		}
	}

	while (*wild == '*')
     fb0:	90 81       	ld	r25, Z
     fb2:	9a 32       	cpi	r25, 0x2A	; 42
     fb4:	e1 f3       	breq	.-8      	; 0xfae <wildcmp+0x68>
		wild++;
  return !(*wild);
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	99 23       	and	r25, r25
     fba:	09 f4       	brne	.+2      	; 0xfbe <wildcmp+0x78>
     fbc:	81 e0       	ldi	r24, 0x01	; 1
}
     fbe:	08 95       	ret

00000fc0 <print_menu>:
    return 1;
}

void print_menu(void)
{
	uart_puts_p(PSTR("\nOpenLog v1.61\n"));
     fc0:	88 e0       	ldi	r24, 0x08	; 8
     fc2:	99 e0       	ldi	r25, 0x09	; 9
     fc4:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("Available commands:\n"));
     fc8:	83 ef       	ldi	r24, 0xF3	; 243
     fca:	98 e0       	ldi	r25, 0x08	; 8
     fcc:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("new <file>\t\t: Creates <file>\n"));
     fd0:	85 ed       	ldi	r24, 0xD5	; 213
     fd2:	98 e0       	ldi	r25, 0x08	; 8
     fd4:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("append <file>\t\t: Appends text to end of <file>. The text is read from the UART in a stream and is not echoed. Finish by sending Ctrl+z (ASCII 26)\n"));
     fd8:	82 e4       	ldi	r24, 0x42	; 66
     fda:	98 e0       	ldi	r25, 0x08	; 8
     fdc:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("write <file> <offset>\t: Writes text to <file>, starting from <offset>. The text is read from the UART, line by line. Finish with an empty line\n"));
     fe0:	82 eb       	ldi	r24, 0xB2	; 178
     fe2:	97 e0       	ldi	r25, 0x07	; 7
     fe4:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("rm <file>\t\t: Deletes <file>. Use wildcard to do a wildcard removal of files\n"));
     fe8:	85 e6       	ldi	r24, 0x65	; 101
     fea:	97 e0       	ldi	r25, 0x07	; 7
     fec:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("md <directory>\t: Creates a directory called <directory>\n"));
     ff0:	8c e2       	ldi	r24, 0x2C	; 44
     ff2:	97 e0       	ldi	r25, 0x07	; 7
     ff4:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("cd <directory>\t\t: Changes current working directory to <directory>\n"));
     ff8:	88 ee       	ldi	r24, 0xE8	; 232
     ffa:	96 e0       	ldi	r25, 0x06	; 6
     ffc:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("cd ..\t\t: Changes to lower directory in tree\n"));
    1000:	8b eb       	ldi	r24, 0xBB	; 187
    1002:	96 e0       	ldi	r25, 0x06	; 6
    1004:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("ls\t\t\t: Shows the content of the current directory. Use wildcard to do a wildcard listing of files in current directory\n"));
    1008:	83 e4       	ldi	r24, 0x43	; 67
    100a:	96 e0       	ldi	r25, 0x06	; 6
    100c:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("cat <file>\t\t: Writes a hexdump of <file> to the terminal\n"));
    1010:	89 e0       	ldi	r24, 0x09	; 9
    1012:	96 e0       	ldi	r25, 0x06	; 6
    1014:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("read <file> <start> <length>\t\t: Writes ASCII <length> parts of <file> to the terminal starting at <start>. Ommit <start> and <length> to read whole file\n"));
    1018:	8f e6       	ldi	r24, 0x6F	; 111
    101a:	95 e0       	ldi	r25, 0x05	; 5
    101c:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("size <file>\t\t: Write size of file to terminal\n"));
    1020:	80 e4       	ldi	r24, 0x40	; 64
    1022:	95 e0       	ldi	r25, 0x05	; 5
    1024:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("disk\t\t\t: Shows card manufacturer, status, filesystem capacity and free storage space\n"));
    1028:	8a ee       	ldi	r24, 0xEA	; 234
    102a:	94 e0       	ldi	r25, 0x04	; 4
    102c:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("init\t\t\t: Reinitializes and reopens the memory card\n"));
    1030:	86 eb       	ldi	r24, 0xB6	; 182
    1032:	94 e0       	ldi	r25, 0x04	; 4
    1034:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("sync\t\t\t: Ensures all buffered data is written to the card\n"));
    1038:	8b e7       	ldi	r24, 0x7B	; 123
    103a:	94 e0       	ldi	r25, 0x04	; 4
    103c:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>

	uart_puts_p(PSTR("\nMenus:\n"));
    1040:	82 e7       	ldi	r24, 0x72	; 114
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("set\t\t\t: Menu to configure system boot mode\n"));
    1048:	86 e4       	ldi	r24, 0x46	; 70
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	uart_puts_p(PSTR("baud\t\t\t: Menu to configure baud rate\n"));
    1050:	80 e2       	ldi	r24, 0x20	; 32
    1052:	94 e0       	ldi	r25, 0x04	; 4
    1054:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}
    1058:	08 95       	ret

0000105a <too_many_arguments_error>:

//Call this function to ensure the number of parameters do not
//exceed limit. The main purpose of this function is to avoid
//entering file names containing spaces.
uint8_t too_many_arguments_error(uint8_t limit, char* command)
{
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	28 2f       	mov	r18, r24
    1062:	eb 01       	movw	r28, r22
    1064:	e4 eb       	ldi	r30, 0xB4	; 180
    1066:	f1 e0       	ldi	r31, 0x01	; 1
    1068:	10 e0       	ldi	r17, 0x00	; 0
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
    106a:	80 81       	ld	r24, Z
    106c:	91 81       	ldd	r25, Z+1	; 0x01
    106e:	89 2b       	or	r24, r25
    1070:	19 f0       	breq	.+6      	; 0x1078 <too_many_arguments_error+0x1e>
    1072:	82 81       	ldd	r24, Z+2	; 0x02
    1074:	81 11       	cpse	r24, r1
			count++;
    1076:	1f 5f       	subi	r17, 0xFF	; 255
    1078:	33 96       	adiw	r30, 0x03	; 3
//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	e0 3c       	cpi	r30, 0xC0	; 192
    107e:	f8 07       	cpc	r31, r24
    1080:	a1 f7       	brne	.-24     	; 0x106a <too_many_arguments_error+0x10>
//exceed limit. The main purpose of this function is to avoid
//entering file names containing spaces.
uint8_t too_many_arguments_error(uint8_t limit, char* command)
{
	uint8_t count;
	if ((count = count_cmd_args()) > limit)
    1082:	21 17       	cp	r18, r17
    1084:	10 f0       	brcs	.+4      	; 0x108a <too_many_arguments_error+0x30>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	13 c0       	rjmp	.+38     	; 0x10b0 <too_many_arguments_error+0x56>
	{
		uart_puts_p(PSTR("too many arguments("));
    108a:	80 e8       	ldi	r24, 0x80	; 128
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_putw_dec(count);
    1092:	81 2f       	mov	r24, r17
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 65 43 	call	0x86ca	; 0x86ca <uart_putw_dec>
		uart_puts_p(PSTR("): "));
    109a:	8c e7       	ldi	r24, 0x7C	; 124
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts(command);
    10a2:	ce 01       	movw	r24, r28
    10a4:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
		uart_putc('\n');
    10a8:	8a e0       	ldi	r24, 0x0A	; 10
    10aa:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    10ae:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}

	return 0;
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	08 95       	ret

000010b8 <split_cmd_line_args>:
//	arg[0] -> read
//	arg[1] -> <filename>
//	arg[2] -> <start>
//	arg[3] -> <end>
uint8_t split_cmd_line_args(char* buffer, uint8_t buffer_length)
{
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	ec 01       	movw	r28, r24
	uint8_t arg_index_start = 0;
	uint8_t arg_index_end = 1;

	//Reset command line arguments
	memset(cmd_arg, 0, sizeof(cmd_arg));
    10be:	8c e0       	ldi	r24, 0x0C	; 12
    10c0:	e4 eb       	ldi	r30, 0xB4	; 180
    10c2:	f1 e0       	ldi	r31, 0x01	; 1
    10c4:	df 01       	movw	r26, r30
    10c6:	1d 92       	st	X+, r1
    10c8:	8a 95       	dec	r24
    10ca:	e9 f7       	brne	.-6      	; 0x10c6 <split_cmd_line_args+0xe>
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	41 e0       	ldi	r20, 0x01	; 1
	{
		//Search for ASCII 32 (Space)
		if ((buffer[arg_index_end] == ' ') || (arg_index_end + 1 == buffer_length))
		{
			//Fix for last character
			if (arg_index_end + 1 == buffer_length)
    10d0:	a6 2f       	mov	r26, r22
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	39 c0       	rjmp	.+114    	; 0x1148 <__stack+0x49>

	//Split the command line arguments
	while (arg_index_end < buffer_length)
	{
		//Search for ASCII 32 (Space)
		if ((buffer[arg_index_end] == ' ') || (arg_index_end + 1 == buffer_length))
    10d6:	24 2f       	mov	r18, r20
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	fe 01       	movw	r30, r28
    10dc:	e2 0f       	add	r30, r18
    10de:	f3 1f       	adc	r31, r19
    10e0:	80 81       	ld	r24, Z
    10e2:	80 32       	cpi	r24, 0x20	; 32
    10e4:	29 f0       	breq	.+10     	; 0x10f0 <split_cmd_line_args+0x38>
    10e6:	2f 5f       	subi	r18, 0xFF	; 255
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	2a 17       	cp	r18, r26
    10ec:	3b 07       	cpc	r19, r27
    10ee:	59 f5       	brne	.+86     	; 0x1146 <__stack+0x47>
		{
			//Fix for last character
			if (arg_index_end + 1 == buffer_length)
    10f0:	84 2f       	mov	r24, r20
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	8a 17       	cp	r24, r26
    10f8:	9b 07       	cpc	r25, r27
    10fa:	09 f4       	brne	.+2      	; 0x10fe <split_cmd_line_args+0x46>
    10fc:	46 2f       	mov	r20, r22
    10fe:	e4 eb       	ldi	r30, 0xB4	; 180
    1100:	f1 e0       	ldi	r31, 0x01	; 1
    1102:	20 e0       	ldi	r18, 0x00	; 0
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	89 2b       	or	r24, r25
    110a:	19 f0       	breq	.+6      	; 0x1112 <__stack+0x13>
    110c:	82 81       	ldd	r24, Z+2	; 0x02
    110e:	81 11       	cpse	r24, r1
			count++;
    1110:	2f 5f       	subi	r18, 0xFF	; 255
    1112:	33 96       	adiw	r30, 0x03	; 3
//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	e0 3c       	cpi	r30, 0xC0	; 192
    1118:	f8 07       	cpc	r31, r24
    111a:	a1 f7       	brne	.-24     	; 0x1104 <__stack+0x5>

//Safe adding of command line arguments
void add_cmd_arg(char* buffer, uint8_t buffer_length)
{
	uint8_t count = count_cmd_args();
	if (count < MAX_COUNT_COMMAND_LINE_ARGS)
    111c:	24 30       	cpi	r18, 0x04	; 4
    111e:	88 f4       	brcc	.+34     	; 0x1142 <__stack+0x43>
	{
		cmd_arg[count].arg = buffer;
    1120:	82 2f       	mov	r24, r18
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	fc 01       	movw	r30, r24
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	e8 0f       	add	r30, r24
    112c:	f9 1f       	adc	r31, r25
    112e:	ec 54       	subi	r30, 0x4C	; 76
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	ce 01       	movw	r24, r28
    1134:	85 0f       	add	r24, r21
    1136:	91 1d       	adc	r25, r1
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
		cmd_arg[count].arg_length = buffer_length;
    113c:	84 2f       	mov	r24, r20
    113e:	85 1b       	sub	r24, r21
    1140:	82 83       	std	Z+2, r24	; 0x02
			if (arg_index_end + 1 == buffer_length)
				arg_index_end = buffer_length;

			//Add this command line argument to the list
			add_cmd_arg(&(buffer[arg_index_start]), (arg_index_end - arg_index_start));
			arg_index_start = ++arg_index_end;
    1142:	4f 5f       	subi	r20, 0xFF	; 255
    1144:	54 2f       	mov	r21, r20
		}

		arg_index_end++;
    1146:	4f 5f       	subi	r20, 0xFF	; 255

	//Reset command line arguments
	memset(cmd_arg, 0, sizeof(cmd_arg));

	//Split the command line arguments
	while (arg_index_end < buffer_length)
    1148:	46 17       	cp	r20, r22
    114a:	28 f2       	brcs	.-118    	; 0x10d6 <split_cmd_line_args+0x1e>
    114c:	e4 eb       	ldi	r30, 0xB4	; 180
    114e:	f1 e0       	ldi	r31, 0x01	; 1
    1150:	20 e0       	ldi	r18, 0x00	; 0
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
    1152:	80 81       	ld	r24, Z
    1154:	91 81       	ldd	r25, Z+1	; 0x01
    1156:	89 2b       	or	r24, r25
    1158:	19 f0       	breq	.+6      	; 0x1160 <__stack+0x61>
    115a:	82 81       	ldd	r24, Z+2	; 0x02
    115c:	81 11       	cpse	r24, r1
			count++;
    115e:	2f 5f       	subi	r18, 0xFF	; 255
    1160:	33 96       	adiw	r30, 0x03	; 3
//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
    1162:	a1 e0       	ldi	r26, 0x01	; 1
    1164:	e0 3c       	cpi	r30, 0xC0	; 192
    1166:	fa 07       	cpc	r31, r26
    1168:	a1 f7       	brne	.-24     	; 0x1152 <__stack+0x53>
		arg_index_end++;
	}

	//Return the number of available command line arguments
	return count_cmd_args();
}
    116a:	82 2f       	mov	r24, r18
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <get_cmd_arg>:
	return count;
}

//Safe index handling of command line arguments
char* get_cmd_arg(uint8_t index)
{
    1172:	98 2f       	mov	r25, r24
	memset(general_buffer, 0, sizeof(general_buffer));
    1174:	89 e1       	ldi	r24, 0x19	; 25
    1176:	e8 ec       	ldi	r30, 0xC8	; 200
    1178:	f8 e0       	ldi	r31, 0x08	; 8
    117a:	df 01       	movw	r26, r30
    117c:	1d 92       	st	X+, r1
    117e:	8a 95       	dec	r24
    1180:	e9 f7       	brne	.-6      	; 0x117c <get_cmd_arg+0xa>
	if (index < MAX_COUNT_COMMAND_LINE_ARGS)
    1182:	94 30       	cpi	r25, 0x04	; 4
    1184:	e8 f4       	brcc	.+58     	; 0x11c0 <get_cmd_arg+0x4e>
		if ((cmd_arg[index].arg != 0) && (cmd_arg[index].arg_length > 0))
    1186:	89 2f       	mov	r24, r25
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	fc 01       	movw	r30, r24
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	e8 0f       	add	r30, r24
    1192:	f9 1f       	adc	r31, r25
    1194:	ec 54       	subi	r30, 0x4C	; 76
    1196:	fe 4f       	sbci	r31, 0xFE	; 254
    1198:	60 81       	ld	r22, Z
    119a:	71 81       	ldd	r23, Z+1	; 0x01
    119c:	61 15       	cp	r22, r1
    119e:	71 05       	cpc	r23, r1
    11a0:	79 f0       	breq	.+30     	; 0x11c0 <get_cmd_arg+0x4e>
    11a2:	42 81       	ldd	r20, Z+2	; 0x02
    11a4:	44 23       	and	r20, r20
    11a6:	61 f0       	breq	.+24     	; 0x11c0 <get_cmd_arg+0x4e>
			return strncpy(general_buffer, cmd_arg[index].arg, MIN(sizeof(general_buffer), cmd_arg[index].arg_length));
    11a8:	4a 31       	cpi	r20, 0x1A	; 26
    11aa:	18 f0       	brcs	.+6      	; 0x11b2 <get_cmd_arg+0x40>
    11ac:	49 e1       	ldi	r20, 0x19	; 25
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <get_cmd_arg+0x42>
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	88 ec       	ldi	r24, 0xC8	; 200
    11b6:	98 e0       	ldi	r25, 0x08	; 8
    11b8:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <strncpy>
    11bc:	9c 01       	movw	r18, r24
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <get_cmd_arg+0x52>
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
    11c4:	c9 01       	movw	r24, r18
    11c6:	08 95       	ret

000011c8 <read_line>:
	
}

//Reads a line until the \n enter character is found
uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    11c8:	bf 92       	push	r11
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	ec 01       	movw	r28, r24
    11dc:	b6 2e       	mov	r11, r22
    memset(buffer, 0, buffer_length);
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	4b 2d       	mov	r20, r11
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	0e 94 80 46 	call	0x8d00	; 0x8d00 <memset>
    11ea:	00 e0       	ldi	r16, 0x00	; 0

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    11ec:	cb 2c       	mov	r12, r11
    11ee:	dd 24       	eor	r13, r13
    11f0:	08 94       	sec
    11f2:	c1 08       	sbc	r12, r1
    11f4:	d1 08       	sbc	r13, r1
    11f6:	23 c0       	rjmp	.+70     	; 0x123e <read_line+0x76>
    {
        uint8_t c = uart_getc();
    11f8:	0e 94 27 44 	call	0x884e	; 0x884e <uart_getc>
    11fc:	18 2f       	mov	r17, r24

        if(c == 0x08 || c == 0x7f)
    11fe:	88 30       	cpi	r24, 0x08	; 8
    1200:	11 f0       	breq	.+4      	; 0x1206 <read_line+0x3e>
    1202:	8f 37       	cpi	r24, 0x7F	; 127
    1204:	89 f4       	brne	.+34     	; 0x1228 <read_line+0x60>
        {
            if(read_length < 1)
    1206:	00 23       	and	r16, r16
    1208:	d1 f0       	breq	.+52     	; 0x123e <read_line+0x76>
                continue;

            --read_length;
    120a:	01 50       	subi	r16, 0x01	; 1
            buffer[read_length] = '\0';
    120c:	fe 01       	movw	r30, r28
    120e:	e0 0f       	add	r30, r16
    1210:	f1 1d       	adc	r31, r1
    1212:	10 82       	st	Z, r1

            uart_putc(0x08);
    1214:	88 e0       	ldi	r24, 0x08	; 8
    1216:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
            uart_putc(' ');
    121a:	80 e2       	ldi	r24, 0x20	; 32
    121c:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
            uart_putc(0x08);
    1220:	88 e0       	ldi	r24, 0x08	; 8
    1222:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    1226:	0b c0       	rjmp	.+22     	; 0x123e <read_line+0x76>

            continue;
        }

        uart_putc(c);
    1228:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    122c:	fe 01       	movw	r30, r28
    122e:	ee 0d       	add	r30, r14
    1230:	ff 1d       	adc	r31, r15

        if(c == '\n')
    1232:	1a 30       	cpi	r17, 0x0A	; 10
    1234:	11 f4       	brne	.+4      	; 0x123a <read_line+0x72>
        {
            buffer[read_length] = '\0';
    1236:	10 82       	st	Z, r1
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <read_line+0x80>
            break;
        }
        else
        {
            buffer[read_length] = c;
    123a:	10 83       	st	Z, r17
            ++read_length;
    123c:	0f 5f       	subi	r16, 0xFF	; 255
uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    memset(buffer, 0, buffer_length);

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    123e:	e0 2e       	mov	r14, r16
    1240:	ff 24       	eor	r15, r15
    1242:	ec 14       	cp	r14, r12
    1244:	fd 04       	cpc	r15, r13
    1246:	c4 f2       	brlt	.-80     	; 0x11f8 <read_line+0x30>
            ++read_length;
        }
    }

	//Split the command line into arguments
	split_cmd_line_args(buffer, buffer_length);
    1248:	ce 01       	movw	r24, r28
    124a:	6b 2d       	mov	r22, r11
    124c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <split_cmd_line_args>

    return read_length;
}
    1250:	80 2f       	mov	r24, r16
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	bf 90       	pop	r11
    1264:	08 95       	ret

00001266 <read_buffer>:
}


//Reads a larger buffer of characters until the ctrl+z (ascii 26) character is received
uint8_t read_buffer(char* buffer, uint8_t buffer_length)
{
    1266:	cf 92       	push	r12
    1268:	df 92       	push	r13
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ec 01       	movw	r28, r24
    1278:	16 2f       	mov	r17, r22
    memset(buffer, 0, buffer_length);
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	41 2f       	mov	r20, r17
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	0e 94 80 46 	call	0x8d00	; 0x8d00 <memset>
    1286:	00 e0       	ldi	r16, 0x00	; 0

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    1288:	c1 2e       	mov	r12, r17
    128a:	dd 24       	eor	r13, r13
    128c:	08 94       	sec
    128e:	c1 08       	sbc	r12, r1
    1290:	d1 08       	sbc	r13, r1
    1292:	23 c0       	rjmp	.+70     	; 0x12da <read_buffer+0x74>
    {
        uint8_t c = uart_getc();
    1294:	0e 94 27 44 	call	0x884e	; 0x884e <uart_getc>
    1298:	18 2f       	mov	r17, r24

        if(c == 0x08 || c == 0x7f)
    129a:	88 30       	cpi	r24, 0x08	; 8
    129c:	11 f0       	breq	.+4      	; 0x12a2 <read_buffer+0x3c>
    129e:	8f 37       	cpi	r24, 0x7F	; 127
    12a0:	89 f4       	brne	.+34     	; 0x12c4 <read_buffer+0x5e>
        {
            if(read_length < 1)
    12a2:	00 23       	and	r16, r16
    12a4:	d1 f0       	breq	.+52     	; 0x12da <read_buffer+0x74>
                continue;

            --read_length;
    12a6:	01 50       	subi	r16, 0x01	; 1
            buffer[read_length] = '\0';
    12a8:	fe 01       	movw	r30, r28
    12aa:	e0 0f       	add	r30, r16
    12ac:	f1 1d       	adc	r31, r1
    12ae:	10 82       	st	Z, r1

            uart_putc(0x08);
    12b0:	88 e0       	ldi	r24, 0x08	; 8
    12b2:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
            uart_putc(' ');
    12b6:	80 e2       	ldi	r24, 0x20	; 32
    12b8:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
            uart_putc(0x08);
    12bc:	88 e0       	ldi	r24, 0x08	; 8
    12be:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    12c2:	0b c0       	rjmp	.+22     	; 0x12da <read_buffer+0x74>

            continue;
        }

        uart_putc(c);
    12c4:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    12c8:	fe 01       	movw	r30, r28
    12ca:	ee 0d       	add	r30, r14
    12cc:	ff 1d       	adc	r31, r15

        //if(c == '\n')
        if(c == 26)
    12ce:	1a 31       	cpi	r17, 0x1A	; 26
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <read_buffer+0x70>
        {
            buffer[read_length] = '\0';
    12d2:	10 82       	st	Z, r1
    12d4:	07 c0       	rjmp	.+14     	; 0x12e4 <read_buffer+0x7e>
            break;
        }
        else
        {
            buffer[read_length] = c;
    12d6:	10 83       	st	Z, r17
            ++read_length;
    12d8:	0f 5f       	subi	r16, 0xFF	; 255
uint8_t read_buffer(char* buffer, uint8_t buffer_length)
{
    memset(buffer, 0, buffer_length);

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    12da:	e0 2e       	mov	r14, r16
    12dc:	ff 24       	eor	r15, r15
    12de:	ec 14       	cp	r14, r12
    12e0:	fd 04       	cpc	r15, r13
    12e2:	c4 f2       	brlt	.-80     	; 0x1294 <read_buffer+0x2e>
            ++read_length;
        }
    }

    return read_length;
}
    12e4:	80 2f       	mov	r24, r16
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	08 95       	ret

000012f8 <init_media>:
}


//Inits the SD interface, opens file system, opens root dir, and checks card info if wanted
void init_media(void)
{
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	e1 97       	sbiw	r28, 0x31	; 49
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
	/* setup sd card slot */
	if(!sd_raw_init())
    1310:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <sd_raw_init>
    1314:	88 23       	and	r24, r24
    1316:	19 f4       	brne	.+6      	; 0x131e <init_media+0x26>
	{
#if DEBUG
		uart_puts_p(PSTR("MMC/SD initialization failed\n"));
#endif
		blink_error(ERROR_SD_INIT);
    1318:	83 e0       	ldi	r24, 0x03	; 3
    131a:	0e 94 16 07 	call	0xe2c	; 0xe2c <blink_error>
		//continue;
	}

	//Make sure all file handles are cleared
	fat_clear_handles();
    131e:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <fat_clear_handles>

	/* open first partition */
	partition = partition_open(sd_raw_read,
    1322:	88 e7       	ldi	r24, 0x78	; 120
    1324:	9b e1       	ldi	r25, 0x1B	; 27
    1326:	67 e2       	ldi	r22, 0x27	; 39
    1328:	7d e1       	ldi	r23, 0x1D	; 29
    132a:	46 e7       	ldi	r20, 0x76	; 118
    132c:	59 e1       	ldi	r21, 0x19	; 25
    132e:	20 e3       	ldi	r18, 0x30	; 48
    1330:	3f e1       	ldi	r19, 0x1F	; 31
    1332:	00 e0       	ldi	r16, 0x00	; 0
    1334:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <partition_open>
    1338:	90 93 c4 04 	sts	0x04C4, r25
    133c:	80 93 c3 04 	sts	0x04C3, r24
								0,
#endif
								0
								);

	if(!partition)
    1340:	89 2b       	or	r24, r25
    1342:	79 f4       	brne	.+30     	; 0x1362 <init_media+0x6a>
	{
		/* If the partition did not open, assume the storage device
		 * is a "superfloppy", i.e. has no MBR.
		 */
		partition = partition_open(sd_raw_read,
    1344:	88 e7       	ldi	r24, 0x78	; 120
    1346:	9b e1       	ldi	r25, 0x1B	; 27
    1348:	67 e2       	ldi	r22, 0x27	; 39
    134a:	7d e1       	ldi	r23, 0x1D	; 29
    134c:	46 e7       	ldi	r20, 0x76	; 118
    134e:	59 e1       	ldi	r21, 0x19	; 25
    1350:	20 e3       	ldi	r18, 0x30	; 48
    1352:	3f e1       	ldi	r19, 0x1F	; 31
    1354:	0f ef       	ldi	r16, 0xFF	; 255
    1356:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <partition_open>
    135a:	90 93 c4 04 	sts	0x04C4, r25
    135e:	80 93 c3 04 	sts	0x04C3, r24
			//continue;
		}
	}

	/* open file system */
	fs = fat_open(partition);
    1362:	80 91 c3 04 	lds	r24, 0x04C3
    1366:	90 91 c4 04 	lds	r25, 0x04C4
    136a:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <fat_open>
    136e:	90 93 bb 04 	sts	0x04BB, r25
    1372:	80 93 ba 04 	sts	0x04BA, r24
		//continue;
	}

	/* open root directory */
	struct fat_dir_entry_struct directory;
	fat_get_dir_entry_of_path(fs, "/", &directory);
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	8e 01       	movw	r16, r28
    137c:	0f 5f       	subi	r16, 0xFF	; 255
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	a8 01       	movw	r20, r16
    1382:	0e 94 5d 42 	call	0x84ba	; 0x84ba <fat_get_dir_entry_of_path>

	dd = fat_open_dir(fs, &directory);
    1386:	80 91 ba 04 	lds	r24, 0x04BA
    138a:	90 91 bb 04 	lds	r25, 0x04BB
    138e:	b8 01       	movw	r22, r16
    1390:	0e 94 d4 41 	call	0x83a8	; 0x83a8 <fat_open_dir>
    1394:	90 93 c6 08 	sts	0x08C6, r25
    1398:	80 93 c5 08 	sts	0x08C5, r24

#if DEBUG
	uart_puts_p(PSTR("Media Init Complete!\n"));
#endif
	
}
    139c:	e1 96       	adiw	r28, 0x31	; 49
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	08 95       	ret

000013b2 <find_file_in_dir>:

    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry, uint8_t use_wild_card)
{
    13b2:	cf 92       	push	r12
    13b4:	df 92       	push	r13
    13b6:	ff 92       	push	r15
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	6b 01       	movw	r12, r22
    13c2:	ea 01       	movw	r28, r20
    13c4:	f2 2e       	mov	r15, r18
    13c6:	13 2f       	mov	r17, r19
    13c8:	15 c0       	rjmp	.+42     	; 0x13f4 <find_file_in_dir+0x42>
    while(fat_read_dir(dd, dir_entry))
    13ca:	8f 2d       	mov	r24, r15
    13cc:	91 2f       	mov	r25, r17
    13ce:	be 01       	movw	r22, r28
    13d0:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <strcmp>
    {
        if((strcmp(dir_entry->long_name, name) == 0) || ((use_wild_card == 1) && (wildcmp(name, dir_entry->long_name) == 1)))
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	49 f0       	breq	.+18     	; 0x13ea <find_file_in_dir+0x38>
    13d8:	01 30       	cpi	r16, 0x01	; 1
    13da:	61 f4       	brne	.+24     	; 0x13f4 <find_file_in_dir+0x42>
    13dc:	ce 01       	movw	r24, r28
    13de:	6f 2d       	mov	r22, r15
    13e0:	71 2f       	mov	r23, r17
    13e2:	0e 94 a3 07 	call	0xf46	; 0xf46 <wildcmp>
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	29 f4       	brne	.+10     	; 0x13f4 <find_file_in_dir+0x42>
        {
            fat_reset_dir(dd);
    13ea:	c6 01       	movw	r24, r12
    13ec:	0e 94 73 29 	call	0x52e6	; 0x52e6 <fat_reset_dir>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	07 c0       	rjmp	.+14     	; 0x1402 <find_file_in_dir+0x50>
    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry, uint8_t use_wild_card)
{
    while(fat_read_dir(dd, dir_entry))
    13f4:	c6 01       	movw	r24, r12
    13f6:	6f 2d       	mov	r22, r15
    13f8:	71 2f       	mov	r23, r17
    13fa:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <fat_read_dir>
    13fe:	88 23       	and	r24, r24
    1400:	21 f7       	brne	.-56     	; 0x13ca <find_file_in_dir+0x18>
            return 1;
        }
    }

    return 0;
}
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	ff 90       	pop	r15
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	08 95       	ret

00001412 <open_file_in_dir>:

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    1412:	cf 92       	push	r12
    1414:	df 92       	push	r13
    1416:	ef 92       	push	r14
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	e1 97       	sbiw	r28, 0x31	; 49
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	7c 01       	movw	r14, r24
	struct fat_dir_entry_struct file_entry;
	//Do not use wildcards here
	if(!find_file_in_dir(fs, dd, name, &file_entry, 0))
    1432:	6e 01       	movw	r12, r28
    1434:	08 94       	sec
    1436:	c1 1c       	adc	r12, r1
    1438:	d1 1c       	adc	r13, r1
    143a:	96 01       	movw	r18, r12
    143c:	00 e0       	ldi	r16, 0x00	; 0
    143e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <find_file_in_dir>
    1442:	88 23       	and	r24, r24
    1444:	19 f4       	brne	.+6      	; 0x144c <open_file_in_dir+0x3a>
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	05 c0       	rjmp	.+10     	; 0x1456 <open_file_in_dir+0x44>
		return 0;

	return fat_open_file(fs, &file_entry);
    144c:	c7 01       	movw	r24, r14
    144e:	b6 01       	movw	r22, r12
    1450:	0e 94 15 42 	call	0x842a	; 0x842a <fat_open_file>
    1454:	9c 01       	movw	r18, r24
}
    1456:	c9 01       	movw	r24, r18
    1458:	e1 96       	adiw	r28, 0x31	; 49
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	08 95       	ret

00001474 <append_file>:
//data even at 115200bps
//Does not exit until Ctrl+z (ASCII 26) is received
//Returns 0 on error
//Returns 1 on success
uint8_t append_file(char* file_name)
{
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <append_file+0x10>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <append_file+0x12>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	8c 01       	movw	r16, r24

	//search file in current directory and open it 
	struct fat_file_struct* fd = open_file_in_dir(fs, dd, file_name);
    148c:	60 91 c5 08 	lds	r22, 0x08C5
    1490:	70 91 c6 08 	lds	r23, 0x08C6
    1494:	80 91 ba 04 	lds	r24, 0x04BA
    1498:	90 91 bb 04 	lds	r25, 0x04BB
    149c:	a8 01       	movw	r20, r16
    149e:	0e 94 09 0a 	call	0x1412	; 0x1412 <open_file_in_dir>
    14a2:	7c 01       	movw	r14, r24
	if(!fd)
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	59 f4       	brne	.+22     	; 0x14be <append_file+0x4a>
	{
		uart_puts_p(PSTR("!error opening "));
    14a8:	87 eb       	ldi	r24, 0xB7	; 183
    14aa:	99 e0       	ldi	r25, 0x09	; 9
    14ac:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts(file_name);
    14b0:	c8 01       	movw	r24, r16
    14b2:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
		uart_putc('\n');
    14b6:	8a e0       	ldi	r24, 0x0A	; 10
    14b8:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    14bc:	19 c0       	rjmp	.+50     	; 0x14f0 <append_file+0x7c>
	}

#if DEBUG
	uart_puts_p(PSTR("File open\n"));
#endif
	int32_t offset = 0;
    14be:	19 82       	std	Y+1, r1	; 0x01
    14c0:	1a 82       	std	Y+2, r1	; 0x02
    14c2:	1b 82       	std	Y+3, r1	; 0x03
    14c4:	1c 82       	std	Y+4, r1	; 0x04
	//Seeks the end of the file : offset = EOF location
	if(!fat_seek_file(fd, &offset, FAT_SEEK_END))
    14c6:	be 01       	movw	r22, r28
    14c8:	6f 5f       	subi	r22, 0xFF	; 255
    14ca:	7f 4f       	sbci	r23, 0xFF	; 255
    14cc:	42 e0       	ldi	r20, 0x02	; 2
    14ce:	0e 94 9f 3d 	call	0x7b3e	; 0x7b3e <fat_seek_file>
    14d2:	88 23       	and	r24, r24
    14d4:	79 f4       	brne	.+30     	; 0x14f4 <append_file+0x80>
	{
		uart_puts_p(PSTR("!error seeking on "));
    14d6:	84 ea       	ldi	r24, 0xA4	; 164
    14d8:	99 e0       	ldi	r25, 0x09	; 9
    14da:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts(file_name);
    14de:	c8 01       	movw	r24, r16
    14e0:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
		uart_putc('\n');
    14e4:	8a e0       	ldi	r24, 0x0A	; 10
    14e6:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>

		fat_close_file(fd);
    14ea:	c7 01       	movw	r24, r14
    14ec:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fat_close_file>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	6a c1       	rjmp	.+724    	; 0x17c8 <append_file+0x354>

#if DEBUG
	uart_puts_p(PSTR("Recording\n"));
#endif
	//give a different prompt to indicate no echoing
	uart_putc('<');
    14f4:	8c e3       	ldi	r24, 0x3C	; 60
    14f6:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>

	sbi(STAT1_PORT, STAT1); //Turn on indicator LED
    14fa:	28 9a       	sbi	0x05, 0	; 5

	char escape_chars_received = 0;
	
	read_spot = 0;
    14fc:	10 92 be 04 	sts	0x04BE, r1
    1500:	10 92 bd 04 	sts	0x04BD, r1
	checked_spot = 0;
    1504:	10 92 c1 04 	sts	0x04C1, r1
    1508:	10 92 c0 04 	sts	0x04C0, r1
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0

	//Clear circular buffer
	for(uint16_t i = 0 ; i < BUFF_LEN ; i++)
		input_buffer[i] = 0;
    1510:	fc 01       	movw	r30, r24
    1512:	eb 53       	subi	r30, 0x3B	; 59
    1514:	fb 4f       	sbci	r31, 0xFB	; 251
    1516:	10 82       	st	Z, r1
	
	read_spot = 0;
	checked_spot = 0;

	//Clear circular buffer
	for(uint16_t i = 0 ; i < BUFF_LEN ; i++)
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	24 e0       	ldi	r18, 0x04	; 4
    151c:	80 30       	cpi	r24, 0x00	; 0
    151e:	92 07       	cpc	r25, r18
    1520:	b9 f7       	brne	.-18     	; 0x1510 <append_file+0x9c>
		input_buffer[i] = 0;
		
	//Start UART buffered interrupts
	UCSR0B |= (1<<RXCIE0); //Enable receive interrupts
    1522:	80 91 c1 00 	lds	r24, 0x00C1
    1526:	80 68       	ori	r24, 0x80	; 128
    1528:	80 93 c1 00 	sts	0x00C1, r24
	sei(); //Enable interrupts
    152c:	78 94       	sei
    152e:	dd 24       	eor	r13, r13
    1530:	00 e0       	ldi	r16, 0x00	; 0
    1532:	10 e0       	ldi	r17, 0x00	; 0
    1534:	a5 c0       	rjmp	.+330    	; 0x1680 <append_file+0x20c>

		uint16_t timeout_counter = 0;

		while(checked_spot == read_spot) 
		{ 
			if( ++timeout_counter > 5000 ) 
    1536:	0f 5f       	subi	r16, 0xFF	; 255
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	83 e1       	ldi	r24, 0x13	; 19
    153c:	09 38       	cpi	r16, 0x89	; 137
    153e:	18 07       	cpc	r17, r24
    1540:	08 f4       	brcc	.+2      	; 0x1544 <append_file+0xd0>
    1542:	9a c0       	rjmp	.+308    	; 0x1678 <append_file+0x204>
			{
				timeout_counter = 0;

				if(checked_spot != 0 && checked_spot != (BUFF_LEN/2)) // stuff in buff
    1544:	80 91 c0 04 	lds	r24, 0x04C0
    1548:	90 91 c1 04 	lds	r25, 0x04C1
    154c:	89 2b       	or	r24, r25
    154e:	09 f4       	brne	.+2      	; 0x1552 <append_file+0xde>
    1550:	7b c0       	rjmp	.+246    	; 0x1648 <append_file+0x1d4>
    1552:	80 91 c0 04 	lds	r24, 0x04C0
    1556:	90 91 c1 04 	lds	r25, 0x04C1
    155a:	80 50       	subi	r24, 0x00	; 0
    155c:	92 40       	sbci	r25, 0x02	; 2
    155e:	09 f4       	brne	.+2      	; 0x1562 <append_file+0xee>
    1560:	73 c0       	rjmp	.+230    	; 0x1648 <append_file+0x1d4>
				{
					if(checked_spot < (BUFF_LEN/2))
    1562:	80 91 c0 04 	lds	r24, 0x04C0
    1566:	90 91 c1 04 	lds	r25, 0x04C1
    156a:	80 50       	subi	r24, 0x00	; 0
    156c:	92 40       	sbci	r25, 0x02	; 2
    156e:	98 f4       	brcc	.+38     	; 0x1596 <append_file+0x122>
					{
						//Record first half the buffer
						if(fat_write_file(fd, (uint8_t*) input_buffer, checked_spot) != checked_spot)
    1570:	40 91 c0 04 	lds	r20, 0x04C0
    1574:	50 91 c1 04 	lds	r21, 0x04C1
    1578:	c7 01       	movw	r24, r14
    157a:	65 ec       	ldi	r22, 0xC5	; 197
    157c:	74 e0       	ldi	r23, 0x04	; 4
    157e:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <fat_write_file>
    1582:	20 91 c0 04 	lds	r18, 0x04C0
    1586:	30 91 c1 04 	lds	r19, 0x04C1
    158a:	82 17       	cp	r24, r18
    158c:	93 07       	cpc	r25, r19
    158e:	d9 f0       	breq	.+54     	; 0x15c6 <append_file+0x152>
							uart_puts_p(PSTR("error writing to file\n"));
    1590:	8d e8       	ldi	r24, 0x8D	; 141
    1592:	99 e0       	ldi	r25, 0x09	; 9
    1594:	16 c0       	rjmp	.+44     	; 0x15c2 <append_file+0x14e>
					}
					else //checked_spot > (BUFF_LEN/2)
					{
						//Record second half the buffer
						if(fat_write_file(fd, (uint8_t*) input_buffer + (BUFF_LEN/2), (checked_spot - (BUFF_LEN/2)) ) != (checked_spot - (BUFF_LEN/2)) )
    1596:	40 91 c0 04 	lds	r20, 0x04C0
    159a:	50 91 c1 04 	lds	r21, 0x04C1
    159e:	40 50       	subi	r20, 0x00	; 0
    15a0:	52 40       	sbci	r21, 0x02	; 2
    15a2:	c7 01       	movw	r24, r14
    15a4:	65 ec       	ldi	r22, 0xC5	; 197
    15a6:	76 e0       	ldi	r23, 0x06	; 6
    15a8:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <fat_write_file>
    15ac:	20 91 c0 04 	lds	r18, 0x04C0
    15b0:	30 91 c1 04 	lds	r19, 0x04C1
    15b4:	20 50       	subi	r18, 0x00	; 0
    15b6:	32 40       	sbci	r19, 0x02	; 2
    15b8:	82 17       	cp	r24, r18
    15ba:	93 07       	cpc	r25, r19
    15bc:	21 f0       	breq	.+8      	; 0x15c6 <append_file+0x152>
							uart_puts_p(PSTR("error writing to file\n"));
    15be:	86 e7       	ldi	r24, 0x76	; 118
    15c0:	99 e0       	ldi	r25, 0x09	; 9
    15c2:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
					}
					unsigned spot = checked_spot > BUFF_LEN/2 ? BUFF_LEN/2 : 0;
    15c6:	80 91 c0 04 	lds	r24, 0x04C0
    15ca:	90 91 c1 04 	lds	r25, 0x04C1
    15ce:	81 50       	subi	r24, 0x01	; 1
    15d0:	92 40       	sbci	r25, 0x02	; 2
    15d2:	18 f4       	brcc	.+6      	; 0x15da <append_file+0x166>
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <append_file+0x16a>
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	72 e0       	ldi	r23, 0x02	; 2
					unsigned sp = spot; // start of new buffer
					
					// read_spot may have moved, copy
					cli();
    15de:	f8 94       	cli
    15e0:	ab 01       	movw	r20, r22
    15e2:	1e c0       	rjmp	.+60     	; 0x1620 <append_file+0x1ac>
					
					while(checked_spot != read_spot) 
					{
						input_buffer[spot++] = input_buffer[checked_spot++];
    15e4:	80 91 c0 04 	lds	r24, 0x04C0
    15e8:	90 91 c1 04 	lds	r25, 0x04C1
    15ec:	fc 01       	movw	r30, r24
    15ee:	eb 53       	subi	r30, 0x3B	; 59
    15f0:	fb 4f       	sbci	r31, 0xFB	; 251
    15f2:	20 81       	ld	r18, Z
    15f4:	fa 01       	movw	r30, r20
    15f6:	eb 53       	subi	r30, 0x3B	; 59
    15f8:	fb 4f       	sbci	r31, 0xFB	; 251
    15fa:	20 83       	st	Z, r18
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	90 93 c1 04 	sts	0x04C1, r25
    1602:	80 93 c0 04 	sts	0x04C0, r24
						if( checked_spot >= BUFF_LEN )
    1606:	80 91 c0 04 	lds	r24, 0x04C0
    160a:	90 91 c1 04 	lds	r25, 0x04C1
    160e:	80 50       	subi	r24, 0x00	; 0
    1610:	94 40       	sbci	r25, 0x04	; 4
    1612:	20 f0       	brcs	.+8      	; 0x161c <append_file+0x1a8>
							checked_spot = 0;
    1614:	10 92 c1 04 	sts	0x04C1, r1
    1618:	10 92 c0 04 	sts	0x04C0, r1
					// read_spot may have moved, copy
					cli();
					
					while(checked_spot != read_spot) 
					{
						input_buffer[spot++] = input_buffer[checked_spot++];
    161c:	4f 5f       	subi	r20, 0xFF	; 255
    161e:	5f 4f       	sbci	r21, 0xFF	; 255
					unsigned sp = spot; // start of new buffer
					
					// read_spot may have moved, copy
					cli();
					
					while(checked_spot != read_spot) 
    1620:	20 91 c0 04 	lds	r18, 0x04C0
    1624:	30 91 c1 04 	lds	r19, 0x04C1
    1628:	80 91 bd 04 	lds	r24, 0x04BD
    162c:	90 91 be 04 	lds	r25, 0x04BE
    1630:	28 17       	cp	r18, r24
    1632:	39 07       	cpc	r19, r25
    1634:	b9 f6       	brne	.-82     	; 0x15e4 <append_file+0x170>
						input_buffer[spot++] = input_buffer[checked_spot++];
						if( checked_spot >= BUFF_LEN )
							checked_spot = 0;
					}
					
					read_spot = spot; // set insertion to end of copy
    1636:	50 93 be 04 	sts	0x04BE, r21
    163a:	40 93 bd 04 	sts	0x04BD, r20
					checked_spot = sp; // reset checked to beginning of copy
    163e:	70 93 c1 04 	sts	0x04C1, r23
    1642:	60 93 c0 04 	sts	0x04C0, r22
					
					sei();
    1646:	78 94       	sei
				}
				
				sd_raw_sync(); //Sync all newly written data to card
    1648:	0e 94 4d 1b 	call	0x369a	; 0x369a <sd_raw_sync>
    164c:	08 c0       	rjmp	.+16     	; 0x165e <append_file+0x1ea>

				//Hang out while we wait for the interrupt to occur and advance read_spot
				while(checked_spot == read_spot)
				{
					STAT1_PORT &= ~(1<<STAT1); //Turn off LED to save more power
    164e:	28 98       	cbi	0x05, 0	; 5

					sleep_mode(); //Put CPU to sleep, UART ISR wakes us up
    1650:	83 b7       	in	r24, 0x33	; 51
    1652:	81 60       	ori	r24, 0x01	; 1
    1654:	83 bf       	out	0x33, r24	; 51
    1656:	88 95       	sleep
    1658:	83 b7       	in	r24, 0x33	; 51
    165a:	8e 7f       	andi	r24, 0xFE	; 254
    165c:	83 bf       	out	0x33, r24	; 51
				}
				
				sd_raw_sync(); //Sync all newly written data to card

				//Hang out while we wait for the interrupt to occur and advance read_spot
				while(checked_spot == read_spot)
    165e:	20 91 c0 04 	lds	r18, 0x04C0
    1662:	30 91 c1 04 	lds	r19, 0x04C1
    1666:	80 91 bd 04 	lds	r24, 0x04BD
    166a:	90 91 be 04 	lds	r25, 0x04BE
    166e:	28 17       	cp	r18, r24
    1670:	39 07       	cpc	r19, r25
    1672:	69 f3       	breq	.-38     	; 0x164e <append_file+0x1da>
    1674:	00 e0       	ldi	r16, 0x00	; 0
    1676:	10 e0       	ldi	r17, 0x00	; 0
					sleep_mode(); //Put CPU to sleep, UART ISR wakes us up
					//delay_ms(1); 
				}
			}

			delay_ms(1); //Hang out while we wait for the interrupt to occur and advance read_spot
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 08 07 	call	0xe10	; 0xe10 <delay_ms>

//fail		while(checked_spot == read_spot) asm("nop"); //Hang out while we wait for the interrupt to occur and advance read_spot

		uint16_t timeout_counter = 0;

		while(checked_spot == read_spot) 
    1680:	20 91 c0 04 	lds	r18, 0x04C0
    1684:	30 91 c1 04 	lds	r19, 0x04C1
    1688:	80 91 bd 04 	lds	r24, 0x04BD
    168c:	90 91 be 04 	lds	r25, 0x04BE
    1690:	28 17       	cp	r18, r24
    1692:	39 07       	cpc	r19, r25
    1694:	09 f4       	brne	.+2      	; 0x1698 <append_file+0x224>
    1696:	4f cf       	rjmp	.-354    	; 0x1536 <append_file+0xc2>
			}

			delay_ms(1); //Hang out while we wait for the interrupt to occur and advance read_spot
		}

		if(input_buffer[checked_spot] == setting_escape_character) //Scan for escape character
    1698:	e0 91 c0 04 	lds	r30, 0x04C0
    169c:	f0 91 c1 04 	lds	r31, 0x04C1
    16a0:	eb 53       	subi	r30, 0x3B	; 59
    16a2:	fb 4f       	sbci	r31, 0xFB	; 251
    16a4:	90 81       	ld	r25, Z
    16a6:	80 91 c7 08 	lds	r24, 0x08C7
    16aa:	98 17       	cp	r25, r24
    16ac:	61 f4       	brne	.+24     	; 0x16c6 <append_file+0x252>
		{
			escape_chars_received++;
    16ae:	d3 94       	inc	r13
			
			if(escape_chars_received == setting_max_escape_character)
    16b0:	80 91 bf 04 	lds	r24, 0x04BF
    16b4:	d8 16       	cp	r13, r24
    16b6:	41 f4       	brne	.+16     	; 0x16c8 <append_file+0x254>
			{
				//Disable interrupt and we're done!
				cli();
    16b8:	f8 94       	cli
				UCSR0B &= ~(1<<RXCIE0); //Clear receive interrupt enable
    16ba:	80 91 c1 00 	lds	r24, 0x00C1
    16be:	8f 77       	andi	r24, 0x7F	; 127
    16c0:	80 93 c1 00 	sts	0x00C1, r24
    16c4:	39 c0       	rjmp	.+114    	; 0x1738 <append_file+0x2c4>
				
				break;
    16c6:	dd 24       	eor	r13, r13
			}
		}
		else
			escape_chars_received = 0;
		
		checked_spot++;
    16c8:	80 91 c0 04 	lds	r24, 0x04C0
    16cc:	90 91 c1 04 	lds	r25, 0x04C1
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	90 93 c1 04 	sts	0x04C1, r25
    16d6:	80 93 c0 04 	sts	0x04C0, r24

		if(checked_spot == (BUFF_LEN/2)) //We've finished checking the first half the buffer
    16da:	80 91 c0 04 	lds	r24, 0x04C0
    16de:	90 91 c1 04 	lds	r25, 0x04C1
    16e2:	80 50       	subi	r24, 0x00	; 0
    16e4:	92 40       	sbci	r25, 0x02	; 2
    16e6:	69 f4       	brne	.+26     	; 0x1702 <append_file+0x28e>
		{
			//Record first half the buffer
			if(fat_write_file(fd, (uint8_t*) input_buffer, (BUFF_LEN/2) ) != (BUFF_LEN/2) )
    16e8:	c7 01       	movw	r24, r14
    16ea:	65 ec       	ldi	r22, 0xC5	; 197
    16ec:	74 e0       	ldi	r23, 0x04	; 4
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	52 e0       	ldi	r21, 0x02	; 2
    16f2:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <fat_write_file>
    16f6:	80 50       	subi	r24, 0x00	; 0
    16f8:	92 40       	sbci	r25, 0x02	; 2
    16fa:	19 f0       	breq	.+6      	; 0x1702 <append_file+0x28e>
			{
				uart_puts_p(PSTR("error writing to file\n"));
    16fc:	8f e5       	ldi	r24, 0x5F	; 95
    16fe:	99 e0       	ldi	r25, 0x09	; 9
    1700:	19 c0       	rjmp	.+50     	; 0x1734 <append_file+0x2c0>
				break;
			}
		}

		if(checked_spot == BUFF_LEN) //We've finished checking the second half the buffer
    1702:	80 91 c0 04 	lds	r24, 0x04C0
    1706:	90 91 c1 04 	lds	r25, 0x04C1
    170a:	80 50       	subi	r24, 0x00	; 0
    170c:	94 40       	sbci	r25, 0x04	; 4
    170e:	09 f0       	breq	.+2      	; 0x1712 <append_file+0x29e>
    1710:	0f cf       	rjmp	.-482    	; 0x1530 <append_file+0xbc>
		{
			checked_spot = 0;
    1712:	10 92 c1 04 	sts	0x04C1, r1
    1716:	10 92 c0 04 	sts	0x04C0, r1
			
			//Record second half the buffer
			if(fat_write_file(fd, (uint8_t*) input_buffer + (BUFF_LEN/2), (BUFF_LEN/2) ) != (BUFF_LEN/2) )
    171a:	c7 01       	movw	r24, r14
    171c:	65 ec       	ldi	r22, 0xC5	; 197
    171e:	76 e0       	ldi	r23, 0x06	; 6
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	52 e0       	ldi	r21, 0x02	; 2
    1724:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <fat_write_file>
    1728:	80 50       	subi	r24, 0x00	; 0
    172a:	92 40       	sbci	r25, 0x02	; 2
    172c:	09 f4       	brne	.+2      	; 0x1730 <append_file+0x2bc>
    172e:	00 cf       	rjmp	.-512    	; 0x1530 <append_file+0xbc>
			{
				uart_puts_p(PSTR("error writing to file\n"));
    1730:	88 e4       	ldi	r24, 0x48	; 72
    1732:	99 e0       	ldi	r25, 0x09	; 9
    1734:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		}
	}

	//Upon receiving the escape character, we may still have stuff left in the buffer
	//Record the last of the buffer to memory
	if(checked_spot == 0 || checked_spot == (BUFF_LEN/2))
    1738:	80 91 c0 04 	lds	r24, 0x04C0
    173c:	90 91 c1 04 	lds	r25, 0x04C1
    1740:	89 2b       	or	r24, r25
    1742:	c9 f1       	breq	.+114    	; 0x17b6 <append_file+0x342>
    1744:	80 91 c0 04 	lds	r24, 0x04C0
    1748:	90 91 c1 04 	lds	r25, 0x04C1
    174c:	80 50       	subi	r24, 0x00	; 0
    174e:	92 40       	sbci	r25, 0x02	; 2
    1750:	91 f1       	breq	.+100    	; 0x17b6 <append_file+0x342>
	{
		//Do nothing, we already recorded the buffers right before catching the escape character
	}
	else if(checked_spot < (BUFF_LEN/2))
    1752:	80 91 c0 04 	lds	r24, 0x04C0
    1756:	90 91 c1 04 	lds	r25, 0x04C1
    175a:	80 50       	subi	r24, 0x00	; 0
    175c:	92 40       	sbci	r25, 0x02	; 2
    175e:	98 f4       	brcc	.+38     	; 0x1786 <append_file+0x312>
	{
		//Record first half the buffer
		if(fat_write_file(fd, (uint8_t*) input_buffer, checked_spot) != checked_spot)
    1760:	40 91 c0 04 	lds	r20, 0x04C0
    1764:	50 91 c1 04 	lds	r21, 0x04C1
    1768:	c7 01       	movw	r24, r14
    176a:	65 ec       	ldi	r22, 0xC5	; 197
    176c:	74 e0       	ldi	r23, 0x04	; 4
    176e:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <fat_write_file>
    1772:	20 91 c0 04 	lds	r18, 0x04C0
    1776:	30 91 c1 04 	lds	r19, 0x04C1
    177a:	82 17       	cp	r24, r18
    177c:	93 07       	cpc	r25, r19
    177e:	d9 f0       	breq	.+54     	; 0x17b6 <append_file+0x342>
			uart_puts_p(PSTR("error writing to file\n"));
    1780:	81 e3       	ldi	r24, 0x31	; 49
    1782:	99 e0       	ldi	r25, 0x09	; 9
    1784:	16 c0       	rjmp	.+44     	; 0x17b2 <append_file+0x33e>
	}
	else //checked_spot > (BUFF_LEN/2)
	{
		//Record second half the buffer
		if(fat_write_file(fd, (uint8_t*) input_buffer + (BUFF_LEN/2), (checked_spot - (BUFF_LEN/2)) ) != (checked_spot - (BUFF_LEN/2)) )
    1786:	40 91 c0 04 	lds	r20, 0x04C0
    178a:	50 91 c1 04 	lds	r21, 0x04C1
    178e:	40 50       	subi	r20, 0x00	; 0
    1790:	52 40       	sbci	r21, 0x02	; 2
    1792:	c7 01       	movw	r24, r14
    1794:	65 ec       	ldi	r22, 0xC5	; 197
    1796:	76 e0       	ldi	r23, 0x06	; 6
    1798:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <fat_write_file>
    179c:	20 91 c0 04 	lds	r18, 0x04C0
    17a0:	30 91 c1 04 	lds	r19, 0x04C1
    17a4:	20 50       	subi	r18, 0x00	; 0
    17a6:	32 40       	sbci	r19, 0x02	; 2
    17a8:	82 17       	cp	r24, r18
    17aa:	93 07       	cpc	r25, r19
    17ac:	21 f0       	breq	.+8      	; 0x17b6 <append_file+0x342>
			uart_puts_p(PSTR("error writing to file\n"));
    17ae:	8a e1       	ldi	r24, 0x1A	; 26
    17b0:	99 e0       	ldi	r25, 0x09	; 9
    17b2:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	}

	fat_close_file(fd);
    17b6:	c7 01       	movw	r24, r14
    17b8:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fat_close_file>

	cbi(STAT1_PORT, STAT1); //Turn off indicator LED
    17bc:	28 98       	cbi	0x05, 0	; 5

#if DEBUG
	uart_puts_p(PSTR("Done!\n"));
#endif
	uart_puts_p(PSTR("~")); //Indicate a successful record
    17be:	88 e1       	ldi	r24, 0x18	; 24
    17c0:	99 e0       	ldi	r25, 0x09	; 9
    17c2:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
	
	return(1); //Success!
}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	08 95       	ret

000017e0 <newlog>:
//Log to a new file everytime the system boots
//Checks the spots in EEPROM for the next available LOG# file name
//Updates EEPROM and then appends to the new log file.
//Limited to 65535 files but this should not always be the case.
void newlog(void)
{
    17e0:	9f 92       	push	r9
    17e2:	af 92       	push	r10
    17e4:	bf 92       	push	r11
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	e1 97       	sbiw	r28, 0x31	; 49
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1806:	f9 99       	sbic	0x1f, 1	; 31
    1808:	fe cf       	rjmp	.-4      	; 0x1806 <newlog+0x26>
	EEARH = uiAddress >> 8; //Set up address and data registers
    180a:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1810:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1812:	30 b5       	in	r19, 0x20	; 32
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1814:	f9 99       	sbic	0x1f, 1	; 31
    1816:	fe cf       	rjmp	.-4      	; 0x1814 <newlog+0x34>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1818:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    181a:	84 e0       	ldi	r24, 0x04	; 4
    181c:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    181e:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1820:	20 b5       	in	r18, 0x20	; 32
	new_file_number = new_file_number << 8;
	new_file_number |= lsb;
	
	//If both EEPROM spots are 255 (0xFF), that means they are un-initialized (first time OpenLog has been turned on)
	//Let's init them both to 0
	if((lsb == 255) && (msb == 255))
    1822:	3f 3f       	cpi	r19, 0xFF	; 255
    1824:	a9 f4       	brne	.+42     	; 0x1850 <newlog+0x70>
    1826:	2f 3f       	cpi	r18, 0xFF	; 255
    1828:	99 f4       	brne	.+38     	; 0x1850 <newlog+0x70>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    182a:	f9 99       	sbic	0x1f, 1	; 31
    182c:	fe cf       	rjmp	.-4      	; 0x182a <newlog+0x4a>
	EEARH = uiAddress >> 8; //Set up address and data registers
    182e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1834:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1836:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1838:	f9 9a       	sbi	0x1f, 1	; 31
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    183a:	f9 99       	sbic	0x1f, 1	; 31
    183c:	fe cf       	rjmp	.-4      	; 0x183a <newlog+0x5a>
	EEARH = uiAddress >> 8; //Set up address and data registers
    183e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1840:	84 e0       	ldi	r24, 0x04	; 4
    1842:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1844:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1846:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1848:	f9 9a       	sbi	0x1f, 1	; 31
    184a:	cc 24       	eor	r12, r12
    184c:	dd 24       	eor	r13, r13
    184e:	0e c0       	rjmp	.+28     	; 0x186c <newlog+0x8c>
	//Combine two 8-bit EEPROM spots into one 16-bit number
	lsb = EEPROM_read(LOCATION_FILE_NUMBER_LSB);
	msb = EEPROM_read(LOCATION_FILE_NUMBER_MSB);

	new_file_number = msb;
	new_file_number = new_file_number << 8;
    1850:	92 2f       	mov	r25, r18
    1852:	80 e0       	ldi	r24, 0x00	; 0
	new_file_number |= lsb;
    1854:	c3 2e       	mov	r12, r19
    1856:	dd 24       	eor	r13, r13
    1858:	c8 2a       	or	r12, r24
    185a:	d9 2a       	or	r13, r25
	}

	//The above code looks like it will forever loop if we ever create 65535 logs
	//Let's quit if we ever get to 65534
	//65534 logs is quite possible if you have a system with lots of power on/off cycles
	if(new_file_number == 65534)
    185c:	8e ef       	ldi	r24, 0xFE	; 254
    185e:	c8 16       	cp	r12, r24
    1860:	8f ef       	ldi	r24, 0xFF	; 255
    1862:	d8 06       	cpc	r13, r24
    1864:	19 f4       	brne	.+6      	; 0x186c <newlog+0x8c>
	{
		//Gracefully drop out to command prompt with some error
		uart_puts_p(PSTR("!Too many logs:1!"));
    1866:	85 ec       	ldi	r24, 0xC5	; 197
    1868:	9b e0       	ldi	r25, 0x0B	; 11
    186a:	4c c0       	rjmp	.+152    	; 0x1904 <newlog+0x124>
	}
	
	//If we made it this far, everything looks good - let's create the new LOG and write to it

	char* new_file_name = general_buffer;
	sprintf(new_file_name, "LOG%05u.txt", new_file_number);
    186c:	00 d0       	rcall	.+0      	; 0x186e <newlog+0x8e>
    186e:	00 d0       	rcall	.+0      	; 0x1870 <newlog+0x90>
    1870:	00 d0       	rcall	.+0      	; 0x1872 <newlog+0x92>
    1872:	ed b7       	in	r30, 0x3d	; 61
    1874:	fe b7       	in	r31, 0x3e	; 62
    1876:	31 96       	adiw	r30, 0x01	; 1
    1878:	08 ec       	ldi	r16, 0xC8	; 200
    187a:	18 e0       	ldi	r17, 0x08	; 8
    187c:	ad b7       	in	r26, 0x3d	; 61
    187e:	be b7       	in	r27, 0x3e	; 62
    1880:	12 96       	adiw	r26, 0x02	; 2
    1882:	1c 93       	st	X, r17
    1884:	0e 93       	st	-X, r16
    1886:	11 97       	sbiw	r26, 0x01	; 1
    1888:	52 e0       	ldi	r21, 0x02	; 2
    188a:	e5 2e       	mov	r14, r21
    188c:	51 e0       	ldi	r21, 0x01	; 1
    188e:	f5 2e       	mov	r15, r21
    1890:	f3 82       	std	Z+3, r15	; 0x03
    1892:	e2 82       	std	Z+2, r14	; 0x02
    1894:	d5 82       	std	Z+5, r13	; 0x05
    1896:	c4 82       	std	Z+4, r12	; 0x04
    1898:	0e 94 dd 46 	call	0x8dba	; 0x8dba <sprintf>
    189c:	8d b7       	in	r24, 0x3d	; 61
    189e:	9e b7       	in	r25, 0x3e	; 62
    18a0:	06 96       	adiw	r24, 0x06	; 6
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	9e bf       	out	0x3e, r25	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	8d bf       	out	0x3d, r24	; 61

	struct fat_dir_entry_struct file_entry;
	while(!fat_create_file(dd, new_file_name, &file_entry))
    18ac:	90 2e       	mov	r9, r16
    18ae:	01 2f       	mov	r16, r17
    18b0:	5e 01       	movw	r10, r28
    18b2:	08 94       	sec
    18b4:	a1 1c       	adc	r10, r1
    18b6:	b1 1c       	adc	r11, r1
	{
		//Increment the file number because this file name is already taken
		new_file_number++;
		sprintf(new_file_name, "LOG%05u.txt", new_file_number);
    18b8:	1e 2d       	mov	r17, r14
    18ba:	ef 2c       	mov	r14, r15
    18bc:	26 c0       	rjmp	.+76     	; 0x190a <newlog+0x12a>

	struct fat_dir_entry_struct file_entry;
	while(!fat_create_file(dd, new_file_name, &file_entry))
	{
		//Increment the file number because this file name is already taken
		new_file_number++;
    18be:	69 01       	movw	r12, r18
		sprintf(new_file_name, "LOG%05u.txt", new_file_number);
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <newlog+0xe2>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <newlog+0xe4>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <newlog+0xe6>
    18c6:	ed b7       	in	r30, 0x3d	; 61
    18c8:	fe b7       	in	r31, 0x3e	; 62
    18ca:	31 96       	adiw	r30, 0x01	; 1
    18cc:	ad b7       	in	r26, 0x3d	; 61
    18ce:	be b7       	in	r27, 0x3e	; 62
    18d0:	11 96       	adiw	r26, 0x01	; 1
    18d2:	9c 92       	st	X, r9
    18d4:	11 97       	sbiw	r26, 0x01	; 1
    18d6:	12 96       	adiw	r26, 0x02	; 2
    18d8:	0c 93       	st	X, r16
    18da:	12 83       	std	Z+2, r17	; 0x02
    18dc:	e3 82       	std	Z+3, r14	; 0x03
    18de:	35 83       	std	Z+5, r19	; 0x05
    18e0:	24 83       	std	Z+4, r18	; 0x04
    18e2:	0e 94 dd 46 	call	0x8dba	; 0x8dba <sprintf>
		//Shoot! There's still a chance that we can have too many logs here
		//For example, if all the way up to LOG65533 was already on card, 
		//then reset the EEPROM log number, 65533 would be skipped, 65534 would be created
		//and the above 65534 test would be skipped
		
		if(new_file_number > 65533)
    18e6:	8d b7       	in	r24, 0x3d	; 61
    18e8:	9e b7       	in	r25, 0x3e	; 62
    18ea:	06 96       	adiw	r24, 0x06	; 6
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	9e bf       	out	0x3e, r25	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	8d bf       	out	0x3d, r24	; 61
    18f6:	9e ef       	ldi	r25, 0xFE	; 254
    18f8:	c9 16       	cp	r12, r25
    18fa:	9f ef       	ldi	r25, 0xFF	; 255
    18fc:	d9 06       	cpc	r13, r25
    18fe:	28 f0       	brcs	.+10     	; 0x190a <newlog+0x12a>
		{
			//Gracefully drop out to command prompt with some error
			uart_puts_p(PSTR("!Too many logs:2!"));
    1900:	83 eb       	ldi	r24, 0xB3	; 179
    1902:	9b e0       	ldi	r25, 0x0B	; 11
    1904:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    1908:	2c c0       	rjmp	.+88     	; 0x1962 <newlog+0x182>

	char* new_file_name = general_buffer;
	sprintf(new_file_name, "LOG%05u.txt", new_file_number);

	struct fat_dir_entry_struct file_entry;
	while(!fat_create_file(dd, new_file_name, &file_entry))
    190a:	80 91 c5 08 	lds	r24, 0x08C5
    190e:	90 91 c6 08 	lds	r25, 0x08C6
    1912:	68 ec       	ldi	r22, 0xC8	; 200
    1914:	78 e0       	ldi	r23, 0x08	; 8
    1916:	a5 01       	movw	r20, r10
    1918:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fat_create_file>
    191c:	96 01       	movw	r18, r12
    191e:	2f 5f       	subi	r18, 0xFF	; 255
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	88 23       	and	r24, r24
    1924:	61 f2       	breq	.-104    	; 0x18be <newlog+0xde>

	//Record new_file number to EEPROM but do not waste too many
	//write cycles to the EEPROM as it will wear out. Only write if
	//needed
	lsb = (uint8_t)(new_file_number & 0x00FF);
	msb = (uint8_t)((new_file_number & 0xFF00) >> 8);
    1926:	93 2f       	mov	r25, r19
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1928:	f9 99       	sbic	0x1f, 1	; 31
    192a:	fe cf       	rjmp	.-4      	; 0x1928 <newlog+0x148>
	EEARH = uiAddress >> 8; //Set up address and data registers
    192c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    192e:	83 e0       	ldi	r24, 0x03	; 3
    1930:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1932:	20 bd       	out	0x20, r18	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1934:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1936:	f9 9a       	sbi	0x1f, 1	; 31
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1938:	f9 99       	sbic	0x1f, 1	; 31
    193a:	fe cf       	rjmp	.-4      	; 0x1938 <newlog+0x158>
	EEARH = uiAddress >> 8; //Set up address and data registers
    193c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    193e:	84 e0       	ldi	r24, 0x04	; 4
    1940:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1942:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1944:	80 b5       	in	r24, 0x20	; 32
	lsb = (uint8_t)(new_file_number & 0x00FF);
	msb = (uint8_t)((new_file_number & 0xFF00) >> 8);

	EEPROM_write(LOCATION_FILE_NUMBER_LSB, lsb); // LSB

	if (EEPROM_read(LOCATION_FILE_NUMBER_MSB) != msb)
    1946:	89 17       	cp	r24, r25
    1948:	41 f0       	breq	.+16     	; 0x195a <newlog+0x17a>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    194a:	f9 99       	sbic	0x1f, 1	; 31
    194c:	fe cf       	rjmp	.-4      	; 0x194a <newlog+0x16a>
	EEARH = uiAddress >> 8; //Set up address and data registers
    194e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1950:	84 e0       	ldi	r24, 0x04	; 4
    1952:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1954:	90 bd       	out	0x20, r25	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1956:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1958:	f9 9a       	sbi	0x1f, 1	; 31
	uart_puts(new_file_name);
	uart_puts_p(PSTR("\n"));
#endif

	//Begin writing to file
	append_file(new_file_name);
    195a:	88 ec       	ldi	r24, 0xC8	; 200
    195c:	98 e0       	ldi	r25, 0x08	; 8
    195e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <append_file>
}
    1962:	e1 96       	adiw	r28, 0x31	; 49
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	ff 90       	pop	r15
    1978:	ef 90       	pop	r14
    197a:	df 90       	pop	r13
    197c:	cf 90       	pop	r12
    197e:	bf 90       	pop	r11
    1980:	af 90       	pop	r10
    1982:	9f 90       	pop	r9
    1984:	08 95       	ret

00001986 <seqlog>:
//If not, create it
//If yes, append to it
//Return 0 on error
//Return anything else on sucess
void seqlog(void)
{
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	ee 97       	sbiw	r28, 0x3e	; 62
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
	char seq_file_name[13];
	sprintf(seq_file_name, "SEQLOG.txt");
    19a2:	8e 01       	movw	r16, r28
    19a4:	0f 5f       	subi	r16, 0xFF	; 255
    19a6:	1f 4f       	sbci	r17, 0xFF	; 255
    19a8:	c8 01       	movw	r24, r16
    19aa:	6e e0       	ldi	r22, 0x0E	; 14
    19ac:	71 e0       	ldi	r23, 0x01	; 1
    19ae:	0e 94 a6 46 	call	0x8d4c	; 0x8d4c <strcpy>

	struct fat_file_struct* fd = open_file_in_dir(fs, dd, seq_file_name);
    19b2:	60 91 c5 08 	lds	r22, 0x08C5
    19b6:	70 91 c6 08 	lds	r23, 0x08C6
    19ba:	80 91 ba 04 	lds	r24, 0x04BA
    19be:	90 91 bb 04 	lds	r25, 0x04BB
    19c2:	a8 01       	movw	r20, r16
    19c4:	0e 94 09 0a 	call	0x1412	; 0x1412 <open_file_in_dir>
    19c8:	7c 01       	movw	r14, r24
	if(!fd)
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	a9 f4       	brne	.+42     	; 0x19f8 <seqlog+0x72>
	{
		uart_puts_p(PSTR("Creating SEQLOG\n"));
    19ce:	8e ee       	ldi	r24, 0xEE	; 238
    19d0:	9b e0       	ldi	r25, 0x0B	; 11
    19d2:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>

		struct fat_dir_entry_struct file_entry;
		if(!fat_create_file(dd, seq_file_name, &file_entry))
    19d6:	80 91 c5 08 	lds	r24, 0x08C5
    19da:	90 91 c6 08 	lds	r25, 0x08C6
    19de:	b8 01       	movw	r22, r16
    19e0:	ae 01       	movw	r20, r28
    19e2:	42 5f       	subi	r20, 0xF2	; 242
    19e4:	5f 4f       	sbci	r21, 0xFF	; 255
    19e6:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fat_create_file>
    19ea:	88 23       	and	r24, r24
    19ec:	29 f4       	brne	.+10     	; 0x19f8 <seqlog+0x72>
		{
			uart_puts_p(PSTR("Error creating SEQLOG\n"));
    19ee:	87 ed       	ldi	r24, 0xD7	; 215
    19f0:	9b e0       	ldi	r25, 0x0B	; 11
    19f2:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    19f6:	07 c0       	rjmp	.+14     	; 0x1a06 <seqlog+0x80>
			return;
		}
	}

	fat_close_file(fd); //Close the file so we can re-open it in append_file
    19f8:	c7 01       	movw	r24, r14
    19fa:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fat_close_file>

	append_file(seq_file_name);
    19fe:	ce 01       	movw	r24, r28
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	0e 94 3a 0a 	call	0x1474	; 0x1474 <append_file>
}
    1a06:	ee 96       	adiw	r28, 0x3e	; 62
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	08 95       	ret

00001a20 <record_config_file>:
}

//Records the current EEPROM settings to the config file
//If a config file exists, it is trashed and a new one is created
void record_config_file(void)
{
    1a20:	7f 92       	push	r7
    1a22:	8f 92       	push	r8
    1a24:	9f 92       	push	r9
    1a26:	af 92       	push	r10
    1a28:	bf 92       	push	r11
    1a2a:	cf 92       	push	r12
    1a2c:	df 92       	push	r13
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	c1 55       	subi	r28, 0x51	; 81
    1a40:	d0 40       	sbci	r29, 0x00	; 0
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
	struct fat_dir_entry_struct file_entry;

	char config_file_name[13];
	sprintf(config_file_name, CFG_FILENAME); //This is the name of the config file. 'config.sys' is probably a bad idea.
    1a4c:	8e 01       	movw	r16, r28
    1a4e:	0c 5f       	subi	r16, 0xFC	; 252
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	c8 01       	movw	r24, r16
    1a54:	69 e1       	ldi	r22, 0x19	; 25
    1a56:	71 e0       	ldi	r23, 0x01	; 1
    1a58:	0e 94 a6 46 	call	0x8d4c	; 0x8d4c <strcpy>

	//If there is currently a config file, trash it
	if(find_file_in_dir(fs, dd, config_file_name, &file_entry, 0))
    1a5c:	60 91 c5 08 	lds	r22, 0x08C5
    1a60:	70 91 c6 08 	lds	r23, 0x08C6
    1a64:	e1 e2       	ldi	r30, 0x21	; 33
    1a66:	ee 2e       	mov	r14, r30
    1a68:	f1 2c       	mov	r15, r1
    1a6a:	ec 0e       	add	r14, r28
    1a6c:	fd 1e       	adc	r15, r29
    1a6e:	80 91 ba 04 	lds	r24, 0x04BA
    1a72:	90 91 bb 04 	lds	r25, 0x04BB
    1a76:	a8 01       	movw	r20, r16
    1a78:	97 01       	movw	r18, r14
    1a7a:	00 e0       	ldi	r16, 0x00	; 0
    1a7c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <find_file_in_dir>
    1a80:	88 23       	and	r24, r24
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <record_config_file+0x72>
	{
		#if DEBUG
			uart_puts("\n\nDeleting config\n");
		#endif
		
		fat_delete_file(fs, &file_entry);
    1a84:	80 91 ba 04 	lds	r24, 0x04BA
    1a88:	90 91 bb 04 	lds	r25, 0x04BB
    1a8c:	b7 01       	movw	r22, r14
    1a8e:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <fat_delete_file>
	}

	//Create config file
	if(fat_create_file(dd, config_file_name, &file_entry) == 0)
    1a92:	8e 01       	movw	r16, r28
    1a94:	0c 5f       	subi	r16, 0xFC	; 252
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	80 91 c5 08 	lds	r24, 0x08C5
    1a9c:	90 91 c6 08 	lds	r25, 0x08C6
    1aa0:	b8 01       	movw	r22, r16
    1aa2:	ae 01       	movw	r20, r28
    1aa4:	4f 5d       	subi	r20, 0xDF	; 223
    1aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa8:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fat_create_file>
    1aac:	88 23       	and	r24, r24
    1aae:	19 f4       	brne	.+6      	; 0x1ab6 <record_config_file+0x96>
	{
		uart_puts("Failed to create config file");
    1ab0:	84 e2       	ldi	r24, 0x24	; 36
    1ab2:	91 e0       	ldi	r25, 0x01	; 1
    1ab4:	10 c0       	rjmp	.+32     	; 0x1ad6 <record_config_file+0xb6>
	}
	else
	{
		//Config was successfully created, so let's fill it with default settings

		struct fat_file_struct* fd = open_file_in_dir(fs, dd, config_file_name);
    1ab6:	60 91 c5 08 	lds	r22, 0x08C5
    1aba:	70 91 c6 08 	lds	r23, 0x08C6
    1abe:	80 91 ba 04 	lds	r24, 0x04BA
    1ac2:	90 91 bb 04 	lds	r25, 0x04BB
    1ac6:	a8 01       	movw	r20, r16
    1ac8:	0e 94 09 0a 	call	0x1412	; 0x1412 <open_file_in_dir>
    1acc:	5c 01       	movw	r10, r24
		if(!fd)
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	29 f4       	brne	.+10     	; 0x1adc <record_config_file+0xbc>
		{
			uart_puts("!error opening config file\n");
    1ad2:	81 e4       	ldi	r24, 0x41	; 65
    1ad4:	91 e0       	ldi	r25, 0x01	; 1
    1ad6:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
    1ada:	e7 c0       	rjmp	.+462    	; 0x1caa <record_config_file+0x28a>
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1adc:	f9 99       	sbic	0x1f, 1	; 31
    1ade:	fe cf       	rjmp	.-4      	; 0x1adc <record_config_file+0xbc>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1ae0:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1ae6:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1ae8:	90 b5       	in	r25, 0x20	; 32
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1aea:	f9 99       	sbic	0x1f, 1	; 31
    1aec:	fe cf       	rjmp	.-4      	; 0x1aea <record_config_file+0xca>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1aee:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1af0:	82 e0       	ldi	r24, 0x02	; 2
    1af2:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1af4:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1af6:	70 b4       	in	r7, 0x20	; 32
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1af8:	f9 99       	sbic	0x1f, 1	; 31
    1afa:	fe cf       	rjmp	.-4      	; 0x1af8 <record_config_file+0xd8>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1afc:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1afe:	85 e0       	ldi	r24, 0x05	; 5
    1b00:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1b02:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1b04:	90 b4       	in	r9, 0x20	; 32
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1b06:	f9 99       	sbic	0x1f, 1	; 31
    1b08:	fe cf       	rjmp	.-4      	; 0x1b06 <record_config_file+0xe6>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1b0a:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1b0c:	86 e0       	ldi	r24, 0x06	; 6
    1b0e:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1b10:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1b12:	80 b4       	in	r8, 0x20	; 32
		char current_system_baud = EEPROM_read(LOCATION_BAUD_SETTING);
		char current_system_mode = EEPROM_read(LOCATION_SYSTEM_SETTING);
		char current_system_escape = EEPROM_read(LOCATION_ESCAPE_CHAR);
		char current_system_max_escape = EEPROM_read(LOCATION_MAX_ESCAPE_CHAR);
		
		if(current_system_baud == BAUD_2400) strcpy(settings_string,"2400");
    1b14:	99 23       	and	r25, r25
    1b16:	29 f4       	brne	.+10     	; 0x1b22 <record_config_file+0x102>
    1b18:	ce 01       	movw	r24, r28
    1b1a:	41 96       	adiw	r24, 0x11	; 17
    1b1c:	6d e5       	ldi	r22, 0x5D	; 93
    1b1e:	71 e0       	ldi	r23, 0x01	; 1
    1b20:	29 c0       	rjmp	.+82     	; 0x1b74 <record_config_file+0x154>
		if(current_system_baud == BAUD_4800) strcpy(settings_string,"4800");
    1b22:	94 30       	cpi	r25, 0x04	; 4
    1b24:	29 f4       	brne	.+10     	; 0x1b30 <record_config_file+0x110>
    1b26:	ce 01       	movw	r24, r28
    1b28:	41 96       	adiw	r24, 0x11	; 17
    1b2a:	62 e6       	ldi	r22, 0x62	; 98
    1b2c:	71 e0       	ldi	r23, 0x01	; 1
    1b2e:	22 c0       	rjmp	.+68     	; 0x1b74 <record_config_file+0x154>
		if(current_system_baud == BAUD_9600) strcpy(settings_string,"9600");
    1b30:	91 30       	cpi	r25, 0x01	; 1
    1b32:	29 f4       	brne	.+10     	; 0x1b3e <record_config_file+0x11e>
    1b34:	ce 01       	movw	r24, r28
    1b36:	41 96       	adiw	r24, 0x11	; 17
    1b38:	67 e6       	ldi	r22, 0x67	; 103
    1b3a:	71 e0       	ldi	r23, 0x01	; 1
    1b3c:	1b c0       	rjmp	.+54     	; 0x1b74 <record_config_file+0x154>
		if(current_system_baud == BAUD_19200) strcpy(settings_string,"19200");
    1b3e:	95 30       	cpi	r25, 0x05	; 5
    1b40:	29 f4       	brne	.+10     	; 0x1b4c <record_config_file+0x12c>
    1b42:	ce 01       	movw	r24, r28
    1b44:	41 96       	adiw	r24, 0x11	; 17
    1b46:	6c e6       	ldi	r22, 0x6C	; 108
    1b48:	71 e0       	ldi	r23, 0x01	; 1
    1b4a:	14 c0       	rjmp	.+40     	; 0x1b74 <record_config_file+0x154>
		if(current_system_baud == BAUD_38400) strcpy(settings_string,"38400");
    1b4c:	96 30       	cpi	r25, 0x06	; 6
    1b4e:	29 f4       	brne	.+10     	; 0x1b5a <record_config_file+0x13a>
    1b50:	ce 01       	movw	r24, r28
    1b52:	41 96       	adiw	r24, 0x11	; 17
    1b54:	62 e7       	ldi	r22, 0x72	; 114
    1b56:	71 e0       	ldi	r23, 0x01	; 1
    1b58:	0d c0       	rjmp	.+26     	; 0x1b74 <record_config_file+0x154>
		if(current_system_baud == BAUD_57600) strcpy(settings_string,"57600");
    1b5a:	92 30       	cpi	r25, 0x02	; 2
    1b5c:	29 f4       	brne	.+10     	; 0x1b68 <record_config_file+0x148>
    1b5e:	ce 01       	movw	r24, r28
    1b60:	41 96       	adiw	r24, 0x11	; 17
    1b62:	68 e7       	ldi	r22, 0x78	; 120
    1b64:	71 e0       	ldi	r23, 0x01	; 1
    1b66:	06 c0       	rjmp	.+12     	; 0x1b74 <record_config_file+0x154>
		if(current_system_baud == BAUD_115200) strcpy(settings_string,"115200");
    1b68:	93 30       	cpi	r25, 0x03	; 3
    1b6a:	31 f4       	brne	.+12     	; 0x1b78 <record_config_file+0x158>
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	41 96       	adiw	r24, 0x11	; 17
    1b70:	6e e7       	ldi	r22, 0x7E	; 126
    1b72:	71 e0       	ldi	r23, 0x01	; 1
    1b74:	0e 94 a6 46 	call	0x8d4c	; 0x8d4c <strcpy>
		
		strcat(settings_string, ",");
    1b78:	8e 01       	movw	r16, r28
    1b7a:	0f 5e       	subi	r16, 0xEF	; 239
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	c8 01       	movw	r24, r16
    1b80:	65 e8       	ldi	r22, 0x85	; 133
    1b82:	71 e0       	ldi	r23, 0x01	; 1
    1b84:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <strcat>
		
		//Convert escape character to an ASCII visible string
		sprintf(temp, "%d", current_system_escape);
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <record_config_file+0x16a>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <record_config_file+0x16c>
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <record_config_file+0x16e>
    1b8e:	ed b7       	in	r30, 0x3d	; 61
    1b90:	fe b7       	in	r31, 0x3e	; 62
    1b92:	31 96       	adiw	r30, 0x01	; 1
    1b94:	7e 01       	movw	r14, r28
    1b96:	08 94       	sec
    1b98:	e1 1c       	adc	r14, r1
    1b9a:	f1 1c       	adc	r15, r1
    1b9c:	ad b7       	in	r26, 0x3d	; 61
    1b9e:	be b7       	in	r27, 0x3e	; 62
    1ba0:	12 96       	adiw	r26, 0x02	; 2
    1ba2:	fc 92       	st	X, r15
    1ba4:	ee 92       	st	-X, r14
    1ba6:	11 97       	sbiw	r26, 0x01	; 1
    1ba8:	67 e8       	ldi	r22, 0x87	; 135
    1baa:	c6 2e       	mov	r12, r22
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	d6 2e       	mov	r13, r22
    1bb0:	d3 82       	std	Z+3, r13	; 0x03
    1bb2:	c2 82       	std	Z+2, r12	; 0x02
    1bb4:	94 82       	std	Z+4, r9	; 0x04
    1bb6:	15 82       	std	Z+5, r1	; 0x05
    1bb8:	0e 94 dd 46 	call	0x8dba	; 0x8dba <sprintf>
		strcat(settings_string, temp); //Add this string to the system string
    1bbc:	8d b7       	in	r24, 0x3d	; 61
    1bbe:	9e b7       	in	r25, 0x3e	; 62
    1bc0:	06 96       	adiw	r24, 0x06	; 6
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	9e bf       	out	0x3e, r25	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	8d bf       	out	0x3d, r24	; 61
    1bcc:	c8 01       	movw	r24, r16
    1bce:	b7 01       	movw	r22, r14
    1bd0:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <strcat>

		strcat(settings_string, ",");
    1bd4:	c8 01       	movw	r24, r16
    1bd6:	65 e8       	ldi	r22, 0x85	; 133
    1bd8:	71 e0       	ldi	r23, 0x01	; 1
    1bda:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <strcat>

		//Convert max escape character to an ASCII visible string
		sprintf(temp, "%d", current_system_max_escape);
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <record_config_file+0x1c0>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <record_config_file+0x1c2>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <record_config_file+0x1c4>
    1be4:	ed b7       	in	r30, 0x3d	; 61
    1be6:	fe b7       	in	r31, 0x3e	; 62
    1be8:	31 96       	adiw	r30, 0x01	; 1
    1bea:	ad b7       	in	r26, 0x3d	; 61
    1bec:	be b7       	in	r27, 0x3e	; 62
    1bee:	12 96       	adiw	r26, 0x02	; 2
    1bf0:	fc 92       	st	X, r15
    1bf2:	ee 92       	st	-X, r14
    1bf4:	11 97       	sbiw	r26, 0x01	; 1
    1bf6:	d3 82       	std	Z+3, r13	; 0x03
    1bf8:	c2 82       	std	Z+2, r12	; 0x02
    1bfa:	84 82       	std	Z+4, r8	; 0x04
    1bfc:	15 82       	std	Z+5, r1	; 0x05
    1bfe:	0e 94 dd 46 	call	0x8dba	; 0x8dba <sprintf>
		strcat(settings_string, temp); //Add this string to the system string
    1c02:	8d b7       	in	r24, 0x3d	; 61
    1c04:	9e b7       	in	r25, 0x3e	; 62
    1c06:	06 96       	adiw	r24, 0x06	; 6
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	9e bf       	out	0x3e, r25	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	8d bf       	out	0x3d, r24	; 61
    1c12:	c8 01       	movw	r24, r16
    1c14:	b7 01       	movw	r22, r14
    1c16:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <strcat>

		strcat(settings_string, ",");
    1c1a:	c8 01       	movw	r24, r16
    1c1c:	65 e8       	ldi	r22, 0x85	; 133
    1c1e:	71 e0       	ldi	r23, 0x01	; 1
    1c20:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <strcat>

		//Convert system mode to a ASCII visible character
		sprintf(temp, "%d", current_system_mode);
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <record_config_file+0x206>
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <record_config_file+0x208>
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <record_config_file+0x20a>
    1c2a:	ed b7       	in	r30, 0x3d	; 61
    1c2c:	fe b7       	in	r31, 0x3e	; 62
    1c2e:	31 96       	adiw	r30, 0x01	; 1
    1c30:	ad b7       	in	r26, 0x3d	; 61
    1c32:	be b7       	in	r27, 0x3e	; 62
    1c34:	12 96       	adiw	r26, 0x02	; 2
    1c36:	fc 92       	st	X, r15
    1c38:	ee 92       	st	-X, r14
    1c3a:	11 97       	sbiw	r26, 0x01	; 1
    1c3c:	d3 82       	std	Z+3, r13	; 0x03
    1c3e:	c2 82       	std	Z+2, r12	; 0x02
    1c40:	74 82       	std	Z+4, r7	; 0x04
    1c42:	15 82       	std	Z+5, r1	; 0x05
    1c44:	0e 94 dd 46 	call	0x8dba	; 0x8dba <sprintf>
		strcat(settings_string, temp); //Add this string to the system string
    1c48:	8d b7       	in	r24, 0x3d	; 61
    1c4a:	9e b7       	in	r25, 0x3e	; 62
    1c4c:	06 96       	adiw	r24, 0x06	; 6
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	9e bf       	out	0x3e, r25	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	8d bf       	out	0x3d, r24	; 61
    1c58:	c8 01       	movw	r24, r16
    1c5a:	b7 01       	movw	r22, r14
    1c5c:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <strcat>

		strcat(settings_string, "\0");

		//Record current system settings to the config file
		//strcpy( (char*)input_buffer, "9600,26,3,0\0");
		strcpy( (char*)input_buffer, settings_string);
    1c60:	85 ec       	ldi	r24, 0xC5	; 197
    1c62:	94 e0       	ldi	r25, 0x04	; 4
    1c64:	b8 01       	movw	r22, r16
    1c66:	0e 94 a6 46 	call	0x8d4c	; 0x8d4c <strcpy>
		#if DEBUG
			uart_puts_p(PSTR("\nSetting string: "));
			uart_puts(settings_string);
		#endif

		if( fat_write_file(fd, (uint8_t*)input_buffer, strlen(settings_string) ) != strlen(settings_string) )
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	01 90       	ld	r0, Z+
    1c6e:	00 20       	and	r0, r0
    1c70:	e9 f7       	brne	.-6      	; 0x1c6c <record_config_file+0x24c>
    1c72:	31 97       	sbiw	r30, 0x01	; 1
    1c74:	e0 1b       	sub	r30, r16
    1c76:	f1 0b       	sbc	r31, r17
    1c78:	c5 01       	movw	r24, r10
    1c7a:	65 ec       	ldi	r22, 0xC5	; 197
    1c7c:	74 e0       	ldi	r23, 0x04	; 4
    1c7e:	af 01       	movw	r20, r30
    1c80:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <fat_write_file>
    1c84:	f8 01       	movw	r30, r16
    1c86:	01 90       	ld	r0, Z+
    1c88:	00 20       	and	r0, r0
    1c8a:	e9 f7       	brne	.-6      	; 0x1c86 <record_config_file+0x266>
    1c8c:	31 97       	sbiw	r30, 0x01	; 1
    1c8e:	e0 1b       	sub	r30, r16
    1c90:	f1 0b       	sbc	r31, r17
    1c92:	8e 17       	cp	r24, r30
    1c94:	9f 07       	cpc	r25, r31
    1c96:	21 f0       	breq	.+8      	; 0x1ca0 <record_config_file+0x280>
			uart_puts("error writing to config\n");
    1c98:	8a e8       	ldi	r24, 0x8A	; 138
    1c9a:	91 e0       	ldi	r25, 0x01	; 1
    1c9c:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>

		fat_close_file(fd);
    1ca0:	c5 01       	movw	r24, r10
    1ca2:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fat_close_file>

		sd_raw_sync(); //Sync all newly written data to card
    1ca6:	0e 94 4d 1b 	call	0x369a	; 0x369a <sd_raw_sync>
		
		//Now the new config file has the current system settings, nothing else to do!
	}
}
    1caa:	cf 5a       	subi	r28, 0xAF	; 175
    1cac:	df 4f       	sbci	r29, 0xFF	; 255
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	ff 90       	pop	r15
    1cc2:	ef 90       	pop	r14
    1cc4:	df 90       	pop	r13
    1cc6:	cf 90       	pop	r12
    1cc8:	bf 90       	pop	r11
    1cca:	af 90       	pop	r10
    1ccc:	9f 90       	pop	r9
    1cce:	8f 90       	pop	r8
    1cd0:	7f 90       	pop	r7
    1cd2:	08 95       	ret

00001cd4 <system_menu>:
//1) Turn on unit, unit will create new file, and just start logging
//2) Turn on, append to known file, and just start logging
//3) Turn on, sit at command prompt
//4) Resets the newlog file number to zero
void system_menu(void)
{
    1cd4:	ff 92       	push	r15
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <system_menu+0xc>
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <system_menu+0xe>
    1ce2:	0f 92       	push	r0
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1ce8:	f9 99       	sbic	0x1f, 1	; 31
    1cea:	fe cf       	rjmp	.-4      	; 0x1ce8 <system_menu+0x14>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1cec:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1cf2:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1cf4:	f0 b4       	in	r15, 0x20	; 32
		uart_putc('>');

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    1cf6:	8e 01       	movw	r16, r28
    1cf8:	0f 5f       	subi	r16, 0xFF	; 255
    1cfa:	1f 4f       	sbci	r17, 0xFF	; 255

	uint8_t system_mode = EEPROM_read(LOCATION_SYSTEM_SETTING);

	while(1)
	{
		uart_puts_p(PSTR("\nSystem Configuration\n"));
    1cfc:	89 e9       	ldi	r24, 0x99	; 153
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
    1d00:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>

		uart_puts_p(PSTR("Current boot mode: "));
    1d04:	85 e8       	ldi	r24, 0x85	; 133
    1d06:	92 e0       	ldi	r25, 0x02	; 2
    1d08:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		if(system_mode == MODE_NEWLOG) uart_puts_p(PSTR("New file"));
    1d0c:	ff 20       	and	r15, r15
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <system_menu+0x42>
    1d10:	8c e7       	ldi	r24, 0x7C	; 124
    1d12:	92 e0       	ldi	r25, 0x02	; 2
    1d14:	0b c0       	rjmp	.+22     	; 0x1d2c <system_menu+0x58>
		if(system_mode == MODE_SEQLOG) uart_puts_p(PSTR("Append file"));
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	f8 16       	cp	r15, r24
    1d1a:	19 f4       	brne	.+6      	; 0x1d22 <system_menu+0x4e>
    1d1c:	80 e7       	ldi	r24, 0x70	; 112
    1d1e:	92 e0       	ldi	r25, 0x02	; 2
    1d20:	05 c0       	rjmp	.+10     	; 0x1d2c <system_menu+0x58>
		if(system_mode == MODE_COMMAND) uart_puts_p(PSTR("Command"));
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	f8 16       	cp	r15, r24
    1d26:	21 f4       	brne	.+8      	; 0x1d30 <system_menu+0x5c>
    1d28:	88 e6       	ldi	r24, 0x68	; 104
    1d2a:	92 e0       	ldi	r25, 0x02	; 2
    1d2c:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("\n"));
    1d30:	86 e6       	ldi	r24, 0x66	; 102
    1d32:	92 e0       	ldi	r25, 0x02	; 2
    1d34:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>

		uart_puts_p(PSTR("Current escape character and amount: "));
    1d38:	80 e4       	ldi	r24, 0x40	; 64
    1d3a:	92 e0       	ldi	r25, 0x02	; 2
    1d3c:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_putdw_dec(setting_escape_character);
    1d40:	60 91 c7 08 	lds	r22, 0x08C7
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 a3 43 	call	0x8746	; 0x8746 <uart_putdw_dec>
		uart_puts_p(PSTR(" x "));
    1d4e:	8c e3       	ldi	r24, 0x3C	; 60
    1d50:	92 e0       	ldi	r25, 0x02	; 2
    1d52:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_putdw_dec(setting_max_escape_character);
    1d56:	60 91 bf 04 	lds	r22, 0x04BF
    1d5a:	70 e0       	ldi	r23, 0x00	; 0
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	0e 94 a3 43 	call	0x8746	; 0x8746 <uart_putdw_dec>
		uart_puts_p(PSTR("\n"));
    1d64:	8a e3       	ldi	r24, 0x3A	; 58
    1d66:	92 e0       	ldi	r25, 0x02	; 2
    1d68:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		
		uart_puts_p(PSTR("Change to:\n"));
    1d6c:	8e e2       	ldi	r24, 0x2E	; 46
    1d6e:	92 e0       	ldi	r25, 0x02	; 2
    1d70:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("1) New file logging\n"));
    1d74:	89 e1       	ldi	r24, 0x19	; 25
    1d76:	92 e0       	ldi	r25, 0x02	; 2
    1d78:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("2) Append file logging\n"));
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	92 e0       	ldi	r25, 0x02	; 2
    1d80:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("3) Command prompt\n"));
    1d84:	8e ee       	ldi	r24, 0xEE	; 238
    1d86:	91 e0       	ldi	r25, 0x01	; 1
    1d88:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("4) Reset new file number\n"));
    1d8c:	84 ed       	ldi	r24, 0xD4	; 212
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("5) New escape character\n"));
    1d94:	8b eb       	ldi	r24, 0xBB	; 187
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("6) Number of escape characters\n"));
    1d9c:	8b e9       	ldi	r24, 0x9B	; 155
    1d9e:	91 e0       	ldi	r25, 0x01	; 1
    1da0:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("x) Exit\n"));
    1da4:	82 e9       	ldi	r24, 0x92	; 146
    1da6:	91 e0       	ldi	r25, 0x01	; 1
    1da8:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>

		//print prompt
		uart_putc('>');
    1dac:	8e e3       	ldi	r24, 0x3E	; 62
    1dae:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    1db2:	c8 01       	movw	r24, r16
    1db4:	65 e0       	ldi	r22, 0x05	; 5
    1db6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <read_line>
    1dba:	88 23       	and	r24, r24
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <system_menu+0xec>
    1dbe:	9e cf       	rjmp	.-196    	; 0x1cfc <system_menu+0x28>
			continue;

		//execute command
		if(strcmp_P(command, PSTR("1")) == 0)
    1dc0:	c8 01       	movw	r24, r16
    1dc2:	60 e9       	ldi	r22, 0x90	; 144
    1dc4:	71 e0       	ldi	r23, 0x01	; 1
    1dc6:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    1dca:	89 2b       	or	r24, r25
    1dcc:	59 f4       	brne	.+22     	; 0x1de4 <system_menu+0x110>
		{
			uart_puts_p(PSTR("New file logging\n"));
    1dce:	8e e7       	ldi	r24, 0x7E	; 126
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1dd6:	f9 99       	sbic	0x1f, 1	; 31
    1dd8:	fe cf       	rjmp	.-4      	; 0x1dd6 <system_menu+0x102>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1dda:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1de0:	10 bc       	out	0x20, r1	; 32
    1de2:	12 c0       	rjmp	.+36     	; 0x1e08 <system_menu+0x134>
			uart_puts_p(PSTR("New file logging\n"));
			EEPROM_write(LOCATION_SYSTEM_SETTING, MODE_NEWLOG);
			record_config_file(); //Put this new setting into the config file
			return;
		}
		if(strcmp_P(command, PSTR("2")) == 0)
    1de4:	c8 01       	movw	r24, r16
    1de6:	6c e7       	ldi	r22, 0x7C	; 124
    1de8:	71 e0       	ldi	r23, 0x01	; 1
    1dea:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    1dee:	89 2b       	or	r24, r25
    1df0:	81 f4       	brne	.+32     	; 0x1e12 <system_menu+0x13e>
		{
			uart_puts_p(PSTR("Append file logging\n"));
    1df2:	87 e6       	ldi	r24, 0x67	; 103
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1dfa:	f9 99       	sbic	0x1f, 1	; 31
    1dfc:	fe cf       	rjmp	.-4      	; 0x1dfa <system_menu+0x126>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1dfe:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1e08:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1e0a:	f9 9a       	sbi	0x1f, 1	; 31
		}
		if(strcmp_P(command, PSTR("2")) == 0)
		{
			uart_puts_p(PSTR("Append file logging\n"));
			EEPROM_write(LOCATION_SYSTEM_SETTING, MODE_SEQLOG);
			record_config_file(); //Put this new setting into the config file
    1e0c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <record_config_file>
    1e10:	8c c0       	rjmp	.+280    	; 0x1f2a <system_menu+0x256>
			return;
		}
		if(strcmp_P(command, PSTR("3")) == 0)
    1e12:	c8 01       	movw	r24, r16
    1e14:	65 e6       	ldi	r22, 0x65	; 101
    1e16:	71 e0       	ldi	r23, 0x01	; 1
    1e18:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    1e1c:	89 2b       	or	r24, r25
    1e1e:	51 f4       	brne	.+20     	; 0x1e34 <system_menu+0x160>
		{
			uart_puts_p(PSTR("Command prompt\n"));
    1e20:	85 e5       	ldi	r24, 0x55	; 85
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1e28:	f9 99       	sbic	0x1f, 1	; 31
    1e2a:	fe cf       	rjmp	.-4      	; 0x1e28 <system_menu+0x154>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1e2c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	81 bd       	out	0x21, r24	; 33
    1e32:	e9 cf       	rjmp	.-46     	; 0x1e06 <system_menu+0x132>
			uart_puts_p(PSTR("Command prompt\n"));
			EEPROM_write(LOCATION_SYSTEM_SETTING, MODE_COMMAND);
			record_config_file(); //Put this new setting into the config file
			return;
		}
		if(strcmp_P(command, PSTR("4")) == 0)
    1e34:	c8 01       	movw	r24, r16
    1e36:	63 e5       	ldi	r22, 0x53	; 83
    1e38:	71 e0       	ldi	r23, 0x01	; 1
    1e3a:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    1e3e:	89 2b       	or	r24, r25
    1e40:	a9 f4       	brne	.+42     	; 0x1e6c <system_menu+0x198>
		{
			uart_puts_p(PSTR("New file number reset to zero\n"));
    1e42:	84 e3       	ldi	r24, 0x34	; 52
    1e44:	91 e0       	ldi	r25, 0x01	; 1
    1e46:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1e4a:	f9 99       	sbic	0x1f, 1	; 31
    1e4c:	fe cf       	rjmp	.-4      	; 0x1e4a <system_menu+0x176>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1e4e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1e54:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1e56:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1e58:	f9 9a       	sbi	0x1f, 1	; 31
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1e5a:	f9 99       	sbic	0x1f, 1	; 31
    1e5c:	fe cf       	rjmp	.-4      	; 0x1e5a <system_menu+0x186>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1e5e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1e60:	84 e0       	ldi	r24, 0x04	; 4
    1e62:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1e64:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1e66:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1e68:	f9 9a       	sbi	0x1f, 1	; 31
    1e6a:	5f c0       	rjmp	.+190    	; 0x1f2a <system_menu+0x256>
			//65533 log testing
			//EEPROM_write(LOCATION_FILE_NUMBER_LSB, 0xFD);
			//EEPROM_write(LOCATION_FILE_NUMBER_MSB, 0xFF);
			return;
		}
		if(strcmp_P(command, PSTR("5")) == 0)
    1e6c:	c8 01       	movw	r24, r16
    1e6e:	62 e3       	ldi	r22, 0x32	; 50
    1e70:	71 e0       	ldi	r23, 0x01	; 1
    1e72:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    1e76:	89 2b       	or	r24, r25
    1e78:	09 f5       	brne	.+66     	; 0x1ebc <system_menu+0x1e8>
		{
			uart_puts_p(PSTR("Enter a new escape character: "));
    1e7a:	83 e1       	ldi	r24, 0x13	; 19
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
			setting_escape_character = uart_getc();
    1e82:	0e 94 27 44 	call	0x884e	; 0x884e <uart_getc>
    1e86:	98 2f       	mov	r25, r24
    1e88:	80 93 c7 08 	sts	0x08C7, r24
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1e8c:	f9 99       	sbic	0x1f, 1	; 31
    1e8e:	fe cf       	rjmp	.-4      	; 0x1e8c <system_menu+0x1b8>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1e90:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1e92:	85 e0       	ldi	r24, 0x05	; 5
    1e94:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1e96:	90 bd       	out	0x20, r25	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1e98:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1e9a:	f9 9a       	sbi	0x1f, 1	; 31
		if(strcmp_P(command, PSTR("5")) == 0)
		{
			uart_puts_p(PSTR("Enter a new escape character: "));
			setting_escape_character = uart_getc();
			EEPROM_write(LOCATION_ESCAPE_CHAR, setting_escape_character);
			record_config_file(); //Put this new setting into the config file
    1e9c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <record_config_file>

			uart_puts_p(PSTR("\nNew escape character: "));
    1ea0:	8b ef       	ldi	r24, 0xFB	; 251
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
			uart_putdw_dec(setting_escape_character);
    1ea8:	60 91 c7 08 	lds	r22, 0x08C7
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 a3 43 	call	0x8746	; 0x8746 <uart_putdw_dec>
			uart_puts_p(PSTR("\n"));
    1eb6:	89 ef       	ldi	r24, 0xF9	; 249
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	35 c0       	rjmp	.+106    	; 0x1f26 <system_menu+0x252>
			return;
		}
		if(strcmp_P(command, PSTR("6")) == 0)
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	67 ef       	ldi	r22, 0xF7	; 247
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    1ec6:	89 2b       	or	r24, r25
    1ec8:	21 f5       	brne	.+72     	; 0x1f12 <system_menu+0x23e>
		{
			char choice = 255;
			while(choice > 9)
			{
				uart_puts_p(PSTR("Enter number of escape characters to look for: "));
    1eca:	87 ec       	ldi	r24, 0xC7	; 199
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
				choice = uart_getc() - '0';
    1ed2:	0e 94 27 44 	call	0x884e	; 0x884e <uart_getc>
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	90 53       	subi	r25, 0x30	; 48
			return;
		}
		if(strcmp_P(command, PSTR("6")) == 0)
		{
			char choice = 255;
			while(choice > 9)
    1eda:	9a 30       	cpi	r25, 0x0A	; 10
    1edc:	b0 f7       	brcc	.-20     	; 0x1eca <system_menu+0x1f6>
			{
				uart_puts_p(PSTR("Enter number of escape characters to look for: "));
				choice = uart_getc() - '0';
			}
			
			setting_max_escape_character = choice;
    1ede:	90 93 bf 04 	sts	0x04BF, r25
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1ee2:	f9 99       	sbic	0x1f, 1	; 31
    1ee4:	fe cf       	rjmp	.-4      	; 0x1ee2 <system_menu+0x20e>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1ee6:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1ee8:	86 e0       	ldi	r24, 0x06	; 6
    1eea:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1eec:	90 bd       	out	0x20, r25	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1eee:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1ef0:	f9 9a       	sbi	0x1f, 1	; 31
				choice = uart_getc() - '0';
			}
			
			setting_max_escape_character = choice;
			EEPROM_write(LOCATION_MAX_ESCAPE_CHAR, setting_max_escape_character);
			record_config_file(); //Put this new setting into the config file
    1ef2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <record_config_file>

			uart_puts_p(PSTR("\nNumber of escape characters needed: "));
    1ef6:	81 ea       	ldi	r24, 0xA1	; 161
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
			uart_putdw_dec(setting_max_escape_character);
    1efe:	60 91 bf 04 	lds	r22, 0x04BF
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	0e 94 a3 43 	call	0x8746	; 0x8746 <uart_putdw_dec>
			uart_puts_p(PSTR("\n"));
    1f0c:	8f e9       	ldi	r24, 0x9F	; 159
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0a c0       	rjmp	.+20     	; 0x1f26 <system_menu+0x252>
			return;
		}
		if(strcmp_P(command, PSTR("x")) == 0)
    1f12:	c8 01       	movw	r24, r16
    1f14:	6d e9       	ldi	r22, 0x9D	; 157
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    1f1c:	89 2b       	or	r24, r25
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <system_menu+0x24e>
    1f20:	ed ce       	rjmp	.-550    	; 0x1cfc <system_menu+0x28>
		{
			//Do nothing, just exit
			uart_puts_p(PSTR("Exiting\n"));
    1f22:	84 e9       	ldi	r24, 0x94	; 148
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
			return;
		}
	}
}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	ff 90       	pop	r15
    1f3e:	08 95       	ret

00001f40 <baud_menu>:
	uart_puts_p(PSTR("baud\t\t\t: Menu to configure baud rate\n"));
}

//Configure what baud rate to communicate at
void baud_menu(void)
{
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <baud_menu+0xc>
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <baud_menu+0xe>
    1f4e:	0f 92       	push	r0
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1f54:	f9 99       	sbic	0x1f, 1	; 31
    1f56:	fe cf       	rjmp	.-4      	; 0x1f54 <baud_menu+0x14>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1f58:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1f5e:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1f60:	f0 b4       	in	r15, 0x20	; 32
		uart_putc('>');

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    1f62:	8e 01       	movw	r16, r28
    1f64:	0f 5f       	subi	r16, 0xFF	; 255
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255

	uint8_t uart_speed = EEPROM_read(LOCATION_BAUD_SETTING);
	
	while(1)
	{
		uart_puts_p(PSTR("\nBaud Configuration:\n"));
    1f68:	8a e0       	ldi	r24, 0x0A	; 10
    1f6a:	94 e0       	ldi	r25, 0x04	; 4
    1f6c:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	
		uart_puts_p(PSTR("Current: "));
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	94 e0       	ldi	r25, 0x04	; 4
    1f74:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		if(uart_speed == BAUD_4800) uart_puts_p(PSTR("48"));
    1f78:	84 e0       	ldi	r24, 0x04	; 4
    1f7a:	f8 16       	cp	r15, r24
    1f7c:	19 f4       	brne	.+6      	; 0x1f84 <baud_menu+0x44>
    1f7e:	8d ef       	ldi	r24, 0xFD	; 253
    1f80:	93 e0       	ldi	r25, 0x03	; 3
    1f82:	22 c0       	rjmp	.+68     	; 0x1fc8 <baud_menu+0x88>
		if(uart_speed == BAUD_2400) uart_puts_p(PSTR("24"));
    1f84:	ff 20       	and	r15, r15
    1f86:	19 f4       	brne	.+6      	; 0x1f8e <baud_menu+0x4e>
    1f88:	8a ef       	ldi	r24, 0xFA	; 250
    1f8a:	93 e0       	ldi	r25, 0x03	; 3
    1f8c:	1d c0       	rjmp	.+58     	; 0x1fc8 <baud_menu+0x88>
		if(uart_speed == BAUD_9600) uart_puts_p(PSTR("96"));
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	f8 16       	cp	r15, r24
    1f92:	19 f4       	brne	.+6      	; 0x1f9a <baud_menu+0x5a>
    1f94:	87 ef       	ldi	r24, 0xF7	; 247
    1f96:	93 e0       	ldi	r25, 0x03	; 3
    1f98:	17 c0       	rjmp	.+46     	; 0x1fc8 <baud_menu+0x88>
		if(uart_speed == BAUD_19200) uart_puts_p(PSTR("192"));
    1f9a:	85 e0       	ldi	r24, 0x05	; 5
    1f9c:	f8 16       	cp	r15, r24
    1f9e:	19 f4       	brne	.+6      	; 0x1fa6 <baud_menu+0x66>
    1fa0:	83 ef       	ldi	r24, 0xF3	; 243
    1fa2:	93 e0       	ldi	r25, 0x03	; 3
    1fa4:	11 c0       	rjmp	.+34     	; 0x1fc8 <baud_menu+0x88>
		if(uart_speed == BAUD_38400) uart_puts_p(PSTR("384"));
    1fa6:	86 e0       	ldi	r24, 0x06	; 6
    1fa8:	f8 16       	cp	r15, r24
    1faa:	19 f4       	brne	.+6      	; 0x1fb2 <baud_menu+0x72>
    1fac:	8f ee       	ldi	r24, 0xEF	; 239
    1fae:	93 e0       	ldi	r25, 0x03	; 3
    1fb0:	0b c0       	rjmp	.+22     	; 0x1fc8 <baud_menu+0x88>
		if(uart_speed == BAUD_57600) uart_puts_p(PSTR("576"));
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	f8 16       	cp	r15, r24
    1fb6:	19 f4       	brne	.+6      	; 0x1fbe <baud_menu+0x7e>
    1fb8:	8b ee       	ldi	r24, 0xEB	; 235
    1fba:	93 e0       	ldi	r25, 0x03	; 3
    1fbc:	05 c0       	rjmp	.+10     	; 0x1fc8 <baud_menu+0x88>
		if(uart_speed == BAUD_115200) uart_puts_p(PSTR("1152"));
    1fbe:	83 e0       	ldi	r24, 0x03	; 3
    1fc0:	f8 16       	cp	r15, r24
    1fc2:	21 f4       	brne	.+8      	; 0x1fcc <baud_menu+0x8c>
    1fc4:	86 ee       	ldi	r24, 0xE6	; 230
    1fc6:	93 e0       	ldi	r25, 0x03	; 3
    1fc8:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("00 bps\n"));
    1fcc:	8e ed       	ldi	r24, 0xDE	; 222
    1fce:	93 e0       	ldi	r25, 0x03	; 3
    1fd0:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	
		uart_puts_p(PSTR("Change to:\n"));
    1fd4:	82 ed       	ldi	r24, 0xD2	; 210
    1fd6:	93 e0       	ldi	r25, 0x03	; 3
    1fd8:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("1) 2400 bps\n"));
    1fdc:	85 ec       	ldi	r24, 0xC5	; 197
    1fde:	93 e0       	ldi	r25, 0x03	; 3
    1fe0:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("2) 4800 bps\n"));
    1fe4:	88 eb       	ldi	r24, 0xB8	; 184
    1fe6:	93 e0       	ldi	r25, 0x03	; 3
    1fe8:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("3) 9600 bps\n"));
    1fec:	8b ea       	ldi	r24, 0xAB	; 171
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("4) 19200 bps\n"));
    1ff4:	8d e9       	ldi	r24, 0x9D	; 157
    1ff6:	93 e0       	ldi	r25, 0x03	; 3
    1ff8:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("5) 38400 bps\n"));
    1ffc:	8f e8       	ldi	r24, 0x8F	; 143
    1ffe:	93 e0       	ldi	r25, 0x03	; 3
    2000:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("6) 57600 bps\n"));
    2004:	81 e8       	ldi	r24, 0x81	; 129
    2006:	93 e0       	ldi	r25, 0x03	; 3
    2008:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("7) 115200 bps\n"));
    200c:	82 e7       	ldi	r24, 0x72	; 114
    200e:	93 e0       	ldi	r25, 0x03	; 3
    2010:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
		uart_puts_p(PSTR("x) Exit\n"));
    2014:	89 e6       	ldi	r24, 0x69	; 105
    2016:	93 e0       	ldi	r25, 0x03	; 3
    2018:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>

		//print prompt
		uart_putc('>');
    201c:	8e e3       	ldi	r24, 0x3E	; 62
    201e:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    2022:	c8 01       	movw	r24, r16
    2024:	65 e0       	ldi	r22, 0x05	; 5
    2026:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <read_line>
    202a:	88 23       	and	r24, r24
    202c:	09 f4       	brne	.+2      	; 0x2030 <baud_menu+0xf0>
    202e:	9c cf       	rjmp	.-200    	; 0x1f68 <baud_menu+0x28>
			continue;

		//execute command
		if(strcmp_P(command, PSTR("1")) == 0)
    2030:	c8 01       	movw	r24, r16
    2032:	67 e6       	ldi	r22, 0x67	; 103
    2034:	73 e0       	ldi	r23, 0x03	; 3
    2036:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    203a:	89 2b       	or	r24, r25
    203c:	59 f4       	brne	.+22     	; 0x2054 <baud_menu+0x114>
		{
			uart_puts_p(PSTR("\nGoing to 2400bps...\n"));
    203e:	81 e5       	ldi	r24, 0x51	; 81
    2040:	93 e0       	ldi	r25, 0x03	; 3
    2042:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2046:	f9 99       	sbic	0x1f, 1	; 31
    2048:	fe cf       	rjmp	.-4      	; 0x2046 <baud_menu+0x106>
	EEARH = uiAddress >> 8; //Set up address and data registers
    204a:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2050:	10 bc       	out	0x20, r1	; 32
    2052:	6b c0       	rjmp	.+214    	; 0x212a <baud_menu+0x1ea>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_2400);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("2")) == 0)
    2054:	c8 01       	movw	r24, r16
    2056:	6f e4       	ldi	r22, 0x4F	; 79
    2058:	73 e0       	ldi	r23, 0x03	; 3
    205a:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    205e:	89 2b       	or	r24, r25
    2060:	59 f4       	brne	.+22     	; 0x2078 <baud_menu+0x138>
		{
			uart_puts_p(PSTR("\nGoing to 4800bps...\n"));
    2062:	89 e3       	ldi	r24, 0x39	; 57
    2064:	93 e0       	ldi	r25, 0x03	; 3
    2066:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    206a:	f9 99       	sbic	0x1f, 1	; 31
    206c:	fe cf       	rjmp	.-4      	; 0x206a <baud_menu+0x12a>
	EEARH = uiAddress >> 8; //Set up address and data registers
    206e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2074:	84 e0       	ldi	r24, 0x04	; 4
    2076:	58 c0       	rjmp	.+176    	; 0x2128 <baud_menu+0x1e8>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_4800);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("3")) == 0)
    2078:	c8 01       	movw	r24, r16
    207a:	67 e3       	ldi	r22, 0x37	; 55
    207c:	73 e0       	ldi	r23, 0x03	; 3
    207e:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    2082:	89 2b       	or	r24, r25
    2084:	51 f4       	brne	.+20     	; 0x209a <baud_menu+0x15a>
		{
			uart_puts_p(PSTR("\nGoing to 9600bps...\n"));
    2086:	81 e2       	ldi	r24, 0x21	; 33
    2088:	93 e0       	ldi	r25, 0x03	; 3
    208a:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    208e:	f9 99       	sbic	0x1f, 1	; 31
    2090:	fe cf       	rjmp	.-4      	; 0x208e <baud_menu+0x14e>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2092:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	81 bd       	out	0x21, r24	; 33
    2098:	47 c0       	rjmp	.+142    	; 0x2128 <baud_menu+0x1e8>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_9600);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("4")) == 0)
    209a:	c8 01       	movw	r24, r16
    209c:	6f e1       	ldi	r22, 0x1F	; 31
    209e:	73 e0       	ldi	r23, 0x03	; 3
    20a0:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    20a4:	89 2b       	or	r24, r25
    20a6:	59 f4       	brne	.+22     	; 0x20be <baud_menu+0x17e>
		{
			uart_puts_p(PSTR("\nGoing to 19200bps...\n"));
    20a8:	88 e0       	ldi	r24, 0x08	; 8
    20aa:	93 e0       	ldi	r25, 0x03	; 3
    20ac:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    20b0:	f9 99       	sbic	0x1f, 1	; 31
    20b2:	fe cf       	rjmp	.-4      	; 0x20b0 <baud_menu+0x170>
	EEARH = uiAddress >> 8; //Set up address and data registers
    20b4:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    20ba:	85 e0       	ldi	r24, 0x05	; 5
    20bc:	35 c0       	rjmp	.+106    	; 0x2128 <baud_menu+0x1e8>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_19200);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("5")) == 0)
    20be:	c8 01       	movw	r24, r16
    20c0:	66 e0       	ldi	r22, 0x06	; 6
    20c2:	73 e0       	ldi	r23, 0x03	; 3
    20c4:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    20c8:	89 2b       	or	r24, r25
    20ca:	59 f4       	brne	.+22     	; 0x20e2 <baud_menu+0x1a2>
		{
			uart_puts_p(PSTR("\nGoing to 38400bps...\n"));
    20cc:	8f ee       	ldi	r24, 0xEF	; 239
    20ce:	92 e0       	ldi	r25, 0x02	; 2
    20d0:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    20d4:	f9 99       	sbic	0x1f, 1	; 31
    20d6:	fe cf       	rjmp	.-4      	; 0x20d4 <baud_menu+0x194>
	EEARH = uiAddress >> 8; //Set up address and data registers
    20d8:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    20de:	86 e0       	ldi	r24, 0x06	; 6
    20e0:	23 c0       	rjmp	.+70     	; 0x2128 <baud_menu+0x1e8>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_38400);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("6")) == 0)
    20e2:	c8 01       	movw	r24, r16
    20e4:	6d ee       	ldi	r22, 0xED	; 237
    20e6:	72 e0       	ldi	r23, 0x02	; 2
    20e8:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    20ec:	89 2b       	or	r24, r25
    20ee:	59 f4       	brne	.+22     	; 0x2106 <baud_menu+0x1c6>
		{
			uart_puts_p(PSTR("\nGoing to 57600bps...\n"));
    20f0:	86 ed       	ldi	r24, 0xD6	; 214
    20f2:	92 e0       	ldi	r25, 0x02	; 2
    20f4:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    20f8:	f9 99       	sbic	0x1f, 1	; 31
    20fa:	fe cf       	rjmp	.-4      	; 0x20f8 <baud_menu+0x1b8>
	EEARH = uiAddress >> 8; //Set up address and data registers
    20fc:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	11 c0       	rjmp	.+34     	; 0x2128 <baud_menu+0x1e8>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_57600);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("7")) == 0)
    2106:	c8 01       	movw	r24, r16
    2108:	64 ed       	ldi	r22, 0xD4	; 212
    210a:	72 e0       	ldi	r23, 0x02	; 2
    210c:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    2110:	89 2b       	or	r24, r25
    2112:	99 f4       	brne	.+38     	; 0x213a <baud_menu+0x1fa>
		{
			uart_puts_p(PSTR("\nGoing to 115200bps...\n"));
    2114:	8c eb       	ldi	r24, 0xBC	; 188
    2116:	92 e0       	ldi	r25, 0x02	; 2
    2118:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    211c:	f9 99       	sbic	0x1f, 1	; 31
    211e:	fe cf       	rjmp	.-4      	; 0x211c <baud_menu+0x1dc>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2120:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2126:	83 e0       	ldi	r24, 0x03	; 3
    2128:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    212a:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    212c:	f9 9a       	sbi	0x1f, 1	; 31
		{
			uart_puts_p(PSTR("\nGoing to 115200bps...\n"));

			//Set baud rate to 115200
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_115200);
			record_config_file(); //Put this new setting into the config file
    212e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <record_config_file>
			blink_error(ERROR_NEW_BAUD);
    2132:	85 e0       	ldi	r24, 0x05	; 5
    2134:	0e 94 16 07 	call	0xe2c	; 0xe2c <blink_error>
    2138:	0c c0       	rjmp	.+24     	; 0x2152 <baud_menu+0x212>
			return;
		}
		if(strcmp_P(command, PSTR("x")) == 0)
    213a:	c8 01       	movw	r24, r16
    213c:	6a eb       	ldi	r22, 0xBA	; 186
    213e:	72 e0       	ldi	r23, 0x02	; 2
    2140:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    2144:	89 2b       	or	r24, r25
    2146:	09 f0       	breq	.+2      	; 0x214a <baud_menu+0x20a>
    2148:	0f cf       	rjmp	.-482    	; 0x1f68 <baud_menu+0x28>
		{
			uart_puts_p(PSTR("\nExiting\n"));
    214a:	80 eb       	ldi	r24, 0xB0	; 176
    214c:	92 e0       	ldi	r25, 0x02	; 2
    214e:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
			//Do nothing, just exit
			return;
		}
	}
}
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	1f 91       	pop	r17
    2162:	0f 91       	pop	r16
    2164:	ff 90       	pop	r15
    2166:	08 95       	ret

00002168 <command_shell>:
}
#endif


void command_shell(void)
{
    2168:	2f 92       	push	r2
    216a:	3f 92       	push	r3
    216c:	4f 92       	push	r4
    216e:	5f 92       	push	r5
    2170:	6f 92       	push	r6
    2172:	7f 92       	push	r7
    2174:	8f 92       	push	r8
    2176:	9f 92       	push	r9
    2178:	af 92       	push	r10
    217a:	bf 92       	push	r11
    217c:	cf 92       	push	r12
    217e:	df 92       	push	r13
    2180:	ef 92       	push	r14
    2182:	ff 92       	push	r15
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	c3 57       	subi	r28, 0x73	; 115
    2192:	d0 40       	sbci	r29, 0x00	; 0
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
		//print prompt
		uart_putc('>');

		//read command
		char* command = buffer;
		if(read_line(command, sizeof(buffer)) < 1)
    219e:	1e e0       	ldi	r17, 0x0E	; 14
    21a0:	41 2e       	mov	r4, r17
    21a2:	51 2c       	mov	r5, r1
    21a4:	4c 0e       	add	r4, r28
    21a6:	5d 1e       	adc	r5, r29
			command_arg = get_cmd_arg(1);
			if(command_arg == 0)
				continue;

			struct fat_dir_entry_struct dir_entry;
			if(!fat_create_dir(dd, command_arg, &dir_entry))
    21a8:	b3 e4       	ldi	r27, 0x43	; 67
    21aa:	6b 2e       	mov	r6, r27
    21ac:	71 2c       	mov	r7, r1
    21ae:	6c 0e       	add	r6, r28
    21b0:	7d 1e       	adc	r7, r29

			/* print file contents */
			uint8_t buffer[8];
			uint32_t offset = 0;
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
    21b2:	a6 e0       	ldi	r26, 0x06	; 6
    21b4:	2a 2e       	mov	r2, r26
    21b6:	31 2c       	mov	r3, r1
    21b8:	2c 0e       	add	r2, r28
    21ba:	3d 1e       	adc	r3, r29
	uint8_t tmp_var;

	while(1)
	{
		//print prompt
		uart_putc('>');
    21bc:	8e e3       	ldi	r24, 0x3E	; 62
    21be:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>

		//read command
		char* command = buffer;
		if(read_line(command, sizeof(buffer)) < 1)
    21c2:	c2 01       	movw	r24, r4
    21c4:	68 e1       	ldi	r22, 0x18	; 24
    21c6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <read_line>
    21ca:	88 23       	and	r24, r24
    21cc:	b9 f3       	breq	.-18     	; 0x21bc <command_shell+0x54>
			continue;

		//Argument 1: The actual command
		char* command_arg = get_cmd_arg(0);
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    21d4:	8c 01       	movw	r16, r24

		//execute command
		if(strcmp_P(command_arg, PSTR("init")) == 0)
    21d6:	63 e4       	ldi	r22, 0x43	; 67
    21d8:	7b e0       	ldi	r23, 0x0B	; 11
    21da:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    21de:	89 2b       	or	r24, r25
    21e0:	a9 f4       	brne	.+42     	; 0x220c <command_shell+0xa4>
		{
			uart_puts_p(PSTR("Closing down file system\n"));
    21e2:	89 e2       	ldi	r24, 0x29	; 41
    21e4:	9b e0       	ldi	r25, 0x0B	; 11
    21e6:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>

			/* close file system */
			fat_close(fs);
    21ea:	80 91 ba 04 	lds	r24, 0x04BA
    21ee:	90 91 bb 04 	lds	r25, 0x04BB
    21f2:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <fat_close>

			/* close partition */
			partition_close(partition);
    21f6:	80 91 c3 04 	lds	r24, 0x04C3
    21fa:	90 91 c4 04 	lds	r25, 0x04C4
    21fe:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <partition_close>

			//Setup SPI, init SD card, etc
			init_media();
    2202:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <init_media>

			uart_puts_p(PSTR("File system initialized\n"));
    2206:	80 e1       	ldi	r24, 0x10	; 16
    2208:	9b e0       	ldi	r25, 0x0B	; 11
    220a:	24 c4       	rjmp	.+2120   	; 0x2a54 <command_shell+0x8ec>
		}
		else if(strcmp_P(command_arg, PSTR("?")) == 0)
    220c:	c8 01       	movw	r24, r16
    220e:	6e e0       	ldi	r22, 0x0E	; 14
    2210:	7b e0       	ldi	r23, 0x0B	; 11
    2212:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    2216:	89 2b       	or	r24, r25
    2218:	39 f0       	breq	.+14     	; 0x2228 <command_shell+0xc0>
		{
			//Print available commands
			print_menu();
		}
		else if(strcmp_P(command_arg, PSTR("help")) == 0)
    221a:	c8 01       	movw	r24, r16
    221c:	69 e0       	ldi	r22, 0x09	; 9
    221e:	7b e0       	ldi	r23, 0x0B	; 11
    2220:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    2224:	89 2b       	or	r24, r25
    2226:	19 f4       	brne	.+6      	; 0x222e <command_shell+0xc6>
		{
			//Print available commands
			print_menu();
    2228:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <print_menu>
    222c:	c7 cf       	rjmp	.-114    	; 0x21bc <command_shell+0x54>
		}
		else if(strcmp_P(command_arg, PSTR("baud")) == 0)
    222e:	c8 01       	movw	r24, r16
    2230:	64 e0       	ldi	r22, 0x04	; 4
    2232:	7b e0       	ldi	r23, 0x0B	; 11
    2234:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    2238:	89 2b       	or	r24, r25
    223a:	19 f4       	brne	.+6      	; 0x2242 <command_shell+0xda>
		{
			//Go into baud select menu
			baud_menu();
    223c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <baud_menu>
    2240:	bd cf       	rjmp	.-134    	; 0x21bc <command_shell+0x54>
		}
		else if(strcmp_P(command_arg, PSTR("set")) == 0)
    2242:	c8 01       	movw	r24, r16
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	7b e0       	ldi	r23, 0x0B	; 11
    2248:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    224c:	89 2b       	or	r24, r25
    224e:	19 f4       	brne	.+6      	; 0x2256 <command_shell+0xee>
		{
			//Go into system setting menu
			system_menu();
    2250:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <system_menu>
    2254:	b3 cf       	rjmp	.-154    	; 0x21bc <command_shell+0x54>
		{
			//Go into system setting menu
			create_lots_of_files();
		}
		#endif
		else if(strncmp_P(command_arg, PSTR("cd"), 2) == 0)
    2256:	c8 01       	movw	r24, r16
    2258:	6d ef       	ldi	r22, 0xFD	; 253
    225a:	7a e0       	ldi	r23, 0x0A	; 10
    225c:	42 e0       	ldi	r20, 0x02	; 2
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <strncmp_P>
    2264:	89 2b       	or	r24, r25
    2266:	c1 f5       	brne	.+112    	; 0x22d8 <command_shell+0x170>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    2268:	82 e0       	ldi	r24, 0x02	; 2
    226a:	b2 01       	movw	r22, r4
    226c:	0e 94 2d 08 	call	0x105a	; 0x105a <too_many_arguments_error>
    2270:	88 23       	and	r24, r24
    2272:	09 f0       	breq	.+2      	; 0x2276 <command_shell+0x10e>
    2274:	a3 cf       	rjmp	.-186    	; 0x21bc <command_shell+0x54>
				continue;

			//Argument 2: Directory name
			command_arg = get_cmd_arg(1);
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    227c:	7c 01       	movw	r14, r24
			if(command_arg == 0)
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	09 f4       	brne	.+2      	; 0x2284 <command_shell+0x11c>
    2282:	9c cf       	rjmp	.-200    	; 0x21bc <command_shell+0x54>
				continue;

			//change directory, do not use wildcards
			struct fat_dir_entry_struct subdir_entry;
			if(find_file_in_dir(fs, dd, command_arg, &subdir_entry, 0))
    2284:	60 91 c5 08 	lds	r22, 0x08C5
    2288:	70 91 c6 08 	lds	r23, 0x08C6
    228c:	80 91 ba 04 	lds	r24, 0x04BA
    2290:	90 91 bb 04 	lds	r25, 0x04BB
    2294:	a7 01       	movw	r20, r14
    2296:	93 01       	movw	r18, r6
    2298:	00 e0       	ldi	r16, 0x00	; 0
    229a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <find_file_in_dir>
    229e:	88 23       	and	r24, r24
    22a0:	a9 f0       	breq	.+42     	; 0x22cc <command_shell+0x164>
			{
				struct fat_dir_struct* dd_new = fat_open_dir(fs, &subdir_entry);
    22a2:	80 91 ba 04 	lds	r24, 0x04BA
    22a6:	90 91 bb 04 	lds	r25, 0x04BB
    22aa:	b3 01       	movw	r22, r6
    22ac:	0e 94 d4 41 	call	0x83a8	; 0x83a8 <fat_open_dir>
    22b0:	8c 01       	movw	r16, r24
				if(dd_new)
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	59 f0       	breq	.+22     	; 0x22cc <command_shell+0x164>
				{
					fat_close_dir(dd);
    22b6:	80 91 c5 08 	lds	r24, 0x08C5
    22ba:	90 91 c6 08 	lds	r25, 0x08C6
    22be:	0e 94 6d 29 	call	0x52da	; 0x52da <fat_close_dir>
					dd = dd_new;
    22c2:	10 93 c6 08 	sts	0x08C6, r17
    22c6:	00 93 c5 08 	sts	0x08C5, r16
    22ca:	78 cf       	rjmp	.-272    	; 0x21bc <command_shell+0x54>
					continue;
				}
			}

			uart_puts_p(PSTR("directory not found: "));
    22cc:	87 ee       	ldi	r24, 0xE7	; 231
    22ce:	9a e0       	ldi	r25, 0x0A	; 10
    22d0:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
			uart_puts(command_arg);
    22d4:	c7 01       	movw	r24, r14
    22d6:	c6 c3       	rjmp	.+1932   	; 0x2a64 <command_shell+0x8fc>
			uart_putc('\n');
		}
		else if(strcmp_P(command_arg, PSTR("ls")) == 0)
    22d8:	c8 01       	movw	r24, r16
    22da:	64 ee       	ldi	r22, 0xE4	; 228
    22dc:	7a e0       	ldi	r23, 0x0A	; 10
    22de:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    22e2:	89 2b       	or	r24, r25
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <command_shell+0x180>
    22e6:	44 c0       	rjmp	.+136    	; 0x2370 <command_shell+0x208>
		{
			//Argument 2: wild card search
			command_arg = get_cmd_arg(1);
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    22ee:	7c 01       	movw	r14, r24

				//If no arguments list all files, otherwise we only list the files
				//being matched by the wildcard search
				if (tmp_var)
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
    22f0:	f4 e2       	ldi	r31, 0x24	; 36
    22f2:	df 2e       	mov	r13, r31
    22f4:	33 c0       	rjmp	.+102    	; 0x235c <command_shell+0x1f4>
			struct fat_dir_entry_struct dir_entry;
			while(fat_read_dir(dd, &dir_entry))
			{
				//Check if we are to do a wild card search
				tmp_var = (command_arg == 0);
				if(command_arg != 0)
    22f6:	e1 14       	cp	r14, r1
    22f8:	f1 04       	cpc	r15, r1
    22fa:	31 f0       	breq	.+12     	; 0x2308 <command_shell+0x1a0>
					if (wildcmp(command_arg, dir_entry.long_name))
    22fc:	c7 01       	movw	r24, r14
    22fe:	b3 01       	movw	r22, r6
    2300:	0e 94 a3 07 	call	0xf46	; 0xf46 <wildcmp>
    2304:	88 23       	and	r24, r24
    2306:	51 f1       	breq	.+84     	; 0x235c <command_shell+0x1f4>

				//If no arguments list all files, otherwise we only list the files
				//being matched by the wildcard search
				if (tmp_var)
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
    2308:	d3 01       	movw	r26, r6
    230a:	0d 90       	ld	r0, X+
    230c:	00 20       	and	r0, r0
    230e:	e9 f7       	brne	.-6      	; 0x230a <command_shell+0x1a2>
    2310:	8d 01       	movw	r16, r26
    2312:	01 50       	subi	r16, 0x01	; 1
    2314:	10 40       	sbci	r17, 0x00	; 0
    2316:	06 19       	sub	r16, r6
    2318:	17 09       	sbc	r17, r7

					uart_puts(dir_entry.long_name);
    231a:	c3 01       	movw	r24, r6
    231c:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
					uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
    2320:	f3 01       	movw	r30, r6
    2322:	80 a1       	ldd	r24, Z+32	; 0x20
    2324:	84 fd       	sbrc	r24, 4
    2326:	02 c0       	rjmp	.+4      	; 0x232c <command_shell+0x1c4>
    2328:	80 e2       	ldi	r24, 0x20	; 32
    232a:	01 c0       	rjmp	.+2      	; 0x232e <command_shell+0x1c6>
    232c:	8f e2       	ldi	r24, 0x2F	; 47

				//If no arguments list all files, otherwise we only list the files
				//being matched by the wildcard search
				if (tmp_var)
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
    232e:	1d 2d       	mov	r17, r13
    2330:	10 1b       	sub	r17, r16

					uart_puts(dir_entry.long_name);
					uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
    2332:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    2336:	04 c0       	rjmp	.+8      	; 0x2340 <command_shell+0x1d8>
					while(spaces--)
						uart_putc(' ');
    2338:	80 e2       	ldi	r24, 0x20	; 32
    233a:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    233e:	11 50       	subi	r17, 0x01	; 1
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;

					uart_puts(dir_entry.long_name);
					uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
					while(spaces--)
    2340:	11 23       	and	r17, r17
    2342:	d1 f7       	brne	.-12     	; 0x2338 <command_shell+0x1d0>
						uart_putc(' ');
					uart_putdw_dec(dir_entry.file_size);
    2344:	d3 01       	movw	r26, r6
    2346:	95 96       	adiw	r26, 0x25	; 37
    2348:	6d 91       	ld	r22, X+
    234a:	7d 91       	ld	r23, X+
    234c:	8d 91       	ld	r24, X+
    234e:	9c 91       	ld	r25, X
    2350:	98 97       	sbiw	r26, 0x28	; 40
    2352:	0e 94 a3 43 	call	0x8746	; 0x8746 <uart_putdw_dec>
					uart_putc('\n');
    2356:	8a e0       	ldi	r24, 0x0A	; 10
    2358:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
			//Argument 2: wild card search
			command_arg = get_cmd_arg(1);

			/* print directory listing */
			struct fat_dir_entry_struct dir_entry;
			while(fat_read_dir(dd, &dir_entry))
    235c:	80 91 c5 08 	lds	r24, 0x08C5
    2360:	90 91 c6 08 	lds	r25, 0x08C6
    2364:	b3 01       	movw	r22, r6
    2366:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <fat_read_dir>
    236a:	88 23       	and	r24, r24
    236c:	21 f6       	brne	.-120    	; 0x22f6 <command_shell+0x18e>
    236e:	26 cf       	rjmp	.-436    	; 0x21bc <command_shell+0x54>
					uart_putdw_dec(dir_entry.file_size);
					uart_putc('\n');
				}
			}
		}
		else if(strncmp_P(command_arg, PSTR("cat"), 3) == 0)
    2370:	c8 01       	movw	r24, r16
    2372:	60 ee       	ldi	r22, 0xE0	; 224
    2374:	7a e0       	ldi	r23, 0x0A	; 10
    2376:	43 e0       	ldi	r20, 0x03	; 3
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <strncmp_P>
    237e:	89 2b       	or	r24, r25
    2380:	09 f0       	breq	.+2      	; 0x2384 <command_shell+0x21c>
    2382:	4d c0       	rjmp	.+154    	; 0x241e <command_shell+0x2b6>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    2384:	82 e0       	ldi	r24, 0x02	; 2
    2386:	b2 01       	movw	r22, r4
    2388:	0e 94 2d 08 	call	0x105a	; 0x105a <too_many_arguments_error>
    238c:	88 23       	and	r24, r24
    238e:	09 f0       	breq	.+2      	; 0x2392 <command_shell+0x22a>
    2390:	15 cf       	rjmp	.-470    	; 0x21bc <command_shell+0x54>
				continue;

			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    2398:	8c 01       	movw	r16, r24
			if(command_arg == 0)
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	09 f4       	brne	.+2      	; 0x23a0 <command_shell+0x238>
    239e:	0e cf       	rjmp	.-484    	; 0x21bc <command_shell+0x54>
				continue;

			/* search file in current directory and open it */
			struct fat_file_struct* fd = open_file_in_dir(fs, dd, command_arg);
    23a0:	60 91 c5 08 	lds	r22, 0x08C5
    23a4:	70 91 c6 08 	lds	r23, 0x08C6
    23a8:	80 91 ba 04 	lds	r24, 0x04BA
    23ac:	90 91 bb 04 	lds	r25, 0x04BB
    23b0:	a8 01       	movw	r20, r16
    23b2:	0e 94 09 0a 	call	0x1412	; 0x1412 <open_file_in_dir>
    23b6:	5c 01       	movw	r10, r24
			if(!fd)
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	21 f0       	breq	.+8      	; 0x23c4 <command_shell+0x25c>
    23bc:	cc 24       	eor	r12, r12
    23be:	dd 24       	eor	r13, r13
    23c0:	76 01       	movw	r14, r12
    23c2:	22 c0       	rjmp	.+68     	; 0x2408 <command_shell+0x2a0>
			{
				uart_puts_p(PSTR("error opening "));
    23c4:	81 ed       	ldi	r24, 0xD1	; 209
    23c6:	9a e0       	ldi	r25, 0x0A	; 10
    23c8:	4a c3       	rjmp	.+1684   	; 0x2a5e <command_shell+0x8f6>
			uint8_t buffer[8];
			uint32_t offset = 0;
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
			{
				uart_putdw_hex(offset);
    23ca:	c7 01       	movw	r24, r14
    23cc:	b6 01       	movw	r22, r12
    23ce:	0e 94 52 43 	call	0x86a4	; 0x86a4 <uart_putdw_hex>
				uart_putc(':');
    23d2:	8a e3       	ldi	r24, 0x3A	; 58
    23d4:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    23d8:	81 01       	movw	r16, r2
				for(uint8_t i = 0; i < len; ++i)
				{
					uart_putc(' ');
    23da:	80 e2       	ldi	r24, 0x20	; 32
    23dc:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
					uart_putc_hex(buffer[i]);
    23e0:	f8 01       	movw	r30, r16
    23e2:	81 91       	ld	r24, Z+
    23e4:	8f 01       	movw	r16, r30
    23e6:	0e 94 2c 43 	call	0x8658	; 0x8658 <uart_putc_hex>
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
			{
				uart_putdw_hex(offset);
				uart_putc(':');
				for(uint8_t i = 0; i < len; ++i)
    23ea:	80 2f       	mov	r24, r16
    23ec:	82 19       	sub	r24, r2
    23ee:	89 15       	cp	r24, r9
    23f0:	a0 f3       	brcs	.-24     	; 0x23da <command_shell+0x272>
				{
					uart_putc(' ');
					uart_putc_hex(buffer[i]);
				}
				uart_putc('\n');
    23f2:	8a e0       	ldi	r24, 0x0A	; 10
    23f4:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
				offset += 8;
    23f8:	88 e0       	ldi	r24, 0x08	; 8
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a0 e0       	ldi	r26, 0x00	; 0
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	c8 0e       	add	r12, r24
    2402:	d9 1e       	adc	r13, r25
    2404:	ea 1e       	adc	r14, r26
    2406:	fb 1e       	adc	r15, r27

			/* print file contents */
			uint8_t buffer[8];
			uint32_t offset = 0;
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
    2408:	c5 01       	movw	r24, r10
    240a:	b1 01       	movw	r22, r2
    240c:	48 e0       	ldi	r20, 0x08	; 8
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <fat_read_file>
    2414:	98 2e       	mov	r9, r24
    2416:	88 23       	and	r24, r24
    2418:	c1 f6       	brne	.-80     	; 0x23ca <command_shell+0x262>
				}
				uart_putc('\n');
				offset += 8;
			}

			fat_close_file(fd);
    241a:	c5 01       	movw	r24, r10
    241c:	7d c0       	rjmp	.+250    	; 0x2518 <command_shell+0x3b0>
		}
		else if(strncmp_P(command_arg, PSTR("read"), 4) == 0)
    241e:	c8 01       	movw	r24, r16
    2420:	6c ec       	ldi	r22, 0xCC	; 204
    2422:	7a e0       	ldi	r23, 0x0A	; 10
    2424:	44 e0       	ldi	r20, 0x04	; 4
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <strncmp_P>
    242c:	89 2b       	or	r24, r25
    242e:	09 f0       	breq	.+2      	; 0x2432 <command_shell+0x2ca>
    2430:	e2 c0       	rjmp	.+452    	; 0x25f6 <command_shell+0x48e>
		{
			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    2438:	8c 01       	movw	r16, r24
			if(command_arg == 0)
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	09 f4       	brne	.+2      	; 0x2440 <command_shell+0x2d8>
    243e:	be ce       	rjmp	.-644    	; 0x21bc <command_shell+0x54>
				continue;

			/* search file in current directory and open it */
			struct fat_file_struct* fd = open_file_in_dir(fs, dd, command_arg);
    2440:	60 91 c5 08 	lds	r22, 0x08C5
    2444:	70 91 c6 08 	lds	r23, 0x08C6
    2448:	80 91 ba 04 	lds	r24, 0x04BA
    244c:	90 91 bb 04 	lds	r25, 0x04BB
    2450:	a8 01       	movw	r20, r16
    2452:	0e 94 09 0a 	call	0x1412	; 0x1412 <open_file_in_dir>
    2456:	4c 01       	movw	r8, r24
			if(!fd)
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	19 f4       	brne	.+6      	; 0x2462 <command_shell+0x2fa>
			{
				uart_puts_p(PSTR("error opening "));
    245c:	8d eb       	ldi	r24, 0xBD	; 189
    245e:	9a e0       	ldi	r25, 0x0A	; 10
    2460:	fe c2       	rjmp	.+1532   	; 0x2a5e <command_shell+0x8f6>
				uart_putc('\n');
				continue;
			}

			//Argument 3: File seek position
			if ((command_arg = get_cmd_arg(2)) != 0)
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    2468:	ac 01       	movw	r20, r24
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	09 f4       	brne	.+2      	; 0x2470 <command_shell+0x308>
    246e:	57 c0       	rjmp	.+174    	; 0x251e <command_shell+0x3b6>
			{
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
    2470:	fc 01       	movw	r30, r24
    2472:	01 90       	ld	r0, Z+
    2474:	00 20       	and	r0, r0
    2476:	e9 f7       	brne	.-6      	; 0x2472 <command_shell+0x30a>
    2478:	31 97       	sbiw	r30, 0x01	; 1
    247a:	e8 1b       	sub	r30, r24
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    2480:	6e 2f       	mov	r22, r30
    2482:	70 e0       	ldi	r23, 0x00	; 0
    2484:	0b c0       	rjmp	.+22     	; 0x249c <command_shell+0x334>
		if (!isdigit(buffer[i]))
    2486:	fa 01       	movw	r30, r20
    2488:	e2 0f       	add	r30, r18
    248a:	f3 1f       	adc	r31, r19
    248c:	80 81       	ld	r24, Z
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	c0 97       	sbiw	r24, 0x30	; 48
    2492:	0a 97       	sbiw	r24, 0x0a	; 10
    2494:	08 f0       	brcs	.+2      	; 0x2498 <command_shell+0x330>
    2496:	43 c0       	rjmp	.+134    	; 0x251e <command_shell+0x3b6>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    2498:	2f 5f       	subi	r18, 0xFF	; 255
    249a:	3f 4f       	sbci	r19, 0xFF	; 255
    249c:	26 17       	cp	r18, r22
    249e:	37 07       	cpc	r19, r23
    24a0:	94 f3       	brlt	.-28     	; 0x2486 <command_shell+0x31e>
    24a2:	8a 01       	movw	r16, r20
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	17 c0       	rjmp	.+46     	; 0x24dc <command_shell+0x374>

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
        l = l * 10 + (*str++ - '0');
    24ae:	ca 01       	movw	r24, r20
    24b0:	b9 01       	movw	r22, r18
    24b2:	2a e0       	ldi	r18, 0x0A	; 10
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    24be:	9b 01       	movw	r18, r22
    24c0:	ac 01       	movw	r20, r24
    24c2:	8f 2d       	mov	r24, r15
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	c0 97       	sbiw	r24, 0x30	; 48
    24c8:	aa 27       	eor	r26, r26
    24ca:	97 fd       	sbrc	r25, 7
    24cc:	a0 95       	com	r26
    24ce:	ba 2f       	mov	r27, r26
    24d0:	28 0f       	add	r18, r24
    24d2:	39 1f       	adc	r19, r25
    24d4:	4a 1f       	adc	r20, r26
    24d6:	5b 1f       	adc	r21, r27
    24d8:	0f 5f       	subi	r16, 0xFF	; 255
    24da:	1f 4f       	sbci	r17, 0xFF	; 255
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    24dc:	d8 01       	movw	r26, r16
    24de:	fc 90       	ld	r15, X
    24e0:	8f 2d       	mov	r24, r15
    24e2:	80 53       	subi	r24, 0x30	; 48
    24e4:	8a 30       	cpi	r24, 0x0A	; 10
    24e6:	18 f3       	brcs	.-58     	; 0x24ae <command_shell+0x346>
			//Argument 3: File seek position
			if ((command_arg = get_cmd_arg(2)) != 0)
			{
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
				{
					int32_t offset = strtolong(command_arg);
    24e8:	2a 83       	std	Y+2, r18	; 0x02
    24ea:	3b 83       	std	Y+3, r19	; 0x03
    24ec:	4c 83       	std	Y+4, r20	; 0x04
    24ee:	5d 83       	std	Y+5, r21	; 0x05
					if(!fat_seek_file(fd, &offset, FAT_SEEK_SET))
    24f0:	c4 01       	movw	r24, r8
    24f2:	be 01       	movw	r22, r28
    24f4:	6e 5f       	subi	r22, 0xFE	; 254
    24f6:	7f 4f       	sbci	r23, 0xFF	; 255
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	0e 94 9f 3d 	call	0x7b3e	; 0x7b3e <fat_seek_file>
    24fe:	88 23       	and	r24, r24
    2500:	71 f4       	brne	.+28     	; 0x251e <command_shell+0x3b6>
					{
						uart_puts_p(PSTR("error seeking on "));
    2502:	8b ea       	ldi	r24, 0xAB	; 171
    2504:	9a e0       	ldi	r25, 0x0A	; 10
    2506:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
						uart_puts(command);
    250a:	c2 01       	movw	r24, r4
    250c:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
						uart_putc('\n');
    2510:	8a e0       	ldi	r24, 0x0A	; 10
    2512:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>

						fat_close_file(fd);
    2516:	c4 01       	movw	r24, r8
    2518:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fat_close_file>
    251c:	4f ce       	rjmp	.-866    	; 0x21bc <command_shell+0x54>
				}
			}

			//Argument 4: How much data (number of characters) to read from file
			uint32_t chunk_to_read = (uint32_t)-1;
			if ((command_arg = get_cmd_arg(3)) != 0)
    251e:	83 e0       	ldi	r24, 0x03	; 3
    2520:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    2524:	ac 01       	movw	r20, r24
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	e1 f1       	breq	.+120    	; 0x25a2 <command_shell+0x43a>
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
    252a:	fc 01       	movw	r30, r24
    252c:	01 90       	ld	r0, Z+
    252e:	00 20       	and	r0, r0
    2530:	e9 f7       	brne	.-6      	; 0x252c <command_shell+0x3c4>
    2532:	31 97       	sbiw	r30, 0x01	; 1
    2534:	e8 1b       	sub	r30, r24
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    253a:	6e 2f       	mov	r22, r30
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	0a c0       	rjmp	.+20     	; 0x2554 <command_shell+0x3ec>
		if (!isdigit(buffer[i]))
    2540:	fa 01       	movw	r30, r20
    2542:	e2 0f       	add	r30, r18
    2544:	f3 1f       	adc	r31, r19
    2546:	80 81       	ld	r24, Z
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	c0 97       	sbiw	r24, 0x30	; 48
    254c:	0a 97       	sbiw	r24, 0x0a	; 10
    254e:	48 f5       	brcc	.+82     	; 0x25a2 <command_shell+0x43a>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    2550:	2f 5f       	subi	r18, 0xFF	; 255
    2552:	3f 4f       	sbci	r19, 0xFF	; 255
    2554:	26 17       	cp	r18, r22
    2556:	37 07       	cpc	r19, r23
    2558:	9c f3       	brlt	.-26     	; 0x2540 <command_shell+0x3d8>
    255a:	6a 01       	movw	r12, r20
    255c:	ee 24       	eor	r14, r14
    255e:	ff 24       	eor	r15, r15
    2560:	87 01       	movw	r16, r14
    2562:	18 c0       	rjmp	.+48     	; 0x2594 <command_shell+0x42c>

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
        l = l * 10 + (*str++ - '0');
    2564:	c8 01       	movw	r24, r16
    2566:	b7 01       	movw	r22, r14
    2568:	2a e0       	ldi	r18, 0x0A	; 10
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    2574:	7b 01       	movw	r14, r22
    2576:	8c 01       	movw	r16, r24
    2578:	8b 2d       	mov	r24, r11
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	c0 97       	sbiw	r24, 0x30	; 48
    257e:	aa 27       	eor	r26, r26
    2580:	97 fd       	sbrc	r25, 7
    2582:	a0 95       	com	r26
    2584:	ba 2f       	mov	r27, r26
    2586:	e8 0e       	add	r14, r24
    2588:	f9 1e       	adc	r15, r25
    258a:	0a 1f       	adc	r16, r26
    258c:	1b 1f       	adc	r17, r27
    258e:	08 94       	sec
    2590:	c1 1c       	adc	r12, r1
    2592:	d1 1c       	adc	r13, r1
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    2594:	f6 01       	movw	r30, r12
    2596:	b0 80       	ld	r11, Z
    2598:	8b 2d       	mov	r24, r11
    259a:	80 53       	subi	r24, 0x30	; 48
    259c:	8a 30       	cpi	r24, 0x0A	; 10
    259e:	10 f3       	brcs	.-60     	; 0x2564 <command_shell+0x3fc>
    25a0:	18 c0       	rjmp	.+48     	; 0x25d2 <command_shell+0x46a>
    25a2:	ee 24       	eor	r14, r14
    25a4:	ea 94       	dec	r14
    25a6:	fe 2c       	mov	r15, r14
    25a8:	87 01       	movw	r16, r14
    25aa:	13 c0       	rjmp	.+38     	; 0x25d2 <command_shell+0x46a>

			/* print file contents */
			uint8_t buffer;
			while((fat_read_file(fd, &buffer, 1) > 0) && (chunk_to_read > 0))
			{
				if( buffer >= ' ' && buffer < 127 )
    25ac:	99 81       	ldd	r25, Y+1	; 0x01
    25ae:	89 2f       	mov	r24, r25
    25b0:	80 52       	subi	r24, 0x20	; 32
    25b2:	8f 35       	cpi	r24, 0x5F	; 95
    25b4:	10 f4       	brcc	.+4      	; 0x25ba <command_shell+0x452>
					uart_putc(buffer);
    25b6:	89 2f       	mov	r24, r25
    25b8:	05 c0       	rjmp	.+10     	; 0x25c4 <command_shell+0x45c>
				else if (buffer == '\n' )
    25ba:	9a 30       	cpi	r25, 0x0A	; 10
    25bc:	11 f4       	brne	.+4      	; 0x25c2 <command_shell+0x45a>
					uart_putc(buffer);
    25be:	8a e0       	ldi	r24, 0x0A	; 10
    25c0:	01 c0       	rjmp	.+2      	; 0x25c4 <command_shell+0x45c>
				else
					uart_putc('.');
    25c2:	8e e2       	ldi	r24, 0x2E	; 46
    25c4:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>

				chunk_to_read--;
    25c8:	08 94       	sec
    25ca:	e1 08       	sbc	r14, r1
    25cc:	f1 08       	sbc	r15, r1
    25ce:	01 09       	sbc	r16, r1
    25d0:	11 09       	sbc	r17, r1
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
					chunk_to_read = strtolong(command_arg);

			/* print file contents */
			uint8_t buffer;
			while((fat_read_file(fd, &buffer, 1) > 0) && (chunk_to_read > 0))
    25d2:	c4 01       	movw	r24, r8
    25d4:	be 01       	movw	r22, r28
    25d6:	6f 5f       	subi	r22, 0xFF	; 255
    25d8:	7f 4f       	sbci	r23, 0xFF	; 255
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <fat_read_file>
    25e2:	18 16       	cp	r1, r24
    25e4:	19 06       	cpc	r1, r25
    25e6:	0c f0       	brlt	.+2      	; 0x25ea <command_shell+0x482>
    25e8:	93 cf       	rjmp	.-218    	; 0x2510 <command_shell+0x3a8>
    25ea:	e1 14       	cp	r14, r1
    25ec:	f1 04       	cpc	r15, r1
    25ee:	01 05       	cpc	r16, r1
    25f0:	11 05       	cpc	r17, r1
    25f2:	e1 f6       	brne	.-72     	; 0x25ac <command_shell+0x444>
    25f4:	8d cf       	rjmp	.-230    	; 0x2510 <command_shell+0x3a8>
				chunk_to_read--;
			}
			uart_putc('\n');
			fat_close_file(fd);
		}
		else if(strcmp_P(command_arg, PSTR("disk")) == 0)
    25f6:	c8 01       	movw	r24, r16
    25f8:	66 ea       	ldi	r22, 0xA6	; 166
    25fa:	7a e0       	ldi	r23, 0x0A	; 10
    25fc:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    2600:	89 2b       	or	r24, r25
    2602:	09 f0       	breq	.+2      	; 0x2606 <command_shell+0x49e>
    2604:	b4 c0       	rjmp	.+360    	; 0x276e <command_shell+0x606>
		{
			if(!print_disk_info(fs))
    2606:	e0 90 ba 04 	lds	r14, 0x04BA
    260a:	f0 90 bb 04 	lds	r15, 0x04BB
	return fat_open_file(fs, &file_entry);
}

uint8_t print_disk_info(const struct fat_fs_struct* fs)
{
    if(!fs)
    260e:	e1 14       	cp	r14, r1
    2610:	f1 04       	cpc	r15, r1
    2612:	09 f4       	brne	.+2      	; 0x2616 <command_shell+0x4ae>
    2614:	a9 c0       	rjmp	.+338    	; 0x2768 <command_shell+0x600>
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
    2616:	ce 01       	movw	r24, r28
    2618:	86 96       	adiw	r24, 0x26	; 38
    261a:	0e 94 24 18 	call	0x3048	; 0x3048 <sd_raw_get_info>
    261e:	88 23       	and	r24, r24
    2620:	09 f4       	brne	.+2      	; 0x2624 <command_shell+0x4bc>
    2622:	a2 c0       	rjmp	.+324    	; 0x2768 <command_shell+0x600>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
    2624:	88 ea       	ldi	r24, 0xA8	; 168
    2626:	9b e0       	ldi	r25, 0x0B	; 11
    2628:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    262c:	8e a1       	ldd	r24, Y+38	; 0x26
    262e:	0e 94 2c 43 	call	0x8658	; 0x8658 <uart_putc_hex>
    2632:	8a e0       	ldi	r24, 0x0A	; 10
    2634:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
    2638:	8f e9       	ldi	r24, 0x9F	; 159
    263a:	9b e0       	ldi	r25, 0x0B	; 11
    263c:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    2640:	ce 01       	movw	r24, r28
    2642:	87 96       	adiw	r24, 0x27	; 39
    2644:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
    2648:	8a e0       	ldi	r24, 0x0A	; 10
    264a:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
    264e:	86 e9       	ldi	r24, 0x96	; 150
    2650:	9b e0       	ldi	r25, 0x0B	; 11
    2652:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    2656:	ce 01       	movw	r24, r28
    2658:	8a 96       	adiw	r24, 0x2a	; 42
    265a:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
    265e:	8a e0       	ldi	r24, 0x0A	; 10
    2660:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
    2664:	8d e8       	ldi	r24, 0x8D	; 141
    2666:	9b e0       	ldi	r25, 0x0B	; 11
    2668:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    266c:	88 a9       	ldd	r24, Y+48	; 0x30
    266e:	0e 94 2c 43 	call	0x8658	; 0x8658 <uart_putc_hex>
    2672:	8a e0       	ldi	r24, 0x0A	; 10
    2674:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
    2678:	82 e8       	ldi	r24, 0x82	; 130
    267a:	9b e0       	ldi	r25, 0x0B	; 11
    267c:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    2680:	69 a9       	ldd	r22, Y+49	; 0x31
    2682:	7a a9       	ldd	r23, Y+50	; 0x32
    2684:	8b a9       	ldd	r24, Y+51	; 0x33
    2686:	9c a9       	ldd	r25, Y+52	; 0x34
    2688:	0e 94 52 43 	call	0x86a4	; 0x86a4 <uart_putdw_hex>
    268c:	8a e0       	ldi	r24, 0x0A	; 10
    268e:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
    2692:	89 e7       	ldi	r24, 0x79	; 121
    2694:	9b e0       	ldi	r25, 0x0B	; 11
    2696:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    269a:	8e a9       	ldd	r24, Y+54	; 0x36
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 65 43 	call	0x86ca	; 0x86ca <uart_putw_dec>
    26a2:	8f e2       	ldi	r24, 0x2F	; 47
    26a4:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
    26a8:	8d a9       	ldd	r24, Y+53	; 0x35
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 65 43 	call	0x86ca	; 0x86ca <uart_putw_dec>
    26b0:	8a e0       	ldi	r24, 0x0A	; 10
    26b2:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
    26b6:	80 e7       	ldi	r24, 0x70	; 112
    26b8:	9b e0       	ldi	r25, 0x0B	; 11
    26ba:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    26be:	2f a9       	ldd	r18, Y+55	; 0x37
    26c0:	38 ad       	ldd	r19, Y+56	; 0x38
    26c2:	49 ad       	ldd	r20, Y+57	; 0x39
    26c4:	5a ad       	ldd	r21, Y+58	; 0x3a
    26c6:	6b ad       	ldd	r22, Y+59	; 0x3b
    26c8:	7c ad       	ldd	r23, Y+60	; 0x3c
    26ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    26cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    26ce:	04 e1       	ldi	r16, 0x14	; 20
    26d0:	0e 94 44 45 	call	0x8a88	; 0x8a88 <__lshrdi3>
    26d4:	b9 01       	movw	r22, r18
    26d6:	ca 01       	movw	r24, r20
    26d8:	0e 94 a3 43 	call	0x8746	; 0x8746 <uart_putdw_dec>
    26dc:	8c e6       	ldi	r24, 0x6C	; 108
    26de:	9b e0       	ldi	r25, 0x0B	; 11
    26e0:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
    26e4:	83 e6       	ldi	r24, 0x63	; 99
    26e6:	9b e0       	ldi	r25, 0x0B	; 11
    26e8:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    26ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 65 43 	call	0x86ca	; 0x86ca <uart_putw_dec>
    26f4:	8a e0       	ldi	r24, 0x0A	; 10
    26f6:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
    26fa:	8a e5       	ldi	r24, 0x5A	; 90
    26fc:	9b e0       	ldi	r25, 0x0B	; 11
    26fe:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    2702:	22 96       	adiw	r28, 0x02	; 2
    2704:	8f ad       	ldd	r24, Y+63	; 0x3f
    2706:	22 97       	sbiw	r28, 0x02	; 2
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0e 94 65 43 	call	0x86ca	; 0x86ca <uart_putw_dec>
    270e:	8f e2       	ldi	r24, 0x2F	; 47
    2710:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
    2714:	21 96       	adiw	r28, 0x01	; 1
    2716:	8f ad       	ldd	r24, Y+63	; 0x3f
    2718:	21 97       	sbiw	r28, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 65 43 	call	0x86ca	; 0x86ca <uart_putw_dec>
    2720:	8a e0       	ldi	r24, 0x0A	; 10
    2722:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    2726:	81 e5       	ldi	r24, 0x51	; 81
    2728:	9b e0       	ldi	r25, 0x0B	; 11
    272a:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    272e:	23 96       	adiw	r28, 0x03	; 3
    2730:	8f ad       	ldd	r24, Y+63	; 0x3f
    2732:	23 97       	sbiw	r28, 0x03	; 3
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 65 43 	call	0x86ca	; 0x86ca <uart_putw_dec>
    273a:	8a e0       	ldi	r24, 0x0A	; 10
    273c:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
    2740:	88 e4       	ldi	r24, 0x48	; 72
    2742:	9b e0       	ldi	r25, 0x0B	; 11
    2744:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    2748:	c7 01       	movw	r24, r14
    274a:	0e 94 a2 2b 	call	0x5744	; 0x5744 <fat_get_fs_free>
    274e:	b9 01       	movw	r22, r18
    2750:	ca 01       	movw	r24, r20
    2752:	0e 94 a3 43 	call	0x8746	; 0x8746 <uart_putdw_dec>
    2756:	8f e2       	ldi	r24, 0x2F	; 47
    2758:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
    275c:	c7 01       	movw	r24, r14
    275e:	0e 94 45 2b 	call	0x568a	; 0x568a <fat_get_fs_size>
    2762:	b9 01       	movw	r22, r18
    2764:	ca 01       	movw	r24, r20
    2766:	2f c0       	rjmp	.+94     	; 0x27c6 <command_shell+0x65e>
			fat_close_file(fd);
		}
		else if(strcmp_P(command_arg, PSTR("disk")) == 0)
		{
			if(!print_disk_info(fs))
				uart_puts_p(PSTR("error reading disk info\n"));
    2768:	8d e8       	ldi	r24, 0x8D	; 141
    276a:	9a e0       	ldi	r25, 0x0A	; 10
    276c:	73 c1       	rjmp	.+742    	; 0x2a54 <command_shell+0x8ec>
		}
		else if(strncmp_P(command_arg, PSTR("size"), 4) == 0)
    276e:	c8 01       	movw	r24, r16
    2770:	68 e8       	ldi	r22, 0x88	; 136
    2772:	7a e0       	ldi	r23, 0x0A	; 10
    2774:	44 e0       	ldi	r20, 0x04	; 4
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <strncmp_P>
    277c:	89 2b       	or	r24, r25
    277e:	59 f5       	brne	.+86     	; 0x27d6 <command_shell+0x66e>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    2780:	82 e0       	ldi	r24, 0x02	; 2
    2782:	b2 01       	movw	r22, r4
    2784:	0e 94 2d 08 	call	0x105a	; 0x105a <too_many_arguments_error>
    2788:	88 23       	and	r24, r24
    278a:	09 f0       	breq	.+2      	; 0x278e <command_shell+0x626>
    278c:	17 cd       	rjmp	.-1490   	; 0x21bc <command_shell+0x54>
				continue;

			//Argument 2: File name - no wildcard search
			command_arg = get_cmd_arg(1);
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    2794:	ac 01       	movw	r20, r24
			if(command_arg == 0)
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	09 f4       	brne	.+2      	; 0x279c <command_shell+0x634>
    279a:	10 cd       	rjmp	.-1504   	; 0x21bc <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct file_entry;
			if(find_file_in_dir(fs, dd, command_arg, &file_entry, 0))
    279c:	60 91 c5 08 	lds	r22, 0x08C5
    27a0:	70 91 c6 08 	lds	r23, 0x08C6
    27a4:	80 91 ba 04 	lds	r24, 0x04BA
    27a8:	90 91 bb 04 	lds	r25, 0x04BB
    27ac:	93 01       	movw	r18, r6
    27ae:	00 e0       	ldi	r16, 0x00	; 0
    27b0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <find_file_in_dir>
    27b4:	88 23       	and	r24, r24
    27b6:	51 f0       	breq	.+20     	; 0x27cc <command_shell+0x664>
			{
				uart_putdw_dec(file_entry.file_size);
    27b8:	d3 01       	movw	r26, r6
    27ba:	95 96       	adiw	r26, 0x25	; 37
    27bc:	6d 91       	ld	r22, X+
    27be:	7d 91       	ld	r23, X+
    27c0:	8d 91       	ld	r24, X+
    27c2:	9c 91       	ld	r25, X
    27c4:	98 97       	sbiw	r26, 0x28	; 40
    27c6:	0e 94 a3 43 	call	0x8746	; 0x8746 <uart_putdw_dec>
    27ca:	4e c1       	rjmp	.+668    	; 0x2a68 <command_shell+0x900>
				uart_putc('\n');
			}
            else
				uart_puts("-1\n");
    27cc:	83 ea       	ldi	r24, 0xA3	; 163
    27ce:	91 e0       	ldi	r25, 0x01	; 1
    27d0:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
    27d4:	f3 cc       	rjmp	.-1562   	; 0x21bc <command_shell+0x54>
		}
#if FAT_WRITE_SUPPORT
		else if(strncmp_P(command_arg, PSTR("rm"), 2) == 0)
    27d6:	c8 01       	movw	r24, r16
    27d8:	65 e8       	ldi	r22, 0x85	; 133
    27da:	7a e0       	ldi	r23, 0x0A	; 10
    27dc:	42 e0       	ldi	r20, 0x02	; 2
    27de:	50 e0       	ldi	r21, 0x00	; 0
    27e0:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <strncmp_P>
    27e4:	89 2b       	or	r24, r25
    27e6:	89 f5       	brne	.+98     	; 0x284a <command_shell+0x6e2>
		{
			//Expecting max 3 arguments
			if (too_many_arguments_error(3, command))
    27e8:	83 e0       	ldi	r24, 0x03	; 3
    27ea:	b2 01       	movw	r22, r4
    27ec:	0e 94 2d 08 	call	0x105a	; 0x105a <too_many_arguments_error>
    27f0:	88 23       	and	r24, r24
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <command_shell+0x68e>
    27f4:	e3 cc       	rjmp	.-1594   	; 0x21bc <command_shell+0x54>
				continue;

			//Argument 2: File name or wildcard removal
			command_arg = get_cmd_arg(1);
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    27fc:	7c 01       	movw	r14, r24
			if(command_arg == 0)
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	a1 f4       	brne	.+40     	; 0x282a <command_shell+0x6c2>
    2802:	dc cc       	rjmp	.-1608   	; 0x21bc <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct file_entry;
			while(find_file_in_dir(fs, dd, command_arg, &file_entry, 1))
			{
				if(!fat_delete_file(fs, &file_entry))
    2804:	80 91 ba 04 	lds	r24, 0x04BA
    2808:	90 91 bb 04 	lds	r25, 0x04BB
    280c:	b3 01       	movw	r22, r6
    280e:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <fat_delete_file>
    2812:	88 23       	and	r24, r24
    2814:	51 f4       	brne	.+20     	; 0x282a <command_shell+0x6c2>
				{
					//Some kind of error, but continue anyway
					uart_puts_p(PSTR("error deleting file: "));
    2816:	8f e6       	ldi	r24, 0x6F	; 111
    2818:	9a e0       	ldi	r25, 0x0A	; 10
    281a:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
					uart_puts(command);
    281e:	c2 01       	movw	r24, r4
    2820:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
					uart_putc('\n');
    2824:	8a e0       	ldi	r24, 0x0A	; 10
    2826:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
			command_arg = get_cmd_arg(1);
			if(command_arg == 0)
				continue;

			struct fat_dir_entry_struct file_entry;
			while(find_file_in_dir(fs, dd, command_arg, &file_entry, 1))
    282a:	60 91 c5 08 	lds	r22, 0x08C5
    282e:	70 91 c6 08 	lds	r23, 0x08C6
    2832:	80 91 ba 04 	lds	r24, 0x04BA
    2836:	90 91 bb 04 	lds	r25, 0x04BB
    283a:	a7 01       	movw	r20, r14
    283c:	93 01       	movw	r18, r6
    283e:	01 e0       	ldi	r16, 0x01	; 1
    2840:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <find_file_in_dir>
    2844:	88 23       	and	r24, r24
    2846:	f1 f6       	brne	.-68     	; 0x2804 <command_shell+0x69c>
    2848:	b9 cc       	rjmp	.-1678   	; 0x21bc <command_shell+0x54>
					uart_putc('\n');
				}
			}

		}
		else if(strncmp_P(command_arg, PSTR("new"), 3) == 0)
    284a:	c8 01       	movw	r24, r16
    284c:	6b e6       	ldi	r22, 0x6B	; 107
    284e:	7a e0       	ldi	r23, 0x0A	; 10
    2850:	43 e0       	ldi	r20, 0x03	; 3
    2852:	50 e0       	ldi	r21, 0x00	; 0
    2854:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <strncmp_P>
    2858:	89 2b       	or	r24, r25
    285a:	f1 f4       	brne	.+60     	; 0x2898 <command_shell+0x730>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    285c:	82 e0       	ldi	r24, 0x02	; 2
    285e:	b2 01       	movw	r22, r4
    2860:	0e 94 2d 08 	call	0x105a	; 0x105a <too_many_arguments_error>
    2864:	88 23       	and	r24, r24
    2866:	09 f0       	breq	.+2      	; 0x286a <command_shell+0x702>
    2868:	a9 cc       	rjmp	.-1710   	; 0x21bc <command_shell+0x54>
				continue;

			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    2870:	bc 01       	movw	r22, r24
			if(command_arg == 0)
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	09 f4       	brne	.+2      	; 0x2878 <command_shell+0x710>
    2876:	a2 cc       	rjmp	.-1724   	; 0x21bc <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct file_entry;
			if(!fat_create_file(dd, command_arg, &file_entry))
    2878:	80 91 c5 08 	lds	r24, 0x08C5
    287c:	90 91 c6 08 	lds	r25, 0x08C6
    2880:	a3 01       	movw	r20, r6
    2882:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fat_create_file>
    2886:	88 23       	and	r24, r24
    2888:	09 f0       	breq	.+2      	; 0x288c <command_shell+0x724>
    288a:	98 cc       	rjmp	.-1744   	; 0x21bc <command_shell+0x54>
			{
				uart_puts_p(PSTR("error creating file: "));
    288c:	85 e5       	ldi	r24, 0x55	; 85
    288e:	9a e0       	ldi	r25, 0x0A	; 10
    2890:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
				uart_puts(command);
    2894:	c2 01       	movw	r24, r4
    2896:	e6 c0       	rjmp	.+460    	; 0x2a64 <command_shell+0x8fc>
				uart_putc('\n');
			}
		}
		else if(strncmp_P(command_arg, PSTR("write"), 5) == 0)
    2898:	c8 01       	movw	r24, r16
    289a:	6f e4       	ldi	r22, 0x4F	; 79
    289c:	7a e0       	ldi	r23, 0x0A	; 10
    289e:	45 e0       	ldi	r20, 0x05	; 5
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <strncmp_P>
    28a6:	89 2b       	or	r24, r25
    28a8:	09 f0       	breq	.+2      	; 0x28ac <command_shell+0x744>
    28aa:	8f c0       	rjmp	.+286    	; 0x29ca <command_shell+0x862>
		{
			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    28b2:	5c 01       	movw	r10, r24
			if(command_arg == 0)
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	09 f4       	brne	.+2      	; 0x28ba <command_shell+0x752>
    28b8:	81 cc       	rjmp	.-1790   	; 0x21bc <command_shell+0x54>
				continue;

			//Argument 3: Offset value - do not continue if the value is not correct
			char* offset_buffer;
			if ((offset_buffer = get_cmd_arg(2)) != 0)
    28ba:	82 e0       	ldi	r24, 0x02	; 2
    28bc:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    28c0:	8c 01       	movw	r16, r24
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	c9 f0       	breq	.+50     	; 0x28f8 <command_shell+0x790>
				if ((offset_buffer = is_number(offset_buffer, strlen(offset_buffer))) == 0)
    28c6:	fc 01       	movw	r30, r24
    28c8:	01 90       	ld	r0, Z+
    28ca:	00 20       	and	r0, r0
    28cc:	e9 f7       	brne	.-6      	; 0x28c8 <command_shell+0x760>
    28ce:	31 97       	sbiw	r30, 0x01	; 1
    28d0:	e8 1b       	sub	r30, r24
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    28d6:	4e 2f       	mov	r20, r30
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	0b c0       	rjmp	.+22     	; 0x28f2 <command_shell+0x78a>
		if (!isdigit(buffer[i]))
    28dc:	f8 01       	movw	r30, r16
    28de:	e2 0f       	add	r30, r18
    28e0:	f3 1f       	adc	r31, r19
    28e2:	80 81       	ld	r24, Z
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	c0 97       	sbiw	r24, 0x30	; 48
    28e8:	0a 97       	sbiw	r24, 0x0a	; 10
    28ea:	08 f0       	brcs	.+2      	; 0x28ee <command_shell+0x786>
    28ec:	67 cc       	rjmp	.-1842   	; 0x21bc <command_shell+0x54>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    28ee:	2f 5f       	subi	r18, 0xFF	; 255
    28f0:	3f 4f       	sbci	r19, 0xFF	; 255
    28f2:	24 17       	cp	r18, r20
    28f4:	35 07       	cpc	r19, r21
    28f6:	94 f3       	brlt	.-28     	; 0x28dc <command_shell+0x774>
				if ((offset_buffer = is_number(offset_buffer, strlen(offset_buffer))) == 0)
					continue;


			/* search file in current directory and open it */
			struct fat_file_struct* fd = open_file_in_dir(fs, dd, command_arg);
    28f8:	60 91 c5 08 	lds	r22, 0x08C5
    28fc:	70 91 c6 08 	lds	r23, 0x08C6
    2900:	80 91 ba 04 	lds	r24, 0x04BA
    2904:	90 91 bb 04 	lds	r25, 0x04BB
    2908:	a5 01       	movw	r20, r10
    290a:	0e 94 09 0a 	call	0x1412	; 0x1412 <open_file_in_dir>
    290e:	7c 01       	movw	r14, r24
			if(!fd)
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	29 f0       	breq	.+10     	; 0x291e <command_shell+0x7b6>
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	1d c0       	rjmp	.+58     	; 0x2958 <command_shell+0x7f0>
			{
				uart_puts_p(PSTR("error opening "));
    291e:	80 e4       	ldi	r24, 0x40	; 64
    2920:	9a e0       	ldi	r25, 0x0A	; 10
    2922:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
				uart_puts(command_arg);
    2926:	c5 01       	movw	r24, r10
    2928:	9d c0       	rjmp	.+314    	; 0x2a64 <command_shell+0x8fc>

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
        l = l * 10 + (*str++ - '0');
    292a:	ca 01       	movw	r24, r20
    292c:	b9 01       	movw	r22, r18
    292e:	2a e0       	ldi	r18, 0x0A	; 10
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e0       	ldi	r20, 0x00	; 0
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    293a:	9b 01       	movw	r18, r22
    293c:	ac 01       	movw	r20, r24
    293e:	8d 2d       	mov	r24, r13
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	c0 97       	sbiw	r24, 0x30	; 48
    2944:	aa 27       	eor	r26, r26
    2946:	97 fd       	sbrc	r25, 7
    2948:	a0 95       	com	r26
    294a:	ba 2f       	mov	r27, r26
    294c:	28 0f       	add	r18, r24
    294e:	39 1f       	adc	r19, r25
    2950:	4a 1f       	adc	r20, r26
    2952:	5b 1f       	adc	r21, r27
    2954:	0f 5f       	subi	r16, 0xFF	; 255
    2956:	1f 4f       	sbci	r17, 0xFF	; 255
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    2958:	f8 01       	movw	r30, r16
    295a:	d0 80       	ld	r13, Z
    295c:	8d 2d       	mov	r24, r13
    295e:	80 53       	subi	r24, 0x30	; 48
    2960:	8a 30       	cpi	r24, 0x0A	; 10
    2962:	18 f3       	brcs	.-58     	; 0x292a <command_shell+0x7c2>
				uart_putc('\n');
				continue;
			}

			//Seek file position
			int32_t offset = strtolong(offset_buffer);
    2964:	2a 83       	std	Y+2, r18	; 0x02
    2966:	3b 83       	std	Y+3, r19	; 0x03
    2968:	4c 83       	std	Y+4, r20	; 0x04
    296a:	5d 83       	std	Y+5, r21	; 0x05
			if(!fat_seek_file(fd, &offset, FAT_SEEK_SET))
    296c:	c7 01       	movw	r24, r14
    296e:	be 01       	movw	r22, r28
    2970:	6e 5f       	subi	r22, 0xFE	; 254
    2972:	7f 4f       	sbci	r23, 0xFF	; 255
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	0e 94 9f 3d 	call	0x7b3e	; 0x7b3e <fat_seek_file>
    297a:	88 23       	and	r24, r24
    297c:	59 f4       	brne	.+22     	; 0x2994 <command_shell+0x82c>
			{
				uart_puts_p(PSTR("error seeking on "));
    297e:	8e e2       	ldi	r24, 0x2E	; 46
    2980:	9a e0       	ldi	r25, 0x0A	; 10
    2982:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
				uart_puts(command_arg);
    2986:	c5 01       	movw	r24, r10
    2988:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
				uart_putc('\n');
    298c:	8a e0       	ldi	r24, 0x0A	; 10
    298e:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    2992:	19 c0       	rjmp	.+50     	; 0x29c6 <command_shell+0x85e>
			/* read text from the shell and write it to the file */
			uint8_t data_len;
			while(1)
			{
				/* give a different prompt */
				uart_putc('<');
    2994:	8c e3       	ldi	r24, 0x3C	; 60
    2996:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
				//uart_putc(' ');

				/* read one line of text */
				data_len = read_line(buffer, sizeof(buffer));
    299a:	c2 01       	movw	r24, r4
    299c:	68 e1       	ldi	r22, 0x18	; 24
    299e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <read_line>
    29a2:	18 2f       	mov	r17, r24
				if(!data_len)
    29a4:	88 23       	and	r24, r24
    29a6:	79 f0       	breq	.+30     	; 0x29c6 <command_shell+0x85e>
					break;

				/* write text to file */
				if(fat_write_file(fd, (uint8_t*) buffer, data_len) != data_len)
    29a8:	c7 01       	movw	r24, r14
    29aa:	b2 01       	movw	r22, r4
    29ac:	41 2f       	mov	r20, r17
    29ae:	50 e0       	ldi	r21, 0x00	; 0
    29b0:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <fat_write_file>
    29b4:	21 2f       	mov	r18, r17
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	82 17       	cp	r24, r18
    29ba:	93 07       	cpc	r25, r19
    29bc:	59 f3       	breq	.-42     	; 0x2994 <command_shell+0x82c>
				{
					uart_puts_p(PSTR("error writing to file\n"));
    29be:	87 e1       	ldi	r24, 0x17	; 23
    29c0:	9a e0       	ldi	r25, 0x0A	; 10
    29c2:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
					break;
				}
			}

			fat_close_file(fd);
    29c6:	c7 01       	movw	r24, r14
    29c8:	a7 cd       	rjmp	.-1202   	; 0x2518 <command_shell+0x3b0>
		}

		else if(strncmp_P(command_arg, PSTR("append"), 6) == 0)
    29ca:	c8 01       	movw	r24, r16
    29cc:	60 e1       	ldi	r22, 0x10	; 16
    29ce:	7a e0       	ldi	r23, 0x0A	; 10
    29d0:	46 e0       	ldi	r20, 0x06	; 6
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <strncmp_P>
    29d8:	89 2b       	or	r24, r25
    29da:	81 f4       	brne	.+32     	; 0x29fc <command_shell+0x894>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    29dc:	82 e0       	ldi	r24, 0x02	; 2
    29de:	b2 01       	movw	r22, r4
    29e0:	0e 94 2d 08 	call	0x105a	; 0x105a <too_many_arguments_error>
    29e4:	88 23       	and	r24, r24
    29e6:	09 f0       	breq	.+2      	; 0x29ea <command_shell+0x882>
    29e8:	e9 cb       	rjmp	.-2094   	; 0x21bc <command_shell+0x54>
				continue;

			//Argument 2: File name
			//Find the end of a current file and begins writing to it
			//Ends only when the user inputs Ctrl+z (ASCII 26)
			command_arg = get_cmd_arg(1);
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
			if(command_arg == 0)
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <command_shell+0x88e>
    29f4:	e3 cb       	rjmp	.-2106   	; 0x21bc <command_shell+0x54>
				continue;
				
			append_file(command_arg); //Uses circular buffer to capture full stream of text and append to file
    29f6:	0e 94 3a 0a 	call	0x1474	; 0x1474 <append_file>
    29fa:	e0 cb       	rjmp	.-2112   	; 0x21bc <command_shell+0x54>
		}
		else if(strncmp_P(command_arg, PSTR("md"), 2) == 0)
    29fc:	c8 01       	movw	r24, r16
    29fe:	6d e0       	ldi	r22, 0x0D	; 13
    2a00:	7a e0       	ldi	r23, 0x0A	; 10
    2a02:	42 e0       	ldi	r20, 0x02	; 2
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <strncmp_P>
    2a0a:	89 2b       	or	r24, r25
    2a0c:	a9 f4       	brne	.+42     	; 0x2a38 <command_shell+0x8d0>
		{
			//Argument 2: Directory name
			command_arg = get_cmd_arg(1);
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_cmd_arg>
    2a14:	8c 01       	movw	r16, r24
			if(command_arg == 0)
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <command_shell+0x8b4>
    2a1a:	d0 cb       	rjmp	.-2144   	; 0x21bc <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct dir_entry;
			if(!fat_create_dir(dd, command_arg, &dir_entry))
    2a1c:	80 91 c5 08 	lds	r24, 0x08C5
    2a20:	90 91 c6 08 	lds	r25, 0x08C6
    2a24:	b8 01       	movw	r22, r16
    2a26:	a3 01       	movw	r20, r6
    2a28:	0e 94 ee 38 	call	0x71dc	; 0x71dc <fat_create_dir>
    2a2c:	88 23       	and	r24, r24
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <command_shell+0x8ca>
    2a30:	c5 cb       	rjmp	.-2166   	; 0x21bc <command_shell+0x54>
			{
				uart_puts_p(PSTR("error creating directory: "));
    2a32:	82 ef       	ldi	r24, 0xF2	; 242
    2a34:	99 e0       	ldi	r25, 0x09	; 9
    2a36:	13 c0       	rjmp	.+38     	; 0x2a5e <command_shell+0x8f6>
				uart_putc('\n');
			}
		}
#endif
#if SD_RAW_WRITE_BUFFERING
		else if(strcmp_P(command_arg, PSTR("sync")) == 0)
    2a38:	c8 01       	movw	r24, r16
    2a3a:	6d ee       	ldi	r22, 0xED	; 237
    2a3c:	79 e0       	ldi	r23, 0x09	; 9
    2a3e:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <strcmp_P>
    2a42:	89 2b       	or	r24, r25
    2a44:	51 f4       	brne	.+20     	; 0x2a5a <command_shell+0x8f2>
		{
			if(!sd_raw_sync())
    2a46:	0e 94 4d 1b 	call	0x369a	; 0x369a <sd_raw_sync>
    2a4a:	88 23       	and	r24, r24
    2a4c:	09 f0       	breq	.+2      	; 0x2a50 <command_shell+0x8e8>
    2a4e:	b6 cb       	rjmp	.-2196   	; 0x21bc <command_shell+0x54>
				uart_puts_p(PSTR("error syncing disk\n"));
    2a50:	89 ed       	ldi	r24, 0xD9	; 217
    2a52:	99 e0       	ldi	r25, 0x09	; 9
    2a54:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    2a58:	b1 cb       	rjmp	.-2206   	; 0x21bc <command_shell+0x54>
		}
#endif
		else
		{
			uart_puts_p(PSTR("unknown command: "));
    2a5a:	87 ec       	ldi	r24, 0xC7	; 199
    2a5c:	99 e0       	ldi	r25, 0x09	; 9
    2a5e:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
			uart_puts(command_arg);
    2a62:	c8 01       	movw	r24, r16
    2a64:	0e 94 0c 44 	call	0x8818	; 0x8818 <uart_puts>
			uart_putc('\n');
    2a68:	8a e0       	ldi	r24, 0x0A	; 10
    2a6a:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    2a6e:	a6 cb       	rjmp	.-2228   	; 0x21bc <command_shell+0x54>

00002a70 <read_config_file>:
	
	read_config_file(); //Read the system settings from the config file	
}

void read_config_file(void)
{
    2a70:	4f 92       	push	r4
    2a72:	5f 92       	push	r5
    2a74:	6f 92       	push	r6
    2a76:	7f 92       	push	r7
    2a78:	8f 92       	push	r8
    2a7a:	9f 92       	push	r9
    2a7c:	af 92       	push	r10
    2a7e:	bf 92       	push	r11
    2a80:	cf 92       	push	r12
    2a82:	df 92       	push	r13
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
    2a94:	c5 55       	subi	r28, 0x55	; 85
    2a96:	d0 40       	sbci	r29, 0x00	; 0
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
	char config_file_name[13];
	sprintf(config_file_name, CFG_FILENAME); //This is the name of the config file. 'config.sys' is probably a bad idea.
    2aa2:	58 e0       	ldi	r21, 0x08	; 8
    2aa4:	e5 2e       	mov	r14, r21
    2aa6:	f1 2c       	mov	r15, r1
    2aa8:	ec 0e       	add	r14, r28
    2aaa:	fd 1e       	adc	r15, r29
    2aac:	c7 01       	movw	r24, r14
    2aae:	69 e1       	ldi	r22, 0x19	; 25
    2ab0:	71 e0       	ldi	r23, 0x01	; 1
    2ab2:	0e 94 a6 46 	call	0x8d4c	; 0x8d4c <strcpy>

	struct fat_dir_entry_struct file_entry;

	//Check to see if we have a config file
	if(find_file_in_dir(fs, dd, config_file_name, &file_entry, 0))
    2ab6:	60 91 c5 08 	lds	r22, 0x08C5
    2aba:	70 91 c6 08 	lds	r23, 0x08C6
    2abe:	80 91 ba 04 	lds	r24, 0x04BA
    2ac2:	90 91 bb 04 	lds	r25, 0x04BB
    2ac6:	a7 01       	movw	r20, r14
    2ac8:	9e 01       	movw	r18, r28
    2aca:	2b 5d       	subi	r18, 0xDB	; 219
    2acc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ace:	00 e0       	ldi	r16, 0x00	; 0
    2ad0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <find_file_in_dir>
    2ad4:	88 23       	and	r24, r24
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <read_config_file+0x6a>
    2ad8:	ee c0       	rjmp	.+476    	; 0x2cb6 <read_config_file+0x246>
		#endif
		
		//Now load settings from file
		
		//search file in current directory and open it
		struct fat_file_struct* fd = open_file_in_dir(fs, dd, config_file_name);
    2ada:	60 91 c5 08 	lds	r22, 0x08C5
    2ade:	70 91 c6 08 	lds	r23, 0x08C6
    2ae2:	80 91 ba 04 	lds	r24, 0x04BA
    2ae6:	90 91 bb 04 	lds	r25, 0x04BB
    2aea:	a7 01       	movw	r20, r14
    2aec:	0e 94 09 0a 	call	0x1412	; 0x1412 <open_file_in_dir>
    2af0:	7c 01       	movw	r14, r24
		if(!fd)
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	29 f4       	brne	.+10     	; 0x2b00 <read_config_file+0x90>
		{
			uart_puts_p(PSTR("error opening config file"));
    2af6:	8f ef       	ldi	r24, 0xFF	; 255
    2af8:	9b e0       	ldi	r25, 0x0B	; 11
    2afa:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
    2afe:	dd c0       	rjmp	.+442    	; 0x2cba <read_config_file+0x24a>


		//Read line from file
		uint8_t settings_string[16]; //"115200,103,14,0\0" = 115200 bps, escape char of ASCII(103), 14 times, new log mode
		uint8_t len;
		len = fat_read_file(fd, settings_string, sizeof(settings_string)); //Read first line of file
    2b00:	45 e1       	ldi	r20, 0x15	; 21
    2b02:	a4 2e       	mov	r10, r20
    2b04:	b1 2c       	mov	r11, r1
    2b06:	ac 0e       	add	r10, r28
    2b08:	bd 1e       	adc	r11, r29
    2b0a:	b5 01       	movw	r22, r10
    2b0c:	40 e1       	ldi	r20, 0x10	; 16
    2b0e:	50 e0       	ldi	r21, 0x00	; 0
    2b10:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <fat_read_file>
    2b14:	68 2e       	mov	r6, r24

		fat_close_file(fd);
    2b16:	c7 01       	movw	r24, r14
    2b18:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fat_close_file>
    2b1c:	11 e0       	ldi	r17, 0x01	; 1
    2b1e:	99 24       	eor	r9, r9
    2b20:	3a e1       	ldi	r19, 0x1A	; 26
    2b22:	83 2e       	mov	r8, r19
    2b24:	23 e0       	ldi	r18, 0x03	; 3
    2b26:	72 2e       	mov	r7, r18
    2b28:	dd 24       	eor	r13, r13
    2b2a:	cc 24       	eor	r12, r12
		char new_system_max_escape = 3;

		//Parse the settings out
		uint8_t i = 0, j = 0, setting_number = 0;
		char new_setting[7]; //Max length of a setting is 6, the bps setting = '115200' plus '\0'
		for(i = 0 ; i < len; i++)
    2b2c:	7e 01       	movw	r14, r28
    2b2e:	08 94       	sec
    2b30:	e1 1c       	adc	r14, r1
    2b32:	f1 1c       	adc	r15, r1
		{
			//Pick out one setting from the line of text
			for(j = 0 ; settings_string[i] != ',' && i < len && j < 6 ; )
    2b34:	25 01       	movw	r4, r10
    2b36:	97 e0       	ldi	r25, 0x07	; 7
    2b38:	a9 2e       	mov	r10, r25
    2b3a:	b1 2c       	mov	r11, r1
    2b3c:	ac 0e       	add	r10, r28
    2b3e:	bd 1e       	adc	r11, r29
    2b40:	7b c0       	rjmp	.+246    	; 0x2c38 <read_config_file+0x1c8>
			{
				new_setting[j] = settings_string[i];
    2b42:	ed 93       	st	X+, r30
				i++;
    2b44:	d3 94       	inc	r13
    2b46:	8a 2f       	mov	r24, r26
    2b48:	8e 19       	sub	r24, r14
		uint8_t i = 0, j = 0, setting_number = 0;
		char new_setting[7]; //Max length of a setting is 6, the bps setting = '115200' plus '\0'
		for(i = 0 ; i < len; i++)
		{
			//Pick out one setting from the line of text
			for(j = 0 ; settings_string[i] != ',' && i < len && j < 6 ; )
    2b4a:	f2 01       	movw	r30, r4
    2b4c:	ed 0d       	add	r30, r13
    2b4e:	f1 1d       	adc	r31, r1
    2b50:	e0 81       	ld	r30, Z
    2b52:	ec 32       	cpi	r30, 0x2C	; 44
    2b54:	29 f0       	breq	.+10     	; 0x2b60 <read_config_file+0xf0>
    2b56:	d6 14       	cp	r13, r6
    2b58:	18 f4       	brcc	.+6      	; 0x2b60 <read_config_file+0xf0>
    2b5a:	aa 15       	cp	r26, r10
    2b5c:	bb 05       	cpc	r27, r11
    2b5e:	89 f7       	brne	.-30     	; 0x2b42 <read_config_file+0xd2>
				new_setting[j] = settings_string[i];
				i++;
				j++;
			}
			
			new_setting[j] = '\0'; //Terminate the string for array compare
    2b60:	f7 01       	movw	r30, r14
    2b62:	e8 0f       	add	r30, r24
    2b64:	f1 1d       	adc	r31, r1
    2b66:	10 82       	st	Z, r1
			
			if(setting_number == 0) //Baud rate
    2b68:	cc 20       	and	r12, r12
    2b6a:	f1 f5       	brne	.+124    	; 0x2be8 <read_config_file+0x178>
			{
				if( strcmp(new_setting, "2400") == 0) new_system_baud = BAUD_2400;
    2b6c:	c7 01       	movw	r24, r14
    2b6e:	6d e5       	ldi	r22, 0x5D	; 93
    2b70:	71 e0       	ldi	r23, 0x01	; 1
    2b72:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <strcmp>
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	11 f4       	brne	.+4      	; 0x2b7e <read_config_file+0x10e>
    2b7a:	10 e0       	ldi	r17, 0x00	; 0
    2b7c:	5b c0       	rjmp	.+182    	; 0x2c34 <read_config_file+0x1c4>
				else if( strcmp(new_setting, "4800") == 0) new_system_baud = BAUD_4800;
    2b7e:	c7 01       	movw	r24, r14
    2b80:	62 e6       	ldi	r22, 0x62	; 98
    2b82:	71 e0       	ldi	r23, 0x01	; 1
    2b84:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <strcmp>
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	11 f4       	brne	.+4      	; 0x2b90 <read_config_file+0x120>
    2b8c:	14 e0       	ldi	r17, 0x04	; 4
    2b8e:	52 c0       	rjmp	.+164    	; 0x2c34 <read_config_file+0x1c4>
				else if( strcmp(new_setting, "9600") == 0) new_system_baud = BAUD_9600;
    2b90:	c7 01       	movw	r24, r14
    2b92:	67 e6       	ldi	r22, 0x67	; 103
    2b94:	71 e0       	ldi	r23, 0x01	; 1
    2b96:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <strcmp>
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <read_config_file+0x130>
    2b9e:	49 c0       	rjmp	.+146    	; 0x2c32 <read_config_file+0x1c2>
				else if( strcmp(new_setting, "19200") == 0) new_system_baud = BAUD_19200;
    2ba0:	c7 01       	movw	r24, r14
    2ba2:	6c e6       	ldi	r22, 0x6C	; 108
    2ba4:	71 e0       	ldi	r23, 0x01	; 1
    2ba6:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <strcmp>
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	11 f4       	brne	.+4      	; 0x2bb2 <read_config_file+0x142>
    2bae:	15 e0       	ldi	r17, 0x05	; 5
    2bb0:	41 c0       	rjmp	.+130    	; 0x2c34 <read_config_file+0x1c4>
				else if( strcmp(new_setting, "38400") == 0) new_system_baud = BAUD_38400;
    2bb2:	c7 01       	movw	r24, r14
    2bb4:	62 e7       	ldi	r22, 0x72	; 114
    2bb6:	71 e0       	ldi	r23, 0x01	; 1
    2bb8:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <strcmp>
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	11 f4       	brne	.+4      	; 0x2bc4 <read_config_file+0x154>
    2bc0:	16 e0       	ldi	r17, 0x06	; 6
    2bc2:	38 c0       	rjmp	.+112    	; 0x2c34 <read_config_file+0x1c4>
				else if( strcmp(new_setting, "57600") == 0) new_system_baud = BAUD_57600;
    2bc4:	c7 01       	movw	r24, r14
    2bc6:	68 e7       	ldi	r22, 0x78	; 120
    2bc8:	71 e0       	ldi	r23, 0x01	; 1
    2bca:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <strcmp>
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	11 f4       	brne	.+4      	; 0x2bd6 <read_config_file+0x166>
    2bd2:	12 e0       	ldi	r17, 0x02	; 2
    2bd4:	2f c0       	rjmp	.+94     	; 0x2c34 <read_config_file+0x1c4>
				else if( strcmp(new_setting, "115200") == 0) new_system_baud = BAUD_115200;
    2bd6:	c7 01       	movw	r24, r14
    2bd8:	6e e7       	ldi	r22, 0x7E	; 126
    2bda:	71 e0       	ldi	r23, 0x01	; 1
    2bdc:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <strcmp>
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	39 f5       	brne	.+78     	; 0x2c32 <read_config_file+0x1c2>
    2be4:	13 e0       	ldi	r17, 0x03	; 3
    2be6:	26 c0       	rjmp	.+76     	; 0x2c34 <read_config_file+0x1c4>
				else new_system_baud = BAUD_9600; //Default is 9600bps
			}
			else if(setting_number == 1) //Escape character
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	c8 16       	cp	r12, r24
    2bec:	49 f4       	brne	.+18     	; 0x2c00 <read_config_file+0x190>
			{
				new_system_escape = atoi(new_setting);
    2bee:	c7 01       	movw	r24, r14
    2bf0:	0e 94 42 46 	call	0x8c84	; 0x8c84 <atoi>
    2bf4:	88 2e       	mov	r8, r24
				if(new_system_escape == 0 || new_system_escape > 127) new_system_escape = 26; //Default is ctrl+z
    2bf6:	18 16       	cp	r1, r24
    2bf8:	ec f0       	brlt	.+58     	; 0x2c34 <read_config_file+0x1c4>
    2bfa:	8a e1       	ldi	r24, 0x1A	; 26
    2bfc:	88 2e       	mov	r8, r24
    2bfe:	1a c0       	rjmp	.+52     	; 0x2c34 <read_config_file+0x1c4>
			}
			else if(setting_number == 2) //Max amount escape character
    2c00:	82 e0       	ldi	r24, 0x02	; 2
    2c02:	c8 16       	cp	r12, r24
    2c04:	51 f4       	brne	.+20     	; 0x2c1a <read_config_file+0x1aa>
			{
				new_system_max_escape = atoi(new_setting);
    2c06:	c7 01       	movw	r24, r14
    2c08:	0e 94 42 46 	call	0x8c84	; 0x8c84 <atoi>
    2c0c:	78 2e       	mov	r7, r24
				if(new_system_max_escape == 0 || new_system_max_escape > 10) new_system_max_escape = 3; //Default is 3
    2c0e:	81 50       	subi	r24, 0x01	; 1
    2c10:	8a 30       	cpi	r24, 0x0A	; 10
    2c12:	80 f0       	brcs	.+32     	; 0x2c34 <read_config_file+0x1c4>
    2c14:	03 e0       	ldi	r16, 0x03	; 3
    2c16:	70 2e       	mov	r7, r16
    2c18:	0d c0       	rjmp	.+26     	; 0x2c34 <read_config_file+0x1c4>
			}
			else if(setting_number == 3) //System mode
    2c1a:	83 e0       	ldi	r24, 0x03	; 3
    2c1c:	c8 16       	cp	r12, r24
    2c1e:	81 f4       	brne	.+32     	; 0x2c40 <read_config_file+0x1d0>
			{
				new_system_mode = atoi(new_setting);
    2c20:	c7 01       	movw	r24, r14
    2c22:	0e 94 42 46 	call	0x8c84	; 0x8c84 <atoi>
    2c26:	98 2e       	mov	r9, r24
				if(new_system_mode == 0 || new_system_mode > 5) new_system_mode = MODE_NEWLOG; //Default is NEWLOG
    2c28:	81 50       	subi	r24, 0x01	; 1
    2c2a:	85 30       	cpi	r24, 0x05	; 5
    2c2c:	18 f0       	brcs	.+6      	; 0x2c34 <read_config_file+0x1c4>
    2c2e:	99 24       	eor	r9, r9
    2c30:	01 c0       	rjmp	.+2      	; 0x2c34 <read_config_file+0x1c4>
    2c32:	11 e0       	ldi	r17, 0x01	; 1
			}
			else
				//We're done! Stop looking for settings
				break;
			
			setting_number++;
    2c34:	c3 94       	inc	r12
		char new_system_max_escape = 3;

		//Parse the settings out
		uint8_t i = 0, j = 0, setting_number = 0;
		char new_setting[7]; //Max length of a setting is 6, the bps setting = '115200' plus '\0'
		for(i = 0 ; i < len; i++)
    2c36:	d3 94       	inc	r13
    2c38:	d6 14       	cp	r13, r6
    2c3a:	10 f4       	brcc	.+4      	; 0x2c40 <read_config_file+0x1d0>
    2c3c:	d7 01       	movw	r26, r14
    2c3e:	83 cf       	rjmp	.-250    	; 0x2b46 <read_config_file+0xd6>
		uart_puts_p(PSTR("\n"));
		*/
		
		//We now have the settings loaded into the global variables. Now check if they're different from EEPROM settings

		if(new_system_baud != setting_uart_speed)
    2c40:	80 91 c2 04 	lds	r24, 0x04C2
    2c44:	18 17       	cp	r17, r24
    2c46:	69 f0       	breq	.+26     	; 0x2c62 <read_config_file+0x1f2>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2c48:	f9 99       	sbic	0x1f, 1	; 31
    2c4a:	fe cf       	rjmp	.-4      	; 0x2c48 <read_config_file+0x1d8>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2c4c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2c52:	10 bd       	out	0x20, r17	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    2c54:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    2c56:	f9 9a       	sbi	0x1f, 1	; 31
		{
			//If the baud rate from the file is different from the current setting,
			//Then update the setting to the file setting
			//And re-init the UART
			EEPROM_write(LOCATION_BAUD_SETTING, new_system_baud);
			setting_uart_speed = new_system_baud;
    2c58:	10 93 c2 04 	sts	0x04C2, r17
		    uart_init(setting_uart_speed);
    2c5c:	81 2f       	mov	r24, r17
    2c5e:	0e 94 ee 42 	call	0x85dc	; 0x85dc <uart_init>
		}

		if(new_system_mode != setting_system_mode)
    2c62:	80 91 bc 04 	lds	r24, 0x04BC
    2c66:	98 16       	cp	r9, r24
    2c68:	51 f0       	breq	.+20     	; 0x2c7e <read_config_file+0x20e>
		{
			//Goto new system mode
			setting_system_mode = new_system_mode;
    2c6a:	90 92 bc 04 	sts	0x04BC, r9
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2c6e:	f9 99       	sbic	0x1f, 1	; 31
    2c70:	fe cf       	rjmp	.-4      	; 0x2c6e <read_config_file+0x1fe>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2c72:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2c78:	90 bc       	out	0x20, r9	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    2c7a:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    2c7c:	f9 9a       	sbi	0x1f, 1	; 31
			//Goto new system mode
			setting_system_mode = new_system_mode;
			EEPROM_write(LOCATION_SYSTEM_SETTING, setting_system_mode);
		}
		
		if(new_system_escape != setting_escape_character)
    2c7e:	80 91 c7 08 	lds	r24, 0x08C7
    2c82:	88 16       	cp	r8, r24
    2c84:	51 f0       	breq	.+20     	; 0x2c9a <read_config_file+0x22a>
		{
			//Goto new system escape char
			setting_escape_character = new_system_escape;
    2c86:	80 92 c7 08 	sts	0x08C7, r8
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2c8a:	f9 99       	sbic	0x1f, 1	; 31
    2c8c:	fe cf       	rjmp	.-4      	; 0x2c8a <read_config_file+0x21a>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2c8e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2c90:	85 e0       	ldi	r24, 0x05	; 5
    2c92:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2c94:	80 bc       	out	0x20, r8	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    2c96:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    2c98:	f9 9a       	sbi	0x1f, 1	; 31
			//Goto new system escape char
			setting_escape_character = new_system_escape;
			EEPROM_write(LOCATION_ESCAPE_CHAR, setting_escape_character); 
		}
		
		if(new_system_max_escape != setting_max_escape_character)
    2c9a:	80 91 bf 04 	lds	r24, 0x04BF
    2c9e:	78 16       	cp	r7, r24
    2ca0:	51 f0       	breq	.+20     	; 0x2cb6 <read_config_file+0x246>
		{
			//Goto new max escape
			setting_max_escape_character = new_system_max_escape;
    2ca2:	70 92 bf 04 	sts	0x04BF, r7
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2ca6:	f9 99       	sbic	0x1f, 1	; 31
    2ca8:	fe cf       	rjmp	.-4      	; 0x2ca6 <read_config_file+0x236>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2caa:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2cac:	86 e0       	ldi	r24, 0x06	; 6
    2cae:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2cb0:	70 bc       	out	0x20, r7	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    2cb2:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    2cb4:	f9 9a       	sbi	0x1f, 1	; 31
		#if DEBUG
			uart_puts("No config found - creating default:\n");
		#endif

		//Record the current eeprom settings to the config file
		record_config_file();
    2cb6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <record_config_file>
	}
	
}
    2cba:	cb 5a       	subi	r28, 0xAB	; 171
    2cbc:	df 4f       	sbci	r29, 0xFF	; 255
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	cf 91       	pop	r28
    2cca:	df 91       	pop	r29
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	ff 90       	pop	r15
    2cd2:	ef 90       	pop	r14
    2cd4:	df 90       	pop	r13
    2cd6:	cf 90       	pop	r12
    2cd8:	bf 90       	pop	r11
    2cda:	af 90       	pop	r10
    2cdc:	9f 90       	pop	r9
    2cde:	8f 90       	pop	r8
    2ce0:	7f 90       	pop	r7
    2ce2:	6f 90       	pop	r6
    2ce4:	5f 90       	pop	r5
    2ce6:	4f 90       	pop	r4
    2ce8:	08 95       	ret

00002cea <ioinit>:

    return 0;
}

void ioinit(void)
{
    2cea:	0f 93       	push	r16
    2cec:	1f 93       	push	r17
    //Init Timer0 for delay_us
    //TCCR0B = (1<<CS00); //Set Prescaler to clk/1 (assume we are running at internal 1MHz). CS00=1 
    TCCR0B = (1<<CS01); //Set Prescaler to clk/8 : 1click = 1us(assume we are running at internal 8MHz). CS01=1 
    2cee:	82 e0       	ldi	r24, 0x02	; 2
    2cf0:	85 bd       	out	0x25, r24	; 37
    //Since we are running at 16MHz, this is a hack job. We will double the count during delay_us function.
	//TCCR0B = (1<<CS01)|(1<<CS00); //Set Prescaler to clk/64

	//Running power is 7.66mA at 3.3V / 7.23 at 5V before power tweaking
	//Let's see if we can shut off some peripherals and save some power
	PRR |= (1<<PRTWI) | (1<<PRTIM2) | (1<<PRTIM1) | (1<<PRADC); //Shut off TWI, Timer2, Timer1, ADC
    2cf2:	80 91 64 00 	lds	r24, 0x0064
    2cf6:	89 6c       	ori	r24, 0xC9	; 201
    2cf8:	80 93 64 00 	sts	0x0064, r24
	//Running power is 7.02mA at 3.3V / 6.66mA at 5V after power tweaking - so a little bit, and it still works!
	
	set_sleep_mode(SLEEP_MODE_IDLE); //I believe this is the lowest we can go and still get woken up by UART
    2cfc:	83 b7       	in	r24, 0x33	; 51
    2cfe:	81 7f       	andi	r24, 0xF1	; 241
    2d00:	83 bf       	out	0x33, r24	; 51
	sleep_enable(); //Set Sleep Enable bit to 1
    2d02:	83 b7       	in	r24, 0x33	; 51
    2d04:	81 60       	ori	r24, 0x01	; 1
    2d06:	83 bf       	out	0x33, r24	; 51

    //1 = output, 0 = input
    STAT1_DDR |= (1<<STAT1);
    2d08:	20 9a       	sbi	0x04, 0	; 4
    STAT2_DDR |= (1<<STAT2);
    2d0a:	21 9a       	sbi	0x04, 1	; 4

	if(check_emergency_reset()) //Look to see if the RX pin is being pulled low
    2d0c:	0e 94 34 07 	call	0xe68	; 0xe68 <check_emergency_reset>
    2d10:	88 23       	and	r24, r24
    2d12:	a9 f0       	breq	.+42     	; 0x2d3e <ioinit+0x54>
	{
		set_default_settings(); //Reset baud, escape characters, escape number, system mode
    2d14:	0e 94 63 06 	call	0xcc6	; 0xcc6 <set_default_settings>

		init_media(); //Try to setup the SD card so we can record these new settings
    2d18:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <init_media>
		
		record_config_file(); //Record new config settings
    2d1c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <record_config_file>

		//Now sit in forever loop indicating system is now at 9600bps
		sbi(STAT1_PORT, STAT1); 
    2d20:	28 9a       	sbi	0x05, 0	; 5
		sbi(STAT2_PORT, STAT2);
    2d22:	29 9a       	sbi	0x05, 1	; 5
		while(1)
		{
			delay_ms(500);
			STAT1_PORT ^= (1<<STAT1); //Blink the stat LEDs
    2d24:	01 e0       	ldi	r16, 0x01	; 1
			STAT2_PORT ^= (1<<STAT2); //Blink the stat LEDs
    2d26:	12 e0       	ldi	r17, 0x02	; 2
		//Now sit in forever loop indicating system is now at 9600bps
		sbi(STAT1_PORT, STAT1); 
		sbi(STAT2_PORT, STAT2);
		while(1)
		{
			delay_ms(500);
    2d28:	84 ef       	ldi	r24, 0xF4	; 244
    2d2a:	91 e0       	ldi	r25, 0x01	; 1
    2d2c:	0e 94 08 07 	call	0xe10	; 0xe10 <delay_ms>
			STAT1_PORT ^= (1<<STAT1); //Blink the stat LEDs
    2d30:	85 b1       	in	r24, 0x05	; 5
    2d32:	80 27       	eor	r24, r16
    2d34:	85 b9       	out	0x05, r24	; 5
			STAT2_PORT ^= (1<<STAT2); //Blink the stat LEDs
    2d36:	85 b1       	in	r24, 0x05	; 5
    2d38:	81 27       	eor	r24, r17
    2d3a:	85 b9       	out	0x05, r24	; 5
    2d3c:	f5 cf       	rjmp	.-22     	; 0x2d28 <ioinit+0x3e>
		}
	}
	
	read_system_settings(); //Read the system settings into some global variables
    2d3e:	0e 94 86 06 	call	0xd0c	; 0xd0c <read_system_settings>

    //Setup uart
    uart_init(setting_uart_speed);
    2d42:	80 91 c2 04 	lds	r24, 0x04C2
    2d46:	0e 94 ee 42 	call	0x85dc	; 0x85dc <uart_init>
#if DEBUG
	uart_puts_p(PSTR("UART Init\n"));
#else
	uart_puts_p(PSTR("1"));
    2d4a:	8b e1       	ldi	r24, 0x1B	; 27
    2d4c:	9c e0       	ldi	r25, 0x0C	; 12
    2d4e:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
#endif
	
	//Setup SPI, init SD card, etc
	init_media();
    2d52:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <init_media>
	uart_puts_p(PSTR("2"));
    2d56:	89 e1       	ldi	r24, 0x19	; 25
    2d58:	9c e0       	ldi	r25, 0x0C	; 12
    2d5a:	0e 94 19 44 	call	0x8832	; 0x8832 <uart_puts_p>
	
	read_config_file(); //Read the system settings from the config file	
    2d5e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <read_config_file>
}
    2d62:	1f 91       	pop	r17
    2d64:	0f 91       	pop	r16
    2d66:	08 95       	ret

00002d68 <main>:
	if(read_spot == BUFF_LEN) read_spot = 0;
}

int main(void)
{
	ioinit();
    2d68:	0e 94 75 16 	call	0x2cea	; 0x2cea <ioinit>

	//If we are in new log mode, find a new file name to write to
	if(setting_system_mode == MODE_NEWLOG)
    2d6c:	80 91 bc 04 	lds	r24, 0x04BC
    2d70:	88 23       	and	r24, r24
    2d72:	11 f4       	brne	.+4      	; 0x2d78 <main+0x10>
		newlog();
    2d74:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <newlog>

	//If we are in sequential log mode, determine if seqlog.txt has been created or not, and then open it for logging
	if(setting_system_mode == MODE_SEQLOG)
    2d78:	80 91 bc 04 	lds	r24, 0x04BC
    2d7c:	81 30       	cpi	r24, 0x01	; 1
    2d7e:	11 f4       	brne	.+4      	; 0x2d84 <main+0x1c>
		seqlog();
    2d80:	0e 94 c3 0c 	call	0x1986	; 0x1986 <seqlog>

	//Once either one of these modes exits, go to normal command mode, which is called by returning to main()
	command_shell();
    2d84:	0e 94 b4 10 	call	0x2168	; 0x2168 <command_shell>

    return 0;
}
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	08 95       	ret

00002d8e <partition_close>:
 * \param[in] partition The partition descriptor to destroy.
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    2d8e:	fc 01       	movw	r30, r24
    if(!partition)
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	11 f4       	brne	.+4      	; 0x2d98 <partition_close+0xa>
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	08 95       	ret

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    2d98:	10 86       	std	Z+8, r1	; 0x08
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
#endif

    return 1;
}
    2d9c:	08 95       	ret

00002d9e <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    2d9e:	4f 92       	push	r4
    2da0:	5f 92       	push	r5
    2da2:	6f 92       	push	r6
    2da4:	7f 92       	push	r7
    2da6:	8f 92       	push	r8
    2da8:	9f 92       	push	r9
    2daa:	bf 92       	push	r11
    2dac:	cf 92       	push	r12
    2dae:	df 92       	push	r13
    2db0:	ef 92       	push	r14
    2db2:	ff 92       	push	r15
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	df 93       	push	r29
    2dba:	cf 93       	push	r28
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	60 97       	sbiw	r28, 0x10	; 16
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	6c 01       	movw	r12, r24
    2dce:	4b 01       	movw	r8, r22
    2dd0:	3a 01       	movw	r6, r20
    2dd2:	29 01       	movw	r4, r18
    2dd4:	b0 2e       	mov	r11, r16
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <partition_open+0x3e>
    2dda:	9c c0       	rjmp	.+312    	; 0x2f14 <partition_open+0x176>
    2ddc:	61 15       	cp	r22, r1
    2dde:	71 05       	cpc	r23, r1
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <partition_open+0x46>
    2de2:	98 c0       	rjmp	.+304    	; 0x2f14 <partition_open+0x176>
    2de4:	83 e0       	ldi	r24, 0x03	; 3
    2de6:	80 17       	cp	r24, r16
    2de8:	0c f4       	brge	.+2      	; 0x2dec <partition_open+0x4e>
    2dea:	94 c0       	rjmp	.+296    	; 0x2f14 <partition_open+0x176>
        return 0;

    if(index >= 0)
    2dec:	07 fd       	sbrc	r16, 7
    2dee:	25 c0       	rjmp	.+74     	; 0x2e3a <partition_open+0x9c>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    2df0:	80 2f       	mov	r24, r16
    2df2:	99 27       	eor	r25, r25
    2df4:	87 fd       	sbrc	r24, 7
    2df6:	90 95       	com	r25
    2df8:	b4 e0       	ldi	r27, 0x04	; 4
    2dfa:	88 0f       	add	r24, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	ba 95       	dec	r27
    2e00:	e1 f7       	brne	.-8      	; 0x2dfa <partition_open+0x5c>
    2e02:	82 54       	subi	r24, 0x42	; 66
    2e04:	9e 4f       	sbci	r25, 0xFE	; 254
    2e06:	fc 01       	movw	r30, r24
    2e08:	ff 0f       	add	r31, r31
    2e0a:	ee 0b       	sbc	r30, r30
    2e0c:	fe 2f       	mov	r31, r30
    2e0e:	9c 01       	movw	r18, r24
    2e10:	4e 2f       	mov	r20, r30
    2e12:	5e 2f       	mov	r21, r30
    2e14:	6e 2f       	mov	r22, r30
    2e16:	7e 2f       	mov	r23, r30
    2e18:	8e 2f       	mov	r24, r30
    2e1a:	9e 2f       	mov	r25, r30
    2e1c:	8e 01       	movw	r16, r28
    2e1e:	0f 5f       	subi	r16, 0xFF	; 255
    2e20:	1f 4f       	sbci	r17, 0xFF	; 255
    2e22:	e0 e1       	ldi	r30, 0x10	; 16
    2e24:	ee 2e       	mov	r14, r30
    2e26:	f1 2c       	mov	r15, r1
    2e28:	f6 01       	movw	r30, r12
    2e2a:	09 95       	icall
    2e2c:	88 23       	and	r24, r24
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <partition_open+0x94>
    2e30:	71 c0       	rjmp	.+226    	; 0x2f14 <partition_open+0x176>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	88 23       	and	r24, r24
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <partition_open+0x9c>
    2e38:	6d c0       	rjmp	.+218    	; 0x2f14 <partition_open+0x176>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    2e3a:	80 91 c8 01 	lds	r24, 0x01C8
    2e3e:	88 23       	and	r24, r24
    2e40:	09 f0       	breq	.+2      	; 0x2e44 <partition_open+0xa6>
    2e42:	68 c0       	rjmp	.+208    	; 0x2f14 <partition_open+0x176>
    2e44:	80 c0       	rjmp	.+256    	; 0x2f46 <partition_open+0x1a8>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	80 93 c8 01 	sts	0x01C8, r24
        new_partition->offset = ((uint32_t) buffer[8]) |
    2e4c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e0       	ldi	r20, 0x00	; 0
    2e52:	50 e0       	ldi	r21, 0x00	; 0
    2e54:	54 2f       	mov	r21, r20
    2e56:	43 2f       	mov	r20, r19
    2e58:	32 2f       	mov	r19, r18
    2e5a:	22 27       	eor	r18, r18
    2e5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	a0 e0       	ldi	r26, 0x00	; 0
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	dc 01       	movw	r26, r24
    2e66:	99 27       	eor	r25, r25
    2e68:	88 27       	eor	r24, r24
    2e6a:	28 2b       	or	r18, r24
    2e6c:	39 2b       	or	r19, r25
    2e6e:	4a 2b       	or	r20, r26
    2e70:	5b 2b       	or	r21, r27
    2e72:	89 85       	ldd	r24, Y+9	; 0x09
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	a0 e0       	ldi	r26, 0x00	; 0
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	28 2b       	or	r18, r24
    2e7c:	39 2b       	or	r19, r25
    2e7e:	4a 2b       	or	r20, r26
    2e80:	5b 2b       	or	r21, r27
    2e82:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	a0 e0       	ldi	r26, 0x00	; 0
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	b8 2f       	mov	r27, r24
    2e8c:	aa 27       	eor	r26, r26
    2e8e:	99 27       	eor	r25, r25
    2e90:	88 27       	eor	r24, r24
    2e92:	28 2b       	or	r18, r24
    2e94:	39 2b       	or	r19, r25
    2e96:	4a 2b       	or	r20, r26
    2e98:	5b 2b       	or	r21, r27
    2e9a:	20 93 c9 01 	sts	0x01C9, r18
    2e9e:	30 93 ca 01 	sts	0x01CA, r19
    2ea2:	40 93 cb 01 	sts	0x01CB, r20
    2ea6:	50 93 cc 01 	sts	0x01CC, r21
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    2eaa:	2e 85       	ldd	r18, Y+14	; 0x0e
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	50 e0       	ldi	r21, 0x00	; 0
    2eb2:	54 2f       	mov	r21, r20
    2eb4:	43 2f       	mov	r20, r19
    2eb6:	32 2f       	mov	r19, r18
    2eb8:	22 27       	eor	r18, r18
    2eba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a0 e0       	ldi	r26, 0x00	; 0
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	99 27       	eor	r25, r25
    2ec6:	88 27       	eor	r24, r24
    2ec8:	28 2b       	or	r18, r24
    2eca:	39 2b       	or	r19, r25
    2ecc:	4a 2b       	or	r20, r26
    2ece:	5b 2b       	or	r21, r27
    2ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	a0 e0       	ldi	r26, 0x00	; 0
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	28 2b       	or	r18, r24
    2eda:	39 2b       	or	r19, r25
    2edc:	4a 2b       	or	r20, r26
    2ede:	5b 2b       	or	r21, r27
    2ee0:	88 89       	ldd	r24, Y+16	; 0x10
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	a0 e0       	ldi	r26, 0x00	; 0
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	b8 2f       	mov	r27, r24
    2eea:	aa 27       	eor	r26, r26
    2eec:	99 27       	eor	r25, r25
    2eee:	88 27       	eor	r24, r24
    2ef0:	28 2b       	or	r18, r24
    2ef2:	39 2b       	or	r19, r25
    2ef4:	4a 2b       	or	r20, r26
    2ef6:	5b 2b       	or	r21, r27
    2ef8:	20 93 cd 01 	sts	0x01CD, r18
    2efc:	30 93 ce 01 	sts	0x01CE, r19
    2f00:	40 93 cf 01 	sts	0x01CF, r20
    2f04:	50 93 d0 01 	sts	0x01D0, r21
    2f08:	03 c0       	rjmp	.+6      	; 0x2f10 <partition_open+0x172>
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
    2f0a:	8f ef       	ldi	r24, 0xFF	; 255
    2f0c:	80 93 c8 01 	sts	0x01C8, r24
    2f10:	9f 01       	movw	r18, r30
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <partition_open+0x17a>
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    }

    return new_partition;
}
    2f18:	c9 01       	movw	r24, r18
    2f1a:	60 96       	adiw	r28, 0x10	; 16
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	1f 91       	pop	r17
    2f2c:	0f 91       	pop	r16
    2f2e:	ff 90       	pop	r15
    2f30:	ef 90       	pop	r14
    2f32:	df 90       	pop	r13
    2f34:	cf 90       	pop	r12
    2f36:	bf 90       	pop	r11
    2f38:	9f 90       	pop	r9
    2f3a:	8f 90       	pop	r8
    2f3c:	7f 90       	pop	r7
    2f3e:	6f 90       	pop	r6
    2f40:	5f 90       	pop	r5
    2f42:	4f 90       	pop	r4
    2f44:	08 95       	ret
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    2f46:	e0 ec       	ldi	r30, 0xC0	; 192
    2f48:	f1 e0       	ldi	r31, 0x01	; 1
    2f4a:	81 e1       	ldi	r24, 0x11	; 17
    2f4c:	df 01       	movw	r26, r30
    2f4e:	1d 92       	st	X+, r1
    2f50:	8a 95       	dec	r24
    2f52:	e9 f7       	brne	.-6      	; 0x2f4e <partition_open+0x1b0>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    2f54:	d0 92 c1 01 	sts	0x01C1, r13
    2f58:	c0 92 c0 01 	sts	0x01C0, r12
    new_partition->device_read_interval = device_read_interval;
    2f5c:	90 92 c3 01 	sts	0x01C3, r9
    2f60:	80 92 c2 01 	sts	0x01C2, r8
    new_partition->device_write = device_write;
    2f64:	70 92 c5 01 	sts	0x01C5, r7
    2f68:	60 92 c4 01 	sts	0x01C4, r6
    new_partition->device_write_interval = device_write_interval;
    2f6c:	50 92 c7 01 	sts	0x01C7, r5
    2f70:	40 92 c6 01 	sts	0x01C6, r4

    if(index >= 0)
    2f74:	b7 fe       	sbrs	r11, 7
    2f76:	67 cf       	rjmp	.-306    	; 0x2e46 <partition_open+0xa8>
    2f78:	c8 cf       	rjmp	.-112    	; 0x2f0a <partition_open+0x16c>

00002f7a <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
}
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	08 95       	ret

00002f7e <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	08 95       	ret

00002f82 <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    2f82:	28 2f       	mov	r18, r24
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    2f84:	8f ef       	ldi	r24, 0xFF	; 255
    2f86:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    2f88:	0d b4       	in	r0, 0x2d	; 45
    2f8a:	07 fe       	sbrs	r0, 7
    2f8c:	fd cf       	rjmp	.-6      	; 0x2f88 <sd_raw_send_command+0x6>
    SPSR &= ~(1 << SPIF);
    2f8e:	8d b5       	in	r24, 0x2d	; 45
    2f90:	8f 77       	andi	r24, 0x7F	; 127
    2f92:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    2f94:	8e b5       	in	r24, 0x2e	; 46

    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    2f96:	82 2f       	mov	r24, r18
    2f98:	80 64       	ori	r24, 0x40	; 64
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2f9a:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2f9c:	0d b4       	in	r0, 0x2d	; 45
    2f9e:	07 fe       	sbrs	r0, 7
    2fa0:	fd cf       	rjmp	.-6      	; 0x2f9c <sd_raw_send_command+0x1a>
    SPSR &= ~(1 << SPIF);
    2fa2:	8d b5       	in	r24, 0x2d	; 45
    2fa4:	8f 77       	andi	r24, 0x7F	; 127
    2fa6:	8d bd       	out	0x2d, r24	; 45
    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    2fa8:	87 2f       	mov	r24, r23
    2faa:	99 27       	eor	r25, r25
    2fac:	aa 27       	eor	r26, r26
    2fae:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2fb0:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2fb2:	0d b4       	in	r0, 0x2d	; 45
    2fb4:	07 fe       	sbrs	r0, 7
    2fb6:	fd cf       	rjmp	.-6      	; 0x2fb2 <sd_raw_send_command+0x30>
    SPSR &= ~(1 << SPIF);
    2fb8:	8d b5       	in	r24, 0x2d	; 45
    2fba:	8f 77       	andi	r24, 0x7F	; 127
    2fbc:	8d bd       	out	0x2d, r24	; 45
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	aa 27       	eor	r26, r26
    2fc2:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2fc4:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2fc6:	0d b4       	in	r0, 0x2d	; 45
    2fc8:	07 fe       	sbrs	r0, 7
    2fca:	fd cf       	rjmp	.-6      	; 0x2fc6 <sd_raw_send_command+0x44>
    SPSR &= ~(1 << SPIF);
    2fcc:	8d b5       	in	r24, 0x2d	; 45
    2fce:	8f 77       	andi	r24, 0x7F	; 127
    2fd0:	8d bd       	out	0x2d, r24	; 45

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    2fd2:	bb 27       	eor	r27, r27
    2fd4:	a7 2f       	mov	r26, r23
    2fd6:	96 2f       	mov	r25, r22
    2fd8:	85 2f       	mov	r24, r21
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2fda:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2fdc:	0d b4       	in	r0, 0x2d	; 45
    2fde:	07 fe       	sbrs	r0, 7
    2fe0:	fd cf       	rjmp	.-6      	; 0x2fdc <sd_raw_send_command+0x5a>
    SPSR &= ~(1 << SPIF);
    2fe2:	8d b5       	in	r24, 0x2d	; 45
    2fe4:	8f 77       	andi	r24, 0x7F	; 127
    2fe6:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    2fe8:	4e bd       	out	0x2e, r20	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    2fea:	0d b4       	in	r0, 0x2d	; 45
    2fec:	07 fe       	sbrs	r0, 7
    2fee:	fd cf       	rjmp	.-6      	; 0x2fea <sd_raw_send_command+0x68>
    SPSR &= ~(1 << SPIF);
    2ff0:	8d b5       	in	r24, 0x2d	; 45
    2ff2:	8f 77       	andi	r24, 0x7F	; 127
    2ff4:	8d bd       	out	0x2d, r24	; 45
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
    2ff6:	22 23       	and	r18, r18
    2ff8:	19 f0       	breq	.+6      	; 0x3000 <sd_raw_send_command+0x7e>
    2ffa:	28 30       	cpi	r18, 0x08	; 8
    2ffc:	69 f4       	brne	.+26     	; 0x3018 <sd_raw_send_command+0x96>
    2ffe:	06 c0       	rjmp	.+12     	; 0x300c <sd_raw_send_command+0x8a>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3000:	85 e9       	ldi	r24, 0x95	; 149
    3002:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3004:	0d b4       	in	r0, 0x2d	; 45
    3006:	07 fe       	sbrs	r0, 7
    3008:	fd cf       	rjmp	.-6      	; 0x3004 <sd_raw_send_command+0x82>
    300a:	0b c0       	rjmp	.+22     	; 0x3022 <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    300c:	87 e8       	ldi	r24, 0x87	; 135
    300e:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3010:	0d b4       	in	r0, 0x2d	; 45
    3012:	07 fe       	sbrs	r0, 7
    3014:	fd cf       	rjmp	.-6      	; 0x3010 <sd_raw_send_command+0x8e>
    3016:	05 c0       	rjmp	.+10     	; 0x3022 <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3018:	8f ef       	ldi	r24, 0xFF	; 255
    301a:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    301c:	0d b4       	in	r0, 0x2d	; 45
    301e:	07 fe       	sbrs	r0, 7
    3020:	fd cf       	rjmp	.-6      	; 0x301c <sd_raw_send_command+0x9a>
    SPSR &= ~(1 << SPIF);
    3022:	8d b5       	in	r24, 0x2d	; 45
    3024:	8f 77       	andi	r24, 0x7F	; 127
    3026:	8d bd       	out	0x2d, r24	; 45
    3028:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    302a:	2f ef       	ldi	r18, 0xFF	; 255
    302c:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    302e:	0d b4       	in	r0, 0x2d	; 45
    3030:	07 fe       	sbrs	r0, 7
    3032:	fd cf       	rjmp	.-6      	; 0x302e <sd_raw_send_command+0xac>
    SPSR &= ~(1 << SPIF);
    3034:	8d b5       	in	r24, 0x2d	; 45
    3036:	8f 77       	andi	r24, 0x7F	; 127
    3038:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    303a:	8e b5       	in	r24, 0x2e	; 46
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
        if(response != 0xff)
    303c:	8f 3f       	cpi	r24, 0xFF	; 255
    303e:	19 f4       	brne	.+6      	; 0x3046 <sd_raw_send_command+0xc4>
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    3040:	9f 5f       	subi	r25, 0xFF	; 255
    3042:	9a 30       	cpi	r25, 0x0A	; 10
    3044:	99 f7       	brne	.-26     	; 0x302c <sd_raw_send_command+0xaa>
        if(response != 0xff)
            break;
    }

    return response;
}
    3046:	08 95       	ret

00003048 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    3048:	8f 92       	push	r8
    304a:	9f 92       	push	r9
    304c:	af 92       	push	r10
    304e:	bf 92       	push	r11
    3050:	cf 92       	push	r12
    3052:	df 92       	push	r13
    3054:	ef 92       	push	r14
    3056:	ff 92       	push	r15
    3058:	0f 93       	push	r16
    305a:	1f 93       	push	r17
    305c:	cf 93       	push	r28
    305e:	df 93       	push	r29
    3060:	ec 01       	movw	r28, r24
    if(!info || !sd_raw_available())
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	91 f0       	breq	.+36     	; 0x308a <sd_raw_get_info+0x42>
        return 0;

    memset(info, 0, sizeof(*info));
    3066:	8d e1       	ldi	r24, 0x1D	; 29
    3068:	fe 01       	movw	r30, r28
    306a:	11 92       	st	Z+, r1
    306c:	8a 95       	dec	r24
    306e:	e9 f7       	brne	.-6      	; 0x306a <sd_raw_get_info+0x22>

    select_card();
    3070:	29 9a       	sbi	0x05, 1	; 5
    3072:	2c 98       	cbi	0x05, 4	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    3074:	8a e0       	ldi	r24, 0x0A	; 10
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	50 e0       	ldi	r21, 0x00	; 0
    307a:	60 e0       	ldi	r22, 0x00	; 0
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
    3082:	88 23       	and	r24, r24
    3084:	21 f0       	breq	.+8      	; 0x308e <sd_raw_get_info+0x46>
    {
        unselect_card();
    3086:	29 98       	cbi	0x05, 1	; 5
    3088:	2c 9a       	sbi	0x05, 4	; 5
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	22 c1       	rjmp	.+580    	; 0x32d2 <sd_raw_get_info+0x28a>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    308e:	9f ef       	ldi	r25, 0xFF	; 255
    3090:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    3092:	0d b4       	in	r0, 0x2d	; 45
    3094:	07 fe       	sbrs	r0, 7
    3096:	fd cf       	rjmp	.-6      	; 0x3092 <sd_raw_get_info+0x4a>
    SPSR &= ~(1 << SPIF);
    3098:	8d b5       	in	r24, 0x2d	; 45
    309a:	8f 77       	andi	r24, 0x7F	; 127
    309c:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    309e:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    30a0:	8e 3f       	cpi	r24, 0xFE	; 254
    30a2:	b1 f7       	brne	.-20     	; 0x3090 <sd_raw_get_info+0x48>
    30a4:	1c 2f       	mov	r17, r28
    30a6:	ce 01       	movw	r24, r28
    30a8:	fc 01       	movw	r30, r24
    30aa:	60 e6       	ldi	r22, 0x60	; 96
    30ac:	70 e0       	ldi	r23, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    30ae:	0f ef       	ldi	r16, 0xFF	; 255
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    30b0:	9e 2f       	mov	r25, r30
    30b2:	91 1b       	sub	r25, r17
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    30b4:	0e bd       	out	0x2e, r16	; 46
    while(!(SPSR & (1 << SPIF)));
    30b6:	0d b4       	in	r0, 0x2d	; 45
    30b8:	07 fe       	sbrs	r0, 7
    30ba:	fd cf       	rjmp	.-6      	; 0x30b6 <sd_raw_get_info+0x6e>
    SPSR &= ~(1 << SPIF);
    30bc:	8d b5       	in	r24, 0x2d	; 45
    30be:	8f 77       	andi	r24, 0x7F	; 127
    30c0:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    30c2:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        switch(i)
    30c4:	98 30       	cpi	r25, 0x08	; 8
    30c6:	28 f4       	brcc	.+10     	; 0x30d2 <sd_raw_get_info+0x8a>
    30c8:	93 30       	cpi	r25, 0x03	; 3
    30ca:	88 f4       	brcc	.+34     	; 0x30ee <sd_raw_get_info+0xa6>
    30cc:	99 23       	and	r25, r25
    30ce:	59 f0       	breq	.+22     	; 0x30e6 <sd_raw_get_info+0x9e>
    30d0:	0c c0       	rjmp	.+24     	; 0x30ea <sd_raw_get_info+0xa2>
    30d2:	9d 30       	cpi	r25, 0x0D	; 13
    30d4:	18 f4       	brcc	.+6      	; 0x30dc <sd_raw_get_info+0x94>
    30d6:	99 30       	cpi	r25, 0x09	; 9
    30d8:	70 f4       	brcc	.+28     	; 0x30f6 <sd_raw_get_info+0xae>
    30da:	0b c0       	rjmp	.+22     	; 0x30f2 <sd_raw_get_info+0xaa>
    30dc:	9d 30       	cpi	r25, 0x0D	; 13
    30de:	19 f1       	breq	.+70     	; 0x3126 <sd_raw_get_info+0xde>
    30e0:	9e 30       	cpi	r25, 0x0E	; 14
    30e2:	69 f5       	brne	.+90     	; 0x313e <sd_raw_get_info+0xf6>
    30e4:	24 c0       	rjmp	.+72     	; 0x312e <sd_raw_get_info+0xe6>
        {
            case 0:
                info->manufacturer = b;
    30e6:	28 83       	st	Y, r18
    30e8:	2a c0       	rjmp	.+84     	; 0x313e <sd_raw_get_info+0xf6>
                break;
            case 1:
            case 2:
                info->oem[i - 1] = b;
    30ea:	20 83       	st	Z, r18
    30ec:	28 c0       	rjmp	.+80     	; 0x313e <sd_raw_get_info+0xf6>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    30ee:	21 83       	std	Z+1, r18	; 0x01
    30f0:	26 c0       	rjmp	.+76     	; 0x313e <sd_raw_get_info+0xf6>
                break;
            case 8:
                info->revision = b;
    30f2:	2a 87       	std	Y+10, r18	; 0x0a
    30f4:	24 c0       	rjmp	.+72     	; 0x313e <sd_raw_get_info+0xf6>
                break;
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e0       	ldi	r20, 0x00	; 0
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	06 2e       	mov	r0, r22
    30fe:	04 c0       	rjmp	.+8      	; 0x3108 <sd_raw_get_info+0xc0>
    3100:	22 0f       	add	r18, r18
    3102:	33 1f       	adc	r19, r19
    3104:	44 1f       	adc	r20, r20
    3106:	55 1f       	adc	r21, r21
    3108:	0a 94       	dec	r0
    310a:	d2 f7       	brpl	.-12     	; 0x3100 <sd_raw_get_info+0xb8>
    310c:	8b 85       	ldd	r24, Y+11	; 0x0b
    310e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3110:	ad 85       	ldd	r26, Y+13	; 0x0d
    3112:	be 85       	ldd	r27, Y+14	; 0x0e
    3114:	82 2b       	or	r24, r18
    3116:	93 2b       	or	r25, r19
    3118:	a4 2b       	or	r26, r20
    311a:	b5 2b       	or	r27, r21
    311c:	8b 87       	std	Y+11, r24	; 0x0b
    311e:	9c 87       	std	Y+12, r25	; 0x0c
    3120:	ad 87       	std	Y+13, r26	; 0x0d
    3122:	be 87       	std	Y+14, r27	; 0x0e
    3124:	0c c0       	rjmp	.+24     	; 0x313e <sd_raw_get_info+0xf6>
                break;
            case 13:
                info->manufacturing_year = b << 4;
    3126:	22 95       	swap	r18
    3128:	20 7f       	andi	r18, 0xF0	; 240
    312a:	2f 87       	std	Y+15, r18	; 0x0f
    312c:	08 c0       	rjmp	.+16     	; 0x313e <sd_raw_get_info+0xf6>
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
    312e:	92 2f       	mov	r25, r18
    3130:	92 95       	swap	r25
    3132:	9f 70       	andi	r25, 0x0F	; 15
    3134:	8f 85       	ldd	r24, Y+15	; 0x0f
    3136:	89 2b       	or	r24, r25
    3138:	8f 87       	std	Y+15, r24	; 0x0f
                info->manufacturing_month = b & 0x0f;
    313a:	2f 70       	andi	r18, 0x0F	; 15
    313c:	28 8b       	std	Y+16, r18	; 0x10
    313e:	31 96       	adiw	r30, 0x01	; 1
    3140:	68 50       	subi	r22, 0x08	; 8
    3142:	70 40       	sbci	r23, 0x00	; 0
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    3144:	8f ef       	ldi	r24, 0xFF	; 255
    3146:	60 3d       	cpi	r22, 0xD0	; 208
    3148:	78 07       	cpc	r23, r24
    314a:	09 f0       	breq	.+2      	; 0x314e <sd_raw_get_info+0x106>
    314c:	b1 cf       	rjmp	.-158    	; 0x30b0 <sd_raw_get_info+0x68>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    314e:	89 e0       	ldi	r24, 0x09	; 9
    3150:	40 e0       	ldi	r20, 0x00	; 0
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	60 e0       	ldi	r22, 0x00	; 0
    3156:	70 e0       	ldi	r23, 0x00	; 0
    3158:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
    315c:	88 23       	and	r24, r24
    315e:	09 f0       	breq	.+2      	; 0x3162 <sd_raw_get_info+0x11a>
    3160:	92 cf       	rjmp	.-220    	; 0x3086 <sd_raw_get_info+0x3e>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3162:	9f ef       	ldi	r25, 0xFF	; 255
    3164:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    3166:	0d b4       	in	r0, 0x2d	; 45
    3168:	07 fe       	sbrs	r0, 7
    316a:	fd cf       	rjmp	.-6      	; 0x3166 <sd_raw_get_info+0x11e>
    SPSR &= ~(1 << SPIF);
    316c:	8d b5       	in	r24, 0x2d	; 45
    316e:	8f 77       	andi	r24, 0x7F	; 127
    3170:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3172:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    3174:	8e 3f       	cpi	r24, 0xFE	; 254
    3176:	b1 f7       	brne	.-20     	; 0x3164 <sd_raw_get_info+0x11c>
            info->format = (b & 0x0c) >> 2;
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    3178:	80 91 da 03 	lds	r24, 0x03DA
    317c:	c8 2e       	mov	r12, r24
    317e:	dd 24       	eor	r13, r13
    3180:	e2 e0       	ldi	r30, 0x02	; 2
    3182:	ce 22       	and	r12, r30
    3184:	dd 24       	eor	r13, r13
    3186:	99 24       	eor	r9, r9
    3188:	bb 24       	eor	r11, r11
    318a:	ee 24       	eor	r14, r14
    318c:	ff 24       	eor	r15, r15
    318e:	10 e0       	ldi	r17, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3190:	88 24       	eor	r8, r8
    3192:	8a 94       	dec	r8
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    3194:	aa 24       	eor	r10, r10
    3196:	a3 94       	inc	r10
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3198:	8e bc       	out	0x2e, r8	; 46
    while(!(SPSR & (1 << SPIF)));
    319a:	0d b4       	in	r0, 0x2d	; 45
    319c:	07 fe       	sbrs	r0, 7
    319e:	fd cf       	rjmp	.-6      	; 0x319a <sd_raw_get_info+0x152>
    SPSR &= ~(1 << SPIF);
    31a0:	8d b5       	in	r24, 0x2d	; 45
    31a2:	8f 77       	andi	r24, 0x7F	; 127
    31a4:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    31a6:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        if(i == 14)
    31a8:	1e 30       	cpi	r17, 0x0E	; 14
    31aa:	81 f4       	brne	.+32     	; 0x31cc <sd_raw_get_info+0x184>
        {
            if(b & 0x40)
    31ac:	82 2f       	mov	r24, r18
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	26 fd       	sbrc	r18, 6
                info->flag_copy = 1;
    31b2:	a9 8e       	std	Y+25, r10	; 0x19
            if(b & 0x20)
    31b4:	85 fd       	sbrc	r24, 5
                info->flag_write_protect = 1;
    31b6:	aa 8e       	std	Y+26, r10	; 0x1a
            if(b & 0x10)
    31b8:	84 fd       	sbrc	r24, 4
                info->flag_write_protect_temp = 1;
    31ba:	ab 8e       	std	Y+27, r10	; 0x1b
            info->format = (b & 0x0c) >> 2;
    31bc:	8c 70       	andi	r24, 0x0C	; 12
    31be:	90 70       	andi	r25, 0x00	; 0
    31c0:	95 95       	asr	r25
    31c2:	87 95       	ror	r24
    31c4:	95 95       	asr	r25
    31c6:	87 95       	ror	r24
    31c8:	8c 8f       	std	Y+28, r24	; 0x1c
    31ca:	7c c0       	rjmp	.+248    	; 0x32c4 <sd_raw_get_info+0x27c>
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    31cc:	c1 14       	cp	r12, r1
    31ce:	d1 04       	cpc	r13, r1
    31d0:	39 f1       	breq	.+78     	; 0x3220 <sd_raw_get_info+0x1d8>
            {
                switch(i)
    31d2:	17 30       	cpi	r17, 0x07	; 7
    31d4:	29 f0       	breq	.+10     	; 0x31e0 <sd_raw_get_info+0x198>
    31d6:	17 30       	cpi	r17, 0x07	; 7
    31d8:	50 f0       	brcs	.+20     	; 0x31ee <sd_raw_get_info+0x1a6>
    31da:	1a 30       	cpi	r17, 0x0A	; 10
    31dc:	40 f4       	brcc	.+16     	; 0x31ee <sd_raw_get_info+0x1a6>
    31de:	01 c0       	rjmp	.+2      	; 0x31e2 <sd_raw_get_info+0x19a>
                {
                    case 7:
                        b &= 0x3f;
    31e0:	2f 73       	andi	r18, 0x3F	; 63
                    case 8:
                    case 9:
                        csd_c_size <<= 8;
    31e2:	9e 2d       	mov	r25, r14
    31e4:	88 27       	eor	r24, r24
                        csd_c_size |= b;
    31e6:	e2 2e       	mov	r14, r18
    31e8:	ff 24       	eor	r15, r15
    31ea:	e8 2a       	or	r14, r24
    31ec:	f9 2a       	or	r15, r25
                        break;
                }
                if(i == 9)
    31ee:	19 30       	cpi	r17, 0x09	; 9
    31f0:	09 f0       	breq	.+2      	; 0x31f4 <sd_raw_get_info+0x1ac>
    31f2:	68 c0       	rjmp	.+208    	; 0x32c4 <sd_raw_get_info+0x27c>
                {
                    ++csd_c_size;
    31f4:	08 94       	sec
    31f6:	e1 1c       	adc	r14, r1
    31f8:	f1 1c       	adc	r15, r1
                    info->capacity = (offset_t) csd_c_size * 512 * 1024;
    31fa:	97 01       	movw	r18, r14
    31fc:	40 e0       	ldi	r20, 0x00	; 0
    31fe:	50 e0       	ldi	r21, 0x00	; 0
    3200:	60 e0       	ldi	r22, 0x00	; 0
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	03 e1       	ldi	r16, 0x13	; 19
    320a:	0e 94 c3 45 	call	0x8b86	; 0x8b86 <__ashldi3>
    320e:	29 8b       	std	Y+17, r18	; 0x11
    3210:	3a 8b       	std	Y+18, r19	; 0x12
    3212:	4b 8b       	std	Y+19, r20	; 0x13
    3214:	5c 8b       	std	Y+20, r21	; 0x14
    3216:	6d 8b       	std	Y+21, r22	; 0x15
    3218:	7e 8b       	std	Y+22, r23	; 0x16
    321a:	8f 8b       	std	Y+23, r24	; 0x17
    321c:	98 8f       	std	Y+24, r25	; 0x18
    321e:	52 c0       	rjmp	.+164    	; 0x32c4 <sd_raw_get_info+0x27c>
                }
            }
            else
#endif
            {
                switch(i)
    3220:	17 30       	cpi	r17, 0x07	; 7
    3222:	d9 f0       	breq	.+54     	; 0x325a <sd_raw_get_info+0x212>
    3224:	18 30       	cpi	r17, 0x08	; 8
    3226:	30 f4       	brcc	.+12     	; 0x3234 <sd_raw_get_info+0x1ec>
    3228:	15 30       	cpi	r17, 0x05	; 5
    322a:	61 f0       	breq	.+24     	; 0x3244 <sd_raw_get_info+0x1fc>
    322c:	16 30       	cpi	r17, 0x06	; 6
    322e:	09 f0       	breq	.+2      	; 0x3232 <sd_raw_get_info+0x1ea>
    3230:	49 c0       	rjmp	.+146    	; 0x32c4 <sd_raw_get_info+0x27c>
    3232:	0c c0       	rjmp	.+24     	; 0x324c <sd_raw_get_info+0x204>
    3234:	19 30       	cpi	r17, 0x09	; 9
    3236:	31 f1       	breq	.+76     	; 0x3284 <sd_raw_get_info+0x23c>
    3238:	19 30       	cpi	r17, 0x09	; 9
    323a:	c0 f0       	brcs	.+48     	; 0x326c <sd_raw_get_info+0x224>
    323c:	1a 30       	cpi	r17, 0x0A	; 10
    323e:	09 f0       	breq	.+2      	; 0x3242 <sd_raw_get_info+0x1fa>
    3240:	41 c0       	rjmp	.+130    	; 0x32c4 <sd_raw_get_info+0x27c>
    3242:	25 c0       	rjmp	.+74     	; 0x328e <sd_raw_get_info+0x246>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    3244:	7f e0       	ldi	r23, 0x0F	; 15
    3246:	97 2e       	mov	r9, r23
    3248:	92 22       	and	r9, r18
    324a:	3c c0       	rjmp	.+120    	; 0x32c4 <sd_raw_get_info+0x27c>
                        break;
                    case 6:
                        csd_c_size = b & 0x03;
    324c:	82 2f       	mov	r24, r18
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	83 70       	andi	r24, 0x03	; 3
    3252:	90 70       	andi	r25, 0x00	; 0
                        csd_c_size <<= 8;
    3254:	f8 2e       	mov	r15, r24
    3256:	ee 24       	eor	r14, r14
    3258:	35 c0       	rjmp	.+106    	; 0x32c4 <sd_raw_get_info+0x27c>
                        break;
                    case 7:
                        csd_c_size |= b;
    325a:	82 2f       	mov	r24, r18
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	e8 2a       	or	r14, r24
    3260:	f9 2a       	or	r15, r25
                        csd_c_size <<= 2;
    3262:	ee 0c       	add	r14, r14
    3264:	ff 1c       	adc	r15, r15
    3266:	ee 0c       	add	r14, r14
    3268:	ff 1c       	adc	r15, r15
    326a:	2c c0       	rjmp	.+88     	; 0x32c4 <sd_raw_get_info+0x27c>
                        break;
                    case 8:
                        csd_c_size |= b >> 6;
    326c:	22 95       	swap	r18
    326e:	26 95       	lsr	r18
    3270:	26 95       	lsr	r18
    3272:	23 70       	andi	r18, 0x03	; 3
    3274:	82 2f       	mov	r24, r18
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	e8 2a       	or	r14, r24
    327a:	f9 2a       	or	r15, r25
                        ++csd_c_size;
    327c:	08 94       	sec
    327e:	e1 1c       	adc	r14, r1
    3280:	f1 1c       	adc	r15, r1
    3282:	20 c0       	rjmp	.+64     	; 0x32c4 <sd_raw_get_info+0x27c>
                        break;
                    case 9:
                        csd_c_size_mult = b & 0x03;
    3284:	43 e0       	ldi	r20, 0x03	; 3
    3286:	b4 2e       	mov	r11, r20
    3288:	b2 22       	and	r11, r18
                        csd_c_size_mult <<= 1;
    328a:	bb 0c       	add	r11, r11
    328c:	1b c0       	rjmp	.+54     	; 0x32c4 <sd_raw_get_info+0x27c>
                        break;
                    case 10:
                        csd_c_size_mult |= b >> 7;
    328e:	22 1f       	adc	r18, r18
    3290:	22 27       	eor	r18, r18
    3292:	22 1f       	adc	r18, r18
    3294:	b2 2a       	or	r11, r18

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    3296:	97 01       	movw	r18, r14
    3298:	40 e0       	ldi	r20, 0x00	; 0
    329a:	50 e0       	ldi	r21, 0x00	; 0
    329c:	e9 2d       	mov	r30, r9
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	32 96       	adiw	r30, 0x02	; 2
    32a2:	eb 0d       	add	r30, r11
    32a4:	f1 1d       	adc	r31, r1
    32a6:	04 c0       	rjmp	.+8      	; 0x32b0 <sd_raw_get_info+0x268>
    32a8:	22 0f       	add	r18, r18
    32aa:	33 1f       	adc	r19, r19
    32ac:	44 1f       	adc	r20, r20
    32ae:	55 1f       	adc	r21, r21
    32b0:	ea 95       	dec	r30
    32b2:	d2 f7       	brpl	.-12     	; 0x32a8 <sd_raw_get_info+0x260>
    32b4:	29 8b       	std	Y+17, r18	; 0x11
    32b6:	3a 8b       	std	Y+18, r19	; 0x12
    32b8:	4b 8b       	std	Y+19, r20	; 0x13
    32ba:	5c 8b       	std	Y+20, r21	; 0x14
    32bc:	1d 8a       	std	Y+21, r1	; 0x15
    32be:	1e 8a       	std	Y+22, r1	; 0x16
    32c0:	1f 8a       	std	Y+23, r1	; 0x17
    32c2:	18 8e       	std	Y+24, r1	; 0x18
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    32c4:	1f 5f       	subi	r17, 0xFF	; 255
    32c6:	12 31       	cpi	r17, 0x12	; 18
    32c8:	09 f0       	breq	.+2      	; 0x32cc <sd_raw_get_info+0x284>
    32ca:	66 cf       	rjmp	.-308    	; 0x3198 <sd_raw_get_info+0x150>
                }
            }
        }
    }

    unselect_card();
    32cc:	29 98       	cbi	0x05, 1	; 5
    32ce:	2c 9a       	sbi	0x05, 4	; 5
    32d0:	81 e0       	ldi	r24, 0x01	; 1

    return 1;
}
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	1f 91       	pop	r17
    32d8:	0f 91       	pop	r16
    32da:	ff 90       	pop	r15
    32dc:	ef 90       	pop	r14
    32de:	df 90       	pop	r13
    32e0:	cf 90       	pop	r12
    32e2:	bf 90       	pop	r11
    32e4:	af 90       	pop	r10
    32e6:	9f 90       	pop	r9
    32e8:	8f 90       	pop	r8
    32ea:	08 95       	ret

000032ec <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    32ec:	2f 92       	push	r2
    32ee:	3f 92       	push	r3
    32f0:	4f 92       	push	r4
    32f2:	5f 92       	push	r5
    32f4:	6f 92       	push	r6
    32f6:	7f 92       	push	r7
    32f8:	8f 92       	push	r8
    32fa:	9f 92       	push	r9
    32fc:	af 92       	push	r10
    32fe:	bf 92       	push	r11
    3300:	cf 92       	push	r12
    3302:	df 92       	push	r13
    3304:	ef 92       	push	r14
    3306:	ff 92       	push	r15
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	2c 97       	sbiw	r28, 0x0c	; 12
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	39 01       	movw	r6, r18
    3322:	4a 01       	movw	r8, r20
    3324:	5b 01       	movw	r10, r22
    3326:	6c 01       	movw	r12, r24
    3328:	1a 83       	std	Y+2, r17	; 0x02
    332a:	09 83       	std	Y+1, r16	; 0x01
    332c:	fc 82       	std	Y+4, r15	; 0x04
    332e:	eb 82       	std	Y+3, r14	; 0x03
    3330:	93 c1       	rjmp	.+806    	; 0x3658 <sd_raw_write+0x36c>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    3332:	bf ef       	ldi	r27, 0xFF	; 255
    3334:	4b 2e       	mov	r4, r27
    3336:	b1 e0       	ldi	r27, 0x01	; 1
    3338:	5b 2e       	mov	r5, r27
    333a:	46 20       	and	r4, r6
    333c:	57 20       	and	r5, r7
        block_address = offset - block_offset;
    333e:	92 01       	movw	r18, r4
    3340:	a6 2d       	mov	r26, r6
    3342:	a4 19       	sub	r26, r4
    3344:	aa 87       	std	Y+10, r26	; 0x0a
    3346:	e1 e0       	ldi	r30, 0x01	; 1
    3348:	6a 16       	cp	r6, r26
    334a:	08 f0       	brcs	.+2      	; 0x334e <sd_raw_write+0x62>
    334c:	e0 e0       	ldi	r30, 0x00	; 0
    334e:	87 2d       	mov	r24, r7
    3350:	83 1b       	sub	r24, r19
    3352:	21 e0       	ldi	r18, 0x01	; 1
    3354:	78 16       	cp	r7, r24
    3356:	08 f0       	brcs	.+2      	; 0x335a <sd_raw_write+0x6e>
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	b8 2f       	mov	r27, r24
    335c:	be 1b       	sub	r27, r30
    335e:	bd 83       	std	Y+5, r27	; 0x05
    3360:	91 e0       	ldi	r25, 0x01	; 1
    3362:	8b 17       	cp	r24, r27
    3364:	08 f0       	brcs	.+2      	; 0x3368 <sd_raw_write+0x7c>
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	29 2b       	or	r18, r25
    336a:	e8 2d       	mov	r30, r8
    336c:	e2 1b       	sub	r30, r18
    336e:	ee 83       	std	Y+6, r30	; 0x06
    3370:	31 e0       	ldi	r19, 0x01	; 1
    3372:	8e 16       	cp	r8, r30
    3374:	08 f0       	brcs	.+2      	; 0x3378 <sd_raw_write+0x8c>
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	f9 2d       	mov	r31, r9
    337a:	f3 1b       	sub	r31, r19
    337c:	ff 83       	std	Y+7, r31	; 0x07
    337e:	61 e0       	ldi	r22, 0x01	; 1
    3380:	9f 16       	cp	r9, r31
    3382:	08 f0       	brcs	.+2      	; 0x3386 <sd_raw_write+0x9a>
    3384:	60 e0       	ldi	r22, 0x00	; 0
    3386:	2a 2d       	mov	r18, r10
    3388:	26 1b       	sub	r18, r22
    338a:	28 87       	std	Y+8, r18	; 0x08
    338c:	71 e0       	ldi	r23, 0x01	; 1
    338e:	a2 16       	cp	r10, r18
    3390:	08 f0       	brcs	.+2      	; 0x3394 <sd_raw_write+0xa8>
    3392:	70 e0       	ldi	r23, 0x00	; 0
    3394:	2b 2c       	mov	r2, r11
    3396:	27 1a       	sub	r2, r23
    3398:	91 e0       	ldi	r25, 0x01	; 1
    339a:	b2 14       	cp	r11, r2
    339c:	08 f0       	brcs	.+2      	; 0x33a0 <sd_raw_write+0xb4>
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	3c 2c       	mov	r3, r12
    33a2:	39 1a       	sub	r3, r25
    33a4:	91 e0       	ldi	r25, 0x01	; 1
    33a6:	c3 14       	cp	r12, r3
    33a8:	08 f0       	brcs	.+2      	; 0x33ac <sd_raw_write+0xc0>
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	3d 2d       	mov	r19, r13
    33ae:	39 1b       	sub	r19, r25
    33b0:	39 87       	std	Y+9, r19	; 0x09
        write_length = 512 - block_offset; /* write up to block border */
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	92 e0       	ldi	r25, 0x02	; 2
    33b6:	84 19       	sub	r24, r4
    33b8:	95 09       	sbc	r25, r5
    33ba:	9c 87       	std	Y+12, r25	; 0x0c
    33bc:	8b 87       	std	Y+11, r24	; 0x0b
    33be:	ab 81       	ldd	r26, Y+3	; 0x03
    33c0:	bc 81       	ldd	r27, Y+4	; 0x04
    33c2:	a8 17       	cp	r26, r24
    33c4:	b9 07       	cpc	r27, r25
    33c6:	10 f4       	brcc	.+4      	; 0x33cc <sd_raw_write+0xe0>
    33c8:	bc 87       	std	Y+12, r27	; 0x0c
    33ca:	ab 87       	std	Y+11, r26	; 0x0b
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    33cc:	80 91 d1 03 	lds	r24, 0x03D1
    33d0:	ba 85       	ldd	r27, Y+10	; 0x0a
    33d2:	8b 17       	cp	r24, r27
    33d4:	09 f5       	brne	.+66     	; 0x3418 <sd_raw_write+0x12c>
    33d6:	80 91 d2 03 	lds	r24, 0x03D2
    33da:	ed 81       	ldd	r30, Y+5	; 0x05
    33dc:	8e 17       	cp	r24, r30
    33de:	e1 f4       	brne	.+56     	; 0x3418 <sd_raw_write+0x12c>
    33e0:	80 91 d3 03 	lds	r24, 0x03D3
    33e4:	fe 81       	ldd	r31, Y+6	; 0x06
    33e6:	8f 17       	cp	r24, r31
    33e8:	b9 f4       	brne	.+46     	; 0x3418 <sd_raw_write+0x12c>
    33ea:	80 91 d4 03 	lds	r24, 0x03D4
    33ee:	2f 81       	ldd	r18, Y+7	; 0x07
    33f0:	82 17       	cp	r24, r18
    33f2:	91 f4       	brne	.+36     	; 0x3418 <sd_raw_write+0x12c>
    33f4:	80 91 d5 03 	lds	r24, 0x03D5
    33f8:	38 85       	ldd	r19, Y+8	; 0x08
    33fa:	83 17       	cp	r24, r19
    33fc:	69 f4       	brne	.+26     	; 0x3418 <sd_raw_write+0x12c>
    33fe:	80 91 d6 03 	lds	r24, 0x03D6
    3402:	82 15       	cp	r24, r2
    3404:	49 f4       	brne	.+18     	; 0x3418 <sd_raw_write+0x12c>
    3406:	80 91 d7 03 	lds	r24, 0x03D7
    340a:	83 15       	cp	r24, r3
    340c:	29 f4       	brne	.+10     	; 0x3418 <sd_raw_write+0x12c>
    340e:	80 91 d8 03 	lds	r24, 0x03D8
    3412:	99 85       	ldd	r25, Y+9	; 0x09
    3414:	89 17       	cp	r24, r25
    3416:	a9 f1       	breq	.+106    	; 0x3482 <sd_raw_write+0x196>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    3418:	0e 94 4d 1b 	call	0x369a	; 0x369a <sd_raw_sync>
    341c:	88 23       	and	r24, r24
    341e:	09 f4       	brne	.+2      	; 0x3422 <sd_raw_write+0x136>
    3420:	22 c1       	rjmp	.+580    	; 0x3666 <sd_raw_write+0x37a>
                return 0;
#endif

            if(block_offset || write_length < 512)
    3422:	41 14       	cp	r4, r1
    3424:	51 04       	cpc	r5, r1
    3426:	29 f4       	brne	.+10     	; 0x3432 <sd_raw_write+0x146>
    3428:	ab 85       	ldd	r26, Y+11	; 0x0b
    342a:	bc 85       	ldd	r27, Y+12	; 0x0c
    342c:	a0 50       	subi	r26, 0x00	; 0
    342e:	b2 40       	sbci	r27, 0x02	; 2
    3430:	90 f4       	brcc	.+36     	; 0x3456 <sd_raw_write+0x16a>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    3432:	2a 85       	ldd	r18, Y+10	; 0x0a
    3434:	3d 81       	ldd	r19, Y+5	; 0x05
    3436:	4e 81       	ldd	r20, Y+6	; 0x06
    3438:	5f 81       	ldd	r21, Y+7	; 0x07
    343a:	68 85       	ldd	r22, Y+8	; 0x08
    343c:	72 2d       	mov	r23, r2
    343e:	83 2d       	mov	r24, r3
    3440:	99 85       	ldd	r25, Y+9	; 0x09
    3442:	01 ed       	ldi	r16, 0xD1	; 209
    3444:	11 e0       	ldi	r17, 0x01	; 1
    3446:	e1 2c       	mov	r14, r1
    3448:	a2 e0       	ldi	r26, 0x02	; 2
    344a:	fa 2e       	mov	r15, r26
    344c:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <sd_raw_read>
    3450:	88 23       	and	r24, r24
    3452:	09 f4       	brne	.+2      	; 0x3456 <sd_raw_write+0x16a>
    3454:	08 c1       	rjmp	.+528    	; 0x3666 <sd_raw_write+0x37a>
                    return 0;
            }
            raw_block_address = block_address;
    3456:	fa 85       	ldd	r31, Y+10	; 0x0a
    3458:	f0 93 d1 03 	sts	0x03D1, r31
    345c:	2d 81       	ldd	r18, Y+5	; 0x05
    345e:	20 93 d2 03 	sts	0x03D2, r18
    3462:	3e 81       	ldd	r19, Y+6	; 0x06
    3464:	30 93 d3 03 	sts	0x03D3, r19
    3468:	8f 81       	ldd	r24, Y+7	; 0x07
    346a:	80 93 d4 03 	sts	0x03D4, r24
    346e:	98 85       	ldd	r25, Y+8	; 0x08
    3470:	90 93 d5 03 	sts	0x03D5, r25
    3474:	20 92 d6 03 	sts	0x03D6, r2
    3478:	30 92 d7 03 	sts	0x03D7, r3
    347c:	a9 85       	ldd	r26, Y+9	; 0x09
    347e:	a0 93 d8 03 	sts	0x03D8, r26
        }

        if(buffer != raw_block)
    3482:	e9 81       	ldd	r30, Y+1	; 0x01
    3484:	fa 81       	ldd	r31, Y+2	; 0x02
    3486:	e1 5d       	subi	r30, 0xD1	; 209
    3488:	f1 40       	sbci	r31, 0x01	; 1
    348a:	a1 f0       	breq	.+40     	; 0x34b4 <sd_raw_write+0x1c8>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    348c:	92 01       	movw	r18, r4
    348e:	2f 52       	subi	r18, 0x2F	; 47
    3490:	3e 4f       	sbci	r19, 0xFE	; 254
    3492:	c9 01       	movw	r24, r18
    3494:	69 81       	ldd	r22, Y+1	; 0x01
    3496:	7a 81       	ldd	r23, Y+2	; 0x02
    3498:	4b 85       	ldd	r20, Y+11	; 0x0b
    349a:	5c 85       	ldd	r21, Y+12	; 0x0c
    349c:	0e 94 77 46 	call	0x8cee	; 0x8cee <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    34a0:	10 92 d9 03 	sts	0x03D9, r1

            if(length == write_length)
    34a4:	8b 81       	ldd	r24, Y+3	; 0x03
    34a6:	9c 81       	ldd	r25, Y+4	; 0x04
    34a8:	ab 85       	ldd	r26, Y+11	; 0x0b
    34aa:	bc 85       	ldd	r27, Y+12	; 0x0c
    34ac:	8a 17       	cp	r24, r26
    34ae:	9b 07       	cpc	r25, r27
    34b0:	09 f4       	brne	.+2      	; 0x34b4 <sd_raw_write+0x1c8>
    34b2:	d7 c0       	rjmp	.+430    	; 0x3662 <sd_raw_write+0x376>
                return 1;
#endif
        }

        /* address card */
        select_card();
    34b4:	29 9a       	sbi	0x05, 1	; 5
    34b6:	2c 98       	cbi	0x05, 4	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    34b8:	80 91 da 03 	lds	r24, 0x03DA
    34bc:	82 ff       	sbrs	r24, 2
    34be:	0f c0       	rjmp	.+30     	; 0x34de <sd_raw_write+0x1f2>
    34c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    34c2:	3d 81       	ldd	r19, Y+5	; 0x05
    34c4:	4e 81       	ldd	r20, Y+6	; 0x06
    34c6:	5f 81       	ldd	r21, Y+7	; 0x07
    34c8:	68 85       	ldd	r22, Y+8	; 0x08
    34ca:	72 2d       	mov	r23, r2
    34cc:	83 2d       	mov	r24, r3
    34ce:	99 85       	ldd	r25, Y+9	; 0x09
    34d0:	09 e0       	ldi	r16, 0x09	; 9
    34d2:	0e 94 44 45 	call	0x8a88	; 0x8a88 <__lshrdi3>
    34d6:	ba 01       	movw	r22, r20
    34d8:	a9 01       	movw	r20, r18
    34da:	9b 01       	movw	r18, r22
    34dc:	05 c0       	rjmp	.+10     	; 0x34e8 <sd_raw_write+0x1fc>
    34de:	8a 85       	ldd	r24, Y+10	; 0x0a
    34e0:	9d 81       	ldd	r25, Y+5	; 0x05
    34e2:	2e 81       	ldd	r18, Y+6	; 0x06
    34e4:	3f 81       	ldd	r19, Y+7	; 0x07
    34e6:	ac 01       	movw	r20, r24
    34e8:	88 e1       	ldi	r24, 0x18	; 24
    34ea:	b9 01       	movw	r22, r18
    34ec:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
    34f0:	88 23       	and	r24, r24
    34f2:	19 f0       	breq	.+6      	; 0x34fa <sd_raw_write+0x20e>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    34f4:	29 98       	cbi	0x05, 1	; 5
    34f6:	2c 9a       	sbi	0x05, 4	; 5
    34f8:	b6 c0       	rjmp	.+364    	; 0x3666 <sd_raw_write+0x37a>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    34fa:	be ef       	ldi	r27, 0xFE	; 254
    34fc:	be bd       	out	0x2e, r27	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    34fe:	0d b4       	in	r0, 0x2d	; 45
    3500:	07 fe       	sbrs	r0, 7
    3502:	fd cf       	rjmp	.-6      	; 0x34fe <sd_raw_write+0x212>
    SPSR &= ~(1 << SPIF);
    3504:	8d b5       	in	r24, 0x2d	; 45
    3506:	8f 77       	andi	r24, 0x7F	; 127
    3508:	8d bd       	out	0x2d, r24	; 45
    350a:	e1 ed       	ldi	r30, 0xD1	; 209
    350c:	f1 e0       	ldi	r31, 0x01	; 1
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    350e:	81 91       	ld	r24, Z+
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3510:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3512:	0d b4       	in	r0, 0x2d	; 45
    3514:	07 fe       	sbrs	r0, 7
    3516:	fd cf       	rjmp	.-6      	; 0x3512 <sd_raw_write+0x226>
    SPSR &= ~(1 << SPIF);
    3518:	8d b5       	in	r24, 0x2d	; 45
    351a:	8f 77       	andi	r24, 0x7F	; 127
    351c:	8d bd       	out	0x2d, r24	; 45
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    351e:	23 e0       	ldi	r18, 0x03	; 3
    3520:	e1 3d       	cpi	r30, 0xD1	; 209
    3522:	f2 07       	cpc	r31, r18
    3524:	a1 f7       	brne	.-24     	; 0x350e <sd_raw_write+0x222>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3526:	3f ef       	ldi	r19, 0xFF	; 255
    3528:	3e bd       	out	0x2e, r19	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    352a:	0d b4       	in	r0, 0x2d	; 45
    352c:	07 fe       	sbrs	r0, 7
    352e:	fd cf       	rjmp	.-6      	; 0x352a <sd_raw_write+0x23e>
    SPSR &= ~(1 << SPIF);
    3530:	8d b5       	in	r24, 0x2d	; 45
    3532:	8f 77       	andi	r24, 0x7F	; 127
    3534:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3536:	8f ef       	ldi	r24, 0xFF	; 255
    3538:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    353a:	0d b4       	in	r0, 0x2d	; 45
    353c:	07 fe       	sbrs	r0, 7
    353e:	fd cf       	rjmp	.-6      	; 0x353a <sd_raw_write+0x24e>
    SPSR &= ~(1 << SPIF);
    3540:	8d b5       	in	r24, 0x2d	; 45
    3542:	8f 77       	andi	r24, 0x7F	; 127
    3544:	8d bd       	out	0x2d, r24	; 45
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3546:	9f ef       	ldi	r25, 0xFF	; 255
    3548:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    354a:	0d b4       	in	r0, 0x2d	; 45
    354c:	07 fe       	sbrs	r0, 7
    354e:	fd cf       	rjmp	.-6      	; 0x354a <sd_raw_write+0x25e>
    SPSR &= ~(1 << SPIF);
    3550:	8d b5       	in	r24, 0x2d	; 45
    3552:	8f 77       	andi	r24, 0x7F	; 127
    3554:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3556:	8e b5       	in	r24, 0x2e	; 46
        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
        sd_raw_send_byte(0xff);

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    3558:	8f 3f       	cpi	r24, 0xFF	; 255
    355a:	a9 f7       	brne	.-22     	; 0x3546 <sd_raw_write+0x25a>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    355c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    355e:	0d b4       	in	r0, 0x2d	; 45
    3560:	07 fe       	sbrs	r0, 7
    3562:	fd cf       	rjmp	.-6      	; 0x355e <sd_raw_write+0x272>
    SPSR &= ~(1 << SPIF);
    3564:	8d b5       	in	r24, 0x2d	; 45
    3566:	8f 77       	andi	r24, 0x7F	; 127
    3568:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    356a:	8e b5       	in	r24, 0x2e	; 46
        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();
    356c:	29 98       	cbi	0x05, 1	; 5
    356e:	2c 9a       	sbi	0x05, 4	; 5

        buffer += write_length;
    3570:	a9 81       	ldd	r26, Y+1	; 0x01
    3572:	ba 81       	ldd	r27, Y+2	; 0x02
    3574:	eb 85       	ldd	r30, Y+11	; 0x0b
    3576:	fc 85       	ldd	r31, Y+12	; 0x0c
    3578:	ae 0f       	add	r26, r30
    357a:	bf 1f       	adc	r27, r31
    357c:	ba 83       	std	Y+2, r27	; 0x02
    357e:	a9 83       	std	Y+1, r26	; 0x01
        offset += write_length;
    3580:	9f 01       	movw	r18, r30
    3582:	40 e0       	ldi	r20, 0x00	; 0
    3584:	50 e0       	ldi	r21, 0x00	; 0
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	46 2c       	mov	r4, r6
    3590:	4e 0e       	add	r4, r30
    3592:	f1 e0       	ldi	r31, 0x01	; 1
    3594:	46 14       	cp	r4, r6
    3596:	08 f0       	brcs	.+2      	; 0x359a <sd_raw_write+0x2ae>
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	e7 2d       	mov	r30, r7
    359c:	e3 0f       	add	r30, r19
    359e:	a1 e0       	ldi	r26, 0x01	; 1
    35a0:	e7 15       	cp	r30, r7
    35a2:	08 f0       	brcs	.+2      	; 0x35a6 <sd_raw_write+0x2ba>
    35a4:	a0 e0       	ldi	r26, 0x00	; 0
    35a6:	5f 2e       	mov	r5, r31
    35a8:	5e 0e       	add	r5, r30
    35aa:	f1 e0       	ldi	r31, 0x01	; 1
    35ac:	5e 16       	cp	r5, r30
    35ae:	08 f0       	brcs	.+2      	; 0x35b2 <sd_raw_write+0x2c6>
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	af 2b       	or	r26, r31
    35b4:	e8 2d       	mov	r30, r8
    35b6:	e4 0f       	add	r30, r20
    35b8:	b1 e0       	ldi	r27, 0x01	; 1
    35ba:	e8 15       	cp	r30, r8
    35bc:	08 f0       	brcs	.+2      	; 0x35c0 <sd_raw_write+0x2d4>
    35be:	b0 e0       	ldi	r27, 0x00	; 0
    35c0:	ea 2e       	mov	r14, r26
    35c2:	ee 0e       	add	r14, r30
    35c4:	f1 e0       	ldi	r31, 0x01	; 1
    35c6:	ee 16       	cp	r14, r30
    35c8:	08 f0       	brcs	.+2      	; 0x35cc <sd_raw_write+0x2e0>
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	bf 2b       	or	r27, r31
    35ce:	e9 2d       	mov	r30, r9
    35d0:	e5 0f       	add	r30, r21
    35d2:	a1 e0       	ldi	r26, 0x01	; 1
    35d4:	e9 15       	cp	r30, r9
    35d6:	08 f0       	brcs	.+2      	; 0x35da <sd_raw_write+0x2ee>
    35d8:	a0 e0       	ldi	r26, 0x00	; 0
    35da:	fb 2e       	mov	r15, r27
    35dc:	fe 0e       	add	r15, r30
    35de:	f1 e0       	ldi	r31, 0x01	; 1
    35e0:	fe 16       	cp	r15, r30
    35e2:	08 f0       	brcs	.+2      	; 0x35e6 <sd_raw_write+0x2fa>
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	af 2b       	or	r26, r31
    35e8:	ea 2d       	mov	r30, r10
    35ea:	e6 0f       	add	r30, r22
    35ec:	b1 e0       	ldi	r27, 0x01	; 1
    35ee:	ea 15       	cp	r30, r10
    35f0:	08 f0       	brcs	.+2      	; 0x35f4 <sd_raw_write+0x308>
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	0a 2f       	mov	r16, r26
    35f6:	0e 0f       	add	r16, r30
    35f8:	f1 e0       	ldi	r31, 0x01	; 1
    35fa:	0e 17       	cp	r16, r30
    35fc:	08 f0       	brcs	.+2      	; 0x3600 <sd_raw_write+0x314>
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	bf 2b       	or	r27, r31
    3602:	eb 2d       	mov	r30, r11
    3604:	e7 0f       	add	r30, r23
    3606:	a1 e0       	ldi	r26, 0x01	; 1
    3608:	eb 15       	cp	r30, r11
    360a:	08 f0       	brcs	.+2      	; 0x360e <sd_raw_write+0x322>
    360c:	a0 e0       	ldi	r26, 0x00	; 0
    360e:	1b 2f       	mov	r17, r27
    3610:	1e 0f       	add	r17, r30
    3612:	f1 e0       	ldi	r31, 0x01	; 1
    3614:	1e 17       	cp	r17, r30
    3616:	08 f0       	brcs	.+2      	; 0x361a <sd_raw_write+0x32e>
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	af 2b       	or	r26, r31
    361c:	ec 2d       	mov	r30, r12
    361e:	e8 0f       	add	r30, r24
    3620:	b1 e0       	ldi	r27, 0x01	; 1
    3622:	ec 15       	cp	r30, r12
    3624:	08 f0       	brcs	.+2      	; 0x3628 <sd_raw_write+0x33c>
    3626:	b0 e0       	ldi	r27, 0x00	; 0
    3628:	ae 0f       	add	r26, r30
    362a:	f1 e0       	ldi	r31, 0x01	; 1
    362c:	ae 17       	cp	r26, r30
    362e:	08 f0       	brcs	.+2      	; 0x3632 <sd_raw_write+0x346>
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	bf 2b       	or	r27, r31
    3634:	8d 2d       	mov	r24, r13
    3636:	89 0f       	add	r24, r25
    3638:	32 01       	movw	r6, r4
    363a:	47 01       	movw	r8, r14
    363c:	58 01       	movw	r10, r16
    363e:	6d 01       	movw	r12, r26
    3640:	d8 0e       	add	r13, r24
        length -= write_length;
    3642:	2b 81       	ldd	r18, Y+3	; 0x03
    3644:	3c 81       	ldd	r19, Y+4	; 0x04
    3646:	8b 85       	ldd	r24, Y+11	; 0x0b
    3648:	9c 85       	ldd	r25, Y+12	; 0x0c
    364a:	28 1b       	sub	r18, r24
    364c:	39 0b       	sbc	r19, r25
    364e:	3c 83       	std	Y+4, r19	; 0x04
    3650:	2b 83       	std	Y+3, r18	; 0x03

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    3652:	91 e0       	ldi	r25, 0x01	; 1
    3654:	90 93 d9 03 	sts	0x03D9, r25
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    3658:	ab 81       	ldd	r26, Y+3	; 0x03
    365a:	bc 81       	ldd	r27, Y+4	; 0x04
    365c:	ab 2b       	or	r26, r27
    365e:	09 f0       	breq	.+2      	; 0x3662 <sd_raw_write+0x376>
    3660:	68 ce       	rjmp	.-816    	; 0x3332 <sd_raw_write+0x46>
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	01 c0       	rjmp	.+2      	; 0x3668 <sd_raw_write+0x37c>
    3666:	80 e0       	ldi	r24, 0x00	; 0
        raw_block_written = 1;
#endif
    }

    return 1;
}
    3668:	2c 96       	adiw	r28, 0x0c	; 12
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	1f 91       	pop	r17
    367a:	0f 91       	pop	r16
    367c:	ff 90       	pop	r15
    367e:	ef 90       	pop	r14
    3680:	df 90       	pop	r13
    3682:	cf 90       	pop	r12
    3684:	bf 90       	pop	r11
    3686:	af 90       	pop	r10
    3688:	9f 90       	pop	r9
    368a:	8f 90       	pop	r8
    368c:	7f 90       	pop	r7
    368e:	6f 90       	pop	r6
    3690:	5f 90       	pop	r5
    3692:	4f 90       	pop	r4
    3694:	3f 90       	pop	r3
    3696:	2f 90       	pop	r2
    3698:	08 95       	ret

0000369a <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    369a:	ef 92       	push	r14
    369c:	ff 92       	push	r15
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    36a2:	80 91 d9 03 	lds	r24, 0x03D9
    36a6:	88 23       	and	r24, r24
    36a8:	11 f0       	breq	.+4      	; 0x36ae <sd_raw_sync+0x14>
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	1c c0       	rjmp	.+56     	; 0x36e6 <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    36ae:	20 91 d1 03 	lds	r18, 0x03D1
    36b2:	30 91 d2 03 	lds	r19, 0x03D2
    36b6:	40 91 d3 03 	lds	r20, 0x03D3
    36ba:	50 91 d4 03 	lds	r21, 0x03D4
    36be:	60 91 d5 03 	lds	r22, 0x03D5
    36c2:	70 91 d6 03 	lds	r23, 0x03D6
    36c6:	80 91 d7 03 	lds	r24, 0x03D7
    36ca:	90 91 d8 03 	lds	r25, 0x03D8
    36ce:	01 ed       	ldi	r16, 0xD1	; 209
    36d0:	11 e0       	ldi	r17, 0x01	; 1
    36d2:	e1 2c       	mov	r14, r1
    36d4:	e2 e0       	ldi	r30, 0x02	; 2
    36d6:	fe 2e       	mov	r15, r30
    36d8:	0e 94 76 19 	call	0x32ec	; 0x32ec <sd_raw_write>
    36dc:	88 23       	and	r24, r24
    36de:	19 f0       	breq	.+6      	; 0x36e6 <sd_raw_sync+0x4c>
        return 0;
    raw_block_written = 1;
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	80 93 d9 03 	sts	0x03D9, r24
#endif
    return 1;
}
    36e6:	1f 91       	pop	r17
    36e8:	0f 91       	pop	r16
    36ea:	ff 90       	pop	r15
    36ec:	ef 90       	pop	r14
    36ee:	08 95       	ret

000036f0 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    36f0:	2f 92       	push	r2
    36f2:	3f 92       	push	r3
    36f4:	4f 92       	push	r4
    36f6:	5f 92       	push	r5
    36f8:	6f 92       	push	r6
    36fa:	7f 92       	push	r7
    36fc:	8f 92       	push	r8
    36fe:	9f 92       	push	r9
    3700:	af 92       	push	r10
    3702:	bf 92       	push	r11
    3704:	cf 92       	push	r12
    3706:	df 92       	push	r13
    3708:	ef 92       	push	r14
    370a:	ff 92       	push	r15
    370c:	0f 93       	push	r16
    370e:	1f 93       	push	r17
    3710:	df 93       	push	r29
    3712:	cf 93       	push	r28
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	29 97       	sbiw	r28, 0x09	; 9
    371a:	0f b6       	in	r0, 0x3f	; 63
    371c:	f8 94       	cli
    371e:	de bf       	out	0x3e, r29	; 62
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	cd bf       	out	0x3d, r28	; 61
    3724:	39 01       	movw	r6, r18
    3726:	4a 01       	movw	r8, r20
    3728:	5b 01       	movw	r10, r22
    372a:	6c 01       	movw	r12, r24
    372c:	28 01       	movw	r4, r16
    372e:	fa 82       	std	Y+2, r15	; 0x02
    3730:	e9 82       	std	Y+1, r14	; 0x01
    3732:	6e c1       	rjmp	.+732    	; 0x3a10 <sd_raw_read+0x320>
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    3734:	ff ef       	ldi	r31, 0xFF	; 255
    3736:	ef 2e       	mov	r14, r31
    3738:	f1 e0       	ldi	r31, 0x01	; 1
    373a:	ff 2e       	mov	r15, r31
    373c:	e6 20       	and	r14, r6
    373e:	f7 20       	and	r15, r7
        block_address = offset - block_offset;
    3740:	97 01       	movw	r18, r14
    3742:	a6 2d       	mov	r26, r6
    3744:	ae 19       	sub	r26, r14
    3746:	af 83       	std	Y+7, r26	; 0x07
    3748:	e1 e0       	ldi	r30, 0x01	; 1
    374a:	6a 16       	cp	r6, r26
    374c:	08 f0       	brcs	.+2      	; 0x3750 <sd_raw_read+0x60>
    374e:	e0 e0       	ldi	r30, 0x00	; 0
    3750:	87 2d       	mov	r24, r7
    3752:	83 1b       	sub	r24, r19
    3754:	21 e0       	ldi	r18, 0x01	; 1
    3756:	78 16       	cp	r7, r24
    3758:	08 f0       	brcs	.+2      	; 0x375c <sd_raw_read+0x6c>
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	b8 2f       	mov	r27, r24
    375e:	be 1b       	sub	r27, r30
    3760:	bb 83       	std	Y+3, r27	; 0x03
    3762:	91 e0       	ldi	r25, 0x01	; 1
    3764:	8b 17       	cp	r24, r27
    3766:	08 f0       	brcs	.+2      	; 0x376a <sd_raw_read+0x7a>
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	29 2b       	or	r18, r25
    376c:	38 2c       	mov	r3, r8
    376e:	32 1a       	sub	r3, r18
    3770:	31 e0       	ldi	r19, 0x01	; 1
    3772:	83 14       	cp	r8, r3
    3774:	08 f0       	brcs	.+2      	; 0x3778 <sd_raw_read+0x88>
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	19 2d       	mov	r17, r9
    377a:	13 1b       	sub	r17, r19
    377c:	61 e0       	ldi	r22, 0x01	; 1
    377e:	91 16       	cp	r9, r17
    3780:	08 f0       	brcs	.+2      	; 0x3784 <sd_raw_read+0x94>
    3782:	60 e0       	ldi	r22, 0x00	; 0
    3784:	ea 2d       	mov	r30, r10
    3786:	e6 1b       	sub	r30, r22
    3788:	ec 83       	std	Y+4, r30	; 0x04
    378a:	71 e0       	ldi	r23, 0x01	; 1
    378c:	ae 16       	cp	r10, r30
    378e:	08 f0       	brcs	.+2      	; 0x3792 <sd_raw_read+0xa2>
    3790:	70 e0       	ldi	r23, 0x00	; 0
    3792:	fb 2d       	mov	r31, r11
    3794:	f7 1b       	sub	r31, r23
    3796:	fd 83       	std	Y+5, r31	; 0x05
    3798:	91 e0       	ldi	r25, 0x01	; 1
    379a:	bf 16       	cp	r11, r31
    379c:	08 f0       	brcs	.+2      	; 0x37a0 <sd_raw_read+0xb0>
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	2c 2c       	mov	r2, r12
    37a2:	29 1a       	sub	r2, r25
    37a4:	91 e0       	ldi	r25, 0x01	; 1
    37a6:	c2 14       	cp	r12, r2
    37a8:	08 f0       	brcs	.+2      	; 0x37ac <sd_raw_read+0xbc>
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	2d 2d       	mov	r18, r13
    37ae:	29 1b       	sub	r18, r25
    37b0:	2e 83       	std	Y+6, r18	; 0x06
        read_length = 512 - block_offset; /* read up to block border */
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	92 e0       	ldi	r25, 0x02	; 2
    37b6:	8e 19       	sub	r24, r14
    37b8:	9f 09       	sbc	r25, r15
    37ba:	99 87       	std	Y+9, r25	; 0x09
    37bc:	88 87       	std	Y+8, r24	; 0x08
    37be:	a9 81       	ldd	r26, Y+1	; 0x01
    37c0:	ba 81       	ldd	r27, Y+2	; 0x02
    37c2:	a8 17       	cp	r26, r24
    37c4:	b9 07       	cpc	r27, r25
    37c6:	10 f4       	brcc	.+4      	; 0x37cc <sd_raw_read+0xdc>
    37c8:	b9 87       	std	Y+9, r27	; 0x09
    37ca:	a8 87       	std	Y+8, r26	; 0x08
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    37cc:	80 91 d1 03 	lds	r24, 0x03D1
    37d0:	bf 81       	ldd	r27, Y+7	; 0x07
    37d2:	8b 17       	cp	r24, r27
    37d4:	09 f5       	brne	.+66     	; 0x3818 <sd_raw_read+0x128>
    37d6:	80 91 d2 03 	lds	r24, 0x03D2
    37da:	eb 81       	ldd	r30, Y+3	; 0x03
    37dc:	8e 17       	cp	r24, r30
    37de:	e1 f4       	brne	.+56     	; 0x3818 <sd_raw_read+0x128>
    37e0:	80 91 d3 03 	lds	r24, 0x03D3
    37e4:	83 15       	cp	r24, r3
    37e6:	c1 f4       	brne	.+48     	; 0x3818 <sd_raw_read+0x128>
    37e8:	80 91 d4 03 	lds	r24, 0x03D4
    37ec:	81 17       	cp	r24, r17
    37ee:	a1 f4       	brne	.+40     	; 0x3818 <sd_raw_read+0x128>
    37f0:	80 91 d5 03 	lds	r24, 0x03D5
    37f4:	fc 81       	ldd	r31, Y+4	; 0x04
    37f6:	8f 17       	cp	r24, r31
    37f8:	79 f4       	brne	.+30     	; 0x3818 <sd_raw_read+0x128>
    37fa:	80 91 d6 03 	lds	r24, 0x03D6
    37fe:	2d 81       	ldd	r18, Y+5	; 0x05
    3800:	82 17       	cp	r24, r18
    3802:	51 f4       	brne	.+20     	; 0x3818 <sd_raw_read+0x128>
    3804:	80 91 d7 03 	lds	r24, 0x03D7
    3808:	82 15       	cp	r24, r2
    380a:	31 f4       	brne	.+12     	; 0x3818 <sd_raw_read+0x128>
    380c:	80 91 d8 03 	lds	r24, 0x03D8
    3810:	3e 81       	ldd	r19, Y+6	; 0x06
    3812:	83 17       	cp	r24, r19
    3814:	09 f4       	brne	.+2      	; 0x3818 <sd_raw_read+0x128>
    3816:	86 c0       	rjmp	.+268    	; 0x3924 <sd_raw_read+0x234>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    3818:	0e 94 4d 1b 	call	0x369a	; 0x369a <sd_raw_sync>
    381c:	88 23       	and	r24, r24
    381e:	09 f4       	brne	.+2      	; 0x3822 <sd_raw_read+0x132>
    3820:	fd c0       	rjmp	.+506    	; 0x3a1c <sd_raw_read+0x32c>
                return 0;
#endif

            /* address card */
            select_card();
    3822:	29 9a       	sbi	0x05, 1	; 5
    3824:	2c 98       	cbi	0x05, 4	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    3826:	80 91 da 03 	lds	r24, 0x03DA
    382a:	82 ff       	sbrs	r24, 2
    382c:	0f c0       	rjmp	.+30     	; 0x384c <sd_raw_read+0x15c>
    382e:	2f 81       	ldd	r18, Y+7	; 0x07
    3830:	3b 81       	ldd	r19, Y+3	; 0x03
    3832:	43 2d       	mov	r20, r3
    3834:	51 2f       	mov	r21, r17
    3836:	6c 81       	ldd	r22, Y+4	; 0x04
    3838:	7d 81       	ldd	r23, Y+5	; 0x05
    383a:	82 2d       	mov	r24, r2
    383c:	9e 81       	ldd	r25, Y+6	; 0x06
    383e:	09 e0       	ldi	r16, 0x09	; 9
    3840:	0e 94 44 45 	call	0x8a88	; 0x8a88 <__lshrdi3>
    3844:	ba 01       	movw	r22, r20
    3846:	a9 01       	movw	r20, r18
    3848:	9b 01       	movw	r18, r22
    384a:	05 c0       	rjmp	.+10     	; 0x3856 <sd_raw_read+0x166>
    384c:	8f 81       	ldd	r24, Y+7	; 0x07
    384e:	9b 81       	ldd	r25, Y+3	; 0x03
    3850:	23 2d       	mov	r18, r3
    3852:	31 2f       	mov	r19, r17
    3854:	ac 01       	movw	r20, r24
    3856:	81 e1       	ldi	r24, 0x11	; 17
    3858:	b9 01       	movw	r22, r18
    385a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
    385e:	88 23       	and	r24, r24
    3860:	21 f0       	breq	.+8      	; 0x386a <sd_raw_read+0x17a>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    3862:	29 98       	cbi	0x05, 1	; 5
    3864:	2c 9a       	sbi	0x05, 4	; 5
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	d9 c0       	rjmp	.+434    	; 0x3a1c <sd_raw_read+0x32c>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    386a:	8f ef       	ldi	r24, 0xFF	; 255
    386c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    386e:	0d b4       	in	r0, 0x2d	; 45
    3870:	07 fe       	sbrs	r0, 7
    3872:	fd cf       	rjmp	.-6      	; 0x386e <sd_raw_read+0x17e>
    SPSR &= ~(1 << SPIF);
    3874:	8d b5       	in	r24, 0x2d	; 45
    3876:	8f 77       	andi	r24, 0x7F	; 127
    3878:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    387a:	8e b5       	in	r24, 0x2e	; 46
                unselect_card();
                return 0;
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    387c:	8e 3f       	cpi	r24, 0xFE	; 254
    387e:	a9 f7       	brne	.-22     	; 0x386a <sd_raw_read+0x17a>
    3880:	e1 ed       	ldi	r30, 0xD1	; 209
    3882:	f1 e0       	ldi	r31, 0x01	; 1
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3884:	9f ef       	ldi	r25, 0xFF	; 255
    3886:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    3888:	0d b4       	in	r0, 0x2d	; 45
    388a:	07 fe       	sbrs	r0, 7
    388c:	fd cf       	rjmp	.-6      	; 0x3888 <sd_raw_read+0x198>
    SPSR &= ~(1 << SPIF);
    388e:	8d b5       	in	r24, 0x2d	; 45
    3890:	8f 77       	andi	r24, 0x7F	; 127
    3892:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3894:	8e b5       	in	r24, 0x2e	; 46
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    3896:	80 83       	st	Z, r24
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    3898:	a3 e0       	ldi	r26, 0x03	; 3
    389a:	e0 3d       	cpi	r30, 0xD0	; 208
    389c:	fa 07       	cpc	r31, r26
    389e:	11 f0       	breq	.+4      	; 0x38a4 <sd_raw_read+0x1b4>
                *cache++ = sd_raw_rec_byte();
    38a0:	31 96       	adiw	r30, 0x01	; 1
    38a2:	f0 cf       	rjmp	.-32     	; 0x3884 <sd_raw_read+0x194>
            raw_block_address = block_address;
    38a4:	bf 81       	ldd	r27, Y+7	; 0x07
    38a6:	b0 93 d1 03 	sts	0x03D1, r27
    38aa:	eb 81       	ldd	r30, Y+3	; 0x03
    38ac:	e0 93 d2 03 	sts	0x03D2, r30
    38b0:	30 92 d3 03 	sts	0x03D3, r3
    38b4:	10 93 d4 03 	sts	0x03D4, r17
    38b8:	fc 81       	ldd	r31, Y+4	; 0x04
    38ba:	f0 93 d5 03 	sts	0x03D5, r31
    38be:	2d 81       	ldd	r18, Y+5	; 0x05
    38c0:	20 93 d6 03 	sts	0x03D6, r18
    38c4:	20 92 d7 03 	sts	0x03D7, r2
    38c8:	3e 81       	ldd	r19, Y+6	; 0x06
    38ca:	30 93 d8 03 	sts	0x03D8, r19

            memcpy(buffer, raw_block + block_offset, read_length);
    38ce:	97 01       	movw	r18, r14
    38d0:	2f 52       	subi	r18, 0x2F	; 47
    38d2:	3e 4f       	sbci	r19, 0xFE	; 254
    38d4:	c2 01       	movw	r24, r4
    38d6:	b9 01       	movw	r22, r18
    38d8:	48 85       	ldd	r20, Y+8	; 0x08
    38da:	59 85       	ldd	r21, Y+9	; 0x09
    38dc:	0e 94 77 46 	call	0x8cee	; 0x8cee <memcpy>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    38e0:	8f ef       	ldi	r24, 0xFF	; 255
    38e2:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    38e4:	0d b4       	in	r0, 0x2d	; 45
    38e6:	07 fe       	sbrs	r0, 7
    38e8:	fd cf       	rjmp	.-6      	; 0x38e4 <sd_raw_read+0x1f4>
    SPSR &= ~(1 << SPIF);
    38ea:	8d b5       	in	r24, 0x2d	; 45
    38ec:	8f 77       	andi	r24, 0x7F	; 127
    38ee:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    38f0:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    38f2:	9f ef       	ldi	r25, 0xFF	; 255
    38f4:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    38f6:	0d b4       	in	r0, 0x2d	; 45
    38f8:	07 fe       	sbrs	r0, 7
    38fa:	fd cf       	rjmp	.-6      	; 0x38f6 <sd_raw_read+0x206>
    SPSR &= ~(1 << SPIF);
    38fc:	8d b5       	in	r24, 0x2d	; 45
    38fe:	8f 77       	andi	r24, 0x7F	; 127
    3900:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3902:	8e b5       	in	r24, 0x2e	; 46
            /* read crc16 */
            sd_raw_rec_byte();
            sd_raw_rec_byte();
            
            /* deaddress card */
            unselect_card();
    3904:	29 98       	cbi	0x05, 1	; 5
    3906:	2c 9a       	sbi	0x05, 4	; 5
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3908:	af ef       	ldi	r26, 0xFF	; 255
    390a:	ae bd       	out	0x2e, r26	; 46
    while(!(SPSR & (1 << SPIF)));
    390c:	0d b4       	in	r0, 0x2d	; 45
    390e:	07 fe       	sbrs	r0, 7
    3910:	fd cf       	rjmp	.-6      	; 0x390c <sd_raw_read+0x21c>
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;

            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
    3912:	e8 85       	ldd	r30, Y+8	; 0x08
    3914:	f9 85       	ldd	r31, Y+9	; 0x09
    3916:	4e 0e       	add	r4, r30
    3918:	5f 1e       	adc	r5, r31
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);
    391a:	8d b5       	in	r24, 0x2d	; 45
    391c:	8f 77       	andi	r24, 0x7F	; 127
    391e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3920:	8e b5       	in	r24, 0x2e	; 46
    3922:	0d c0       	rjmp	.+26     	; 0x393e <sd_raw_read+0x24e>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    3924:	97 01       	movw	r18, r14
    3926:	2f 52       	subi	r18, 0x2F	; 47
    3928:	3e 4f       	sbci	r19, 0xFE	; 254
    392a:	c2 01       	movw	r24, r4
    392c:	b9 01       	movw	r22, r18
    392e:	48 85       	ldd	r20, Y+8	; 0x08
    3930:	59 85       	ldd	r21, Y+9	; 0x09
    3932:	0e 94 77 46 	call	0x8cee	; 0x8cee <memcpy>
            buffer += read_length;
    3936:	28 85       	ldd	r18, Y+8	; 0x08
    3938:	39 85       	ldd	r19, Y+9	; 0x09
    393a:	42 0e       	add	r4, r18
    393c:	53 1e       	adc	r5, r19
        }
#endif

        length -= read_length;
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	9a 81       	ldd	r25, Y+2	; 0x02
    3942:	a8 85       	ldd	r26, Y+8	; 0x08
    3944:	b9 85       	ldd	r27, Y+9	; 0x09
    3946:	8a 1b       	sub	r24, r26
    3948:	9b 0b       	sbc	r25, r27
    394a:	9a 83       	std	Y+2, r25	; 0x02
    394c:	89 83       	std	Y+1, r24	; 0x01
        offset += read_length;
    394e:	ad 01       	movw	r20, r26
    3950:	60 e0       	ldi	r22, 0x00	; 0
    3952:	70 e0       	ldi	r23, 0x00	; 0
    3954:	80 e0       	ldi	r24, 0x00	; 0
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	a0 e0       	ldi	r26, 0x00	; 0
    395a:	b0 e0       	ldi	r27, 0x00	; 0
    395c:	26 2c       	mov	r2, r6
    395e:	24 0e       	add	r2, r20
    3960:	31 e0       	ldi	r19, 0x01	; 1
    3962:	26 14       	cp	r2, r6
    3964:	08 f0       	brcs	.+2      	; 0x3968 <sd_raw_read+0x278>
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	27 2d       	mov	r18, r7
    396a:	25 0f       	add	r18, r21
    396c:	e1 e0       	ldi	r30, 0x01	; 1
    396e:	27 15       	cp	r18, r7
    3970:	08 f0       	brcs	.+2      	; 0x3974 <sd_raw_read+0x284>
    3972:	e0 e0       	ldi	r30, 0x00	; 0
    3974:	33 2e       	mov	r3, r19
    3976:	32 0e       	add	r3, r18
    3978:	31 e0       	ldi	r19, 0x01	; 1
    397a:	32 16       	cp	r3, r18
    397c:	08 f0       	brcs	.+2      	; 0x3980 <sd_raw_read+0x290>
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	e3 2b       	or	r30, r19
    3982:	28 2d       	mov	r18, r8
    3984:	26 0f       	add	r18, r22
    3986:	f1 e0       	ldi	r31, 0x01	; 1
    3988:	28 15       	cp	r18, r8
    398a:	08 f0       	brcs	.+2      	; 0x398e <sd_raw_read+0x29e>
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	ee 2e       	mov	r14, r30
    3990:	e2 0e       	add	r14, r18
    3992:	31 e0       	ldi	r19, 0x01	; 1
    3994:	e2 16       	cp	r14, r18
    3996:	08 f0       	brcs	.+2      	; 0x399a <sd_raw_read+0x2aa>
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	f3 2b       	or	r31, r19
    399c:	29 2d       	mov	r18, r9
    399e:	27 0f       	add	r18, r23
    39a0:	e1 e0       	ldi	r30, 0x01	; 1
    39a2:	29 15       	cp	r18, r9
    39a4:	08 f0       	brcs	.+2      	; 0x39a8 <sd_raw_read+0x2b8>
    39a6:	e0 e0       	ldi	r30, 0x00	; 0
    39a8:	ff 2e       	mov	r15, r31
    39aa:	f2 0e       	add	r15, r18
    39ac:	31 e0       	ldi	r19, 0x01	; 1
    39ae:	f2 16       	cp	r15, r18
    39b0:	08 f0       	brcs	.+2      	; 0x39b4 <sd_raw_read+0x2c4>
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	e3 2b       	or	r30, r19
    39b6:	2a 2d       	mov	r18, r10
    39b8:	28 0f       	add	r18, r24
    39ba:	f1 e0       	ldi	r31, 0x01	; 1
    39bc:	2a 15       	cp	r18, r10
    39be:	08 f0       	brcs	.+2      	; 0x39c2 <sd_raw_read+0x2d2>
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	0e 2f       	mov	r16, r30
    39c4:	02 0f       	add	r16, r18
    39c6:	31 e0       	ldi	r19, 0x01	; 1
    39c8:	02 17       	cp	r16, r18
    39ca:	08 f0       	brcs	.+2      	; 0x39ce <sd_raw_read+0x2de>
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	f3 2b       	or	r31, r19
    39d0:	2b 2d       	mov	r18, r11
    39d2:	29 0f       	add	r18, r25
    39d4:	e1 e0       	ldi	r30, 0x01	; 1
    39d6:	2b 15       	cp	r18, r11
    39d8:	08 f0       	brcs	.+2      	; 0x39dc <sd_raw_read+0x2ec>
    39da:	e0 e0       	ldi	r30, 0x00	; 0
    39dc:	1f 2f       	mov	r17, r31
    39de:	12 0f       	add	r17, r18
    39e0:	31 e0       	ldi	r19, 0x01	; 1
    39e2:	12 17       	cp	r17, r18
    39e4:	08 f0       	brcs	.+2      	; 0x39e8 <sd_raw_read+0x2f8>
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	e3 2b       	or	r30, r19
    39ea:	2c 2d       	mov	r18, r12
    39ec:	2a 0f       	add	r18, r26
    39ee:	f1 e0       	ldi	r31, 0x01	; 1
    39f0:	2c 15       	cp	r18, r12
    39f2:	08 f0       	brcs	.+2      	; 0x39f6 <sd_raw_read+0x306>
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	e2 0f       	add	r30, r18
    39f8:	31 e0       	ldi	r19, 0x01	; 1
    39fa:	e2 17       	cp	r30, r18
    39fc:	08 f0       	brcs	.+2      	; 0x3a00 <sd_raw_read+0x310>
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	f3 2b       	or	r31, r19
    3a02:	8d 2d       	mov	r24, r13
    3a04:	8b 0f       	add	r24, r27
    3a06:	31 01       	movw	r6, r2
    3a08:	47 01       	movw	r8, r14
    3a0a:	58 01       	movw	r10, r16
    3a0c:	6f 01       	movw	r12, r30
    3a0e:	d8 0e       	add	r13, r24
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3a10:	e9 81       	ldd	r30, Y+1	; 0x01
    3a12:	fa 81       	ldd	r31, Y+2	; 0x02
    3a14:	ef 2b       	or	r30, r31
    3a16:	09 f0       	breq	.+2      	; 0x3a1a <sd_raw_read+0x32a>
    3a18:	8d ce       	rjmp	.-742    	; 0x3734 <sd_raw_read+0x44>
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    3a1c:	29 96       	adiw	r28, 0x09	; 9
    3a1e:	0f b6       	in	r0, 0x3f	; 63
    3a20:	f8 94       	cli
    3a22:	de bf       	out	0x3e, r29	; 62
    3a24:	0f be       	out	0x3f, r0	; 63
    3a26:	cd bf       	out	0x3d, r28	; 61
    3a28:	cf 91       	pop	r28
    3a2a:	df 91       	pop	r29
    3a2c:	1f 91       	pop	r17
    3a2e:	0f 91       	pop	r16
    3a30:	ff 90       	pop	r15
    3a32:	ef 90       	pop	r14
    3a34:	df 90       	pop	r13
    3a36:	cf 90       	pop	r12
    3a38:	bf 90       	pop	r11
    3a3a:	af 90       	pop	r10
    3a3c:	9f 90       	pop	r9
    3a3e:	8f 90       	pop	r8
    3a40:	7f 90       	pop	r7
    3a42:	6f 90       	pop	r6
    3a44:	5f 90       	pop	r5
    3a46:	4f 90       	pop	r4
    3a48:	3f 90       	pop	r3
    3a4a:	2f 90       	pop	r2
    3a4c:	08 95       	ret

00003a4e <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    3a4e:	2f 92       	push	r2
    3a50:	3f 92       	push	r3
    3a52:	4f 92       	push	r4
    3a54:	5f 92       	push	r5
    3a56:	6f 92       	push	r6
    3a58:	7f 92       	push	r7
    3a5a:	8f 92       	push	r8
    3a5c:	9f 92       	push	r9
    3a5e:	af 92       	push	r10
    3a60:	bf 92       	push	r11
    3a62:	cf 92       	push	r12
    3a64:	df 92       	push	r13
    3a66:	ef 92       	push	r14
    3a68:	ff 92       	push	r15
    3a6a:	0f 93       	push	r16
    3a6c:	1f 93       	push	r17
    3a6e:	df 93       	push	r29
    3a70:	cf 93       	push	r28
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	60 97       	sbiw	r28, 0x10	; 16
    3a78:	0f b6       	in	r0, 0x3f	; 63
    3a7a:	f8 94       	cli
    3a7c:	de bf       	out	0x3e, r29	; 62
    3a7e:	0f be       	out	0x3f, r0	; 63
    3a80:	cd bf       	out	0x3d, r28	; 61
    3a82:	52 2e       	mov	r5, r18
    3a84:	43 2e       	mov	r4, r19
    3a86:	4b 83       	std	Y+3, r20	; 0x03
    3a88:	5c 83       	std	Y+4, r21	; 0x04
    3a8a:	6d 83       	std	Y+5, r22	; 0x05
    3a8c:	7e 83       	std	Y+6, r23	; 0x06
    3a8e:	8f 83       	std	Y+7, r24	; 0x07
    3a90:	98 87       	std	Y+8, r25	; 0x08
    3a92:	18 01       	movw	r2, r16
    3a94:	37 01       	movw	r6, r14
    3a96:	9a 82       	std	Y+2, r9	; 0x02
    3a98:	89 82       	std	Y+1, r8	; 0x01
    if(!buffer || interval == 0 || length < interval || !callback)
    3a9a:	01 15       	cp	r16, r1
    3a9c:	11 05       	cpc	r17, r1
    3a9e:	09 f4       	brne	.+2      	; 0x3aa2 <sd_raw_read_interval+0x54>
    3aa0:	88 c0       	rjmp	.+272    	; 0x3bb2 <sd_raw_read_interval+0x164>
    3aa2:	e1 14       	cp	r14, r1
    3aa4:	f1 04       	cpc	r15, r1
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <sd_raw_read_interval+0x5c>
    3aa8:	84 c0       	rjmp	.+264    	; 0x3bb2 <sd_raw_read_interval+0x164>
    3aaa:	ce 14       	cp	r12, r14
    3aac:	df 04       	cpc	r13, r15
    3aae:	08 f4       	brcc	.+2      	; 0x3ab2 <sd_raw_read_interval+0x64>
    3ab0:	80 c0       	rjmp	.+256    	; 0x3bb2 <sd_raw_read_interval+0x164>
    3ab2:	a1 14       	cp	r10, r1
    3ab4:	b1 04       	cpc	r11, r1
    3ab6:	09 f4       	brne	.+2      	; 0x3aba <sd_raw_read_interval+0x6c>
    3ab8:	7c c0       	rjmp	.+248    	; 0x3bb2 <sd_raw_read_interval+0x164>
    3aba:	88 24       	eor	r8, r8
    3abc:	99 24       	eor	r9, r9
    3abe:	8e 18       	sub	r8, r14
    3ac0:	9f 08       	sbc	r9, r15
    3ac2:	ce 18       	sub	r12, r14
    3ac4:	df 08       	sbc	r13, r15
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    3ac6:	97 01       	movw	r18, r14
    3ac8:	40 e0       	ldi	r20, 0x00	; 0
    3aca:	50 e0       	ldi	r21, 0x00	; 0
    3acc:	60 e0       	ldi	r22, 0x00	; 0
    3ace:	70 e0       	ldi	r23, 0x00	; 0
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	e9 86       	std	Y+9, r14	; 0x09
    3ad6:	3a 87       	std	Y+10, r19	; 0x0a
    3ad8:	4b 87       	std	Y+11, r20	; 0x0b
    3ada:	5c 87       	std	Y+12, r21	; 0x0c
    3adc:	6d 87       	std	Y+13, r22	; 0x0d
    3ade:	7e 87       	std	Y+14, r23	; 0x0e
    3ae0:	8f 87       	std	Y+15, r24	; 0x0f
    3ae2:	98 8b       	std	Y+16, r25	; 0x10
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    3ae4:	25 2d       	mov	r18, r5
    3ae6:	34 2d       	mov	r19, r4
    3ae8:	4b 81       	ldd	r20, Y+3	; 0x03
    3aea:	5c 81       	ldd	r21, Y+4	; 0x04
    3aec:	6d 81       	ldd	r22, Y+5	; 0x05
    3aee:	7e 81       	ldd	r23, Y+6	; 0x06
    3af0:	8f 81       	ldd	r24, Y+7	; 0x07
    3af2:	98 85       	ldd	r25, Y+8	; 0x08
    3af4:	81 01       	movw	r16, r2
    3af6:	73 01       	movw	r14, r6
    3af8:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <sd_raw_read>
    3afc:	88 23       	and	r24, r24
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <sd_raw_read_interval+0xb4>
    3b00:	58 c0       	rjmp	.+176    	; 0x3bb2 <sd_raw_read_interval+0x164>
            return 0;
        if(!callback(buffer, offset, p))
    3b02:	c1 01       	movw	r24, r2
    3b04:	05 2d       	mov	r16, r5
    3b06:	14 2d       	mov	r17, r4
    3b08:	2b 81       	ldd	r18, Y+3	; 0x03
    3b0a:	3c 81       	ldd	r19, Y+4	; 0x04
    3b0c:	4d 81       	ldd	r20, Y+5	; 0x05
    3b0e:	5e 81       	ldd	r21, Y+6	; 0x06
    3b10:	6f 81       	ldd	r22, Y+7	; 0x07
    3b12:	78 85       	ldd	r23, Y+8	; 0x08
    3b14:	e9 80       	ldd	r14, Y+1	; 0x01
    3b16:	fa 80       	ldd	r15, Y+2	; 0x02
    3b18:	f5 01       	movw	r30, r10
    3b1a:	09 95       	icall
    3b1c:	88 23       	and	r24, r24
    3b1e:	09 f4       	brne	.+2      	; 0x3b22 <sd_raw_read_interval+0xd4>
    3b20:	4a c0       	rjmp	.+148    	; 0x3bb6 <sd_raw_read_interval+0x168>
            break;
    3b22:	c8 0c       	add	r12, r8
    3b24:	d9 1c       	adc	r13, r9
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    3b26:	c6 01       	movw	r24, r12
    3b28:	86 0d       	add	r24, r6
    3b2a:	97 1d       	adc	r25, r7
    3b2c:	86 15       	cp	r24, r6
    3b2e:	97 05       	cpc	r25, r7
    3b30:	08 f4       	brcc	.+2      	; 0x3b34 <sd_raw_read_interval+0xe6>
    3b32:	41 c0       	rjmp	.+130    	; 0x3bb6 <sd_raw_read_interval+0x168>
    3b34:	39 85       	ldd	r19, Y+9	; 0x09
    3b36:	35 0d       	add	r19, r5
    3b38:	91 e0       	ldi	r25, 0x01	; 1
    3b3a:	35 15       	cp	r19, r5
    3b3c:	08 f0       	brcs	.+2      	; 0x3b40 <sd_raw_read_interval+0xf2>
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b42:	84 0d       	add	r24, r4
    3b44:	21 e0       	ldi	r18, 0x01	; 1
    3b46:	84 15       	cp	r24, r4
    3b48:	08 f0       	brcs	.+2      	; 0x3b4c <sd_raw_read_interval+0xfe>
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	19 2f       	mov	r17, r25
    3b4e:	18 0f       	add	r17, r24
    3b50:	91 e0       	ldi	r25, 0x01	; 1
    3b52:	18 17       	cp	r17, r24
    3b54:	08 f0       	brcs	.+2      	; 0x3b58 <sd_raw_read_interval+0x10a>
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	92 2b       	or	r25, r18
    3b5a:	4b 81       	ldd	r20, Y+3	; 0x03
    3b5c:	94 0f       	add	r25, r20
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	94 17       	cp	r25, r20
    3b62:	08 f0       	brcs	.+2      	; 0x3b66 <sd_raw_read_interval+0x118>
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	6c 81       	ldd	r22, Y+4	; 0x04
    3b68:	68 0f       	add	r22, r24
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	5c 81       	ldd	r21, Y+4	; 0x04
    3b6e:	65 17       	cp	r22, r21
    3b70:	08 f0       	brcs	.+2      	; 0x3b74 <sd_raw_read_interval+0x126>
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	5d 81       	ldd	r21, Y+5	; 0x05
    3b76:	58 0f       	add	r21, r24
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	7d 81       	ldd	r23, Y+5	; 0x05
    3b7c:	57 17       	cp	r21, r23
    3b7e:	08 f0       	brcs	.+2      	; 0x3b82 <sd_raw_read_interval+0x134>
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	4e 81       	ldd	r20, Y+6	; 0x06
    3b84:	48 0f       	add	r20, r24
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	2e 81       	ldd	r18, Y+6	; 0x06
    3b8a:	42 17       	cp	r20, r18
    3b8c:	08 f0       	brcs	.+2      	; 0x3b90 <sd_raw_read_interval+0x142>
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	7f 81       	ldd	r23, Y+7	; 0x07
    3b92:	87 0f       	add	r24, r23
    3b94:	21 e0       	ldi	r18, 0x01	; 1
    3b96:	87 17       	cp	r24, r23
    3b98:	08 f0       	brcs	.+2      	; 0x3b9c <sd_raw_read_interval+0x14e>
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	53 2e       	mov	r5, r19
    3b9e:	41 2e       	mov	r4, r17
    3ba0:	9b 83       	std	Y+3, r25	; 0x03
    3ba2:	6c 83       	std	Y+4, r22	; 0x04
    3ba4:	5d 83       	std	Y+5, r21	; 0x05
    3ba6:	4e 83       	std	Y+6, r20	; 0x06
    3ba8:	8f 83       	std	Y+7, r24	; 0x07
    3baa:	88 85       	ldd	r24, Y+8	; 0x08
    3bac:	82 0f       	add	r24, r18
    3bae:	88 87       	std	Y+8, r24	; 0x08
    3bb0:	99 cf       	rjmp	.-206    	; 0x3ae4 <sd_raw_read_interval+0x96>
    3bb2:	80 e0       	ldi	r24, 0x00	; 0
    3bb4:	01 c0       	rjmp	.+2      	; 0x3bb8 <sd_raw_read_interval+0x16a>
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    3bb8:	60 96       	adiw	r28, 0x10	; 16
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	f8 94       	cli
    3bbe:	de bf       	out	0x3e, r29	; 62
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	cd bf       	out	0x3d, r28	; 61
    3bc4:	cf 91       	pop	r28
    3bc6:	df 91       	pop	r29
    3bc8:	1f 91       	pop	r17
    3bca:	0f 91       	pop	r16
    3bcc:	ff 90       	pop	r15
    3bce:	ef 90       	pop	r14
    3bd0:	df 90       	pop	r13
    3bd2:	cf 90       	pop	r12
    3bd4:	bf 90       	pop	r11
    3bd6:	af 90       	pop	r10
    3bd8:	9f 90       	pop	r9
    3bda:	8f 90       	pop	r8
    3bdc:	7f 90       	pop	r7
    3bde:	6f 90       	pop	r6
    3be0:	5f 90       	pop	r5
    3be2:	4f 90       	pop	r4
    3be4:	3f 90       	pop	r3
    3be6:	2f 90       	pop	r2
    3be8:	08 95       	ret

00003bea <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    3bea:	8f 92       	push	r8
    3bec:	9f 92       	push	r9
    3bee:	bf 92       	push	r11
    3bf0:	cf 92       	push	r12
    3bf2:	df 92       	push	r13
    3bf4:	ef 92       	push	r14
    3bf6:	ff 92       	push	r15
    3bf8:	0f 93       	push	r16
    3bfa:	1f 93       	push	r17
    3bfc:	cf 93       	push	r28
    3bfe:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    3c00:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_sck();
    3c02:	27 9a       	sbi	0x04, 7	; 4
    configure_pin_ss();
    3c04:	24 9a       	sbi	0x04, 4	; 4
    configure_pin_miso();
    3c06:	26 98       	cbi	0x04, 6	; 4

    unselect_card();
    3c08:	29 98       	cbi	0x05, 1	; 5
    3c0a:	2c 9a       	sbi	0x05, 4	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    3c0c:	83 e5       	ldi	r24, 0x53	; 83
    3c0e:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    3c10:	8d b5       	in	r24, 0x2d	; 45
    3c12:	8e 7f       	andi	r24, 0xFE	; 254
    3c14:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    3c16:	10 92 da 03 	sts	0x03DA, r1
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3c1c:	2f ef       	ldi	r18, 0xFF	; 255
    3c1e:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    3c20:	0d b4       	in	r0, 0x2d	; 45
    3c22:	07 fe       	sbrs	r0, 7
    3c24:	fd cf       	rjmp	.-6      	; 0x3c20 <sd_raw_init+0x36>
    SPSR &= ~(1 << SPIF);
    3c26:	8d b5       	in	r24, 0x2d	; 45
    3c28:	8f 77       	andi	r24, 0x7F	; 127
    3c2a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3c2c:	8e b5       	in	r24, 0x2e	; 46
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    3c2e:	9f 5f       	subi	r25, 0xFF	; 255
    3c30:	9a 30       	cpi	r25, 0x0A	; 10
    3c32:	a9 f7       	brne	.-22     	; 0x3c1e <sd_raw_init+0x34>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    3c34:	29 9a       	sbi	0x05, 1	; 5
    3c36:	2c 98       	cbi	0x05, 4	; 5
    3c38:	00 e0       	ldi	r16, 0x00	; 0
    3c3a:	10 e0       	ldi	r17, 0x00	; 0

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	40 e0       	ldi	r20, 0x00	; 0
    3c40:	50 e0       	ldi	r21, 0x00	; 0
    3c42:	60 e0       	ldi	r22, 0x00	; 0
    3c44:	70 e0       	ldi	r23, 0x00	; 0
    3c46:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
    3c4a:	f8 2e       	mov	r15, r24
        if(response == (1 << R1_IDLE_STATE))
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	f8 16       	cp	r15, r24
    3c50:	41 f0       	breq	.+16     	; 0x3c62 <sd_raw_init+0x78>
            break;

        if(i == 0x1ff)
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	0f 3f       	cpi	r16, 0xFF	; 255
    3c56:	18 07       	cpc	r17, r24
    3c58:	09 f4       	brne	.+2      	; 0x3c5c <sd_raw_init+0x72>
    3c5a:	c3 c0       	rjmp	.+390    	; 0x3de2 <sd_raw_init+0x1f8>
    /* address card */
    select_card();

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    3c5c:	0f 5f       	subi	r16, 0xFF	; 255
    3c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c60:	ed cf       	rjmp	.-38     	; 0x3c3c <sd_raw_init+0x52>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    3c62:	88 e0       	ldi	r24, 0x08	; 8
    3c64:	4a ea       	ldi	r20, 0xAA	; 170
    3c66:	51 e0       	ldi	r21, 0x01	; 1
    3c68:	60 e0       	ldi	r22, 0x00	; 0
    3c6a:	70 e0       	ldi	r23, 0x00	; 0
    3c6c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    3c70:	82 fd       	sbrc	r24, 2
    3c72:	2d c0       	rjmp	.+90     	; 0x3cce <sd_raw_init+0xe4>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3c74:	8f ef       	ldi	r24, 0xFF	; 255
    3c76:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3c78:	0d b4       	in	r0, 0x2d	; 45
    3c7a:	07 fe       	sbrs	r0, 7
    3c7c:	fd cf       	rjmp	.-6      	; 0x3c78 <sd_raw_init+0x8e>
    SPSR &= ~(1 << SPIF);
    3c7e:	8d b5       	in	r24, 0x2d	; 45
    3c80:	8f 77       	andi	r24, 0x7F	; 127
    3c82:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3c84:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3c86:	8f ef       	ldi	r24, 0xFF	; 255
    3c88:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3c8a:	0d b4       	in	r0, 0x2d	; 45
    3c8c:	07 fe       	sbrs	r0, 7
    3c8e:	fd cf       	rjmp	.-6      	; 0x3c8a <sd_raw_init+0xa0>
    SPSR &= ~(1 << SPIF);
    3c90:	8d b5       	in	r24, 0x2d	; 45
    3c92:	8f 77       	andi	r24, 0x7F	; 127
    3c94:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3c96:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3c98:	8f ef       	ldi	r24, 0xFF	; 255
    3c9a:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3c9c:	0d b4       	in	r0, 0x2d	; 45
    3c9e:	07 fe       	sbrs	r0, 7
    3ca0:	fd cf       	rjmp	.-6      	; 0x3c9c <sd_raw_init+0xb2>
    SPSR &= ~(1 << SPIF);
    3ca2:	8d b5       	in	r24, 0x2d	; 45
    3ca4:	8f 77       	andi	r24, 0x7F	; 127
    3ca6:	8d bd       	out	0x2d, r24	; 45
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    {
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
    3ca8:	0e b4       	in	r0, 0x2e	; 46
    3caa:	00 fe       	sbrs	r0, 0
    3cac:	cc c0       	rjmp	.+408    	; 0x3e46 <sd_raw_init+0x25c>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3cae:	8f ef       	ldi	r24, 0xFF	; 255
    3cb0:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3cb2:	0d b4       	in	r0, 0x2d	; 45
    3cb4:	07 fe       	sbrs	r0, 7
    3cb6:	fd cf       	rjmp	.-6      	; 0x3cb2 <sd_raw_init+0xc8>
    SPSR &= ~(1 << SPIF);
    3cb8:	8d b5       	in	r24, 0x2d	; 45
    3cba:	8f 77       	andi	r24, 0x7F	; 127
    3cbc:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3cbe:	8e b5       	in	r24, 0x2e	; 46
    {
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
    3cc0:	8a 3a       	cpi	r24, 0xAA	; 170
    3cc2:	09 f0       	breq	.+2      	; 0x3cc6 <sd_raw_init+0xdc>
    3cc4:	c0 c0       	rjmp	.+384    	; 0x3e46 <sd_raw_init+0x25c>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    3cc6:	82 e0       	ldi	r24, 0x02	; 2
    3cc8:	80 93 da 03 	sts	0x03DA, r24
    3ccc:	12 c0       	rjmp	.+36     	; 0x3cf2 <sd_raw_init+0x108>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    3cce:	87 e3       	ldi	r24, 0x37	; 55
    3cd0:	40 e0       	ldi	r20, 0x00	; 0
    3cd2:	50 e0       	ldi	r21, 0x00	; 0
    3cd4:	60 e0       	ldi	r22, 0x00	; 0
    3cd6:	70 e0       	ldi	r23, 0x00	; 0
    3cd8:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    3cdc:	89 e2       	ldi	r24, 0x29	; 41
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	60 e0       	ldi	r22, 0x00	; 0
    3ce4:	70 e0       	ldi	r23, 0x00	; 0
    3ce6:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    3cea:	82 fd       	sbrc	r24, 2
    3cec:	02 c0       	rjmp	.+4      	; 0x3cf2 <sd_raw_init+0x108>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    3cee:	f0 92 da 03 	sts	0x03DA, r15
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    3cf2:	b0 90 da 03 	lds	r11, 0x03DA
    3cf6:	8b 2d       	mov	r24, r11
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	03 e0       	ldi	r16, 0x03	; 3
    3cfc:	80 2e       	mov	r8, r16
    3cfe:	91 2c       	mov	r9, r1
    3d00:	88 22       	and	r8, r24
    3d02:	99 22       	and	r9, r25
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    3d04:	12 e0       	ldi	r17, 0x02	; 2
    3d06:	c1 2e       	mov	r12, r17
    3d08:	d1 2c       	mov	r13, r1
    3d0a:	c8 22       	and	r12, r24
    3d0c:	d9 22       	and	r13, r25
    3d0e:	c0 e0       	ldi	r28, 0x00	; 0
    3d10:	d0 e0       	ldi	r29, 0x00	; 0
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    3d12:	81 14       	cp	r8, r1
    3d14:	91 04       	cpc	r9, r1
    3d16:	b9 f0       	breq	.+46     	; 0x3d46 <sd_raw_init+0x15c>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    3d18:	c1 14       	cp	r12, r1
    3d1a:	d1 04       	cpc	r13, r1
    3d1c:	31 f0       	breq	.+12     	; 0x3d2a <sd_raw_init+0x140>
    3d1e:	e1 2c       	mov	r14, r1
    3d20:	f1 2c       	mov	r15, r1
    3d22:	01 2d       	mov	r16, r1
    3d24:	b0 e4       	ldi	r27, 0x40	; 64
    3d26:	1b 2f       	mov	r17, r27
    3d28:	03 c0       	rjmp	.+6      	; 0x3d30 <sd_raw_init+0x146>
    3d2a:	ee 24       	eor	r14, r14
    3d2c:	ff 24       	eor	r15, r15
    3d2e:	87 01       	movw	r16, r14
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    3d30:	87 e3       	ldi	r24, 0x37	; 55
    3d32:	40 e0       	ldi	r20, 0x00	; 0
    3d34:	50 e0       	ldi	r21, 0x00	; 0
    3d36:	60 e0       	ldi	r22, 0x00	; 0
    3d38:	70 e0       	ldi	r23, 0x00	; 0
    3d3a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    3d3e:	89 e2       	ldi	r24, 0x29	; 41
    3d40:	b8 01       	movw	r22, r16
    3d42:	a7 01       	movw	r20, r14
    3d44:	05 c0       	rjmp	.+10     	; 0x3d50 <sd_raw_init+0x166>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	40 e0       	ldi	r20, 0x00	; 0
    3d4a:	50 e0       	ldi	r21, 0x00	; 0
    3d4c:	60 e0       	ldi	r22, 0x00	; 0
    3d4e:	70 e0       	ldi	r23, 0x00	; 0
    3d50:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    3d54:	80 ff       	sbrs	r24, 0
    3d56:	07 c0       	rjmp	.+14     	; 0x3d66 <sd_raw_init+0x17c>
            break;

        if(i == 0x7fff)
    3d58:	8f e7       	ldi	r24, 0x7F	; 127
    3d5a:	cf 3f       	cpi	r28, 0xFF	; 255
    3d5c:	d8 07       	cpc	r29, r24
    3d5e:	09 f4       	brne	.+2      	; 0x3d62 <sd_raw_init+0x178>
    3d60:	40 c0       	rjmp	.+128    	; 0x3de2 <sd_raw_init+0x1f8>
            /* MMC card */
        }
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    3d62:	21 96       	adiw	r28, 0x01	; 1
    3d64:	d6 cf       	rjmp	.-84     	; 0x3d12 <sd_raw_init+0x128>
            return 0;
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    3d66:	cd 28       	or	r12, r13
    3d68:	99 f1       	breq	.+102    	; 0x3dd0 <sd_raw_init+0x1e6>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    3d6a:	8a e3       	ldi	r24, 0x3A	; 58
    3d6c:	40 e0       	ldi	r20, 0x00	; 0
    3d6e:	50 e0       	ldi	r21, 0x00	; 0
    3d70:	60 e0       	ldi	r22, 0x00	; 0
    3d72:	70 e0       	ldi	r23, 0x00	; 0
    3d74:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
    3d78:	88 23       	and	r24, r24
    3d7a:	99 f5       	brne	.+102    	; 0x3de2 <sd_raw_init+0x1f8>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3d7c:	8f ef       	ldi	r24, 0xFF	; 255
    3d7e:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3d80:	0d b4       	in	r0, 0x2d	; 45
    3d82:	07 fe       	sbrs	r0, 7
    3d84:	fd cf       	rjmp	.-6      	; 0x3d80 <sd_raw_init+0x196>
    SPSR &= ~(1 << SPIF);
    3d86:	8d b5       	in	r24, 0x2d	; 45
    3d88:	8f 77       	andi	r24, 0x7F	; 127
    3d8a:	8d bd       	out	0x2d, r24	; 45
        {
            unselect_card();
            return 0;
        }

        if(sd_raw_rec_byte() & 0x40)
    3d8c:	0e b4       	in	r0, 0x2e	; 46
    3d8e:	06 fe       	sbrs	r0, 6
    3d90:	04 c0       	rjmp	.+8      	; 0x3d9a <sd_raw_init+0x1b0>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    3d92:	84 e0       	ldi	r24, 0x04	; 4
    3d94:	b8 2a       	or	r11, r24
    3d96:	b0 92 da 03 	sts	0x03DA, r11
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3d9a:	8f ef       	ldi	r24, 0xFF	; 255
    3d9c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3d9e:	0d b4       	in	r0, 0x2d	; 45
    3da0:	07 fe       	sbrs	r0, 7
    3da2:	fd cf       	rjmp	.-6      	; 0x3d9e <sd_raw_init+0x1b4>
    SPSR &= ~(1 << SPIF);
    3da4:	8d b5       	in	r24, 0x2d	; 45
    3da6:	8f 77       	andi	r24, 0x7F	; 127
    3da8:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3daa:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3dac:	8f ef       	ldi	r24, 0xFF	; 255
    3dae:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3db0:	0d b4       	in	r0, 0x2d	; 45
    3db2:	07 fe       	sbrs	r0, 7
    3db4:	fd cf       	rjmp	.-6      	; 0x3db0 <sd_raw_init+0x1c6>
    SPSR &= ~(1 << SPIF);
    3db6:	8d b5       	in	r24, 0x2d	; 45
    3db8:	8f 77       	andi	r24, 0x7F	; 127
    3dba:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3dbc:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3dbe:	8f ef       	ldi	r24, 0xFF	; 255
    3dc0:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3dc2:	0d b4       	in	r0, 0x2d	; 45
    3dc4:	07 fe       	sbrs	r0, 7
    3dc6:	fd cf       	rjmp	.-6      	; 0x3dc2 <sd_raw_init+0x1d8>
    SPSR &= ~(1 << SPIF);
    3dc8:	8d b5       	in	r24, 0x2d	; 45
    3dca:	8f 77       	andi	r24, 0x7F	; 127
    3dcc:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3dce:	8e b5       	in	r24, 0x2e	; 46
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    3dd0:	80 e1       	ldi	r24, 0x10	; 16
    3dd2:	40 e0       	ldi	r20, 0x00	; 0
    3dd4:	52 e0       	ldi	r21, 0x02	; 2
    3dd6:	60 e0       	ldi	r22, 0x00	; 0
    3dd8:	70 e0       	ldi	r23, 0x00	; 0
    3dda:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sd_raw_send_command>
    3dde:	88 23       	and	r24, r24
    3de0:	19 f0       	breq	.+6      	; 0x3de8 <sd_raw_init+0x1fe>
    {
        unselect_card();
    3de2:	29 98       	cbi	0x05, 1	; 5
    3de4:	2c 9a       	sbi	0x05, 4	; 5
    3de6:	2f c0       	rjmp	.+94     	; 0x3e46 <sd_raw_init+0x25c>
        return 0;
    }

    /* deaddress card */
    unselect_card();
    3de8:	29 98       	cbi	0x05, 1	; 5
    3dea:	2c 9a       	sbi	0x05, 4	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    3dec:	8c b5       	in	r24, 0x2c	; 44
    3dee:	8c 7f       	andi	r24, 0xFC	; 252
    3df0:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    3df2:	8d b5       	in	r24, 0x2d	; 45
    3df4:	81 60       	ori	r24, 0x01	; 1
    3df6:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    3df8:	8f ef       	ldi	r24, 0xFF	; 255
    3dfa:	80 93 d1 03 	sts	0x03D1, r24
    3dfe:	80 93 d2 03 	sts	0x03D2, r24
    3e02:	80 93 d3 03 	sts	0x03D3, r24
    3e06:	80 93 d4 03 	sts	0x03D4, r24
    3e0a:	80 93 d5 03 	sts	0x03D5, r24
    3e0e:	80 93 d6 03 	sts	0x03D6, r24
    3e12:	80 93 d7 03 	sts	0x03D7, r24
    3e16:	80 93 d8 03 	sts	0x03D8, r24
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	80 93 d9 03 	sts	0x03D9, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	40 e0       	ldi	r20, 0x00	; 0
    3e26:	50 e0       	ldi	r21, 0x00	; 0
    3e28:	60 e0       	ldi	r22, 0x00	; 0
    3e2a:	70 e0       	ldi	r23, 0x00	; 0
    3e2c:	80 e0       	ldi	r24, 0x00	; 0
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	01 ed       	ldi	r16, 0xD1	; 209
    3e32:	11 e0       	ldi	r17, 0x01	; 1
    3e34:	e1 2c       	mov	r14, r1
    3e36:	a2 e0       	ldi	r26, 0x02	; 2
    3e38:	fa 2e       	mov	r15, r26
    3e3a:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <sd_raw_read>
    3e3e:	88 23       	and	r24, r24
    3e40:	19 f0       	breq	.+6      	; 0x3e48 <sd_raw_init+0x25e>
    3e42:	81 e0       	ldi	r24, 0x01	; 1
    3e44:	01 c0       	rjmp	.+2      	; 0x3e48 <sd_raw_init+0x25e>
    3e46:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
#endif

    return 1;
}
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	ff 90       	pop	r15
    3e52:	ef 90       	pop	r14
    3e54:	df 90       	pop	r13
    3e56:	cf 90       	pop	r12
    3e58:	bf 90       	pop	r11
    3e5a:	9f 90       	pop	r9
    3e5c:	8f 90       	pop	r8
    3e5e:	08 95       	ret

00003e60 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    3e60:	2f 92       	push	r2
    3e62:	3f 92       	push	r3
    3e64:	4f 92       	push	r4
    3e66:	5f 92       	push	r5
    3e68:	6f 92       	push	r6
    3e6a:	7f 92       	push	r7
    3e6c:	8f 92       	push	r8
    3e6e:	9f 92       	push	r9
    3e70:	af 92       	push	r10
    3e72:	bf 92       	push	r11
    3e74:	cf 92       	push	r12
    3e76:	df 92       	push	r13
    3e78:	ef 92       	push	r14
    3e7a:	ff 92       	push	r15
    3e7c:	0f 93       	push	r16
    3e7e:	1f 93       	push	r17
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
    3e88:	28 97       	sbiw	r28, 0x08	; 8
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	f8 94       	cli
    3e8e:	de bf       	out	0x3e, r29	; 62
    3e90:	0f be       	out	0x3f, r0	; 63
    3e92:	cd bf       	out	0x3d, r28	; 61
    3e94:	92 2e       	mov	r9, r18
    3e96:	83 2e       	mov	r8, r19
    3e98:	54 2e       	mov	r5, r20
    3e9a:	45 2e       	mov	r4, r21
    3e9c:	36 2e       	mov	r3, r22
    3e9e:	27 2e       	mov	r2, r23
    3ea0:	8d 83       	std	Y+5, r24	; 0x05
    3ea2:	9e 83       	std	Y+6, r25	; 0x06
    3ea4:	38 01       	movw	r6, r16
    3ea6:	f8 86       	std	Y+8, r15	; 0x08
    3ea8:	ef 82       	std	Y+7, r14	; 0x07
    3eaa:	da 82       	std	Y+2, r13	; 0x02
    3eac:	c9 82       	std	Y+1, r12	; 0x01
    3eae:	bc 82       	std	Y+4, r11	; 0x04
    3eb0:	ab 82       	std	Y+3, r10	; 0x03
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    3eb2:	01 15       	cp	r16, r1
    3eb4:	11 05       	cpc	r17, r1
    3eb6:	09 f4       	brne	.+2      	; 0x3eba <sd_raw_write_interval+0x5a>
    3eb8:	7e c0       	rjmp	.+252    	; 0x3fb6 <sd_raw_write_interval+0x156>
    3eba:	cd 28       	or	r12, r13
    3ebc:	09 f4       	brne	.+2      	; 0x3ec0 <sd_raw_write_interval+0x60>
    3ebe:	7b c0       	rjmp	.+246    	; 0x3fb6 <sd_raw_write_interval+0x156>
        return 0;

    uint8_t endless = (length == 0);
    3ec0:	bb 24       	eor	r11, r11
    3ec2:	ef 28       	or	r14, r15
    3ec4:	09 f0       	breq	.+2      	; 0x3ec8 <sd_raw_write_interval+0x68>
    3ec6:	6e c0       	rjmp	.+220    	; 0x3fa4 <sd_raw_write_interval+0x144>
    3ec8:	bb 24       	eor	r11, r11
    3eca:	b3 94       	inc	r11
    3ecc:	6b c0       	rjmp	.+214    	; 0x3fa4 <sd_raw_write_interval+0x144>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    3ece:	c3 01       	movw	r24, r6
    3ed0:	09 2d       	mov	r16, r9
    3ed2:	18 2d       	mov	r17, r8
    3ed4:	25 2d       	mov	r18, r5
    3ed6:	34 2d       	mov	r19, r4
    3ed8:	43 2d       	mov	r20, r3
    3eda:	52 2d       	mov	r21, r2
    3edc:	6d 81       	ldd	r22, Y+5	; 0x05
    3ede:	7e 81       	ldd	r23, Y+6	; 0x06
    3ee0:	eb 80       	ldd	r14, Y+3	; 0x03
    3ee2:	fc 80       	ldd	r15, Y+4	; 0x04
    3ee4:	a9 81       	ldd	r26, Y+1	; 0x01
    3ee6:	ba 81       	ldd	r27, Y+2	; 0x02
    3ee8:	fd 01       	movw	r30, r26
    3eea:	09 95       	icall
    3eec:	6c 01       	movw	r12, r24
        if(!bytes_to_write)
    3eee:	00 97       	sbiw	r24, 0x00	; 0
    3ef0:	09 f4       	brne	.+2      	; 0x3ef4 <sd_raw_write_interval+0x94>
    3ef2:	63 c0       	rjmp	.+198    	; 0x3fba <sd_raw_write_interval+0x15a>
            break;
        if(!endless && bytes_to_write > length)
    3ef4:	bb 20       	and	r11, r11
    3ef6:	31 f4       	brne	.+12     	; 0x3f04 <sd_raw_write_interval+0xa4>
    3ef8:	ef 81       	ldd	r30, Y+7	; 0x07
    3efa:	f8 85       	ldd	r31, Y+8	; 0x08
    3efc:	e8 17       	cp	r30, r24
    3efe:	f9 07       	cpc	r31, r25
    3f00:	08 f4       	brcc	.+2      	; 0x3f04 <sd_raw_write_interval+0xa4>
    3f02:	59 c0       	rjmp	.+178    	; 0x3fb6 <sd_raw_write_interval+0x156>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    3f04:	29 2d       	mov	r18, r9
    3f06:	38 2d       	mov	r19, r8
    3f08:	45 2d       	mov	r20, r5
    3f0a:	54 2d       	mov	r21, r4
    3f0c:	63 2d       	mov	r22, r3
    3f0e:	72 2d       	mov	r23, r2
    3f10:	8d 81       	ldd	r24, Y+5	; 0x05
    3f12:	9e 81       	ldd	r25, Y+6	; 0x06
    3f14:	83 01       	movw	r16, r6
    3f16:	76 01       	movw	r14, r12
    3f18:	0e 94 76 19 	call	0x32ec	; 0x32ec <sd_raw_write>
    3f1c:	88 23       	and	r24, r24
    3f1e:	09 f4       	brne	.+2      	; 0x3f22 <sd_raw_write_interval+0xc2>
    3f20:	4a c0       	rjmp	.+148    	; 0x3fb6 <sd_raw_write_interval+0x156>
            return 0;

        offset += bytes_to_write;
    3f22:	96 01       	movw	r18, r12
    3f24:	f9 2d       	mov	r31, r9
    3f26:	fc 0d       	add	r31, r12
    3f28:	e1 e0       	ldi	r30, 0x01	; 1
    3f2a:	f9 15       	cp	r31, r9
    3f2c:	08 f0       	brcs	.+2      	; 0x3f30 <sd_raw_write_interval+0xd0>
    3f2e:	e0 e0       	ldi	r30, 0x00	; 0
    3f30:	88 2d       	mov	r24, r8
    3f32:	83 0f       	add	r24, r19
    3f34:	21 e0       	ldi	r18, 0x01	; 1
    3f36:	88 15       	cp	r24, r8
    3f38:	08 f0       	brcs	.+2      	; 0x3f3c <sd_raw_write_interval+0xdc>
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	1e 2f       	mov	r17, r30
    3f3e:	18 0f       	add	r17, r24
    3f40:	91 e0       	ldi	r25, 0x01	; 1
    3f42:	18 17       	cp	r17, r24
    3f44:	08 f0       	brcs	.+2      	; 0x3f48 <sd_raw_write_interval+0xe8>
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	92 2b       	or	r25, r18
    3f4a:	95 0d       	add	r25, r5
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	95 15       	cp	r25, r5
    3f50:	08 f0       	brcs	.+2      	; 0x3f54 <sd_raw_write_interval+0xf4>
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	68 2f       	mov	r22, r24
    3f56:	64 0d       	add	r22, r4
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	64 15       	cp	r22, r4
    3f5c:	08 f0       	brcs	.+2      	; 0x3f60 <sd_raw_write_interval+0x100>
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	58 2f       	mov	r21, r24
    3f62:	53 0d       	add	r21, r3
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	53 15       	cp	r21, r3
    3f68:	08 f0       	brcs	.+2      	; 0x3f6c <sd_raw_write_interval+0x10c>
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
    3f6c:	48 2f       	mov	r20, r24
    3f6e:	42 0d       	add	r20, r2
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	42 15       	cp	r20, r2
    3f74:	08 f0       	brcs	.+2      	; 0x3f78 <sd_raw_write_interval+0x118>
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	2d 81       	ldd	r18, Y+5	; 0x05
    3f7a:	82 0f       	add	r24, r18
    3f7c:	21 e0       	ldi	r18, 0x01	; 1
    3f7e:	3d 81       	ldd	r19, Y+5	; 0x05
    3f80:	83 17       	cp	r24, r19
    3f82:	08 f0       	brcs	.+2      	; 0x3f86 <sd_raw_write_interval+0x126>
    3f84:	20 e0       	ldi	r18, 0x00	; 0
    3f86:	9f 2e       	mov	r9, r31
    3f88:	81 2e       	mov	r8, r17
    3f8a:	59 2e       	mov	r5, r25
    3f8c:	46 2e       	mov	r4, r22
    3f8e:	1a 01       	movw	r2, r20
    3f90:	8d 83       	std	Y+5, r24	; 0x05
    3f92:	8e 81       	ldd	r24, Y+6	; 0x06
    3f94:	82 0f       	add	r24, r18
    3f96:	8e 83       	std	Y+6, r24	; 0x06
        length -= bytes_to_write;
    3f98:	af 81       	ldd	r26, Y+7	; 0x07
    3f9a:	b8 85       	ldd	r27, Y+8	; 0x08
    3f9c:	ac 19       	sub	r26, r12
    3f9e:	bd 09       	sbc	r27, r13
    3fa0:	b8 87       	std	Y+8, r27	; 0x08
    3fa2:	af 83       	std	Y+7, r26	; 0x07

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    3fa4:	bb 20       	and	r11, r11
    3fa6:	09 f0       	breq	.+2      	; 0x3faa <sd_raw_write_interval+0x14a>
    3fa8:	92 cf       	rjmp	.-220    	; 0x3ece <sd_raw_write_interval+0x6e>
    3faa:	ef 81       	ldd	r30, Y+7	; 0x07
    3fac:	f8 85       	ldd	r31, Y+8	; 0x08
    3fae:	ef 2b       	or	r30, r31
    3fb0:	09 f0       	breq	.+2      	; 0x3fb4 <sd_raw_write_interval+0x154>
    3fb2:	8d cf       	rjmp	.-230    	; 0x3ece <sd_raw_write_interval+0x6e>
    3fb4:	02 c0       	rjmp	.+4      	; 0x3fba <sd_raw_write_interval+0x15a>
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	01 c0       	rjmp	.+2      	; 0x3fbc <sd_raw_write_interval+0x15c>
    3fba:	81 e0       	ldi	r24, 0x01	; 1
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    3fbc:	28 96       	adiw	r28, 0x08	; 8
    3fbe:	0f b6       	in	r0, 0x3f	; 63
    3fc0:	f8 94       	cli
    3fc2:	de bf       	out	0x3e, r29	; 62
    3fc4:	0f be       	out	0x3f, r0	; 63
    3fc6:	cd bf       	out	0x3d, r28	; 61
    3fc8:	cf 91       	pop	r28
    3fca:	df 91       	pop	r29
    3fcc:	1f 91       	pop	r17
    3fce:	0f 91       	pop	r16
    3fd0:	ff 90       	pop	r15
    3fd2:	ef 90       	pop	r14
    3fd4:	df 90       	pop	r13
    3fd6:	cf 90       	pop	r12
    3fd8:	bf 90       	pop	r11
    3fda:	af 90       	pop	r10
    3fdc:	9f 90       	pop	r9
    3fde:	8f 90       	pop	r8
    3fe0:	7f 90       	pop	r7
    3fe2:	6f 90       	pop	r6
    3fe4:	5f 90       	pop	r5
    3fe6:	4f 90       	pop	r4
    3fe8:	3f 90       	pop	r3
    3fea:	2f 90       	pop	r2
    3fec:	08 95       	ret

00003fee <fat_close>:
 *
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    3fee:	fc 01       	movw	r30, r24
    if(!fs)
    3ff0:	00 97       	sbiw	r24, 0x00	; 0
    3ff2:	11 f0       	breq	.+4      	; 0x3ff8 <fat_close+0xa>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
    3ff4:	11 82       	std	Z+1, r1	; 0x01
    3ff6:	10 82       	st	Z, r1
    3ff8:	08 95       	ret

00003ffa <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    3ffa:	8f 92       	push	r8
    3ffc:	9f 92       	push	r9
    3ffe:	af 92       	push	r10
    4000:	bf 92       	push	r11
    4002:	cf 92       	push	r12
    4004:	df 92       	push	r13
    4006:	ef 92       	push	r14
    4008:	ff 92       	push	r15
    400a:	0f 93       	push	r16
    400c:	1f 93       	push	r17
    400e:	df 93       	push	r29
    4010:	cf 93       	push	r28
    4012:	00 d0       	rcall	.+0      	; 0x4014 <fat_get_next_cluster+0x1a>
    4014:	00 d0       	rcall	.+0      	; 0x4016 <fat_get_next_cluster+0x1c>
    4016:	00 d0       	rcall	.+0      	; 0x4018 <fat_get_next_cluster+0x1e>
    4018:	cd b7       	in	r28, 0x3d	; 61
    401a:	de b7       	in	r29, 0x3e	; 62
    401c:	dc 01       	movw	r26, r24
    if(!fs || cluster_num < 2)
    401e:	00 97       	sbiw	r24, 0x00	; 0
    4020:	09 f4       	brne	.+2      	; 0x4024 <fat_get_next_cluster+0x2a>
    4022:	f0 c0       	rjmp	.+480    	; 0x4204 <fat_get_next_cluster+0x20a>
    4024:	42 30       	cpi	r20, 0x02	; 2
    4026:	51 05       	cpc	r21, r1
    4028:	61 05       	cpc	r22, r1
    402a:	71 05       	cpc	r23, r1
    402c:	08 f4       	brcc	.+2      	; 0x4030 <fat_get_next_cluster+0x36>
    402e:	ea c0       	rjmp	.+468    	; 0x4204 <fat_get_next_cluster+0x20a>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    4030:	ed 91       	ld	r30, X+
    4032:	fc 91       	ld	r31, X
    4034:	11 97       	sbiw	r26, 0x01	; 1
    4036:	80 85       	ldd	r24, Z+8	; 0x08
    4038:	8b 30       	cpi	r24, 0x0B	; 11
    403a:	09 f0       	breq	.+2      	; 0x403e <fat_get_next_cluster+0x44>
    403c:	9d c0       	rjmp	.+314    	; 0x4178 <fat_get_next_cluster+0x17e>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    403e:	12 e0       	ldi	r17, 0x02	; 2
    4040:	44 0f       	add	r20, r20
    4042:	55 1f       	adc	r21, r21
    4044:	66 1f       	adc	r22, r22
    4046:	77 1f       	adc	r23, r23
    4048:	1a 95       	dec	r17
    404a:	d1 f7       	brne	.-12     	; 0x4040 <fat_get_next_cluster+0x46>
    404c:	5a 01       	movw	r10, r20
    404e:	6b 01       	movw	r12, r22
    4050:	ee 24       	eor	r14, r14
    4052:	ff 24       	eor	r15, r15
    4054:	87 01       	movw	r16, r14
    4056:	1a 96       	adiw	r26, 0x0a	; 10
    4058:	9c 90       	ld	r9, X
    405a:	1a 97       	sbiw	r26, 0x0a	; 10
    405c:	1b 96       	adiw	r26, 0x0b	; 11
    405e:	8c 91       	ld	r24, X
    4060:	1b 97       	sbiw	r26, 0x0b	; 11
    4062:	1c 96       	adiw	r26, 0x0c	; 12
    4064:	6c 91       	ld	r22, X
    4066:	1c 97       	sbiw	r26, 0x0c	; 12
    4068:	1d 96       	adiw	r26, 0x0d	; 13
    406a:	7c 91       	ld	r23, X
    406c:	1d 97       	sbiw	r26, 0x0d	; 13
    406e:	1e 96       	adiw	r26, 0x0e	; 14
    4070:	9c 91       	ld	r25, X
    4072:	1e 97       	sbiw	r26, 0x0e	; 14
    4074:	1f 96       	adiw	r26, 0x0f	; 15
    4076:	2c 91       	ld	r18, X
    4078:	1f 97       	sbiw	r26, 0x0f	; 15
    407a:	50 96       	adiw	r26, 0x10	; 16
    407c:	8c 90       	ld	r8, X
    407e:	50 97       	sbiw	r26, 0x10	; 16
    4080:	51 96       	adiw	r26, 0x11	; 17
    4082:	bc 91       	ld	r27, X
    4084:	9a 0c       	add	r9, r10
    4086:	31 e0       	ldi	r19, 0x01	; 1
    4088:	9a 14       	cp	r9, r10
    408a:	08 f0       	brcs	.+2      	; 0x408e <fat_get_next_cluster+0x94>
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	8b 0d       	add	r24, r11
    4090:	41 e0       	ldi	r20, 0x01	; 1
    4092:	8b 15       	cp	r24, r11
    4094:	08 f0       	brcs	.+2      	; 0x4098 <fat_get_next_cluster+0x9e>
    4096:	40 e0       	ldi	r20, 0x00	; 0
    4098:	38 0f       	add	r19, r24
    409a:	51 e0       	ldi	r21, 0x01	; 1
    409c:	38 17       	cp	r19, r24
    409e:	08 f0       	brcs	.+2      	; 0x40a2 <fat_get_next_cluster+0xa8>
    40a0:	50 e0       	ldi	r21, 0x00	; 0
    40a2:	45 2b       	or	r20, r21
    40a4:	8c 2d       	mov	r24, r12
    40a6:	86 0f       	add	r24, r22
    40a8:	51 e0       	ldi	r21, 0x01	; 1
    40aa:	8c 15       	cp	r24, r12
    40ac:	08 f0       	brcs	.+2      	; 0x40b0 <fat_get_next_cluster+0xb6>
    40ae:	50 e0       	ldi	r21, 0x00	; 0
    40b0:	48 0f       	add	r20, r24
    40b2:	61 e0       	ldi	r22, 0x01	; 1
    40b4:	48 17       	cp	r20, r24
    40b6:	08 f0       	brcs	.+2      	; 0x40ba <fat_get_next_cluster+0xc0>
    40b8:	60 e0       	ldi	r22, 0x00	; 0
    40ba:	56 2b       	or	r21, r22
    40bc:	8d 2d       	mov	r24, r13
    40be:	87 0f       	add	r24, r23
    40c0:	61 e0       	ldi	r22, 0x01	; 1
    40c2:	8d 15       	cp	r24, r13
    40c4:	08 f0       	brcs	.+2      	; 0x40c8 <fat_get_next_cluster+0xce>
    40c6:	60 e0       	ldi	r22, 0x00	; 0
    40c8:	58 0f       	add	r21, r24
    40ca:	71 e0       	ldi	r23, 0x01	; 1
    40cc:	58 17       	cp	r21, r24
    40ce:	08 f0       	brcs	.+2      	; 0x40d2 <fat_get_next_cluster+0xd8>
    40d0:	70 e0       	ldi	r23, 0x00	; 0
    40d2:	67 2b       	or	r22, r23
    40d4:	71 e0       	ldi	r23, 0x01	; 1
    40d6:	9e 15       	cp	r25, r14
    40d8:	08 f0       	brcs	.+2      	; 0x40dc <fat_get_next_cluster+0xe2>
    40da:	70 e0       	ldi	r23, 0x00	; 0
    40dc:	69 0f       	add	r22, r25
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	69 17       	cp	r22, r25
    40e2:	08 f0       	brcs	.+2      	; 0x40e6 <fat_get_next_cluster+0xec>
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	78 2b       	or	r23, r24
    40e8:	81 e0       	ldi	r24, 0x01	; 1
    40ea:	2f 15       	cp	r18, r15
    40ec:	08 f0       	brcs	.+2      	; 0x40f0 <fat_get_next_cluster+0xf6>
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	72 0f       	add	r23, r18
    40f2:	a1 e0       	ldi	r26, 0x01	; 1
    40f4:	72 17       	cp	r23, r18
    40f6:	08 f0       	brcs	.+2      	; 0x40fa <fat_get_next_cluster+0x100>
    40f8:	a0 e0       	ldi	r26, 0x00	; 0
    40fa:	8a 2b       	or	r24, r26
    40fc:	91 e0       	ldi	r25, 0x01	; 1
    40fe:	80 16       	cp	r8, r16
    4100:	08 f0       	brcs	.+2      	; 0x4104 <fat_get_next_cluster+0x10a>
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	88 0d       	add	r24, r8
    4106:	a1 e0       	ldi	r26, 0x01	; 1
    4108:	88 15       	cp	r24, r8
    410a:	08 f0       	brcs	.+2      	; 0x410e <fat_get_next_cluster+0x114>
    410c:	a0 e0       	ldi	r26, 0x00	; 0
    410e:	9a 2b       	or	r25, r26
    4110:	01 90       	ld	r0, Z+
    4112:	f0 81       	ld	r31, Z
    4114:	e0 2d       	mov	r30, r0
    4116:	29 2d       	mov	r18, r9
    4118:	9b 0f       	add	r25, r27
    411a:	8e 01       	movw	r16, r28
    411c:	0d 5f       	subi	r16, 0xFD	; 253
    411e:	1f 4f       	sbci	r17, 0xFF	; 255
    4120:	a4 e0       	ldi	r26, 0x04	; 4
    4122:	ea 2e       	mov	r14, r26
    4124:	f1 2c       	mov	r15, r1
    4126:	09 95       	icall
    4128:	88 23       	and	r24, r24
    412a:	09 f4       	brne	.+2      	; 0x412e <fat_get_next_cluster+0x134>
    412c:	6b c0       	rjmp	.+214    	; 0x4204 <fat_get_next_cluster+0x20a>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
    412e:	2b 81       	ldd	r18, Y+3	; 0x03
    4130:	3c 81       	ldd	r19, Y+4	; 0x04
    4132:	4d 81       	ldd	r20, Y+5	; 0x05
    4134:	5e 81       	ldd	r21, Y+6	; 0x06
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
    4136:	21 15       	cp	r18, r1
    4138:	31 05       	cpc	r19, r1
    413a:	41 05       	cpc	r20, r1
    413c:	51 05       	cpc	r21, r1
    413e:	09 f4       	brne	.+2      	; 0x4142 <fat_get_next_cluster+0x148>
    4140:	65 c0       	rjmp	.+202    	; 0x420c <fat_get_next_cluster+0x212>
    4142:	27 3f       	cpi	r18, 0xF7	; 247
    4144:	8f ef       	ldi	r24, 0xFF	; 255
    4146:	38 07       	cpc	r19, r24
    4148:	8f ef       	ldi	r24, 0xFF	; 255
    414a:	48 07       	cpc	r20, r24
    414c:	8f e0       	ldi	r24, 0x0F	; 15
    414e:	58 07       	cpc	r21, r24
    4150:	09 f4       	brne	.+2      	; 0x4154 <fat_get_next_cluster+0x15a>
    4152:	58 c0       	rjmp	.+176    	; 0x4204 <fat_get_next_cluster+0x20a>
    4154:	da 01       	movw	r26, r20
    4156:	c9 01       	movw	r24, r18
    4158:	80 5f       	subi	r24, 0xF0	; 240
    415a:	9f 4f       	sbci	r25, 0xFF	; 255
    415c:	af 4f       	sbci	r26, 0xFF	; 255
    415e:	bf 40       	sbci	r27, 0x0F	; 15
    4160:	07 97       	sbiw	r24, 0x07	; 7
    4162:	a1 05       	cpc	r26, r1
    4164:	b1 05       	cpc	r27, r1
    4166:	08 f4       	brcc	.+2      	; 0x416a <fat_get_next_cluster+0x170>
    4168:	4d c0       	rjmp	.+154    	; 0x4204 <fat_get_next_cluster+0x20a>
    416a:	da 01       	movw	r26, r20
    416c:	c9 01       	movw	r24, r18
    416e:	88 5f       	subi	r24, 0xF8	; 248
    4170:	9f 4f       	sbci	r25, 0xFF	; 255
    4172:	af 4f       	sbci	r26, 0xFF	; 255
    4174:	bf 40       	sbci	r27, 0x0F	; 15
    4176:	42 c0       	rjmp	.+132    	; 0x41fc <fat_get_next_cluster+0x202>
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        uint32_t cluster_offset = cluster_num;
        cluster_offset *= sizeof(fat_entry);
    4178:	44 0f       	add	r20, r20
    417a:	55 1f       	adc	r21, r21
    417c:	66 1f       	adc	r22, r22
    417e:	77 1f       	adc	r23, r23
        cluster_offset += fs->header.fat_offset;

        if(!fs->partition->device_read(cluster_offset, (uint8_t*) &fat_entry, sizeof(fat_entry)))
    4180:	1a 96       	adiw	r26, 0x0a	; 10
    4182:	ad 90       	ld	r10, X+
    4184:	bd 90       	ld	r11, X+
    4186:	cd 90       	ld	r12, X+
    4188:	dc 90       	ld	r13, X
    418a:	1d 97       	sbiw	r26, 0x0d	; 13
    418c:	a4 0e       	add	r10, r20
    418e:	b5 1e       	adc	r11, r21
    4190:	c6 1e       	adc	r12, r22
    4192:	d7 1e       	adc	r13, r23
    4194:	01 90       	ld	r0, Z+
    4196:	f0 81       	ld	r31, Z
    4198:	e0 2d       	mov	r30, r0
    419a:	95 01       	movw	r18, r10
    419c:	a6 01       	movw	r20, r12
    419e:	60 e0       	ldi	r22, 0x00	; 0
    41a0:	70 e0       	ldi	r23, 0x00	; 0
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	8e 01       	movw	r16, r28
    41a8:	0f 5f       	subi	r16, 0xFF	; 255
    41aa:	1f 4f       	sbci	r17, 0xFF	; 255
    41ac:	a2 e0       	ldi	r26, 0x02	; 2
    41ae:	ea 2e       	mov	r14, r26
    41b0:	f1 2c       	mov	r15, r1
    41b2:	09 95       	icall
    41b4:	88 23       	and	r24, r24
    41b6:	31 f1       	breq	.+76     	; 0x4204 <fat_get_next_cluster+0x20a>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    41b8:	89 81       	ldd	r24, Y+1	; 0x01
    41ba:	9a 81       	ldd	r25, Y+2	; 0x02
    41bc:	9c 01       	movw	r18, r24
    41be:	40 e0       	ldi	r20, 0x00	; 0
    41c0:	50 e0       	ldi	r21, 0x00	; 0
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
    41c2:	21 15       	cp	r18, r1
    41c4:	31 05       	cpc	r19, r1
    41c6:	41 05       	cpc	r20, r1
    41c8:	51 05       	cpc	r21, r1
    41ca:	01 f1       	breq	.+64     	; 0x420c <fat_get_next_cluster+0x212>
    41cc:	27 3f       	cpi	r18, 0xF7	; 247
    41ce:	8f ef       	ldi	r24, 0xFF	; 255
    41d0:	38 07       	cpc	r19, r24
    41d2:	80 e0       	ldi	r24, 0x00	; 0
    41d4:	48 07       	cpc	r20, r24
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	58 07       	cpc	r21, r24
    41da:	a1 f0       	breq	.+40     	; 0x4204 <fat_get_next_cluster+0x20a>
    41dc:	da 01       	movw	r26, r20
    41de:	c9 01       	movw	r24, r18
    41e0:	80 5f       	subi	r24, 0xF0	; 240
    41e2:	9f 4f       	sbci	r25, 0xFF	; 255
    41e4:	a0 40       	sbci	r26, 0x00	; 0
    41e6:	b0 40       	sbci	r27, 0x00	; 0
    41e8:	07 97       	sbiw	r24, 0x07	; 7
    41ea:	a1 05       	cpc	r26, r1
    41ec:	b1 05       	cpc	r27, r1
    41ee:	50 f0       	brcs	.+20     	; 0x4204 <fat_get_next_cluster+0x20a>
    41f0:	da 01       	movw	r26, r20
    41f2:	c9 01       	movw	r24, r18
    41f4:	88 5f       	subi	r24, 0xF8	; 248
    41f6:	9f 4f       	sbci	r25, 0xFF	; 255
    41f8:	a0 40       	sbci	r26, 0x00	; 0
    41fa:	b0 40       	sbci	r27, 0x00	; 0
    41fc:	08 97       	sbiw	r24, 0x08	; 8
    41fe:	a1 05       	cpc	r26, r1
    4200:	b1 05       	cpc	r27, r1
    4202:	20 f4       	brcc	.+8      	; 0x420c <fat_get_next_cluster+0x212>
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	40 e0       	ldi	r20, 0x00	; 0
    420a:	50 e0       	ldi	r21, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
    420c:	b9 01       	movw	r22, r18
    420e:	ca 01       	movw	r24, r20
    4210:	26 96       	adiw	r28, 0x06	; 6
    4212:	0f b6       	in	r0, 0x3f	; 63
    4214:	f8 94       	cli
    4216:	de bf       	out	0x3e, r29	; 62
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	cd bf       	out	0x3d, r28	; 61
    421c:	cf 91       	pop	r28
    421e:	df 91       	pop	r29
    4220:	1f 91       	pop	r17
    4222:	0f 91       	pop	r16
    4224:	ff 90       	pop	r15
    4226:	ef 90       	pop	r14
    4228:	df 90       	pop	r13
    422a:	cf 90       	pop	r12
    422c:	bf 90       	pop	r11
    422e:	af 90       	pop	r10
    4230:	9f 90       	pop	r9
    4232:	8f 90       	pop	r8
    4234:	08 95       	ret

00004236 <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    4236:	2f 92       	push	r2
    4238:	3f 92       	push	r3
    423a:	4f 92       	push	r4
    423c:	5f 92       	push	r5
    423e:	6f 92       	push	r6
    4240:	7f 92       	push	r7
    4242:	8f 92       	push	r8
    4244:	9f 92       	push	r9
    4246:	af 92       	push	r10
    4248:	bf 92       	push	r11
    424a:	cf 92       	push	r12
    424c:	df 92       	push	r13
    424e:	ef 92       	push	r14
    4250:	ff 92       	push	r15
    4252:	0f 93       	push	r16
    4254:	1f 93       	push	r17
    4256:	df 93       	push	r29
    4258:	cf 93       	push	r28
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62
    425e:	60 97       	sbiw	r28, 0x10	; 16
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	4c 01       	movw	r8, r24
    if(!fs || cluster_num < 2)
    426c:	00 97       	sbiw	r24, 0x00	; 0
    426e:	09 f4       	brne	.+2      	; 0x4272 <fat_free_clusters+0x3c>
    4270:	82 c1       	rjmp	.+772    	; 0x4576 <fat_free_clusters+0x340>
    4272:	42 30       	cpi	r20, 0x02	; 2
    4274:	51 05       	cpc	r21, r1
    4276:	61 05       	cpc	r22, r1
    4278:	71 05       	cpc	r23, r1
    427a:	08 f4       	brcc	.+2      	; 0x427e <fat_free_clusters+0x48>
    427c:	7c c1       	rjmp	.+760    	; 0x4576 <fat_free_clusters+0x340>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
    427e:	dc 01       	movw	r26, r24
    4280:	1a 96       	adiw	r26, 0x0a	; 10
    4282:	bc 91       	ld	r27, X
    4284:	b8 87       	std	Y+8, r27	; 0x08
    4286:	fc 01       	movw	r30, r24
    4288:	f3 85       	ldd	r31, Z+11	; 0x0b
    428a:	f9 87       	std	Y+9, r31	; 0x09
    428c:	dc 01       	movw	r26, r24
    428e:	1c 96       	adiw	r26, 0x0c	; 12
    4290:	bc 91       	ld	r27, X
    4292:	ba 87       	std	Y+10, r27	; 0x0a
    4294:	fc 01       	movw	r30, r24
    4296:	f5 85       	ldd	r31, Z+13	; 0x0d
    4298:	fb 87       	std	Y+11, r31	; 0x0b
    429a:	dc 01       	movw	r26, r24
    429c:	1e 96       	adiw	r26, 0x0e	; 14
    429e:	bc 91       	ld	r27, X
    42a0:	bc 87       	std	Y+12, r27	; 0x0c
    42a2:	fc 01       	movw	r30, r24
    42a4:	f7 85       	ldd	r31, Z+15	; 0x0f
    42a6:	fd 87       	std	Y+13, r31	; 0x0d
    42a8:	dc 01       	movw	r26, r24
    42aa:	50 96       	adiw	r26, 0x10	; 16
    42ac:	bc 91       	ld	r27, X
    42ae:	be 87       	std	Y+14, r27	; 0x0e
    42b0:	fc 01       	movw	r30, r24
    42b2:	f1 89       	ldd	r31, Z+17	; 0x11
    42b4:	ff 87       	std	Y+15, r31	; 0x0f
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    42b6:	dc 01       	movw	r26, r24
    42b8:	ed 91       	ld	r30, X+
    42ba:	fc 91       	ld	r31, X
    42bc:	80 85       	ldd	r24, Z+8	; 0x08
    42be:	8b 30       	cpi	r24, 0x0B	; 11
    42c0:	09 f0       	breq	.+2      	; 0x42c4 <fat_free_clusters+0x8e>
    42c2:	ba c0       	rjmp	.+372    	; 0x4438 <fat_free_clusters+0x202>
    {
        uint32_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    42c4:	12 e0       	ldi	r17, 0x02	; 2
    42c6:	44 0f       	add	r20, r20
    42c8:	55 1f       	adc	r21, r21
    42ca:	66 1f       	adc	r22, r22
    42cc:	77 1f       	adc	r23, r23
    42ce:	1a 95       	dec	r17
    42d0:	d1 f7       	brne	.-12     	; 0x42c6 <fat_free_clusters+0x90>
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	a0 e0       	ldi	r26, 0x00	; 0
    42d8:	b0 e0       	ldi	r27, 0x00	; 0
    42da:	e8 85       	ldd	r30, Y+8	; 0x08
    42dc:	e4 0f       	add	r30, r20
    42de:	e8 8b       	std	Y+16, r30	; 0x10
    42e0:	31 e0       	ldi	r19, 0x01	; 1
    42e2:	e4 17       	cp	r30, r20
    42e4:	08 f0       	brcs	.+2      	; 0x42e8 <fat_free_clusters+0xb2>
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	29 85       	ldd	r18, Y+9	; 0x09
    42ea:	25 0f       	add	r18, r21
    42ec:	e1 e0       	ldi	r30, 0x01	; 1
    42ee:	25 17       	cp	r18, r21
    42f0:	08 f0       	brcs	.+2      	; 0x42f4 <fat_free_clusters+0xbe>
    42f2:	e0 e0       	ldi	r30, 0x00	; 0
    42f4:	32 0f       	add	r19, r18
    42f6:	3f 83       	std	Y+7, r19	; 0x07
    42f8:	31 e0       	ldi	r19, 0x01	; 1
    42fa:	ff 81       	ldd	r31, Y+7	; 0x07
    42fc:	f2 17       	cp	r31, r18
    42fe:	08 f0       	brcs	.+2      	; 0x4302 <fat_free_clusters+0xcc>
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	e3 2b       	or	r30, r19
    4304:	2a 85       	ldd	r18, Y+10	; 0x0a
    4306:	26 0f       	add	r18, r22
    4308:	f1 e0       	ldi	r31, 0x01	; 1
    430a:	26 17       	cp	r18, r22
    430c:	08 f0       	brcs	.+2      	; 0x4310 <fat_free_clusters+0xda>
    430e:	f0 e0       	ldi	r31, 0x00	; 0
    4310:	2e 2e       	mov	r2, r30
    4312:	22 0e       	add	r2, r18
    4314:	31 e0       	ldi	r19, 0x01	; 1
    4316:	22 16       	cp	r2, r18
    4318:	08 f0       	brcs	.+2      	; 0x431c <fat_free_clusters+0xe6>
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	f3 2b       	or	r31, r19
    431e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4320:	27 0f       	add	r18, r23
    4322:	31 e0       	ldi	r19, 0x01	; 1
    4324:	27 17       	cp	r18, r23
    4326:	08 f0       	brcs	.+2      	; 0x432a <fat_free_clusters+0xf4>
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	3f 2e       	mov	r3, r31
    432c:	32 0e       	add	r3, r18
    432e:	e1 e0       	ldi	r30, 0x01	; 1
    4330:	32 16       	cp	r3, r18
    4332:	08 f0       	brcs	.+2      	; 0x4336 <fat_free_clusters+0x100>
    4334:	e0 e0       	ldi	r30, 0x00	; 0
    4336:	3e 2b       	or	r19, r30
    4338:	21 e0       	ldi	r18, 0x01	; 1
    433a:	ec 85       	ldd	r30, Y+12	; 0x0c
    433c:	e8 17       	cp	r30, r24
    433e:	08 f0       	brcs	.+2      	; 0x4342 <fat_free_clusters+0x10c>
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	4c 84       	ldd	r4, Y+12	; 0x0c
    4344:	43 0e       	add	r4, r19
    4346:	31 e0       	ldi	r19, 0x01	; 1
    4348:	fc 85       	ldd	r31, Y+12	; 0x0c
    434a:	4f 16       	cp	r4, r31
    434c:	08 f0       	brcs	.+2      	; 0x4350 <fat_free_clusters+0x11a>
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	23 2b       	or	r18, r19
    4352:	31 e0       	ldi	r19, 0x01	; 1
    4354:	ed 85       	ldd	r30, Y+13	; 0x0d
    4356:	e9 17       	cp	r30, r25
    4358:	08 f0       	brcs	.+2      	; 0x435c <fat_free_clusters+0x126>
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	5d 84       	ldd	r5, Y+13	; 0x0d
    435e:	52 0e       	add	r5, r18
    4360:	21 e0       	ldi	r18, 0x01	; 1
    4362:	fd 85       	ldd	r31, Y+13	; 0x0d
    4364:	5f 16       	cp	r5, r31
    4366:	08 f0       	brcs	.+2      	; 0x436a <fat_free_clusters+0x134>
    4368:	20 e0       	ldi	r18, 0x00	; 0
    436a:	32 2b       	or	r19, r18
    436c:	21 e0       	ldi	r18, 0x01	; 1
    436e:	ee 85       	ldd	r30, Y+14	; 0x0e
    4370:	ea 17       	cp	r30, r26
    4372:	08 f0       	brcs	.+2      	; 0x4376 <fat_free_clusters+0x140>
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	6e 84       	ldd	r6, Y+14	; 0x0e
    4378:	63 0e       	add	r6, r19
    437a:	91 e0       	ldi	r25, 0x01	; 1
    437c:	fe 85       	ldd	r31, Y+14	; 0x0e
    437e:	6f 16       	cp	r6, r31
    4380:	08 f0       	brcs	.+2      	; 0x4384 <fat_free_clusters+0x14e>
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	72 2e       	mov	r7, r18
    4386:	79 2a       	or	r7, r25
    4388:	2f 85       	ldd	r18, Y+15	; 0x0f
    438a:	72 0e       	add	r7, r18
    438c:	d4 01       	movw	r26, r8
    438e:	ed 91       	ld	r30, X+
    4390:	fc 91       	ld	r31, X
    4392:	01 90       	ld	r0, Z+
    4394:	f0 81       	ld	r31, Z
    4396:	e0 2d       	mov	r30, r0
    4398:	28 89       	ldd	r18, Y+16	; 0x10
    439a:	3f 81       	ldd	r19, Y+7	; 0x07
    439c:	a1 01       	movw	r20, r2
    439e:	b2 01       	movw	r22, r4
    43a0:	c3 01       	movw	r24, r6
    43a2:	8e 01       	movw	r16, r28
    43a4:	0d 5f       	subi	r16, 0xFD	; 253
    43a6:	1f 4f       	sbci	r17, 0xFF	; 255
    43a8:	b4 e0       	ldi	r27, 0x04	; 4
    43aa:	eb 2e       	mov	r14, r27
    43ac:	f1 2c       	mov	r15, r1
    43ae:	09 95       	icall
    43b0:	88 23       	and	r24, r24
    43b2:	09 f4       	brne	.+2      	; 0x43b6 <fat_free_clusters+0x180>
    43b4:	e0 c0       	rjmp	.+448    	; 0x4576 <fat_free_clusters+0x340>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint32_t cluster_num_next = ltoh32(fat_entry);
    43b6:	ab 80       	ldd	r10, Y+3	; 0x03
    43b8:	bc 80       	ldd	r11, Y+4	; 0x04
    43ba:	cd 80       	ldd	r12, Y+5	; 0x05
    43bc:	de 80       	ldd	r13, Y+6	; 0x06

            if(cluster_num_next == FAT32_CLUSTER_FREE)
    43be:	a1 14       	cp	r10, r1
    43c0:	b1 04       	cpc	r11, r1
    43c2:	c1 04       	cpc	r12, r1
    43c4:	d1 04       	cpc	r13, r1
    43c6:	09 f4       	brne	.+2      	; 0x43ca <fat_free_clusters+0x194>
    43c8:	d8 c0       	rjmp	.+432    	; 0x457a <fat_free_clusters+0x344>
                return 1;
            if(cluster_num_next == FAT32_CLUSTER_BAD ||
    43ca:	d6 01       	movw	r26, r12
    43cc:	c5 01       	movw	r24, r10
    43ce:	80 5f       	subi	r24, 0xF0	; 240
    43d0:	9f 4f       	sbci	r25, 0xFF	; 255
    43d2:	af 4f       	sbci	r26, 0xFF	; 255
    43d4:	bf 40       	sbci	r27, 0x0F	; 15
    43d6:	08 97       	sbiw	r24, 0x08	; 8
    43d8:	a1 05       	cpc	r26, r1
    43da:	b1 05       	cpc	r27, r1
    43dc:	08 f4       	brcc	.+2      	; 0x43e0 <fat_free_clusters+0x1aa>
    43de:	cb c0       	rjmp	.+406    	; 0x4576 <fat_free_clusters+0x340>
               (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
    43e0:	d6 01       	movw	r26, r12
    43e2:	c5 01       	movw	r24, r10
    43e4:	88 5f       	subi	r24, 0xF8	; 248
    43e6:	9f 4f       	sbci	r25, 0xFF	; 255
    43e8:	af 4f       	sbci	r26, 0xFF	; 255
    43ea:	bf 40       	sbci	r27, 0x0F	; 15
    43ec:	08 97       	sbiw	r24, 0x08	; 8
    43ee:	a1 05       	cpc	r26, r1
    43f0:	b1 05       	cpc	r27, r1
    43f2:	18 f4       	brcc	.+6      	; 0x43fa <fat_free_clusters+0x1c4>
    43f4:	aa 24       	eor	r10, r10
    43f6:	bb 24       	eor	r11, r11
    43f8:	65 01       	movw	r12, r10
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
    43fa:	1b 82       	std	Y+3, r1	; 0x03
    43fc:	1c 82       	std	Y+4, r1	; 0x04
    43fe:	1d 82       	std	Y+5, r1	; 0x05
    4400:	1e 82       	std	Y+6, r1	; 0x06
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    4402:	d4 01       	movw	r26, r8
    4404:	ed 91       	ld	r30, X+
    4406:	fc 91       	ld	r31, X
    4408:	04 80       	ldd	r0, Z+4	; 0x04
    440a:	f5 81       	ldd	r31, Z+5	; 0x05
    440c:	e0 2d       	mov	r30, r0
    440e:	28 89       	ldd	r18, Y+16	; 0x10
    4410:	3f 81       	ldd	r19, Y+7	; 0x07
    4412:	a1 01       	movw	r20, r2
    4414:	b2 01       	movw	r22, r4
    4416:	c3 01       	movw	r24, r6
    4418:	8e 01       	movw	r16, r28
    441a:	0d 5f       	subi	r16, 0xFD	; 253
    441c:	1f 4f       	sbci	r17, 0xFF	; 255
    441e:	a4 e0       	ldi	r26, 0x04	; 4
    4420:	ea 2e       	mov	r14, r26
    4422:	f1 2c       	mov	r15, r1
    4424:	09 95       	icall
    4426:	b6 01       	movw	r22, r12
    4428:	a5 01       	movw	r20, r10
    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
    442a:	a1 14       	cp	r10, r1
    442c:	b1 04       	cpc	r11, r1
    442e:	c1 04       	cpc	r12, r1
    4430:	d1 04       	cpc	r13, r1
    4432:	09 f0       	breq	.+2      	; 0x4436 <fat_free_clusters+0x200>
    4434:	47 cf       	rjmp	.-370    	; 0x42c4 <fat_free_clusters+0x8e>
    4436:	a1 c0       	rjmp	.+322    	; 0x457a <fat_free_clusters+0x344>
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    4438:	44 0f       	add	r20, r20
    443a:	55 1f       	adc	r21, r21
    443c:	66 1f       	adc	r22, r22
    443e:	77 1f       	adc	r23, r23
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	a0 e0       	ldi	r26, 0x00	; 0
    4446:	b0 e0       	ldi	r27, 0x00	; 0
    4448:	28 84       	ldd	r2, Y+8	; 0x08
    444a:	24 0e       	add	r2, r20
    444c:	31 e0       	ldi	r19, 0x01	; 1
    444e:	24 16       	cp	r2, r20
    4450:	08 f0       	brcs	.+2      	; 0x4454 <fat_free_clusters+0x21e>
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	29 85       	ldd	r18, Y+9	; 0x09
    4456:	25 0f       	add	r18, r21
    4458:	e1 e0       	ldi	r30, 0x01	; 1
    445a:	25 17       	cp	r18, r21
    445c:	08 f0       	brcs	.+2      	; 0x4460 <fat_free_clusters+0x22a>
    445e:	e0 e0       	ldi	r30, 0x00	; 0
    4460:	33 2e       	mov	r3, r19
    4462:	32 0e       	add	r3, r18
    4464:	31 e0       	ldi	r19, 0x01	; 1
    4466:	32 16       	cp	r3, r18
    4468:	08 f0       	brcs	.+2      	; 0x446c <fat_free_clusters+0x236>
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	e3 2b       	or	r30, r19
    446e:	2a 85       	ldd	r18, Y+10	; 0x0a
    4470:	26 0f       	add	r18, r22
    4472:	f1 e0       	ldi	r31, 0x01	; 1
    4474:	26 17       	cp	r18, r22
    4476:	08 f0       	brcs	.+2      	; 0x447a <fat_free_clusters+0x244>
    4478:	f0 e0       	ldi	r31, 0x00	; 0
    447a:	4e 2e       	mov	r4, r30
    447c:	42 0e       	add	r4, r18
    447e:	31 e0       	ldi	r19, 0x01	; 1
    4480:	42 16       	cp	r4, r18
    4482:	08 f0       	brcs	.+2      	; 0x4486 <fat_free_clusters+0x250>
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	f3 2b       	or	r31, r19
    4488:	2b 85       	ldd	r18, Y+11	; 0x0b
    448a:	27 0f       	add	r18, r23
    448c:	31 e0       	ldi	r19, 0x01	; 1
    448e:	27 17       	cp	r18, r23
    4490:	08 f0       	brcs	.+2      	; 0x4494 <fat_free_clusters+0x25e>
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	5f 2e       	mov	r5, r31
    4496:	52 0e       	add	r5, r18
    4498:	e1 e0       	ldi	r30, 0x01	; 1
    449a:	52 16       	cp	r5, r18
    449c:	08 f0       	brcs	.+2      	; 0x44a0 <fat_free_clusters+0x26a>
    449e:	e0 e0       	ldi	r30, 0x00	; 0
    44a0:	3e 2b       	or	r19, r30
    44a2:	21 e0       	ldi	r18, 0x01	; 1
    44a4:	ec 85       	ldd	r30, Y+12	; 0x0c
    44a6:	e8 17       	cp	r30, r24
    44a8:	08 f0       	brcs	.+2      	; 0x44ac <fat_free_clusters+0x276>
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	6c 84       	ldd	r6, Y+12	; 0x0c
    44ae:	63 0e       	add	r6, r19
    44b0:	31 e0       	ldi	r19, 0x01	; 1
    44b2:	fc 85       	ldd	r31, Y+12	; 0x0c
    44b4:	6f 16       	cp	r6, r31
    44b6:	08 f0       	brcs	.+2      	; 0x44ba <fat_free_clusters+0x284>
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	23 2b       	or	r18, r19
    44bc:	31 e0       	ldi	r19, 0x01	; 1
    44be:	ed 85       	ldd	r30, Y+13	; 0x0d
    44c0:	e9 17       	cp	r30, r25
    44c2:	08 f0       	brcs	.+2      	; 0x44c6 <fat_free_clusters+0x290>
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    44c8:	72 0e       	add	r7, r18
    44ca:	21 e0       	ldi	r18, 0x01	; 1
    44cc:	fd 85       	ldd	r31, Y+13	; 0x0d
    44ce:	7f 16       	cp	r7, r31
    44d0:	08 f0       	brcs	.+2      	; 0x44d4 <fat_free_clusters+0x29e>
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	32 2b       	or	r19, r18
    44d6:	21 e0       	ldi	r18, 0x01	; 1
    44d8:	ee 85       	ldd	r30, Y+14	; 0x0e
    44da:	ea 17       	cp	r30, r26
    44dc:	08 f0       	brcs	.+2      	; 0x44e0 <fat_free_clusters+0x2aa>
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	ae 84       	ldd	r10, Y+14	; 0x0e
    44e2:	a3 0e       	add	r10, r19
    44e4:	91 e0       	ldi	r25, 0x01	; 1
    44e6:	fe 85       	ldd	r31, Y+14	; 0x0e
    44e8:	af 16       	cp	r10, r31
    44ea:	08 f0       	brcs	.+2      	; 0x44ee <fat_free_clusters+0x2b8>
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	b2 2e       	mov	r11, r18
    44f0:	b9 2a       	or	r11, r25
    44f2:	2f 85       	ldd	r18, Y+15	; 0x0f
    44f4:	b2 0e       	add	r11, r18
    44f6:	d4 01       	movw	r26, r8
    44f8:	ed 91       	ld	r30, X+
    44fa:	fc 91       	ld	r31, X
    44fc:	01 90       	ld	r0, Z+
    44fe:	f0 81       	ld	r31, Z
    4500:	e0 2d       	mov	r30, r0
    4502:	91 01       	movw	r18, r2
    4504:	a2 01       	movw	r20, r4
    4506:	b3 01       	movw	r22, r6
    4508:	c5 01       	movw	r24, r10
    450a:	8e 01       	movw	r16, r28
    450c:	0f 5f       	subi	r16, 0xFF	; 255
    450e:	1f 4f       	sbci	r17, 0xFF	; 255
    4510:	b2 e0       	ldi	r27, 0x02	; 2
    4512:	eb 2e       	mov	r14, r27
    4514:	f1 2c       	mov	r15, r1
    4516:	09 95       	icall
    4518:	88 23       	and	r24, r24
    451a:	69 f1       	breq	.+90     	; 0x4576 <fat_free_clusters+0x340>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
    451c:	c9 80       	ldd	r12, Y+1	; 0x01
    451e:	da 80       	ldd	r13, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
    4520:	c1 14       	cp	r12, r1
    4522:	d1 04       	cpc	r13, r1
    4524:	51 f1       	breq	.+84     	; 0x457a <fat_free_clusters+0x344>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
    4526:	c6 01       	movw	r24, r12
    4528:	40 96       	adiw	r24, 0x10	; 16
    452a:	08 97       	sbiw	r24, 0x08	; 8
    452c:	20 f1       	brcs	.+72     	; 0x4576 <fat_free_clusters+0x340>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    452e:	b8 ef       	ldi	r27, 0xF8	; 248
    4530:	cb 16       	cp	r12, r27
    4532:	bf ef       	ldi	r27, 0xFF	; 255
    4534:	db 06       	cpc	r13, r27
    4536:	10 f0       	brcs	.+4      	; 0x453c <fat_free_clusters+0x306>
    4538:	cc 24       	eor	r12, r12
    453a:	dd 24       	eor	r13, r13
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    453c:	1a 82       	std	Y+2, r1	; 0x02
    453e:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    4540:	d4 01       	movw	r26, r8
    4542:	ed 91       	ld	r30, X+
    4544:	fc 91       	ld	r31, X
    4546:	04 80       	ldd	r0, Z+4	; 0x04
    4548:	f5 81       	ldd	r31, Z+5	; 0x05
    454a:	e0 2d       	mov	r30, r0
    454c:	91 01       	movw	r18, r2
    454e:	a2 01       	movw	r20, r4
    4550:	b3 01       	movw	r22, r6
    4552:	c5 01       	movw	r24, r10
    4554:	8e 01       	movw	r16, r28
    4556:	0f 5f       	subi	r16, 0xFF	; 255
    4558:	1f 4f       	sbci	r17, 0xFF	; 255
    455a:	a2 e0       	ldi	r26, 0x02	; 2
    455c:	ea 2e       	mov	r14, r26
    455e:	f1 2c       	mov	r15, r1
    4560:	09 95       	icall

            /* We continue in any case here, even if freeing the cluster failed.
             * The cluster is lost, but maybe we can still free up some later ones.
             */

            cluster_num = cluster_num_next;
    4562:	a6 01       	movw	r20, r12
    4564:	60 e0       	ldi	r22, 0x00	; 0
    4566:	70 e0       	ldi	r23, 0x00	; 0
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
    4568:	41 15       	cp	r20, r1
    456a:	51 05       	cpc	r21, r1
    456c:	61 05       	cpc	r22, r1
    456e:	71 05       	cpc	r23, r1
    4570:	09 f0       	breq	.+2      	; 0x4574 <fat_free_clusters+0x33e>
    4572:	62 cf       	rjmp	.-316    	; 0x4438 <fat_free_clusters+0x202>
    4574:	02 c0       	rjmp	.+4      	; 0x457a <fat_free_clusters+0x344>
    4576:	80 e0       	ldi	r24, 0x00	; 0
    4578:	01 c0       	rjmp	.+2      	; 0x457c <fat_free_clusters+0x346>
    457a:	81 e0       	ldi	r24, 0x01	; 1
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
    457c:	60 96       	adiw	r28, 0x10	; 16
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	f8 94       	cli
    4582:	de bf       	out	0x3e, r29	; 62
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	cd bf       	out	0x3d, r28	; 61
    4588:	cf 91       	pop	r28
    458a:	df 91       	pop	r29
    458c:	1f 91       	pop	r17
    458e:	0f 91       	pop	r16
    4590:	ff 90       	pop	r15
    4592:	ef 90       	pop	r14
    4594:	df 90       	pop	r13
    4596:	cf 90       	pop	r12
    4598:	bf 90       	pop	r11
    459a:	af 90       	pop	r10
    459c:	9f 90       	pop	r9
    459e:	8f 90       	pop	r8
    45a0:	7f 90       	pop	r7
    45a2:	6f 90       	pop	r6
    45a4:	5f 90       	pop	r5
    45a6:	4f 90       	pop	r4
    45a8:	3f 90       	pop	r3
    45aa:	2f 90       	pop	r2
    45ac:	08 95       	ret

000045ae <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    45ae:	2f 92       	push	r2
    45b0:	3f 92       	push	r3
    45b2:	4f 92       	push	r4
    45b4:	5f 92       	push	r5
    45b6:	6f 92       	push	r6
    45b8:	7f 92       	push	r7
    45ba:	8f 92       	push	r8
    45bc:	9f 92       	push	r9
    45be:	af 92       	push	r10
    45c0:	bf 92       	push	r11
    45c2:	cf 92       	push	r12
    45c4:	df 92       	push	r13
    45c6:	ef 92       	push	r14
    45c8:	ff 92       	push	r15
    45ca:	0f 93       	push	r16
    45cc:	1f 93       	push	r17
    45ce:	df 93       	push	r29
    45d0:	cf 93       	push	r28
    45d2:	cd b7       	in	r28, 0x3d	; 61
    45d4:	de b7       	in	r29, 0x3e	; 62
    45d6:	ad 97       	sbiw	r28, 0x2d	; 45
    45d8:	0f b6       	in	r0, 0x3f	; 63
    45da:	f8 94       	cli
    45dc:	de bf       	out	0x3e, r29	; 62
    45de:	0f be       	out	0x3f, r0	; 63
    45e0:	cd bf       	out	0x3d, r28	; 61
    45e2:	9d 8f       	std	Y+29, r25	; 0x1d
    45e4:	8c 8f       	std	Y+28, r24	; 0x1c
    45e6:	3a 01       	movw	r6, r20
    45e8:	4b 01       	movw	r8, r22
    45ea:	b9 01       	movw	r22, r18
    if(!fs)
    45ec:	00 97       	sbiw	r24, 0x00	; 0
    45ee:	09 f4       	brne	.+2      	; 0x45f2 <fat_append_clusters+0x44>
    45f0:	ed c2       	rjmp	.+1498   	; 0x4bcc <fat_append_clusters+0x61e>
        return 0;

    device_read_t device_read = fs->partition->device_read;
    45f2:	dc 01       	movw	r26, r24
    45f4:	ed 91       	ld	r30, X+
    45f6:	fc 91       	ld	r31, X
    45f8:	11 97       	sbiw	r26, 0x01	; 1
    45fa:	e0 80       	ld	r14, Z
    45fc:	f1 80       	ldd	r15, Z+1	; 0x01
    45fe:	fb 8e       	std	Y+27, r15	; 0x1b
    4600:	ea 8e       	std	Y+26, r14	; 0x1a
    device_write_t device_write = fs->partition->device_write;
    4602:	24 81       	ldd	r18, Z+4	; 0x04
    4604:	35 81       	ldd	r19, Z+5	; 0x05
    4606:	39 8f       	std	Y+25, r19	; 0x19
    4608:	28 8f       	std	Y+24, r18	; 0x18
    offset_t fat_offset = fs->header.fat_offset;
    460a:	1a 96       	adiw	r26, 0x0a	; 10
    460c:	3c 91       	ld	r19, X
    460e:	1a 97       	sbiw	r26, 0x0a	; 10
    4610:	3c a3       	std	Y+36, r19	; 0x24
    4612:	1b 96       	adiw	r26, 0x0b	; 11
    4614:	4c 91       	ld	r20, X
    4616:	1b 97       	sbiw	r26, 0x0b	; 11
    4618:	4d a3       	std	Y+37, r20	; 0x25
    461a:	1c 96       	adiw	r26, 0x0c	; 12
    461c:	5c 91       	ld	r21, X
    461e:	1c 97       	sbiw	r26, 0x0c	; 12
    4620:	5e a3       	std	Y+38, r21	; 0x26
    4622:	1d 96       	adiw	r26, 0x0d	; 13
    4624:	8c 91       	ld	r24, X
    4626:	1d 97       	sbiw	r26, 0x0d	; 13
    4628:	8f a3       	std	Y+39, r24	; 0x27
    462a:	1e 96       	adiw	r26, 0x0e	; 14
    462c:	9c 91       	ld	r25, X
    462e:	1e 97       	sbiw	r26, 0x0e	; 14
    4630:	98 a7       	std	Y+40, r25	; 0x28
    4632:	1f 96       	adiw	r26, 0x0f	; 15
    4634:	ac 91       	ld	r26, X
    4636:	a9 a7       	std	Y+41, r26	; 0x29
    4638:	ac 8d       	ldd	r26, Y+28	; 0x1c
    463a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    463c:	50 96       	adiw	r26, 0x10	; 16
    463e:	bc 91       	ld	r27, X
    4640:	ba a7       	std	Y+42, r27	; 0x2a
    4642:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4644:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4646:	51 96       	adiw	r26, 0x11	; 17
    4648:	bc 91       	ld	r27, X
    464a:	bb a7       	std	Y+43, r27	; 0x2b
    cluster_t cluster_next = 0;
    cluster_t cluster_max;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    464c:	1f 86       	std	Y+15, r1	; 0x0f
    464e:	80 85       	ldd	r24, Z+8	; 0x08
    4650:	8b 30       	cpi	r24, 0x0B	; 11
    4652:	11 f4       	brne	.+4      	; 0x4658 <fat_append_clusters+0xaa>
    4654:	e1 e0       	ldi	r30, 0x01	; 1
    4656:	ef 87       	std	Y+15, r30	; 0x0f
    4658:	ec 8d       	ldd	r30, Y+28	; 0x1c
    465a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    465c:	82 89       	ldd	r24, Z+18	; 0x12
    465e:	93 89       	ldd	r25, Z+19	; 0x13
    4660:	a4 89       	ldd	r26, Z+20	; 0x14
    4662:	b5 89       	ldd	r27, Z+21	; 0x15

    if(is_fat32)
    4664:	ff 85       	ldd	r31, Y+15	; 0x0f
    4666:	ff 23       	and	r31, r31
    4668:	51 f0       	breq	.+20     	; 0x467e <fat_append_clusters+0xd0>
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    466a:	9c 01       	movw	r18, r24
    466c:	ad 01       	movw	r20, r26
    466e:	82 e0       	ldi	r24, 0x02	; 2
    4670:	56 95       	lsr	r21
    4672:	47 95       	ror	r20
    4674:	37 95       	ror	r19
    4676:	27 95       	ror	r18
    4678:	8a 95       	dec	r24
    467a:	d1 f7       	brne	.-12     	; 0x4670 <fat_append_clusters+0xc2>
    467c:	06 c0       	rjmp	.+12     	; 0x468a <fat_append_clusters+0xdc>
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);
    467e:	9c 01       	movw	r18, r24
    4680:	ad 01       	movw	r20, r26
    4682:	56 95       	lsr	r21
    4684:	47 95       	ror	r20
    4686:	37 95       	ror	r19
    4688:	27 95       	ror	r18
    468a:	28 8b       	std	Y+16, r18	; 0x10
    468c:	39 8b       	std	Y+17, r19	; 0x11
    468e:	4a 8b       	std	Y+18, r20	; 0x12
    4690:	5b 8b       	std	Y+19, r21	; 0x13
    4692:	c8 01       	movw	r24, r16
    4694:	db 01       	movw	r26, r22
    4696:	8c 8b       	std	Y+20, r24	; 0x14
    4698:	9d 8b       	std	Y+21, r25	; 0x15
    469a:	ae 8b       	std	Y+22, r26	; 0x16
    469c:	bf 8b       	std	Y+23, r27	; 0x17
    469e:	aa 24       	eor	r10, r10
    46a0:	bb 24       	eor	r11, r11
    46a2:	65 01       	movw	r12, r10
    46a4:	82 e0       	ldi	r24, 0x02	; 2
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	a0 e0       	ldi	r26, 0x00	; 0
    46aa:	b0 e0       	ldi	r27, 0x00	; 0
    46ac:	8b 87       	std	Y+11, r24	; 0x0b
    46ae:	9c 87       	std	Y+12, r25	; 0x0c
    46b0:	ad 87       	std	Y+13, r26	; 0x0d
    46b2:	be 87       	std	Y+14, r27	; 0x0e
    46b4:	a4 e0       	ldi	r26, 0x04	; 4
    46b6:	ea 2e       	mov	r14, r26
    46b8:	f1 2c       	mov	r15, r1
    46ba:	01 2d       	mov	r16, r1
    46bc:	11 2d       	mov	r17, r1
    46be:	ef 82       	std	Y+7, r14	; 0x07
    46c0:	f8 86       	std	Y+8, r15	; 0x08
    46c2:	09 87       	std	Y+9, r16	; 0x09
    46c4:	1a 87       	std	Y+10, r17	; 0x0a
    46c6:	78 c1       	rjmp	.+752    	; 0x49b8 <fat_append_clusters+0x40a>

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    46c8:	ff 84       	ldd	r15, Y+15	; 0x0f
    46ca:	ff 20       	and	r15, r15
    46cc:	09 f4       	brne	.+2      	; 0x46d0 <fat_append_clusters+0x122>
    46ce:	7b c0       	rjmp	.+246    	; 0x47c6 <fat_append_clusters+0x218>
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    46d0:	8f 81       	ldd	r24, Y+7	; 0x07
    46d2:	98 85       	ldd	r25, Y+8	; 0x08
    46d4:	a9 85       	ldd	r26, Y+9	; 0x09
    46d6:	ba 85       	ldd	r27, Y+10	; 0x0a
    46d8:	88 0f       	add	r24, r24
    46da:	99 1f       	adc	r25, r25
    46dc:	aa 1f       	adc	r26, r26
    46de:	bb 1f       	adc	r27, r27
    46e0:	9c 01       	movw	r18, r24
    46e2:	ad 01       	movw	r20, r26
    46e4:	60 e0       	ldi	r22, 0x00	; 0
    46e6:	70 e0       	ldi	r23, 0x00	; 0
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	0c a1       	ldd	r16, Y+36	; 0x24
    46ee:	02 0f       	add	r16, r18
    46f0:	0c a7       	std	Y+44, r16	; 0x2c
    46f2:	f1 e0       	ldi	r31, 0x01	; 1
    46f4:	02 17       	cp	r16, r18
    46f6:	08 f0       	brcs	.+2      	; 0x46fa <fat_append_clusters+0x14c>
    46f8:	f0 e0       	ldi	r31, 0x00	; 0
    46fa:	ed a1       	ldd	r30, Y+37	; 0x25
    46fc:	e3 0f       	add	r30, r19
    46fe:	a1 e0       	ldi	r26, 0x01	; 1
    4700:	e3 17       	cp	r30, r19
    4702:	08 f0       	brcs	.+2      	; 0x4706 <fat_append_clusters+0x158>
    4704:	a0 e0       	ldi	r26, 0x00	; 0
    4706:	fe 0f       	add	r31, r30
    4708:	fe 8f       	std	Y+30, r31	; 0x1e
    470a:	f1 e0       	ldi	r31, 0x01	; 1
    470c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    470e:	1e 17       	cp	r17, r30
    4710:	08 f0       	brcs	.+2      	; 0x4714 <fat_append_clusters+0x166>
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	af 2b       	or	r26, r31
    4716:	ee a1       	ldd	r30, Y+38	; 0x26
    4718:	e4 0f       	add	r30, r20
    471a:	b1 e0       	ldi	r27, 0x01	; 1
    471c:	e4 17       	cp	r30, r20
    471e:	08 f0       	brcs	.+2      	; 0x4722 <fat_append_clusters+0x174>
    4720:	b0 e0       	ldi	r27, 0x00	; 0
    4722:	ae 0f       	add	r26, r30
    4724:	af 8f       	std	Y+31, r26	; 0x1f
    4726:	f1 e0       	ldi	r31, 0x01	; 1
    4728:	ae 17       	cp	r26, r30
    472a:	08 f0       	brcs	.+2      	; 0x472e <fat_append_clusters+0x180>
    472c:	f0 e0       	ldi	r31, 0x00	; 0
    472e:	bf 2b       	or	r27, r31
    4730:	ef a1       	ldd	r30, Y+39	; 0x27
    4732:	e5 0f       	add	r30, r21
    4734:	f1 e0       	ldi	r31, 0x01	; 1
    4736:	e5 17       	cp	r30, r21
    4738:	08 f0       	brcs	.+2      	; 0x473c <fat_append_clusters+0x18e>
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	be 0f       	add	r27, r30
    473e:	b8 a3       	std	Y+32, r27	; 0x20
    4740:	a1 e0       	ldi	r26, 0x01	; 1
    4742:	be 17       	cp	r27, r30
    4744:	08 f0       	brcs	.+2      	; 0x4748 <fat_append_clusters+0x19a>
    4746:	a0 e0       	ldi	r26, 0x00	; 0
    4748:	fa 2b       	or	r31, r26
    474a:	e1 e0       	ldi	r30, 0x01	; 1
    474c:	a8 a5       	ldd	r26, Y+40	; 0x28
    474e:	a6 17       	cp	r26, r22
    4750:	08 f0       	brcs	.+2      	; 0x4754 <fat_append_clusters+0x1a6>
    4752:	e0 e0       	ldi	r30, 0x00	; 0
    4754:	28 a4       	ldd	r2, Y+40	; 0x28
    4756:	2f 0e       	add	r2, r31
    4758:	f1 e0       	ldi	r31, 0x01	; 1
    475a:	b8 a5       	ldd	r27, Y+40	; 0x28
    475c:	2b 16       	cp	r2, r27
    475e:	08 f0       	brcs	.+2      	; 0x4762 <fat_append_clusters+0x1b4>
    4760:	f0 e0       	ldi	r31, 0x00	; 0
    4762:	ef 2b       	or	r30, r31
    4764:	f1 e0       	ldi	r31, 0x01	; 1
    4766:	e9 a4       	ldd	r14, Y+41	; 0x29
    4768:	e7 16       	cp	r14, r23
    476a:	08 f0       	brcs	.+2      	; 0x476e <fat_append_clusters+0x1c0>
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	39 a4       	ldd	r3, Y+41	; 0x29
    4770:	3e 0e       	add	r3, r30
    4772:	e1 e0       	ldi	r30, 0x01	; 1
    4774:	f9 a4       	ldd	r15, Y+41	; 0x29
    4776:	3f 14       	cp	r3, r15
    4778:	08 f0       	brcs	.+2      	; 0x477c <fat_append_clusters+0x1ce>
    477a:	e0 e0       	ldi	r30, 0x00	; 0
    477c:	fe 2b       	or	r31, r30
    477e:	e1 e0       	ldi	r30, 0x01	; 1
    4780:	0a a5       	ldd	r16, Y+42	; 0x2a
    4782:	08 17       	cp	r16, r24
    4784:	08 f0       	brcs	.+2      	; 0x4788 <fat_append_clusters+0x1da>
    4786:	e0 e0       	ldi	r30, 0x00	; 0
    4788:	4a a4       	ldd	r4, Y+42	; 0x2a
    478a:	4f 0e       	add	r4, r31
    478c:	91 e0       	ldi	r25, 0x01	; 1
    478e:	1a a5       	ldd	r17, Y+42	; 0x2a
    4790:	41 16       	cp	r4, r17
    4792:	08 f0       	brcs	.+2      	; 0x4796 <fat_append_clusters+0x1e8>
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	5e 2e       	mov	r5, r30
    4798:	59 2a       	or	r5, r25
    479a:	2b a5       	ldd	r18, Y+43	; 0x2b
    479c:	52 0e       	add	r5, r18
    479e:	2c a5       	ldd	r18, Y+44	; 0x2c
    47a0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    47a2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    47a4:	58 a1       	ldd	r21, Y+32	; 0x20
    47a6:	b1 01       	movw	r22, r2
    47a8:	c2 01       	movw	r24, r4
    47aa:	8e 01       	movw	r16, r28
    47ac:	0d 5f       	subi	r16, 0xFD	; 253
    47ae:	1f 4f       	sbci	r17, 0xFF	; 255
    47b0:	e4 e0       	ldi	r30, 0x04	; 4
    47b2:	ee 2e       	mov	r14, r30
    47b4:	f1 2c       	mov	r15, r1
    47b6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    47b8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    47ba:	fd 01       	movw	r30, r26
    47bc:	09 95       	icall
    47be:	88 23       	and	r24, r24
    47c0:	09 f0       	breq	.+2      	; 0x47c4 <fat_append_clusters+0x216>
    47c2:	7e c0       	rjmp	.+252    	; 0x48c0 <fat_append_clusters+0x312>
    47c4:	03 c2       	rjmp	.+1030   	; 0x4bcc <fat_append_clusters+0x61e>
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    47c6:	ef 80       	ldd	r14, Y+7	; 0x07
    47c8:	f8 84       	ldd	r15, Y+8	; 0x08
    47ca:	09 85       	ldd	r16, Y+9	; 0x09
    47cc:	1a 85       	ldd	r17, Y+10	; 0x0a
    47ce:	a8 01       	movw	r20, r16
    47d0:	97 01       	movw	r18, r14
    47d2:	60 e0       	ldi	r22, 0x00	; 0
    47d4:	70 e0       	ldi	r23, 0x00	; 0
    47d6:	80 e0       	ldi	r24, 0x00	; 0
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	fc a0       	ldd	r15, Y+36	; 0x24
    47dc:	f2 0e       	add	r15, r18
    47de:	fd a6       	std	Y+45, r15	; 0x2d
    47e0:	f1 e0       	ldi	r31, 0x01	; 1
    47e2:	f2 16       	cp	r15, r18
    47e4:	08 f0       	brcs	.+2      	; 0x47e8 <fat_append_clusters+0x23a>
    47e6:	f0 e0       	ldi	r31, 0x00	; 0
    47e8:	ed a1       	ldd	r30, Y+37	; 0x25
    47ea:	e3 0f       	add	r30, r19
    47ec:	a1 e0       	ldi	r26, 0x01	; 1
    47ee:	e3 17       	cp	r30, r19
    47f0:	08 f0       	brcs	.+2      	; 0x47f4 <fat_append_clusters+0x246>
    47f2:	a0 e0       	ldi	r26, 0x00	; 0
    47f4:	fe 0f       	add	r31, r30
    47f6:	f9 a3       	std	Y+33, r31	; 0x21
    47f8:	f1 e0       	ldi	r31, 0x01	; 1
    47fa:	09 a1       	ldd	r16, Y+33	; 0x21
    47fc:	0e 17       	cp	r16, r30
    47fe:	08 f0       	brcs	.+2      	; 0x4802 <fat_append_clusters+0x254>
    4800:	f0 e0       	ldi	r31, 0x00	; 0
    4802:	af 2b       	or	r26, r31
    4804:	ee a1       	ldd	r30, Y+38	; 0x26
    4806:	e4 0f       	add	r30, r20
    4808:	b1 e0       	ldi	r27, 0x01	; 1
    480a:	e4 17       	cp	r30, r20
    480c:	08 f0       	brcs	.+2      	; 0x4810 <fat_append_clusters+0x262>
    480e:	b0 e0       	ldi	r27, 0x00	; 0
    4810:	ae 0f       	add	r26, r30
    4812:	aa a3       	std	Y+34, r26	; 0x22
    4814:	f1 e0       	ldi	r31, 0x01	; 1
    4816:	ae 17       	cp	r26, r30
    4818:	08 f0       	brcs	.+2      	; 0x481c <fat_append_clusters+0x26e>
    481a:	f0 e0       	ldi	r31, 0x00	; 0
    481c:	bf 2b       	or	r27, r31
    481e:	ef a1       	ldd	r30, Y+39	; 0x27
    4820:	e5 0f       	add	r30, r21
    4822:	a1 e0       	ldi	r26, 0x01	; 1
    4824:	e5 17       	cp	r30, r21
    4826:	08 f0       	brcs	.+2      	; 0x482a <fat_append_clusters+0x27c>
    4828:	a0 e0       	ldi	r26, 0x00	; 0
    482a:	be 0f       	add	r27, r30
    482c:	bb a3       	std	Y+35, r27	; 0x23
    482e:	f1 e0       	ldi	r31, 0x01	; 1
    4830:	be 17       	cp	r27, r30
    4832:	08 f0       	brcs	.+2      	; 0x4836 <fat_append_clusters+0x288>
    4834:	f0 e0       	ldi	r31, 0x00	; 0
    4836:	af 2b       	or	r26, r31
    4838:	e8 a5       	ldd	r30, Y+40	; 0x28
    483a:	e6 0f       	add	r30, r22
    483c:	b1 e0       	ldi	r27, 0x01	; 1
    483e:	e6 17       	cp	r30, r22
    4840:	08 f0       	brcs	.+2      	; 0x4844 <fat_append_clusters+0x296>
    4842:	b0 e0       	ldi	r27, 0x00	; 0
    4844:	2a 2e       	mov	r2, r26
    4846:	2e 0e       	add	r2, r30
    4848:	f1 e0       	ldi	r31, 0x01	; 1
    484a:	2e 16       	cp	r2, r30
    484c:	08 f0       	brcs	.+2      	; 0x4850 <fat_append_clusters+0x2a2>
    484e:	f0 e0       	ldi	r31, 0x00	; 0
    4850:	bf 2b       	or	r27, r31
    4852:	e9 a5       	ldd	r30, Y+41	; 0x29
    4854:	e7 0f       	add	r30, r23
    4856:	a1 e0       	ldi	r26, 0x01	; 1
    4858:	e7 17       	cp	r30, r23
    485a:	08 f0       	brcs	.+2      	; 0x485e <fat_append_clusters+0x2b0>
    485c:	a0 e0       	ldi	r26, 0x00	; 0
    485e:	3b 2e       	mov	r3, r27
    4860:	3e 0e       	add	r3, r30
    4862:	f1 e0       	ldi	r31, 0x01	; 1
    4864:	3e 16       	cp	r3, r30
    4866:	08 f0       	brcs	.+2      	; 0x486a <fat_append_clusters+0x2bc>
    4868:	f0 e0       	ldi	r31, 0x00	; 0
    486a:	af 2b       	or	r26, r31
    486c:	ea a5       	ldd	r30, Y+42	; 0x2a
    486e:	e8 0f       	add	r30, r24
    4870:	b1 e0       	ldi	r27, 0x01	; 1
    4872:	e8 17       	cp	r30, r24
    4874:	08 f0       	brcs	.+2      	; 0x4878 <fat_append_clusters+0x2ca>
    4876:	b0 e0       	ldi	r27, 0x00	; 0
    4878:	4a 2e       	mov	r4, r26
    487a:	4e 0e       	add	r4, r30
    487c:	f1 e0       	ldi	r31, 0x01	; 1
    487e:	4e 16       	cp	r4, r30
    4880:	08 f0       	brcs	.+2      	; 0x4884 <fat_append_clusters+0x2d6>
    4882:	f0 e0       	ldi	r31, 0x00	; 0
    4884:	5b 2e       	mov	r5, r27
    4886:	5f 2a       	or	r5, r31
    4888:	8b a5       	ldd	r24, Y+43	; 0x2b
    488a:	89 0f       	add	r24, r25
    488c:	58 0e       	add	r5, r24
    488e:	2d a5       	ldd	r18, Y+45	; 0x2d
    4890:	39 a1       	ldd	r19, Y+33	; 0x21
    4892:	4a a1       	ldd	r20, Y+34	; 0x22
    4894:	5b a1       	ldd	r21, Y+35	; 0x23
    4896:	b1 01       	movw	r22, r2
    4898:	c2 01       	movw	r24, r4
    489a:	8e 01       	movw	r16, r28
    489c:	0f 5f       	subi	r16, 0xFF	; 255
    489e:	1f 4f       	sbci	r17, 0xFF	; 255
    48a0:	b2 e0       	ldi	r27, 0x02	; 2
    48a2:	eb 2e       	mov	r14, r27
    48a4:	f1 2c       	mov	r15, r1
    48a6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    48a8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    48aa:	fd 01       	movw	r30, r26
    48ac:	09 95       	icall
    48ae:	88 23       	and	r24, r24
    48b0:	09 f4       	brne	.+2      	; 0x48b4 <fat_append_clusters+0x306>
    48b2:	8c c1       	rjmp	.+792    	; 0x4bcc <fat_append_clusters+0x61e>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
    48b4:	89 81       	ldd	r24, Y+1	; 0x01
    48b6:	9a 81       	ldd	r25, Y+2	; 0x02
    48b8:	89 2b       	or	r24, r25
    48ba:	09 f0       	breq	.+2      	; 0x48be <fat_append_clusters+0x310>
    48bc:	66 c0       	rjmp	.+204    	; 0x498a <fat_append_clusters+0x3dc>
    48be:	2c c0       	rjmp	.+88     	; 0x4918 <fat_append_clusters+0x36a>

#if FAT_FAT32_SUPPORT
        if(is_fat32)
        {
            /* check if this is a free cluster */
            if(fat_entry32 != HTOL32(FAT32_CLUSTER_FREE))
    48c0:	8b 81       	ldd	r24, Y+3	; 0x03
    48c2:	9c 81       	ldd	r25, Y+4	; 0x04
    48c4:	ad 81       	ldd	r26, Y+5	; 0x05
    48c6:	be 81       	ldd	r27, Y+6	; 0x06
    48c8:	00 97       	sbiw	r24, 0x00	; 0
    48ca:	a1 05       	cpc	r26, r1
    48cc:	b1 05       	cpc	r27, r1
    48ce:	09 f0       	breq	.+2      	; 0x48d2 <fat_append_clusters+0x324>
    48d0:	5c c0       	rjmp	.+184    	; 0x498a <fat_append_clusters+0x3dc>
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    48d2:	a1 14       	cp	r10, r1
    48d4:	b1 04       	cpc	r11, r1
    48d6:	c1 04       	cpc	r12, r1
    48d8:	d1 04       	cpc	r13, r1
    48da:	69 f4       	brne	.+26     	; 0x48f6 <fat_append_clusters+0x348>
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
    48dc:	af ef       	ldi	r26, 0xFF	; 255
    48de:	ea 2e       	mov	r14, r26
    48e0:	af ef       	ldi	r26, 0xFF	; 255
    48e2:	fa 2e       	mov	r15, r26
    48e4:	af ef       	ldi	r26, 0xFF	; 255
    48e6:	0a 2f       	mov	r16, r26
    48e8:	af e0       	ldi	r26, 0x0F	; 15
    48ea:	1a 2f       	mov	r17, r26
    48ec:	eb 82       	std	Y+3, r14	; 0x03
    48ee:	fc 82       	std	Y+4, r15	; 0x04
    48f0:	0d 83       	std	Y+5, r16	; 0x05
    48f2:	1e 83       	std	Y+6, r17	; 0x06
    48f4:	04 c0       	rjmp	.+8      	; 0x48fe <fat_append_clusters+0x350>
            else
                fat_entry32 = htol32(cluster_next);
    48f6:	ab 82       	std	Y+3, r10	; 0x03
    48f8:	bc 82       	std	Y+4, r11	; 0x04
    48fa:	cd 82       	std	Y+5, r12	; 0x05
    48fc:	de 82       	std	Y+6, r13	; 0x06

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    48fe:	2c a5       	ldd	r18, Y+44	; 0x2c
    4900:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4902:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4904:	58 a1       	ldd	r21, Y+32	; 0x20
    4906:	b1 01       	movw	r22, r2
    4908:	c2 01       	movw	r24, r4
    490a:	8e 01       	movw	r16, r28
    490c:	0d 5f       	subi	r16, 0xFD	; 253
    490e:	1f 4f       	sbci	r17, 0xFF	; 255
    4910:	f4 e0       	ldi	r31, 0x04	; 4
    4912:	ef 2e       	mov	r14, r31
    4914:	f1 2c       	mov	r15, r1
    4916:	18 c0       	rjmp	.+48     	; 0x4948 <fat_append_clusters+0x39a>
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    4918:	a1 14       	cp	r10, r1
    491a:	b1 04       	cpc	r11, r1
    491c:	c1 04       	cpc	r12, r1
    491e:	d1 04       	cpc	r13, r1
    4920:	29 f4       	brne	.+10     	; 0x492c <fat_append_clusters+0x37e>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
    4922:	ef ef       	ldi	r30, 0xFF	; 255
    4924:	ff ef       	ldi	r31, 0xFF	; 255
    4926:	fa 83       	std	Y+2, r31	; 0x02
    4928:	e9 83       	std	Y+1, r30	; 0x01
    492a:	02 c0       	rjmp	.+4      	; 0x4930 <fat_append_clusters+0x382>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
    492c:	ba 82       	std	Y+2, r11	; 0x02
    492e:	a9 82       	std	Y+1, r10	; 0x01

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    4930:	2d a5       	ldd	r18, Y+45	; 0x2d
    4932:	39 a1       	ldd	r19, Y+33	; 0x21
    4934:	4a a1       	ldd	r20, Y+34	; 0x22
    4936:	5b a1       	ldd	r21, Y+35	; 0x23
    4938:	b1 01       	movw	r22, r2
    493a:	c2 01       	movw	r24, r4
    493c:	8e 01       	movw	r16, r28
    493e:	0f 5f       	subi	r16, 0xFF	; 255
    4940:	1f 4f       	sbci	r17, 0xFF	; 255
    4942:	e2 e0       	ldi	r30, 0x02	; 2
    4944:	ee 2e       	mov	r14, r30
    4946:	f1 2c       	mov	r15, r1
    4948:	a8 8d       	ldd	r26, Y+24	; 0x18
    494a:	b9 8d       	ldd	r27, Y+25	; 0x19
    494c:	fd 01       	movw	r30, r26
    494e:	09 95       	icall
    4950:	88 23       	and	r24, r24
    4952:	09 f4       	brne	.+2      	; 0x4956 <fat_append_clusters+0x3a8>
    4954:	3f c0       	rjmp	.+126    	; 0x49d4 <fat_append_clusters+0x426>
                break;
        }

        cluster_next = cluster_new;
        if(--count_left == 0)
    4956:	0c 89       	ldd	r16, Y+20	; 0x14
    4958:	1d 89       	ldd	r17, Y+21	; 0x15
    495a:	2e 89       	ldd	r18, Y+22	; 0x16
    495c:	3f 89       	ldd	r19, Y+23	; 0x17
    495e:	01 50       	subi	r16, 0x01	; 1
    4960:	10 40       	sbci	r17, 0x00	; 0
    4962:	20 40       	sbci	r18, 0x00	; 0
    4964:	30 40       	sbci	r19, 0x00	; 0
    4966:	0c 8b       	std	Y+20, r16	; 0x14
    4968:	1d 8b       	std	Y+21, r17	; 0x15
    496a:	2e 8b       	std	Y+22, r18	; 0x16
    496c:	3f 8b       	std	Y+23, r19	; 0x17
    496e:	01 15       	cp	r16, r1
    4970:	11 05       	cpc	r17, r1
    4972:	21 05       	cpc	r18, r1
    4974:	31 05       	cpc	r19, r1
    4976:	29 f4       	brne	.+10     	; 0x4982 <fat_append_clusters+0x3d4>
    4978:	ab 84       	ldd	r10, Y+11	; 0x0b
    497a:	bc 84       	ldd	r11, Y+12	; 0x0c
    497c:	cd 84       	ldd	r12, Y+13	; 0x0d
    497e:	de 84       	ldd	r13, Y+14	; 0x0e
    4980:	32 c0       	rjmp	.+100    	; 0x49e6 <fat_append_clusters+0x438>
    4982:	ab 84       	ldd	r10, Y+11	; 0x0b
    4984:	bc 84       	ldd	r11, Y+12	; 0x0c
    4986:	cd 84       	ldd	r12, Y+13	; 0x0d
    4988:	de 84       	ldd	r13, Y+14	; 0x0e
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    498a:	2b 85       	ldd	r18, Y+11	; 0x0b
    498c:	3c 85       	ldd	r19, Y+12	; 0x0c
    498e:	4d 85       	ldd	r20, Y+13	; 0x0d
    4990:	5e 85       	ldd	r21, Y+14	; 0x0e
    4992:	2f 5f       	subi	r18, 0xFF	; 255
    4994:	3f 4f       	sbci	r19, 0xFF	; 255
    4996:	4f 4f       	sbci	r20, 0xFF	; 255
    4998:	5f 4f       	sbci	r21, 0xFF	; 255
    499a:	2b 87       	std	Y+11, r18	; 0x0b
    499c:	3c 87       	std	Y+12, r19	; 0x0c
    499e:	4d 87       	std	Y+13, r20	; 0x0d
    49a0:	5e 87       	std	Y+14, r21	; 0x0e
    49a2:	8f 81       	ldd	r24, Y+7	; 0x07
    49a4:	98 85       	ldd	r25, Y+8	; 0x08
    49a6:	a9 85       	ldd	r26, Y+9	; 0x09
    49a8:	ba 85       	ldd	r27, Y+10	; 0x0a
    49aa:	02 96       	adiw	r24, 0x02	; 2
    49ac:	a1 1d       	adc	r26, r1
    49ae:	b1 1d       	adc	r27, r1
    49b0:	8f 83       	std	Y+7, r24	; 0x07
    49b2:	98 87       	std	Y+8, r25	; 0x08
    49b4:	a9 87       	std	Y+9, r26	; 0x09
    49b6:	ba 87       	std	Y+10, r27	; 0x0a
    49b8:	eb 84       	ldd	r14, Y+11	; 0x0b
    49ba:	fc 84       	ldd	r15, Y+12	; 0x0c
    49bc:	0d 85       	ldd	r16, Y+13	; 0x0d
    49be:	1e 85       	ldd	r17, Y+14	; 0x0e
    49c0:	28 89       	ldd	r18, Y+16	; 0x10
    49c2:	39 89       	ldd	r19, Y+17	; 0x11
    49c4:	4a 89       	ldd	r20, Y+18	; 0x12
    49c6:	5b 89       	ldd	r21, Y+19	; 0x13
    49c8:	e2 16       	cp	r14, r18
    49ca:	f3 06       	cpc	r15, r19
    49cc:	04 07       	cpc	r16, r20
    49ce:	15 07       	cpc	r17, r21
    49d0:	08 f4       	brcc	.+2      	; 0x49d4 <fat_append_clusters+0x426>
    49d2:	7a ce       	rjmp	.-780    	; 0x46c8 <fat_append_clusters+0x11a>
            break;
    }

    do
    {
        if(count_left > 0)
    49d4:	8c 89       	ldd	r24, Y+20	; 0x14
    49d6:	9d 89       	ldd	r25, Y+21	; 0x15
    49d8:	ae 89       	ldd	r26, Y+22	; 0x16
    49da:	bf 89       	ldd	r27, Y+23	; 0x17
    49dc:	00 97       	sbiw	r24, 0x00	; 0
    49de:	a1 05       	cpc	r26, r1
    49e0:	b1 05       	cpc	r27, r1
    49e2:	09 f0       	breq	.+2      	; 0x49e6 <fat_append_clusters+0x438>
    49e4:	ed c0       	rjmp	.+474    	; 0x4bc0 <fat_append_clusters+0x612>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
    49e6:	92 e0       	ldi	r25, 0x02	; 2
    49e8:	69 16       	cp	r6, r25
    49ea:	71 04       	cpc	r7, r1
    49ec:	81 04       	cpc	r8, r1
    49ee:	91 04       	cpc	r9, r1
    49f0:	08 f4       	brcc	.+2      	; 0x49f4 <fat_append_clusters+0x446>
    49f2:	ef c0       	rjmp	.+478    	; 0x4bd2 <fat_append_clusters+0x624>
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
    49f4:	af 85       	ldd	r26, Y+15	; 0x0f
    49f6:	aa 23       	and	r26, r26
    49f8:	09 f4       	brne	.+2      	; 0x49fc <fat_append_clusters+0x44e>
    49fa:	71 c0       	rjmp	.+226    	; 0x4ade <fat_append_clusters+0x530>
            {
                fat_entry32 = htol32(cluster_next);
    49fc:	ab 82       	std	Y+3, r10	; 0x03
    49fe:	bc 82       	std	Y+4, r11	; 0x04
    4a00:	cd 82       	std	Y+5, r12	; 0x05
    4a02:	de 82       	std	Y+6, r13	; 0x06

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    4a04:	b2 e0       	ldi	r27, 0x02	; 2
    4a06:	66 0c       	add	r6, r6
    4a08:	77 1c       	adc	r7, r7
    4a0a:	88 1c       	adc	r8, r8
    4a0c:	99 1c       	adc	r9, r9
    4a0e:	ba 95       	dec	r27
    4a10:	d1 f7       	brne	.-12     	; 0x4a06 <fat_append_clusters+0x458>
    4a12:	b4 01       	movw	r22, r8
    4a14:	a3 01       	movw	r20, r6
    4a16:	80 e0       	ldi	r24, 0x00	; 0
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	a0 e0       	ldi	r26, 0x00	; 0
    4a1c:	b0 e0       	ldi	r27, 0x00	; 0
    4a1e:	2c a1       	ldd	r18, Y+36	; 0x24
    4a20:	26 0d       	add	r18, r6
    4a22:	31 e0       	ldi	r19, 0x01	; 1
    4a24:	26 15       	cp	r18, r6
    4a26:	08 f0       	brcs	.+2      	; 0x4a2a <fat_append_clusters+0x47c>
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	ed a1       	ldd	r30, Y+37	; 0x25
    4a2c:	e5 0f       	add	r30, r21
    4a2e:	11 e0       	ldi	r17, 0x01	; 1
    4a30:	e5 17       	cp	r30, r21
    4a32:	08 f0       	brcs	.+2      	; 0x4a36 <fat_append_clusters+0x488>
    4a34:	10 e0       	ldi	r17, 0x00	; 0
    4a36:	3e 0f       	add	r19, r30
    4a38:	f1 e0       	ldi	r31, 0x01	; 1
    4a3a:	3e 17       	cp	r19, r30
    4a3c:	08 f0       	brcs	.+2      	; 0x4a40 <fat_append_clusters+0x492>
    4a3e:	f0 e0       	ldi	r31, 0x00	; 0
    4a40:	1f 2b       	or	r17, r31
    4a42:	ee a1       	ldd	r30, Y+38	; 0x26
    4a44:	e6 0f       	add	r30, r22
    4a46:	01 e0       	ldi	r16, 0x01	; 1
    4a48:	e6 17       	cp	r30, r22
    4a4a:	08 f0       	brcs	.+2      	; 0x4a4e <fat_append_clusters+0x4a0>
    4a4c:	00 e0       	ldi	r16, 0x00	; 0
    4a4e:	91 2e       	mov	r9, r17
    4a50:	9e 0e       	add	r9, r30
    4a52:	f1 e0       	ldi	r31, 0x01	; 1
    4a54:	9e 16       	cp	r9, r30
    4a56:	08 f0       	brcs	.+2      	; 0x4a5a <fat_append_clusters+0x4ac>
    4a58:	f0 e0       	ldi	r31, 0x00	; 0
    4a5a:	0f 2b       	or	r16, r31
    4a5c:	ef a1       	ldd	r30, Y+39	; 0x27
    4a5e:	e7 0f       	add	r30, r23
    4a60:	f1 e0       	ldi	r31, 0x01	; 1
    4a62:	e7 17       	cp	r30, r23
    4a64:	08 f0       	brcs	.+2      	; 0x4a68 <fat_append_clusters+0x4ba>
    4a66:	f0 e0       	ldi	r31, 0x00	; 0
    4a68:	e0 2e       	mov	r14, r16
    4a6a:	ee 0e       	add	r14, r30
    4a6c:	11 e0       	ldi	r17, 0x01	; 1
    4a6e:	ee 16       	cp	r14, r30
    4a70:	08 f0       	brcs	.+2      	; 0x4a74 <fat_append_clusters+0x4c6>
    4a72:	10 e0       	ldi	r17, 0x00	; 0
    4a74:	f1 2b       	or	r31, r17
    4a76:	e1 e0       	ldi	r30, 0x01	; 1
    4a78:	f8 a4       	ldd	r15, Y+40	; 0x28
    4a7a:	f8 16       	cp	r15, r24
    4a7c:	08 f0       	brcs	.+2      	; 0x4a80 <fat_append_clusters+0x4d2>
    4a7e:	e0 e0       	ldi	r30, 0x00	; 0
    4a80:	f8 a4       	ldd	r15, Y+40	; 0x28
    4a82:	ff 0e       	add	r15, r31
    4a84:	f1 e0       	ldi	r31, 0x01	; 1
    4a86:	08 a5       	ldd	r16, Y+40	; 0x28
    4a88:	f0 16       	cp	r15, r16
    4a8a:	08 f0       	brcs	.+2      	; 0x4a8e <fat_append_clusters+0x4e0>
    4a8c:	f0 e0       	ldi	r31, 0x00	; 0
    4a8e:	ef 2b       	or	r30, r31
    4a90:	f1 e0       	ldi	r31, 0x01	; 1
    4a92:	19 a5       	ldd	r17, Y+41	; 0x29
    4a94:	19 17       	cp	r17, r25
    4a96:	08 f0       	brcs	.+2      	; 0x4a9a <fat_append_clusters+0x4ec>
    4a98:	f0 e0       	ldi	r31, 0x00	; 0
    4a9a:	09 a5       	ldd	r16, Y+41	; 0x29
    4a9c:	0e 0f       	add	r16, r30
    4a9e:	e1 e0       	ldi	r30, 0x01	; 1
    4aa0:	19 a5       	ldd	r17, Y+41	; 0x29
    4aa2:	01 17       	cp	r16, r17
    4aa4:	08 f0       	brcs	.+2      	; 0x4aa8 <fat_append_clusters+0x4fa>
    4aa6:	e0 e0       	ldi	r30, 0x00	; 0
    4aa8:	fe 2b       	or	r31, r30
    4aaa:	11 e0       	ldi	r17, 0x01	; 1
    4aac:	ea a5       	ldd	r30, Y+42	; 0x2a
    4aae:	ea 17       	cp	r30, r26
    4ab0:	08 f0       	brcs	.+2      	; 0x4ab4 <fat_append_clusters+0x506>
    4ab2:	10 e0       	ldi	r17, 0x00	; 0
    4ab4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ab6:	8f 0f       	add	r24, r31
    4ab8:	e1 e0       	ldi	r30, 0x01	; 1
    4aba:	fa a5       	ldd	r31, Y+42	; 0x2a
    4abc:	8f 17       	cp	r24, r31
    4abe:	08 f0       	brcs	.+2      	; 0x4ac2 <fat_append_clusters+0x514>
    4ac0:	e0 e0       	ldi	r30, 0x00	; 0
    4ac2:	1e 2b       	or	r17, r30
    4ac4:	49 2d       	mov	r20, r9
    4ac6:	5e 2d       	mov	r21, r14
    4ac8:	6f 2d       	mov	r22, r15
    4aca:	70 2f       	mov	r23, r16
    4acc:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ace:	91 0f       	add	r25, r17
    4ad0:	8e 01       	movw	r16, r28
    4ad2:	0d 5f       	subi	r16, 0xFD	; 253
    4ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad6:	a4 e0       	ldi	r26, 0x04	; 4
    4ad8:	ea 2e       	mov	r14, r26
    4ada:	f1 2c       	mov	r15, r1
    4adc:	6b c0       	rjmp	.+214    	; 0x4bb4 <fat_append_clusters+0x606>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
    4ade:	ba 82       	std	Y+2, r11	; 0x02
    4ae0:	a9 82       	std	Y+1, r10	; 0x01

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    4ae2:	66 0c       	add	r6, r6
    4ae4:	77 1c       	adc	r7, r7
    4ae6:	88 1c       	adc	r8, r8
    4ae8:	99 1c       	adc	r9, r9
    4aea:	b4 01       	movw	r22, r8
    4aec:	a3 01       	movw	r20, r6
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	a0 e0       	ldi	r26, 0x00	; 0
    4af4:	b0 e0       	ldi	r27, 0x00	; 0
    4af6:	2c a1       	ldd	r18, Y+36	; 0x24
    4af8:	26 0d       	add	r18, r6
    4afa:	31 e0       	ldi	r19, 0x01	; 1
    4afc:	26 15       	cp	r18, r6
    4afe:	08 f0       	brcs	.+2      	; 0x4b02 <fat_append_clusters+0x554>
    4b00:	30 e0       	ldi	r19, 0x00	; 0
    4b02:	ed a1       	ldd	r30, Y+37	; 0x25
    4b04:	e5 0f       	add	r30, r21
    4b06:	11 e0       	ldi	r17, 0x01	; 1
    4b08:	e5 17       	cp	r30, r21
    4b0a:	08 f0       	brcs	.+2      	; 0x4b0e <fat_append_clusters+0x560>
    4b0c:	10 e0       	ldi	r17, 0x00	; 0
    4b0e:	3e 0f       	add	r19, r30
    4b10:	f1 e0       	ldi	r31, 0x01	; 1
    4b12:	3e 17       	cp	r19, r30
    4b14:	08 f0       	brcs	.+2      	; 0x4b18 <fat_append_clusters+0x56a>
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	1f 2b       	or	r17, r31
    4b1a:	ee a1       	ldd	r30, Y+38	; 0x26
    4b1c:	e6 0f       	add	r30, r22
    4b1e:	01 e0       	ldi	r16, 0x01	; 1
    4b20:	e6 17       	cp	r30, r22
    4b22:	08 f0       	brcs	.+2      	; 0x4b26 <fat_append_clusters+0x578>
    4b24:	00 e0       	ldi	r16, 0x00	; 0
    4b26:	91 2e       	mov	r9, r17
    4b28:	9e 0e       	add	r9, r30
    4b2a:	f1 e0       	ldi	r31, 0x01	; 1
    4b2c:	9e 16       	cp	r9, r30
    4b2e:	08 f0       	brcs	.+2      	; 0x4b32 <fat_append_clusters+0x584>
    4b30:	f0 e0       	ldi	r31, 0x00	; 0
    4b32:	0f 2b       	or	r16, r31
    4b34:	ef a1       	ldd	r30, Y+39	; 0x27
    4b36:	e7 0f       	add	r30, r23
    4b38:	f1 e0       	ldi	r31, 0x01	; 1
    4b3a:	e7 17       	cp	r30, r23
    4b3c:	08 f0       	brcs	.+2      	; 0x4b40 <fat_append_clusters+0x592>
    4b3e:	f0 e0       	ldi	r31, 0x00	; 0
    4b40:	e0 2e       	mov	r14, r16
    4b42:	ee 0e       	add	r14, r30
    4b44:	11 e0       	ldi	r17, 0x01	; 1
    4b46:	ee 16       	cp	r14, r30
    4b48:	08 f0       	brcs	.+2      	; 0x4b4c <fat_append_clusters+0x59e>
    4b4a:	10 e0       	ldi	r17, 0x00	; 0
    4b4c:	f1 2b       	or	r31, r17
    4b4e:	e1 e0       	ldi	r30, 0x01	; 1
    4b50:	f8 a4       	ldd	r15, Y+40	; 0x28
    4b52:	f8 16       	cp	r15, r24
    4b54:	08 f0       	brcs	.+2      	; 0x4b58 <fat_append_clusters+0x5aa>
    4b56:	e0 e0       	ldi	r30, 0x00	; 0
    4b58:	f8 a4       	ldd	r15, Y+40	; 0x28
    4b5a:	ff 0e       	add	r15, r31
    4b5c:	f1 e0       	ldi	r31, 0x01	; 1
    4b5e:	08 a5       	ldd	r16, Y+40	; 0x28
    4b60:	f0 16       	cp	r15, r16
    4b62:	08 f0       	brcs	.+2      	; 0x4b66 <fat_append_clusters+0x5b8>
    4b64:	f0 e0       	ldi	r31, 0x00	; 0
    4b66:	ef 2b       	or	r30, r31
    4b68:	f1 e0       	ldi	r31, 0x01	; 1
    4b6a:	19 a5       	ldd	r17, Y+41	; 0x29
    4b6c:	19 17       	cp	r17, r25
    4b6e:	08 f0       	brcs	.+2      	; 0x4b72 <fat_append_clusters+0x5c4>
    4b70:	f0 e0       	ldi	r31, 0x00	; 0
    4b72:	09 a5       	ldd	r16, Y+41	; 0x29
    4b74:	0e 0f       	add	r16, r30
    4b76:	e1 e0       	ldi	r30, 0x01	; 1
    4b78:	19 a5       	ldd	r17, Y+41	; 0x29
    4b7a:	01 17       	cp	r16, r17
    4b7c:	08 f0       	brcs	.+2      	; 0x4b80 <fat_append_clusters+0x5d2>
    4b7e:	e0 e0       	ldi	r30, 0x00	; 0
    4b80:	fe 2b       	or	r31, r30
    4b82:	11 e0       	ldi	r17, 0x01	; 1
    4b84:	ea a5       	ldd	r30, Y+42	; 0x2a
    4b86:	ea 17       	cp	r30, r26
    4b88:	08 f0       	brcs	.+2      	; 0x4b8c <fat_append_clusters+0x5de>
    4b8a:	10 e0       	ldi	r17, 0x00	; 0
    4b8c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b8e:	8f 0f       	add	r24, r31
    4b90:	e1 e0       	ldi	r30, 0x01	; 1
    4b92:	fa a5       	ldd	r31, Y+42	; 0x2a
    4b94:	8f 17       	cp	r24, r31
    4b96:	08 f0       	brcs	.+2      	; 0x4b9a <fat_append_clusters+0x5ec>
    4b98:	e0 e0       	ldi	r30, 0x00	; 0
    4b9a:	1e 2b       	or	r17, r30
    4b9c:	49 2d       	mov	r20, r9
    4b9e:	5e 2d       	mov	r21, r14
    4ba0:	6f 2d       	mov	r22, r15
    4ba2:	70 2f       	mov	r23, r16
    4ba4:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ba6:	91 0f       	add	r25, r17
    4ba8:	8e 01       	movw	r16, r28
    4baa:	0f 5f       	subi	r16, 0xFF	; 255
    4bac:	1f 4f       	sbci	r17, 0xFF	; 255
    4bae:	e2 e0       	ldi	r30, 0x02	; 2
    4bb0:	ee 2e       	mov	r14, r30
    4bb2:	f1 2c       	mov	r15, r1
    4bb4:	a8 8d       	ldd	r26, Y+24	; 0x18
    4bb6:	b9 8d       	ldd	r27, Y+25	; 0x19
    4bb8:	fd 01       	movw	r30, r26
    4bba:	09 95       	icall
    4bbc:	88 23       	and	r24, r24
    4bbe:	49 f4       	brne	.+18     	; 0x4bd2 <fat_append_clusters+0x624>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
    4bc0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4bc2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4bc4:	b6 01       	movw	r22, r12
    4bc6:	a5 01       	movw	r20, r10
    4bc8:	0e 94 1b 21 	call	0x4236	; 0x4236 <fat_free_clusters>

    return 0;
    4bcc:	aa 24       	eor	r10, r10
    4bce:	bb 24       	eor	r11, r11
    4bd0:	65 01       	movw	r12, r10
}
    4bd2:	b5 01       	movw	r22, r10
    4bd4:	c6 01       	movw	r24, r12
    4bd6:	ad 96       	adiw	r28, 0x2d	; 45
    4bd8:	0f b6       	in	r0, 0x3f	; 63
    4bda:	f8 94       	cli
    4bdc:	de bf       	out	0x3e, r29	; 62
    4bde:	0f be       	out	0x3f, r0	; 63
    4be0:	cd bf       	out	0x3d, r28	; 61
    4be2:	cf 91       	pop	r28
    4be4:	df 91       	pop	r29
    4be6:	1f 91       	pop	r17
    4be8:	0f 91       	pop	r16
    4bea:	ff 90       	pop	r15
    4bec:	ef 90       	pop	r14
    4bee:	df 90       	pop	r13
    4bf0:	cf 90       	pop	r12
    4bf2:	bf 90       	pop	r11
    4bf4:	af 90       	pop	r10
    4bf6:	9f 90       	pop	r9
    4bf8:	8f 90       	pop	r8
    4bfa:	7f 90       	pop	r7
    4bfc:	6f 90       	pop	r6
    4bfe:	5f 90       	pop	r5
    4c00:	4f 90       	pop	r4
    4c02:	3f 90       	pop	r3
    4c04:	2f 90       	pop	r2
    4c06:	08 95       	ret

00004c08 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
    4c08:	80 e1       	ldi	r24, 0x10	; 16
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	08 95       	ret

00004c0e <fat_close_file>:
 *
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    4c0e:	fc 01       	movw	r30, r24
    if(fd)
    4c10:	00 97       	sbiw	r24, 0x00	; 0
    4c12:	11 f0       	breq	.+4      	; 0x4c18 <fat_close_file+0xa>
#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    4c14:	11 82       	std	Z+1, r1	; 0x01
    4c16:	10 82       	st	Z, r1
    4c18:	08 95       	ret

00004c1a <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    4c1a:	2f 92       	push	r2
    4c1c:	3f 92       	push	r3
    4c1e:	4f 92       	push	r4
    4c20:	5f 92       	push	r5
    4c22:	6f 92       	push	r6
    4c24:	7f 92       	push	r7
    4c26:	8f 92       	push	r8
    4c28:	9f 92       	push	r9
    4c2a:	af 92       	push	r10
    4c2c:	bf 92       	push	r11
    4c2e:	cf 92       	push	r12
    4c30:	df 92       	push	r13
    4c32:	ef 92       	push	r14
    4c34:	ff 92       	push	r15
    4c36:	0f 93       	push	r16
    4c38:	1f 93       	push	r17
    4c3a:	df 93       	push	r29
    4c3c:	cf 93       	push	r28
    4c3e:	cd b7       	in	r28, 0x3d	; 61
    4c40:	de b7       	in	r29, 0x3e	; 62
    4c42:	68 97       	sbiw	r28, 0x18	; 24
    4c44:	0f b6       	in	r0, 0x3f	; 63
    4c46:	f8 94       	cli
    4c48:	de bf       	out	0x3e, r29	; 62
    4c4a:	0f be       	out	0x3f, r0	; 63
    4c4c:	cd bf       	out	0x3d, r28	; 61
    4c4e:	98 8f       	std	Y+24, r25	; 0x18
    4c50:	8f 8b       	std	Y+23, r24	; 0x17
    4c52:	7e 87       	std	Y+14, r23	; 0x0e
    4c54:	6d 87       	std	Y+13, r22	; 0x0d
    4c56:	58 8b       	std	Y+16, r21	; 0x10
    4c58:	4f 87       	std	Y+15, r20	; 0x0f
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    4c5a:	00 97       	sbiw	r24, 0x00	; 0
    4c5c:	09 f4       	brne	.+2      	; 0x4c60 <fat_read_file+0x46>
    4c5e:	1e c3       	rjmp	.+1596   	; 0x529c <fat_read_file+0x682>
    4c60:	67 2b       	or	r22, r23
    4c62:	09 f4       	brne	.+2      	; 0x4c66 <fat_read_file+0x4c>
    4c64:	1b c3       	rjmp	.+1590   	; 0x529c <fat_read_file+0x682>
    4c66:	41 15       	cp	r20, r1
    4c68:	51 05       	cpc	r21, r1
    4c6a:	09 f4       	brne	.+2      	; 0x4c6e <fat_read_file+0x54>
    4c6c:	17 c3       	rjmp	.+1582   	; 0x529c <fat_read_file+0x682>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    4c6e:	dc 01       	movw	r26, r24
    4c70:	d3 96       	adiw	r26, 0x33	; 51
    4c72:	ac 90       	ld	r10, X
    4c74:	d3 97       	sbiw	r26, 0x33	; 51
    4c76:	d4 96       	adiw	r26, 0x34	; 52
    4c78:	bc 90       	ld	r11, X
    4c7a:	d4 97       	sbiw	r26, 0x34	; 52
    4c7c:	d5 96       	adiw	r26, 0x35	; 53
    4c7e:	cc 90       	ld	r12, X
    4c80:	d5 97       	sbiw	r26, 0x35	; 53
    4c82:	d6 96       	adiw	r26, 0x36	; 54
    4c84:	dc 90       	ld	r13, X
    4c86:	d6 97       	sbiw	r26, 0x36	; 54
    4c88:	d7 96       	adiw	r26, 0x37	; 55
    4c8a:	ec 90       	ld	r14, X
    4c8c:	d7 97       	sbiw	r26, 0x37	; 55
    4c8e:	d8 96       	adiw	r26, 0x38	; 56
    4c90:	fc 90       	ld	r15, X
    4c92:	d8 97       	sbiw	r26, 0x38	; 56
    4c94:	d9 96       	adiw	r26, 0x39	; 57
    4c96:	0c 91       	ld	r16, X
    4c98:	d9 97       	sbiw	r26, 0x39	; 57
    4c9a:	da 96       	adiw	r26, 0x3a	; 58
    4c9c:	1c 91       	ld	r17, X
    4c9e:	da 97       	sbiw	r26, 0x3a	; 58
    4ca0:	97 96       	adiw	r26, 0x27	; 39
    4ca2:	2d 90       	ld	r2, X+
    4ca4:	3d 90       	ld	r3, X+
    4ca6:	4d 90       	ld	r4, X+
    4ca8:	5c 90       	ld	r5, X
    4caa:	9a 97       	sbiw	r26, 0x2a	; 42
    4cac:	9a 01       	movw	r18, r20
    4cae:	40 e0       	ldi	r20, 0x00	; 0
    4cb0:	50 e0       	ldi	r21, 0x00	; 0
    4cb2:	60 e0       	ldi	r22, 0x00	; 0
    4cb4:	70 e0       	ldi	r23, 0x00	; 0
    4cb6:	80 e0       	ldi	r24, 0x00	; 0
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	b2 2f       	mov	r27, r18
    4cbc:	ba 0d       	add	r27, r10
    4cbe:	ba 8b       	std	Y+18, r27	; 0x12
    4cc0:	f1 e0       	ldi	r31, 0x01	; 1
    4cc2:	b2 17       	cp	r27, r18
    4cc4:	08 f0       	brcs	.+2      	; 0x4cc8 <fat_read_file+0xae>
    4cc6:	f0 e0       	ldi	r31, 0x00	; 0
    4cc8:	e3 2f       	mov	r30, r19
    4cca:	eb 0d       	add	r30, r11
    4ccc:	99 24       	eor	r9, r9
    4cce:	93 94       	inc	r9
    4cd0:	e3 17       	cp	r30, r19
    4cd2:	08 f0       	brcs	.+2      	; 0x4cd6 <fat_read_file+0xbc>
    4cd4:	99 24       	eor	r9, r9
    4cd6:	fe 0f       	add	r31, r30
    4cd8:	f9 8b       	std	Y+17, r31	; 0x11
    4cda:	f1 e0       	ldi	r31, 0x01	; 1
    4cdc:	a9 89       	ldd	r26, Y+17	; 0x11
    4cde:	ae 17       	cp	r26, r30
    4ce0:	08 f0       	brcs	.+2      	; 0x4ce4 <fat_read_file+0xca>
    4ce2:	f0 e0       	ldi	r31, 0x00	; 0
    4ce4:	9f 2a       	or	r9, r31
    4ce6:	e4 2f       	mov	r30, r20
    4ce8:	ec 0d       	add	r30, r12
    4cea:	b1 e0       	ldi	r27, 0x01	; 1
    4cec:	e4 17       	cp	r30, r20
    4cee:	08 f0       	brcs	.+2      	; 0x4cf2 <fat_read_file+0xd8>
    4cf0:	b0 e0       	ldi	r27, 0x00	; 0
    4cf2:	69 2c       	mov	r6, r9
    4cf4:	6e 0e       	add	r6, r30
    4cf6:	f1 e0       	ldi	r31, 0x01	; 1
    4cf8:	6e 16       	cp	r6, r30
    4cfa:	08 f0       	brcs	.+2      	; 0x4cfe <fat_read_file+0xe4>
    4cfc:	f0 e0       	ldi	r31, 0x00	; 0
    4cfe:	bf 2b       	or	r27, r31
    4d00:	e5 2f       	mov	r30, r21
    4d02:	ed 0d       	add	r30, r13
    4d04:	a1 e0       	ldi	r26, 0x01	; 1
    4d06:	e5 17       	cp	r30, r21
    4d08:	08 f0       	brcs	.+2      	; 0x4d0c <fat_read_file+0xf2>
    4d0a:	a0 e0       	ldi	r26, 0x00	; 0
    4d0c:	7b 2e       	mov	r7, r27
    4d0e:	7e 0e       	add	r7, r30
    4d10:	f1 e0       	ldi	r31, 0x01	; 1
    4d12:	7e 16       	cp	r7, r30
    4d14:	08 f0       	brcs	.+2      	; 0x4d18 <fat_read_file+0xfe>
    4d16:	f0 e0       	ldi	r31, 0x00	; 0
    4d18:	af 2b       	or	r26, r31
    4d1a:	e6 2f       	mov	r30, r22
    4d1c:	ee 0d       	add	r30, r14
    4d1e:	b1 e0       	ldi	r27, 0x01	; 1
    4d20:	e6 17       	cp	r30, r22
    4d22:	08 f0       	brcs	.+2      	; 0x4d26 <fat_read_file+0x10c>
    4d24:	b0 e0       	ldi	r27, 0x00	; 0
    4d26:	8a 2e       	mov	r8, r26
    4d28:	8e 0e       	add	r8, r30
    4d2a:	f1 e0       	ldi	r31, 0x01	; 1
    4d2c:	8e 16       	cp	r8, r30
    4d2e:	08 f0       	brcs	.+2      	; 0x4d32 <fat_read_file+0x118>
    4d30:	f0 e0       	ldi	r31, 0x00	; 0
    4d32:	bf 2b       	or	r27, r31
    4d34:	e7 2f       	mov	r30, r23
    4d36:	ef 0d       	add	r30, r15
    4d38:	a1 e0       	ldi	r26, 0x01	; 1
    4d3a:	e7 17       	cp	r30, r23
    4d3c:	08 f0       	brcs	.+2      	; 0x4d40 <fat_read_file+0x126>
    4d3e:	a0 e0       	ldi	r26, 0x00	; 0
    4d40:	9b 2e       	mov	r9, r27
    4d42:	9e 0e       	add	r9, r30
    4d44:	f1 e0       	ldi	r31, 0x01	; 1
    4d46:	9e 16       	cp	r9, r30
    4d48:	08 f0       	brcs	.+2      	; 0x4d4c <fat_read_file+0x132>
    4d4a:	f0 e0       	ldi	r31, 0x00	; 0
    4d4c:	af 2b       	or	r26, r31
    4d4e:	e8 2f       	mov	r30, r24
    4d50:	e0 0f       	add	r30, r16
    4d52:	b1 e0       	ldi	r27, 0x01	; 1
    4d54:	e8 17       	cp	r30, r24
    4d56:	08 f0       	brcs	.+2      	; 0x4d5a <fat_read_file+0x140>
    4d58:	b0 e0       	ldi	r27, 0x00	; 0
    4d5a:	ae 0f       	add	r26, r30
    4d5c:	f1 e0       	ldi	r31, 0x01	; 1
    4d5e:	ae 17       	cp	r26, r30
    4d60:	08 f0       	brcs	.+2      	; 0x4d64 <fat_read_file+0x14a>
    4d62:	f0 e0       	ldi	r31, 0x00	; 0
    4d64:	eb 2f       	mov	r30, r27
    4d66:	ef 2b       	or	r30, r31
    4d68:	89 2f       	mov	r24, r25
    4d6a:	81 0f       	add	r24, r17
    4d6c:	e8 0f       	add	r30, r24
    4d6e:	a2 01       	movw	r20, r4
    4d70:	91 01       	movw	r18, r2
    4d72:	60 e0       	ldi	r22, 0x00	; 0
    4d74:	70 e0       	ldi	r23, 0x00	; 0
    4d76:	80 e0       	ldi	r24, 0x00	; 0
    4d78:	90 e0       	ldi	r25, 0x00	; 0
    4d7a:	9e 17       	cp	r25, r30
    4d7c:	f0 f0       	brcs	.+60     	; 0x4dba <fat_read_file+0x1a0>
    4d7e:	e9 17       	cp	r30, r25
    4d80:	21 f5       	brne	.+72     	; 0x4dca <fat_read_file+0x1b0>
    4d82:	8a 17       	cp	r24, r26
    4d84:	d0 f0       	brcs	.+52     	; 0x4dba <fat_read_file+0x1a0>
    4d86:	a8 17       	cp	r26, r24
    4d88:	01 f5       	brne	.+64     	; 0x4dca <fat_read_file+0x1b0>
    4d8a:	79 15       	cp	r23, r9
    4d8c:	b0 f0       	brcs	.+44     	; 0x4dba <fat_read_file+0x1a0>
    4d8e:	97 16       	cp	r9, r23
    4d90:	e1 f4       	brne	.+56     	; 0x4dca <fat_read_file+0x1b0>
    4d92:	68 15       	cp	r22, r8
    4d94:	90 f0       	brcs	.+36     	; 0x4dba <fat_read_file+0x1a0>
    4d96:	86 16       	cp	r8, r22
    4d98:	c1 f4       	brne	.+48     	; 0x4dca <fat_read_file+0x1b0>
    4d9a:	57 15       	cp	r21, r7
    4d9c:	70 f0       	brcs	.+28     	; 0x4dba <fat_read_file+0x1a0>
    4d9e:	75 16       	cp	r7, r21
    4da0:	a1 f4       	brne	.+40     	; 0x4dca <fat_read_file+0x1b0>
    4da2:	46 15       	cp	r20, r6
    4da4:	50 f0       	brcs	.+20     	; 0x4dba <fat_read_file+0x1a0>
    4da6:	64 16       	cp	r6, r20
    4da8:	81 f4       	brne	.+32     	; 0x4dca <fat_read_file+0x1b0>
    4daa:	b9 89       	ldd	r27, Y+17	; 0x11
    4dac:	3b 17       	cp	r19, r27
    4dae:	28 f0       	brcs	.+10     	; 0x4dba <fat_read_file+0x1a0>
    4db0:	b3 17       	cp	r27, r19
    4db2:	59 f4       	brne	.+22     	; 0x4dca <fat_read_file+0x1b0>
    4db4:	ea 89       	ldd	r30, Y+18	; 0x12
    4db6:	2e 16       	cp	r2, r30
    4db8:	40 f4       	brcc	.+16     	; 0x4dca <fat_read_file+0x1b0>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    4dba:	91 01       	movw	r18, r2
    4dbc:	2a 19       	sub	r18, r10
    4dbe:	3b 09       	sbc	r19, r11
    4dc0:	38 8b       	std	Y+16, r19	; 0x10
    4dc2:	2f 87       	std	Y+15, r18	; 0x0f
    if(buffer_len == 0)
    4dc4:	23 2b       	or	r18, r19
    4dc6:	09 f4       	brne	.+2      	; 0x4dca <fat_read_file+0x1b0>
    4dc8:	6c c2       	rjmp	.+1240   	; 0x52a2 <fat_read_file+0x688>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    4dca:	af 89       	ldd	r26, Y+23	; 0x17
    4dcc:	b8 8d       	ldd	r27, Y+24	; 0x18
    4dce:	ed 91       	ld	r30, X+
    4dd0:	fc 91       	ld	r31, X
    4dd2:	11 97       	sbiw	r26, 0x01	; 1
    4dd4:	20 8d       	ldd	r18, Z+24	; 0x18
    4dd6:	31 8d       	ldd	r19, Z+25	; 0x19
    4dd8:	3c 87       	std	Y+12, r19	; 0x0c
    4dda:	2b 87       	std	Y+11, r18	; 0x0b
    cluster_t cluster_num = fd->pos_cluster;
    4ddc:	db 96       	adiw	r26, 0x3b	; 59
    4dde:	8d 91       	ld	r24, X+
    4de0:	9d 91       	ld	r25, X+
    4de2:	0d 90       	ld	r0, X+
    4de4:	bc 91       	ld	r27, X
    4de6:	a0 2d       	mov	r26, r0
    4de8:	8f 83       	std	Y+7, r24	; 0x07
    4dea:	98 87       	std	Y+8, r25	; 0x08
    4dec:	a9 87       	std	Y+9, r26	; 0x09
    4dee:	ba 87       	std	Y+10, r27	; 0x0a
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    4df0:	00 97       	sbiw	r24, 0x00	; 0
    4df2:	a1 05       	cpc	r26, r1
    4df4:	b1 05       	cpc	r27, r1
    4df6:	09 f0       	breq	.+2      	; 0x4dfa <fat_read_file+0x1e0>
    4df8:	59 c0       	rjmp	.+178    	; 0x4eac <fat_read_file+0x292>
    {
        cluster_num = fd->dir_entry.cluster;
    4dfa:	af 89       	ldd	r26, Y+23	; 0x17
    4dfc:	b8 8d       	ldd	r27, Y+24	; 0x18
    4dfe:	93 96       	adiw	r26, 0x23	; 35
    4e00:	2d 91       	ld	r18, X+
    4e02:	3d 91       	ld	r19, X+
    4e04:	4d 91       	ld	r20, X+
    4e06:	5c 91       	ld	r21, X
    4e08:	96 97       	sbiw	r26, 0x26	; 38
    4e0a:	2f 83       	std	Y+7, r18	; 0x07
    4e0c:	38 87       	std	Y+8, r19	; 0x08
    4e0e:	49 87       	std	Y+9, r20	; 0x09
    4e10:	5a 87       	std	Y+10, r21	; 0x0a
        
        if(!cluster_num)
    4e12:	21 15       	cp	r18, r1
    4e14:	31 05       	cpc	r19, r1
    4e16:	41 05       	cpc	r20, r1
    4e18:	51 05       	cpc	r21, r1
    4e1a:	59 f4       	brne	.+22     	; 0x4e32 <fat_read_file+0x218>
        {
            if(!fd->pos)
    4e1c:	8a 2d       	mov	r24, r10
    4e1e:	8b 29       	or	r24, r11
    4e20:	8c 29       	or	r24, r12
    4e22:	8d 29       	or	r24, r13
    4e24:	8e 29       	or	r24, r14
    4e26:	8f 29       	or	r24, r15
    4e28:	80 2b       	or	r24, r16
    4e2a:	81 2b       	or	r24, r17
    4e2c:	09 f4       	brne	.+2      	; 0x4e30 <fat_read_file+0x216>
    4e2e:	39 c2       	rjmp	.+1138   	; 0x52a2 <fat_read_file+0x688>
    4e30:	35 c2       	rjmp	.+1130   	; 0x529c <fat_read_file+0x682>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    4e32:	8a 2d       	mov	r24, r10
    4e34:	8b 29       	or	r24, r11
    4e36:	8c 29       	or	r24, r12
    4e38:	8d 29       	or	r24, r13
    4e3a:	8e 29       	or	r24, r14
    4e3c:	8f 29       	or	r24, r15
    4e3e:	80 2b       	or	r24, r16
    4e40:	81 2b       	or	r24, r17
    4e42:	a1 f1       	breq	.+104    	; 0x4eac <fat_read_file+0x292>
        {
            uint32_t pos = fd->pos;
    4e44:	35 01       	movw	r6, r10
    4e46:	46 01       	movw	r8, r12
            while(pos >= cluster_size)
    4e48:	eb 85       	ldd	r30, Y+11	; 0x0b
    4e4a:	fc 85       	ldd	r31, Y+12	; 0x0c
    4e4c:	1f 01       	movw	r2, r30
    4e4e:	44 24       	eor	r4, r4
    4e50:	55 24       	eor	r5, r5
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
    4e52:	22 27       	eor	r18, r18
    4e54:	33 27       	eor	r19, r19
    4e56:	a9 01       	movw	r20, r18
    4e58:	22 19       	sub	r18, r2
    4e5a:	33 09       	sbc	r19, r3
    4e5c:	44 09       	sbc	r20, r4
    4e5e:	55 09       	sbc	r21, r5
    4e60:	2b 8b       	std	Y+19, r18	; 0x13
    4e62:	3c 8b       	std	Y+20, r19	; 0x14
    4e64:	4d 8b       	std	Y+21, r20	; 0x15
    4e66:	5e 8b       	std	Y+22, r21	; 0x16
    4e68:	1c c0       	rjmp	.+56     	; 0x4ea2 <fat_read_file+0x288>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    4e6a:	af 89       	ldd	r26, Y+23	; 0x17
    4e6c:	b8 8d       	ldd	r27, Y+24	; 0x18
    4e6e:	8d 91       	ld	r24, X+
    4e70:	9c 91       	ld	r25, X
    4e72:	4f 81       	ldd	r20, Y+7	; 0x07
    4e74:	58 85       	ldd	r21, Y+8	; 0x08
    4e76:	69 85       	ldd	r22, Y+9	; 0x09
    4e78:	7a 85       	ldd	r23, Y+10	; 0x0a
    4e7a:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <fat_get_next_cluster>
    4e7e:	6f 83       	std	Y+7, r22	; 0x07
    4e80:	78 87       	std	Y+8, r23	; 0x08
    4e82:	89 87       	std	Y+9, r24	; 0x09
    4e84:	9a 87       	std	Y+10, r25	; 0x0a
                if(!cluster_num)
    4e86:	61 15       	cp	r22, r1
    4e88:	71 05       	cpc	r23, r1
    4e8a:	81 05       	cpc	r24, r1
    4e8c:	91 05       	cpc	r25, r1
    4e8e:	09 f4       	brne	.+2      	; 0x4e92 <fat_read_file+0x278>
    4e90:	05 c2       	rjmp	.+1034   	; 0x529c <fat_read_file+0x682>
    4e92:	2b 89       	ldd	r18, Y+19	; 0x13
    4e94:	3c 89       	ldd	r19, Y+20	; 0x14
    4e96:	4d 89       	ldd	r20, Y+21	; 0x15
    4e98:	5e 89       	ldd	r21, Y+22	; 0x16
    4e9a:	62 0e       	add	r6, r18
    4e9c:	73 1e       	adc	r7, r19
    4e9e:	84 1e       	adc	r8, r20
    4ea0:	95 1e       	adc	r9, r21
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    4ea2:	62 14       	cp	r6, r2
    4ea4:	73 04       	cpc	r7, r3
    4ea6:	84 04       	cpc	r8, r4
    4ea8:	95 04       	cpc	r9, r5
    4eaa:	f8 f6       	brcc	.-66     	; 0x4e6a <fat_read_file+0x250>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    4eac:	4b 85       	ldd	r20, Y+11	; 0x0b
    4eae:	5c 85       	ldd	r21, Y+12	; 0x0c
    4eb0:	41 50       	subi	r20, 0x01	; 1
    4eb2:	50 40       	sbci	r21, 0x00	; 0
    4eb4:	5c 87       	std	Y+12, r21	; 0x0c
    4eb6:	4b 87       	std	Y+11, r20	; 0x0b
    4eb8:	4a 21       	and	r20, r10
    4eba:	5b 21       	and	r21, r11
    4ebc:	5c 83       	std	Y+4, r21	; 0x04
    4ebe:	4b 83       	std	Y+3, r20	; 0x03
    4ec0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ec2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ec4:	01 96       	adiw	r24, 0x01	; 1
    4ec6:	9c 87       	std	Y+12, r25	; 0x0c
    4ec8:	8b 87       	std	Y+11, r24	; 0x0b
    4eca:	af 85       	ldd	r26, Y+15	; 0x0f
    4ecc:	b8 89       	ldd	r27, Y+16	; 0x10
    4ece:	be 83       	std	Y+6, r27	; 0x06
    4ed0:	ad 83       	std	Y+5, r26	; 0x05
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    4ed2:	ef 89       	ldd	r30, Y+23	; 0x17
    4ed4:	f8 8d       	ldd	r31, Y+24	; 0x18
    4ed6:	01 90       	ld	r0, Z+
    4ed8:	f0 81       	ld	r31, Z
    4eda:	e0 2d       	mov	r30, r0
    4edc:	fa 83       	std	Y+2, r31	; 0x02
    4ede:	e9 83       	std	Y+1, r30	; 0x01
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    4ee0:	30 97       	sbiw	r30, 0x00	; 0
    4ee2:	09 f4       	brne	.+2      	; 0x4ee6 <fat_read_file+0x2cc>
    4ee4:	8e c0       	rjmp	.+284    	; 0x5002 <fat_read_file+0x3e8>
    4ee6:	2f 81       	ldd	r18, Y+7	; 0x07
    4ee8:	38 85       	ldd	r19, Y+8	; 0x08
    4eea:	49 85       	ldd	r20, Y+9	; 0x09
    4eec:	5a 85       	ldd	r21, Y+10	; 0x0a
    4eee:	22 30       	cpi	r18, 0x02	; 2
    4ef0:	31 05       	cpc	r19, r1
    4ef2:	41 05       	cpc	r20, r1
    4ef4:	51 05       	cpc	r21, r1
    4ef6:	08 f4       	brcc	.+2      	; 0x4efa <fat_read_file+0x2e0>
    4ef8:	84 c0       	rjmp	.+264    	; 0x5002 <fat_read_file+0x3e8>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    4efa:	22 50       	subi	r18, 0x02	; 2
    4efc:	30 40       	sbci	r19, 0x00	; 0
    4efe:	40 40       	sbci	r20, 0x00	; 0
    4f00:	50 40       	sbci	r21, 0x00	; 0
    4f02:	59 01       	movw	r10, r18
    4f04:	6a 01       	movw	r12, r20
    4f06:	2e 5f       	subi	r18, 0xFE	; 254
    4f08:	3f 4f       	sbci	r19, 0xFF	; 255
    4f0a:	4f 4f       	sbci	r20, 0xFF	; 255
    4f0c:	5f 4f       	sbci	r21, 0xFF	; 255
    4f0e:	2f 83       	std	Y+7, r18	; 0x07
    4f10:	38 87       	std	Y+8, r19	; 0x08
    4f12:	49 87       	std	Y+9, r20	; 0x09
    4f14:	5a 87       	std	Y+10, r21	; 0x0a
    4f16:	20 8c       	ldd	r2, Z+24	; 0x18
    4f18:	31 8c       	ldd	r3, Z+25	; 0x19
    4f1a:	95 01       	movw	r18, r10
    4f1c:	a6 01       	movw	r20, r12
    4f1e:	60 e0       	ldi	r22, 0x00	; 0
    4f20:	70 e0       	ldi	r23, 0x00	; 0
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	51 01       	movw	r10, r2
    4f28:	cc 24       	eor	r12, r12
    4f2a:	dd 24       	eor	r13, r13
    4f2c:	ee 24       	eor	r14, r14
    4f2e:	ff 24       	eor	r15, r15
    4f30:	00 e0       	ldi	r16, 0x00	; 0
    4f32:	10 e0       	ldi	r17, 0x00	; 0
    4f34:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    4f38:	e9 81       	ldd	r30, Y+1	; 0x01
    4f3a:	fa 81       	ldd	r31, Y+2	; 0x02
    4f3c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4f3e:	f3 8c       	ldd	r15, Z+27	; 0x1b
    4f40:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4f42:	05 8d       	ldd	r16, Z+29	; 0x1d
    4f44:	e6 8c       	ldd	r14, Z+30	; 0x1e
    4f46:	d7 8c       	ldd	r13, Z+31	; 0x1f
    4f48:	c0 a0       	ldd	r12, Z+32	; 0x20
    4f4a:	11 a1       	ldd	r17, Z+33	; 0x21
    4f4c:	a2 0f       	add	r26, r18
    4f4e:	f1 e0       	ldi	r31, 0x01	; 1
    4f50:	a2 17       	cp	r26, r18
    4f52:	08 f0       	brcs	.+2      	; 0x4f56 <fat_read_file+0x33c>
    4f54:	f0 e0       	ldi	r31, 0x00	; 0
    4f56:	23 2f       	mov	r18, r19
    4f58:	2f 0d       	add	r18, r15
    4f5a:	e1 e0       	ldi	r30, 0x01	; 1
    4f5c:	23 17       	cp	r18, r19
    4f5e:	08 f0       	brcs	.+2      	; 0x4f62 <fat_read_file+0x348>
    4f60:	e0 e0       	ldi	r30, 0x00	; 0
    4f62:	ff 2e       	mov	r15, r31
    4f64:	f2 0e       	add	r15, r18
    4f66:	31 e0       	ldi	r19, 0x01	; 1
    4f68:	f2 16       	cp	r15, r18
    4f6a:	08 f0       	brcs	.+2      	; 0x4f6e <fat_read_file+0x354>
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	e3 2b       	or	r30, r19
    4f70:	24 2f       	mov	r18, r20
    4f72:	2b 0f       	add	r18, r27
    4f74:	f1 e0       	ldi	r31, 0x01	; 1
    4f76:	24 17       	cp	r18, r20
    4f78:	08 f0       	brcs	.+2      	; 0x4f7c <fat_read_file+0x362>
    4f7a:	f0 e0       	ldi	r31, 0x00	; 0
    4f7c:	be 2f       	mov	r27, r30
    4f7e:	b2 0f       	add	r27, r18
    4f80:	31 e0       	ldi	r19, 0x01	; 1
    4f82:	b2 17       	cp	r27, r18
    4f84:	08 f0       	brcs	.+2      	; 0x4f88 <fat_read_file+0x36e>
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	f3 2b       	or	r31, r19
    4f8a:	25 2f       	mov	r18, r21
    4f8c:	20 0f       	add	r18, r16
    4f8e:	41 e0       	ldi	r20, 0x01	; 1
    4f90:	25 17       	cp	r18, r21
    4f92:	08 f0       	brcs	.+2      	; 0x4f96 <fat_read_file+0x37c>
    4f94:	40 e0       	ldi	r20, 0x00	; 0
    4f96:	f2 0f       	add	r31, r18
    4f98:	31 e0       	ldi	r19, 0x01	; 1
    4f9a:	f2 17       	cp	r31, r18
    4f9c:	08 f0       	brcs	.+2      	; 0x4fa0 <fat_read_file+0x386>
    4f9e:	30 e0       	ldi	r19, 0x00	; 0
    4fa0:	43 2b       	or	r20, r19
    4fa2:	26 2f       	mov	r18, r22
    4fa4:	2e 0d       	add	r18, r14
    4fa6:	51 e0       	ldi	r21, 0x01	; 1
    4fa8:	26 17       	cp	r18, r22
    4faa:	08 f0       	brcs	.+2      	; 0x4fae <fat_read_file+0x394>
    4fac:	50 e0       	ldi	r21, 0x00	; 0
    4fae:	e4 2f       	mov	r30, r20
    4fb0:	e2 0f       	add	r30, r18
    4fb2:	31 e0       	ldi	r19, 0x01	; 1
    4fb4:	e2 17       	cp	r30, r18
    4fb6:	08 f0       	brcs	.+2      	; 0x4fba <fat_read_file+0x3a0>
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
    4fba:	53 2b       	or	r21, r19
    4fbc:	27 2f       	mov	r18, r23
    4fbe:	2d 0d       	add	r18, r13
    4fc0:	41 e0       	ldi	r20, 0x01	; 1
    4fc2:	27 17       	cp	r18, r23
    4fc4:	08 f0       	brcs	.+2      	; 0x4fc8 <fat_read_file+0x3ae>
    4fc6:	40 e0       	ldi	r20, 0x00	; 0
    4fc8:	52 0f       	add	r21, r18
    4fca:	31 e0       	ldi	r19, 0x01	; 1
    4fcc:	52 17       	cp	r21, r18
    4fce:	08 f0       	brcs	.+2      	; 0x4fd2 <fat_read_file+0x3b8>
    4fd0:	30 e0       	ldi	r19, 0x00	; 0
    4fd2:	43 2b       	or	r20, r19
    4fd4:	28 2f       	mov	r18, r24
    4fd6:	2c 0d       	add	r18, r12
    4fd8:	31 e0       	ldi	r19, 0x01	; 1
    4fda:	28 17       	cp	r18, r24
    4fdc:	08 f0       	brcs	.+2      	; 0x4fe0 <fat_read_file+0x3c6>
    4fde:	30 e0       	ldi	r19, 0x00	; 0
    4fe0:	42 0f       	add	r20, r18
    4fe2:	81 e0       	ldi	r24, 0x01	; 1
    4fe4:	42 17       	cp	r20, r18
    4fe6:	08 f0       	brcs	.+2      	; 0x4fea <fat_read_file+0x3d0>
    4fe8:	80 e0       	ldi	r24, 0x00	; 0
    4fea:	73 2e       	mov	r7, r19
    4fec:	78 2a       	or	r7, r24
    4fee:	19 0f       	add	r17, r25
    4ff0:	2a 2f       	mov	r18, r26
    4ff2:	9f 2d       	mov	r25, r15
    4ff4:	6b 2f       	mov	r22, r27
    4ff6:	7f 2f       	mov	r23, r31
    4ff8:	ae 2f       	mov	r26, r30
    4ffa:	b5 2f       	mov	r27, r21
    4ffc:	34 2e       	mov	r3, r20
    4ffe:	71 0e       	add	r7, r17
    5000:	08 c0       	rjmp	.+16     	; 0x5012 <fat_read_file+0x3f8>
    5002:	20 e0       	ldi	r18, 0x00	; 0
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	60 e0       	ldi	r22, 0x00	; 0
    5008:	70 e0       	ldi	r23, 0x00	; 0
    500a:	a0 e0       	ldi	r26, 0x00	; 0
    500c:	b0 e0       	ldi	r27, 0x00	; 0
    500e:	33 24       	eor	r3, r3
    5010:	77 24       	eor	r7, r7
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
    5012:	8b 84       	ldd	r8, Y+11	; 0x0b
    5014:	9c 84       	ldd	r9, Y+12	; 0x0c
    5016:	4b 81       	ldd	r20, Y+3	; 0x03
    5018:	5c 81       	ldd	r21, Y+4	; 0x04
    501a:	84 1a       	sub	r8, r20
    501c:	95 0a       	sbc	r9, r21
    501e:	ed 81       	ldd	r30, Y+5	; 0x05
    5020:	fe 81       	ldd	r31, Y+6	; 0x06
    5022:	e8 15       	cp	r30, r8
    5024:	f9 05       	cpc	r31, r9
    5026:	08 f4       	brcc	.+2      	; 0x502a <fat_read_file+0x410>
    5028:	4f 01       	movw	r8, r30
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    502a:	e9 81       	ldd	r30, Y+1	; 0x01
    502c:	fa 81       	ldd	r31, Y+2	; 0x02
    502e:	40 80       	ld	r4, Z
    5030:	51 80       	ldd	r5, Z+1	; 0x01
    5032:	4b 81       	ldd	r20, Y+3	; 0x03
    5034:	5c 81       	ldd	r21, Y+4	; 0x04
    5036:	5a 01       	movw	r10, r20
    5038:	cc 24       	eor	r12, r12
    503a:	dd 24       	eor	r13, r13
    503c:	ee 24       	eor	r14, r14
    503e:	ff 24       	eor	r15, r15
    5040:	87 01       	movw	r16, r14
    5042:	62 2e       	mov	r6, r18
    5044:	64 0e       	add	r6, r20
    5046:	31 e0       	ldi	r19, 0x01	; 1
    5048:	62 16       	cp	r6, r18
    504a:	08 f0       	brcs	.+2      	; 0x504e <fat_read_file+0x434>
    504c:	30 e0       	ldi	r19, 0x00	; 0
    504e:	89 2f       	mov	r24, r25
    5050:	8b 0d       	add	r24, r11
    5052:	41 e0       	ldi	r20, 0x01	; 1
    5054:	89 17       	cp	r24, r25
    5056:	08 f0       	brcs	.+2      	; 0x505a <fat_read_file+0x440>
    5058:	40 e0       	ldi	r20, 0x00	; 0
    505a:	38 0f       	add	r19, r24
    505c:	91 e0       	ldi	r25, 0x01	; 1
    505e:	38 17       	cp	r19, r24
    5060:	08 f0       	brcs	.+2      	; 0x5064 <fat_read_file+0x44a>
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	49 2b       	or	r20, r25
    5066:	86 2f       	mov	r24, r22
    5068:	8c 0d       	add	r24, r12
    506a:	51 e0       	ldi	r21, 0x01	; 1
    506c:	86 17       	cp	r24, r22
    506e:	08 f0       	brcs	.+2      	; 0x5072 <fat_read_file+0x458>
    5070:	50 e0       	ldi	r21, 0x00	; 0
    5072:	48 0f       	add	r20, r24
    5074:	91 e0       	ldi	r25, 0x01	; 1
    5076:	48 17       	cp	r20, r24
    5078:	08 f0       	brcs	.+2      	; 0x507c <fat_read_file+0x462>
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	59 2b       	or	r21, r25
    507e:	87 2f       	mov	r24, r23
    5080:	8d 0d       	add	r24, r13
    5082:	61 e0       	ldi	r22, 0x01	; 1
    5084:	87 17       	cp	r24, r23
    5086:	08 f0       	brcs	.+2      	; 0x508a <fat_read_file+0x470>
    5088:	60 e0       	ldi	r22, 0x00	; 0
    508a:	58 0f       	add	r21, r24
    508c:	91 e0       	ldi	r25, 0x01	; 1
    508e:	58 17       	cp	r21, r24
    5090:	08 f0       	brcs	.+2      	; 0x5094 <fat_read_file+0x47a>
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	69 2b       	or	r22, r25
    5096:	8a 2f       	mov	r24, r26
    5098:	8e 0d       	add	r24, r14
    509a:	71 e0       	ldi	r23, 0x01	; 1
    509c:	8a 17       	cp	r24, r26
    509e:	08 f0       	brcs	.+2      	; 0x50a2 <fat_read_file+0x488>
    50a0:	70 e0       	ldi	r23, 0x00	; 0
    50a2:	68 0f       	add	r22, r24
    50a4:	91 e0       	ldi	r25, 0x01	; 1
    50a6:	68 17       	cp	r22, r24
    50a8:	08 f0       	brcs	.+2      	; 0x50ac <fat_read_file+0x492>
    50aa:	90 e0       	ldi	r25, 0x00	; 0
    50ac:	79 2b       	or	r23, r25
    50ae:	9b 2f       	mov	r25, r27
    50b0:	9f 0d       	add	r25, r15
    50b2:	81 e0       	ldi	r24, 0x01	; 1
    50b4:	9b 17       	cp	r25, r27
    50b6:	08 f0       	brcs	.+2      	; 0x50ba <fat_read_file+0x4a0>
    50b8:	80 e0       	ldi	r24, 0x00	; 0
    50ba:	79 0f       	add	r23, r25
    50bc:	a1 e0       	ldi	r26, 0x01	; 1
    50be:	79 17       	cp	r23, r25
    50c0:	08 f0       	brcs	.+2      	; 0x50c4 <fat_read_file+0x4aa>
    50c2:	a0 e0       	ldi	r26, 0x00	; 0
    50c4:	8a 2b       	or	r24, r26
    50c6:	a3 2d       	mov	r26, r3
    50c8:	a0 0f       	add	r26, r16
    50ca:	91 e0       	ldi	r25, 0x01	; 1
    50cc:	a3 15       	cp	r26, r3
    50ce:	08 f0       	brcs	.+2      	; 0x50d2 <fat_read_file+0x4b8>
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	8a 0f       	add	r24, r26
    50d4:	b1 e0       	ldi	r27, 0x01	; 1
    50d6:	8a 17       	cp	r24, r26
    50d8:	08 f0       	brcs	.+2      	; 0x50dc <fat_read_file+0x4c2>
    50da:	b0 e0       	ldi	r27, 0x00	; 0
    50dc:	9b 2b       	or	r25, r27
    50de:	71 0e       	add	r7, r17
    50e0:	d2 01       	movw	r26, r4
    50e2:	ed 91       	ld	r30, X+
    50e4:	fc 91       	ld	r31, X
    50e6:	26 2d       	mov	r18, r6
    50e8:	97 0d       	add	r25, r7
    50ea:	0d 85       	ldd	r16, Y+13	; 0x0d
    50ec:	1e 85       	ldd	r17, Y+14	; 0x0e
    50ee:	74 01       	movw	r14, r8
    50f0:	09 95       	icall
    50f2:	88 23       	and	r24, r24
    50f4:	09 f4       	brne	.+2      	; 0x50f8 <fat_read_file+0x4de>
    50f6:	af c0       	rjmp	.+350    	; 0x5256 <fat_read_file+0x63c>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
    50f8:	2d 81       	ldd	r18, Y+5	; 0x05
    50fa:	3e 81       	ldd	r19, Y+6	; 0x06
    50fc:	28 19       	sub	r18, r8
    50fe:	39 09       	sbc	r19, r9
    5100:	3e 83       	std	Y+6, r19	; 0x06
    5102:	2d 83       	std	Y+5, r18	; 0x05
        fd->pos += copy_length;
    5104:	94 01       	movw	r18, r8
    5106:	40 e0       	ldi	r20, 0x00	; 0
    5108:	50 e0       	ldi	r21, 0x00	; 0
    510a:	60 e0       	ldi	r22, 0x00	; 0
    510c:	70 e0       	ldi	r23, 0x00	; 0
    510e:	80 e0       	ldi	r24, 0x00	; 0
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	af 89       	ldd	r26, Y+23	; 0x17
    5114:	b8 8d       	ldd	r27, Y+24	; 0x18
    5116:	d3 96       	adiw	r26, 0x33	; 51
    5118:	1c 91       	ld	r17, X
    511a:	d3 97       	sbiw	r26, 0x33	; 51
    511c:	d4 96       	adiw	r26, 0x34	; 52
    511e:	dc 90       	ld	r13, X
    5120:	d4 97       	sbiw	r26, 0x34	; 52
    5122:	d5 96       	adiw	r26, 0x35	; 53
    5124:	bc 91       	ld	r27, X
    5126:	ef 89       	ldd	r30, Y+23	; 0x17
    5128:	f8 8d       	ldd	r31, Y+24	; 0x18
    512a:	06 a9       	ldd	r16, Z+54	; 0x36
    512c:	e7 a8       	ldd	r14, Z+55	; 0x37
    512e:	a0 ac       	ldd	r10, Z+56	; 0x38
    5130:	71 ac       	ldd	r7, Z+57	; 0x39
    5132:	f2 ac       	ldd	r15, Z+58	; 0x3a
    5134:	18 0d       	add	r17, r8
    5136:	f1 e0       	ldi	r31, 0x01	; 1
    5138:	18 15       	cp	r17, r8
    513a:	08 f0       	brcs	.+2      	; 0x513e <fat_read_file+0x524>
    513c:	f0 e0       	ldi	r31, 0x00	; 0
    513e:	ed 2d       	mov	r30, r13
    5140:	e3 0f       	add	r30, r19
    5142:	a1 e0       	ldi	r26, 0x01	; 1
    5144:	e3 17       	cp	r30, r19
    5146:	08 f0       	brcs	.+2      	; 0x514a <fat_read_file+0x530>
    5148:	a0 e0       	ldi	r26, 0x00	; 0
    514a:	bf 2e       	mov	r11, r31
    514c:	be 0e       	add	r11, r30
    514e:	f1 e0       	ldi	r31, 0x01	; 1
    5150:	be 16       	cp	r11, r30
    5152:	08 f0       	brcs	.+2      	; 0x5156 <fat_read_file+0x53c>
    5154:	f0 e0       	ldi	r31, 0x00	; 0
    5156:	af 2b       	or	r26, r31
    5158:	e4 2f       	mov	r30, r20
    515a:	eb 0f       	add	r30, r27
    515c:	b1 e0       	ldi	r27, 0x01	; 1
    515e:	e4 17       	cp	r30, r20
    5160:	08 f0       	brcs	.+2      	; 0x5164 <fat_read_file+0x54a>
    5162:	b0 e0       	ldi	r27, 0x00	; 0
    5164:	ca 2e       	mov	r12, r26
    5166:	ce 0e       	add	r12, r30
    5168:	f1 e0       	ldi	r31, 0x01	; 1
    516a:	ce 16       	cp	r12, r30
    516c:	08 f0       	brcs	.+2      	; 0x5170 <fat_read_file+0x556>
    516e:	f0 e0       	ldi	r31, 0x00	; 0
    5170:	bf 2b       	or	r27, r31
    5172:	e5 2f       	mov	r30, r21
    5174:	e0 0f       	add	r30, r16
    5176:	a1 e0       	ldi	r26, 0x01	; 1
    5178:	e5 17       	cp	r30, r21
    517a:	08 f0       	brcs	.+2      	; 0x517e <fat_read_file+0x564>
    517c:	a0 e0       	ldi	r26, 0x00	; 0
    517e:	db 2e       	mov	r13, r27
    5180:	de 0e       	add	r13, r30
    5182:	f1 e0       	ldi	r31, 0x01	; 1
    5184:	de 16       	cp	r13, r30
    5186:	08 f0       	brcs	.+2      	; 0x518a <fat_read_file+0x570>
    5188:	f0 e0       	ldi	r31, 0x00	; 0
    518a:	af 2b       	or	r26, r31
    518c:	e6 2f       	mov	r30, r22
    518e:	ee 0d       	add	r30, r14
    5190:	b1 e0       	ldi	r27, 0x01	; 1
    5192:	e6 17       	cp	r30, r22
    5194:	08 f0       	brcs	.+2      	; 0x5198 <fat_read_file+0x57e>
    5196:	b0 e0       	ldi	r27, 0x00	; 0
    5198:	ea 2e       	mov	r14, r26
    519a:	ee 0e       	add	r14, r30
    519c:	f1 e0       	ldi	r31, 0x01	; 1
    519e:	ee 16       	cp	r14, r30
    51a0:	08 f0       	brcs	.+2      	; 0x51a4 <fat_read_file+0x58a>
    51a2:	f0 e0       	ldi	r31, 0x00	; 0
    51a4:	bf 2b       	or	r27, r31
    51a6:	e7 2f       	mov	r30, r23
    51a8:	ea 0d       	add	r30, r10
    51aa:	a1 e0       	ldi	r26, 0x01	; 1
    51ac:	e7 17       	cp	r30, r23
    51ae:	08 f0       	brcs	.+2      	; 0x51b2 <fat_read_file+0x598>
    51b0:	a0 e0       	ldi	r26, 0x00	; 0
    51b2:	0b 2f       	mov	r16, r27
    51b4:	0e 0f       	add	r16, r30
    51b6:	f1 e0       	ldi	r31, 0x01	; 1
    51b8:	0e 17       	cp	r16, r30
    51ba:	08 f0       	brcs	.+2      	; 0x51be <fat_read_file+0x5a4>
    51bc:	f0 e0       	ldi	r31, 0x00	; 0
    51be:	af 2b       	or	r26, r31
    51c0:	e8 2f       	mov	r30, r24
    51c2:	e7 0d       	add	r30, r7
    51c4:	f1 e0       	ldi	r31, 0x01	; 1
    51c6:	e8 17       	cp	r30, r24
    51c8:	08 f0       	brcs	.+2      	; 0x51cc <fat_read_file+0x5b2>
    51ca:	f0 e0       	ldi	r31, 0x00	; 0
    51cc:	aa 2e       	mov	r10, r26
    51ce:	ae 0e       	add	r10, r30
    51d0:	a1 e0       	ldi	r26, 0x01	; 1
    51d2:	ae 16       	cp	r10, r30
    51d4:	08 f0       	brcs	.+2      	; 0x51d8 <fat_read_file+0x5be>
    51d6:	a0 e0       	ldi	r26, 0x00	; 0
    51d8:	fa 2b       	or	r31, r26
    51da:	f9 0e       	add	r15, r25
    51dc:	ff 0d       	add	r31, r15
    51de:	af 89       	ldd	r26, Y+23	; 0x17
    51e0:	b8 8d       	ldd	r27, Y+24	; 0x18
    51e2:	d3 96       	adiw	r26, 0x33	; 51
    51e4:	1c 93       	st	X, r17
    51e6:	d3 97       	sbiw	r26, 0x33	; 51
    51e8:	d4 96       	adiw	r26, 0x34	; 52
    51ea:	bc 92       	st	X, r11
    51ec:	d4 97       	sbiw	r26, 0x34	; 52
    51ee:	d5 96       	adiw	r26, 0x35	; 53
    51f0:	cc 92       	st	X, r12
    51f2:	d5 97       	sbiw	r26, 0x35	; 53
    51f4:	d6 96       	adiw	r26, 0x36	; 54
    51f6:	dc 92       	st	X, r13
    51f8:	d6 97       	sbiw	r26, 0x36	; 54
    51fa:	d7 96       	adiw	r26, 0x37	; 55
    51fc:	ec 92       	st	X, r14
    51fe:	d7 97       	sbiw	r26, 0x37	; 55
    5200:	d8 96       	adiw	r26, 0x38	; 56
    5202:	0c 93       	st	X, r16
    5204:	d8 97       	sbiw	r26, 0x38	; 56
    5206:	d9 96       	adiw	r26, 0x39	; 57
    5208:	ac 92       	st	X, r10
    520a:	d9 97       	sbiw	r26, 0x39	; 57
    520c:	da 96       	adiw	r26, 0x3a	; 58
    520e:	fc 93       	st	X, r31
    5210:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + copy_length >= cluster_size)
    5212:	8b 81       	ldd	r24, Y+3	; 0x03
    5214:	9c 81       	ldd	r25, Y+4	; 0x04
    5216:	88 0d       	add	r24, r8
    5218:	99 1d       	adc	r25, r9
    521a:	eb 85       	ldd	r30, Y+11	; 0x0b
    521c:	fc 85       	ldd	r31, Y+12	; 0x0c
    521e:	8e 17       	cp	r24, r30
    5220:	9f 07       	cpc	r25, r31
    5222:	10 f1       	brcs	.+68     	; 0x5268 <fat_read_file+0x64e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    5224:	8d 91       	ld	r24, X+
    5226:	9c 91       	ld	r25, X
    5228:	4f 81       	ldd	r20, Y+7	; 0x07
    522a:	58 85       	ldd	r21, Y+8	; 0x08
    522c:	69 85       	ldd	r22, Y+9	; 0x09
    522e:	7a 85       	ldd	r23, Y+10	; 0x0a
    5230:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <fat_get_next_cluster>
    5234:	6f 83       	std	Y+7, r22	; 0x07
    5236:	78 87       	std	Y+8, r23	; 0x08
    5238:	89 87       	std	Y+9, r24	; 0x09
    523a:	9a 87       	std	Y+10, r25	; 0x0a
    523c:	61 15       	cp	r22, r1
    523e:	71 05       	cpc	r23, r1
    5240:	81 05       	cpc	r24, r1
    5242:	91 05       	cpc	r25, r1
    5244:	79 f4       	brne	.+30     	; 0x5264 <fat_read_file+0x64a>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    5246:	af 89       	ldd	r26, Y+23	; 0x17
    5248:	b8 8d       	ldd	r27, Y+24	; 0x18
    524a:	db 96       	adiw	r26, 0x3b	; 59
    524c:	1d 92       	st	X+, r1
    524e:	1d 92       	st	X+, r1
    5250:	1d 92       	st	X+, r1
    5252:	1c 92       	st	X, r1
    5254:	de 97       	sbiw	r26, 0x3e	; 62
                return buffer_len - buffer_left;
    5256:	4f 85       	ldd	r20, Y+15	; 0x0f
    5258:	58 89       	ldd	r21, Y+16	; 0x10
    525a:	ed 81       	ldd	r30, Y+5	; 0x05
    525c:	fe 81       	ldd	r31, Y+6	; 0x06
    525e:	4e 1b       	sub	r20, r30
    5260:	5f 0b       	sbc	r21, r31
    5262:	21 c0       	rjmp	.+66     	; 0x52a6 <fat_read_file+0x68c>
    5264:	1c 82       	std	Y+4, r1	; 0x04
    5266:	1b 82       	std	Y+3, r1	; 0x03
            }
        }

        fd->pos_cluster = cluster_num;
    5268:	2f 81       	ldd	r18, Y+7	; 0x07
    526a:	38 85       	ldd	r19, Y+8	; 0x08
    526c:	49 85       	ldd	r20, Y+9	; 0x09
    526e:	5a 85       	ldd	r21, Y+10	; 0x0a
    5270:	af 89       	ldd	r26, Y+23	; 0x17
    5272:	b8 8d       	ldd	r27, Y+24	; 0x18
    5274:	db 96       	adiw	r26, 0x3b	; 59
    5276:	2d 93       	st	X+, r18
    5278:	3d 93       	st	X+, r19
    527a:	4d 93       	st	X+, r20
    527c:	5c 93       	st	X, r21
    527e:	de 97       	sbiw	r26, 0x3e	; 62

    } while(buffer_left > 0); /* check if we are done */
    5280:	ed 81       	ldd	r30, Y+5	; 0x05
    5282:	fe 81       	ldd	r31, Y+6	; 0x06
    5284:	ef 2b       	or	r30, r31
    5286:	39 f0       	breq	.+14     	; 0x5296 <fat_read_file+0x67c>
        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
    5288:	2d 85       	ldd	r18, Y+13	; 0x0d
    528a:	3e 85       	ldd	r19, Y+14	; 0x0e
    528c:	28 0d       	add	r18, r8
    528e:	39 1d       	adc	r19, r9
    5290:	3e 87       	std	Y+14, r19	; 0x0e
    5292:	2d 87       	std	Y+13, r18	; 0x0d
    5294:	1e ce       	rjmp	.-964    	; 0x4ed2 <fat_read_file+0x2b8>

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
    5296:	4f 85       	ldd	r20, Y+15	; 0x0f
    5298:	58 89       	ldd	r21, Y+16	; 0x10
    529a:	05 c0       	rjmp	.+10     	; 0x52a6 <fat_read_file+0x68c>
    529c:	4f ef       	ldi	r20, 0xFF	; 255
    529e:	5f ef       	ldi	r21, 0xFF	; 255
    52a0:	02 c0       	rjmp	.+4      	; 0x52a6 <fat_read_file+0x68c>
    52a2:	40 e0       	ldi	r20, 0x00	; 0
    52a4:	50 e0       	ldi	r21, 0x00	; 0
}
    52a6:	ca 01       	movw	r24, r20
    52a8:	68 96       	adiw	r28, 0x18	; 24
    52aa:	0f b6       	in	r0, 0x3f	; 63
    52ac:	f8 94       	cli
    52ae:	de bf       	out	0x3e, r29	; 62
    52b0:	0f be       	out	0x3f, r0	; 63
    52b2:	cd bf       	out	0x3d, r28	; 61
    52b4:	cf 91       	pop	r28
    52b6:	df 91       	pop	r29
    52b8:	1f 91       	pop	r17
    52ba:	0f 91       	pop	r16
    52bc:	ff 90       	pop	r15
    52be:	ef 90       	pop	r14
    52c0:	df 90       	pop	r13
    52c2:	cf 90       	pop	r12
    52c4:	bf 90       	pop	r11
    52c6:	af 90       	pop	r10
    52c8:	9f 90       	pop	r9
    52ca:	8f 90       	pop	r8
    52cc:	7f 90       	pop	r7
    52ce:	6f 90       	pop	r6
    52d0:	5f 90       	pop	r5
    52d2:	4f 90       	pop	r4
    52d4:	3f 90       	pop	r3
    52d6:	2f 90       	pop	r2
    52d8:	08 95       	ret

000052da <fat_close_dir>:
 *
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    52da:	fc 01       	movw	r30, r24
    if(dd)
    52dc:	00 97       	sbiw	r24, 0x00	; 0
    52de:	11 f0       	breq	.+4      	; 0x52e4 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    52e0:	11 82       	std	Z+1, r1	; 0x01
    52e2:	10 82       	st	Z, r1
    52e4:	08 95       	ret

000052e6 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    52e6:	fc 01       	movw	r30, r24
    if(!dd)
    52e8:	00 97       	sbiw	r24, 0x00	; 0
    52ea:	11 f4       	brne	.+4      	; 0x52f0 <fat_reset_dir+0xa>
    52ec:	80 e0       	ldi	r24, 0x00	; 0
    52ee:	08 95       	ret
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    52f0:	83 a1       	ldd	r24, Z+35	; 0x23
    52f2:	94 a1       	ldd	r25, Z+36	; 0x24
    52f4:	a5 a1       	ldd	r26, Z+37	; 0x25
    52f6:	b6 a1       	ldd	r27, Z+38	; 0x26
    52f8:	83 ab       	std	Z+51, r24	; 0x33
    52fa:	94 ab       	std	Z+52, r25	; 0x34
    52fc:	a5 ab       	std	Z+53, r26	; 0x35
    52fe:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    5300:	10 ae       	std	Z+56, r1	; 0x38
    5302:	17 aa       	std	Z+55, r1	; 0x37
    5304:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}
    5306:	08 95       	ret

00005308 <fat_dir_entry_read_callback>:
/**
 * \ingroup fat_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    5308:	cf 92       	push	r12
    530a:	df 92       	push	r13
    530c:	ef 92       	push	r14
    530e:	ff 92       	push	r15
    5310:	0f 93       	push	r16
    5312:	1f 93       	push	r17
    5314:	cf 93       	push	r28
    5316:	df 93       	push	r29
    5318:	6c 01       	movw	r12, r24
    531a:	fb 01       	movw	r30, r22
    struct fat_read_dir_callback_arg* arg = p;
    531c:	b7 01       	movw	r22, r14
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    531e:	d7 01       	movw	r26, r14
    5320:	cd 91       	ld	r28, X+
    5322:	dc 91       	ld	r29, X
    5324:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    5326:	12 96       	adiw	r26, 0x02	; 2
    5328:	8d 91       	ld	r24, X+
    532a:	9c 91       	ld	r25, X
    532c:	13 97       	sbiw	r26, 0x03	; 3
    532e:	80 96       	adiw	r24, 0x20	; 32
    5330:	13 96       	adiw	r26, 0x03	; 3
    5332:	9c 93       	st	X, r25
    5334:	8e 93       	st	-X, r24
    5336:	12 97       	sbiw	r26, 0x02	; 2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    5338:	d6 01       	movw	r26, r12
    533a:	8c 91       	ld	r24, X
    533c:	85 3e       	cpi	r24, 0xE5	; 229
    533e:	09 f4       	brne	.+2      	; 0x5342 <fat_dir_entry_read_callback+0x3a>
    5340:	c3 c0       	rjmp	.+390    	; 0x54c8 <fat_dir_entry_read_callback+0x1c0>
    5342:	88 23       	and	r24, r24
    5344:	09 f4       	brne	.+2      	; 0x5348 <fat_dir_entry_read_callback+0x40>
    5346:	c0 c0       	rjmp	.+384    	; 0x54c8 <fat_dir_entry_read_callback+0x1c0>
        return 1;

    if(!dir_entry->entry_offset)
    5348:	89 a5       	ldd	r24, Y+41	; 0x29
    534a:	9a a5       	ldd	r25, Y+42	; 0x2a
    534c:	89 2b       	or	r24, r25
    534e:	9b a5       	ldd	r25, Y+43	; 0x2b
    5350:	89 2b       	or	r24, r25
    5352:	9c a5       	ldd	r25, Y+44	; 0x2c
    5354:	89 2b       	or	r24, r25
    5356:	9d a5       	ldd	r25, Y+45	; 0x2d
    5358:	89 2b       	or	r24, r25
    535a:	9e a5       	ldd	r25, Y+46	; 0x2e
    535c:	89 2b       	or	r24, r25
    535e:	9f a5       	ldd	r25, Y+47	; 0x2f
    5360:	89 2b       	or	r24, r25
    5362:	98 a9       	ldd	r25, Y+48	; 0x30
    5364:	89 2b       	or	r24, r25
    5366:	41 f4       	brne	.+16     	; 0x5378 <fat_dir_entry_read_callback+0x70>
        dir_entry->entry_offset = offset;
    5368:	09 a7       	std	Y+41, r16	; 0x29
    536a:	1a a7       	std	Y+42, r17	; 0x2a
    536c:	2b a7       	std	Y+43, r18	; 0x2b
    536e:	3c a7       	std	Y+44, r19	; 0x2c
    5370:	4d a7       	std	Y+45, r20	; 0x2d
    5372:	5e a7       	std	Y+46, r21	; 0x2e
    5374:	ef a7       	std	Y+47, r30	; 0x2f
    5376:	f8 ab       	std	Y+48, r31	; 0x30
 * \returns 0 on failure, 1 on success and 2 if the
 *          directory entry is complete.
 */
uint8_t fat_interpret_dir_entry(struct fat_dir_entry_struct* dir_entry, const uint8_t* raw_entry)
{
    if(!dir_entry || !raw_entry || !raw_entry[0])
    5378:	20 97       	sbiw	r28, 0x00	; 0
    537a:	09 f4       	brne	.+2      	; 0x537e <fat_dir_entry_read_callback+0x76>
    537c:	a7 c0       	rjmp	.+334    	; 0x54cc <fat_dir_entry_read_callback+0x1c4>
    537e:	c1 14       	cp	r12, r1
    5380:	d1 04       	cpc	r13, r1
    5382:	09 f4       	brne	.+2      	; 0x5386 <fat_dir_entry_read_callback+0x7e>
    5384:	a3 c0       	rjmp	.+326    	; 0x54cc <fat_dir_entry_read_callback+0x1c4>
    5386:	f6 01       	movw	r30, r12
    5388:	90 81       	ld	r25, Z
    538a:	99 23       	and	r25, r25
    538c:	09 f4       	brne	.+2      	; 0x5390 <fat_dir_entry_read_callback+0x88>
    538e:	9e c0       	rjmp	.+316    	; 0x54cc <fat_dir_entry_read_callback+0x1c4>
        return 0;

    char* long_name = dir_entry->long_name;
    if(raw_entry[11] == 0x0f)
    5390:	83 85       	ldd	r24, Z+11	; 0x0b
    5392:	8f 30       	cpi	r24, 0x0F	; 15
    5394:	29 f5       	brne	.+74     	; 0x53e0 <fat_dir_entry_read_callback+0xd8>
    {
        /* Lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
    5396:	89 2f       	mov	r24, r25
    5398:	90 e0       	ldi	r25, 0x00	; 0
    539a:	8f 73       	andi	r24, 0x3F	; 63
    539c:	90 70       	andi	r25, 0x00	; 0
    539e:	2d e0       	ldi	r18, 0x0D	; 13
    53a0:	30 e0       	ldi	r19, 0x00	; 0
    53a2:	82 9f       	mul	r24, r18
    53a4:	a0 01       	movw	r20, r0
    53a6:	83 9f       	mul	r24, r19
    53a8:	50 0d       	add	r21, r0
    53aa:	92 9f       	mul	r25, r18
    53ac:	50 0d       	add	r21, r0
    53ae:	11 24       	eor	r1, r1
    53b0:	4d 50       	subi	r20, 0x0D	; 13
    53b2:	50 40       	sbci	r21, 0x00	; 0
    53b4:	a7 ea       	ldi	r26, 0xA7	; 167
    53b6:	b1 e0       	ldi	r27, 0x01	; 1
    53b8:	c4 0f       	add	r28, r20
    53ba:	d5 1f       	adc	r29, r21
    53bc:	0d c0       	rjmp	.+26     	; 0x53d8 <fat_dir_entry_read_callback+0xd0>
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = raw_entry[char_mapping[i]];
    53be:	8d 91       	ld	r24, X+
    53c0:	f6 01       	movw	r30, r12
    53c2:	e8 0f       	add	r30, r24
    53c4:	f1 1d       	adc	r31, r1
    53c6:	80 81       	ld	r24, Z
    53c8:	89 93       	st	Y+, r24
    53ca:	4f 5f       	subi	r20, 0xFF	; 255
    53cc:	5f 4f       	sbci	r21, 0xFF	; 255
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    53ce:	f1 e0       	ldi	r31, 0x01	; 1
    53d0:	a4 3b       	cpi	r26, 0xB4	; 180
    53d2:	bf 07       	cpc	r27, r31
    53d4:	09 f4       	brne	.+2      	; 0x53d8 <fat_dir_entry_read_callback+0xd0>
    53d6:	78 c0       	rjmp	.+240    	; 0x54c8 <fat_dir_entry_read_callback+0x1c0>
    53d8:	4f 31       	cpi	r20, 0x1F	; 31
    53da:	51 05       	cpc	r21, r1
    53dc:	80 f3       	brcs	.-32     	; 0x53be <fat_dir_entry_read_callback+0xb6>
    53de:	74 c0       	rjmp	.+232    	; 0x54c8 <fat_dir_entry_read_callback+0x1c0>
        return 1;
    }
    else
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
    53e0:	88 81       	ld	r24, Y
    53e2:	88 23       	and	r24, r24
    53e4:	09 f0       	breq	.+2      	; 0x53e8 <fat_dir_entry_read_callback+0xe0>
    53e6:	4d c0       	rjmp	.+154    	; 0x5482 <fat_dir_entry_read_callback+0x17a>
    53e8:	a6 01       	movw	r20, r12
    53ea:	de 01       	movw	r26, r28
    53ec:	86 01       	movw	r16, r12
    53ee:	20 e0       	ldi	r18, 0x00	; 0
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(raw_entry[i] == ' ')
    53f0:	f8 01       	movw	r30, r16
    53f2:	90 81       	ld	r25, Z
    53f4:	90 32       	cpi	r25, 0x20	; 32
    53f6:	99 f0       	breq	.+38     	; 0x541e <fat_dir_entry_read_callback+0x116>
                    break;
                long_name[i] = raw_entry[i];
    53f8:	9c 93       	st	X, r25
                /* Windows NT and later versions do not store LFN entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
    53fa:	f6 01       	movw	r30, r12
    53fc:	84 85       	ldd	r24, Z+12	; 0x0c
    53fe:	83 ff       	sbrs	r24, 3
    5400:	08 c0       	rjmp	.+16     	; 0x5412 <fat_dir_entry_read_callback+0x10a>
    5402:	f8 01       	movw	r30, r16
    5404:	80 81       	ld	r24, Z
    5406:	81 34       	cpi	r24, 0x41	; 65
    5408:	20 f0       	brcs	.+8      	; 0x5412 <fat_dir_entry_read_callback+0x10a>
    540a:	8b 35       	cpi	r24, 0x5B	; 91
    540c:	10 f4       	brcc	.+4      	; 0x5412 <fat_dir_entry_read_callback+0x10a>
                    long_name[i] += 'a' - 'A';
    540e:	90 5e       	subi	r25, 0xE0	; 224
    5410:	9c 93       	st	X, r25
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
    5412:	2f 5f       	subi	r18, 0xFF	; 255
    5414:	0f 5f       	subi	r16, 0xFF	; 255
    5416:	1f 4f       	sbci	r17, 0xFF	; 255
    5418:	11 96       	adiw	r26, 0x01	; 1
    541a:	28 30       	cpi	r18, 0x08	; 8
    541c:	49 f7       	brne	.-46     	; 0x53f0 <fat_dir_entry_read_callback+0xe8>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    541e:	88 81       	ld	r24, Y
    5420:	85 30       	cpi	r24, 0x05	; 5
    5422:	11 f4       	brne	.+4      	; 0x5428 <fat_dir_entry_read_callback+0x120>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    5424:	85 ee       	ldi	r24, 0xE5	; 229
    5426:	88 83       	st	Y, r24

            if(raw_entry[8] != ' ')
    5428:	d6 01       	movw	r26, r12
    542a:	18 96       	adiw	r26, 0x08	; 8
    542c:	8c 91       	ld	r24, X
    542e:	80 32       	cpi	r24, 0x20	; 32
    5430:	21 f1       	breq	.+72     	; 0x547a <fat_dir_entry_read_callback+0x172>
            {
                long_name[i++] = '.';
    5432:	fe 01       	movw	r30, r28
    5434:	e2 0f       	add	r30, r18
    5436:	f1 1d       	adc	r31, r1
    5438:	8e e2       	ldi	r24, 0x2E	; 46
    543a:	80 83       	st	Z, r24
    543c:	32 2f       	mov	r19, r18
    543e:	3f 5f       	subi	r19, 0xFF	; 255

                uint8_t j = 8;
                for(; j < 11; ++j)
    5440:	2c 5f       	subi	r18, 0xFC	; 252
                {
                    if(raw_entry[j] == ' ')
    5442:	fa 01       	movw	r30, r20
    5444:	90 85       	ldd	r25, Z+8	; 0x08
    5446:	90 32       	cpi	r25, 0x20	; 32
    5448:	b9 f0       	breq	.+46     	; 0x5478 <fat_dir_entry_read_callback+0x170>
                        break;
                    long_name[i] = raw_entry[j];
    544a:	fe 01       	movw	r30, r28
    544c:	e3 0f       	add	r30, r19
    544e:	f1 1d       	adc	r31, r1
    5450:	90 83       	st	Z, r25

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((raw_entry[12] & 0x10) && raw_entry[j] >= 'A' && raw_entry[j] <= 'Z')
    5452:	d6 01       	movw	r26, r12
    5454:	1c 96       	adiw	r26, 0x0c	; 12
    5456:	8c 91       	ld	r24, X
    5458:	84 ff       	sbrs	r24, 4
    545a:	09 c0       	rjmp	.+18     	; 0x546e <fat_dir_entry_read_callback+0x166>
    545c:	da 01       	movw	r26, r20
    545e:	18 96       	adiw	r26, 0x08	; 8
    5460:	8c 91       	ld	r24, X
    5462:	81 34       	cpi	r24, 0x41	; 65
    5464:	20 f0       	brcs	.+8      	; 0x546e <fat_dir_entry_read_callback+0x166>
    5466:	8b 35       	cpi	r24, 0x5B	; 91
    5468:	10 f4       	brcc	.+4      	; 0x546e <fat_dir_entry_read_callback+0x166>
                        long_name[i] += 'a' - 'A';
    546a:	90 5e       	subi	r25, 0xE0	; 224
    546c:	90 83       	st	Z, r25

                    ++i;
    546e:	3f 5f       	subi	r19, 0xFF	; 255
    5470:	4f 5f       	subi	r20, 0xFF	; 255
    5472:	5f 4f       	sbci	r21, 0xFF	; 255
            if(raw_entry[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    5474:	32 17       	cp	r19, r18
    5476:	29 f7       	brne	.-54     	; 0x5442 <fat_dir_entry_read_callback+0x13a>
    5478:	23 2f       	mov	r18, r19

                    ++i;
                }
            } 

            long_name[i] = '\0';
    547a:	fe 01       	movw	r30, r28
    547c:	e2 0f       	add	r30, r18
    547e:	f1 1d       	adc	r31, r1
    5480:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
    5482:	f6 01       	movw	r30, r12
    5484:	83 85       	ldd	r24, Z+11	; 0x0b
    5486:	88 a3       	std	Y+32, r24	; 0x20
        dir_entry->cluster = ltoh16(*((uint16_t*) &raw_entry[26]));
    5488:	22 8d       	ldd	r18, Z+26	; 0x1a
    548a:	33 8d       	ldd	r19, Z+27	; 0x1b
    548c:	40 e0       	ldi	r20, 0x00	; 0
    548e:	50 e0       	ldi	r21, 0x00	; 0
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &raw_entry[20]))) << 16;
    5490:	84 89       	ldd	r24, Z+20	; 0x14
    5492:	95 89       	ldd	r25, Z+21	; 0x15
    5494:	a0 e0       	ldi	r26, 0x00	; 0
    5496:	b0 e0       	ldi	r27, 0x00	; 0
    5498:	dc 01       	movw	r26, r24
    549a:	99 27       	eor	r25, r25
    549c:	88 27       	eor	r24, r24
    549e:	82 2b       	or	r24, r18
    54a0:	93 2b       	or	r25, r19
    54a2:	a4 2b       	or	r26, r20
    54a4:	b5 2b       	or	r27, r21
    54a6:	89 a3       	std	Y+33, r24	; 0x21
    54a8:	9a a3       	std	Y+34, r25	; 0x22
    54aa:	ab a3       	std	Y+35, r26	; 0x23
    54ac:	bc a3       	std	Y+36, r27	; 0x24
#endif
        dir_entry->file_size = ltoh32(*((uint32_t*) &raw_entry[28]));
    54ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    54b0:	95 8d       	ldd	r25, Z+29	; 0x1d
    54b2:	a6 8d       	ldd	r26, Z+30	; 0x1e
    54b4:	b7 8d       	ldd	r27, Z+31	; 0x1f
    54b6:	8d a3       	std	Y+37, r24	; 0x25
    54b8:	9e a3       	std	Y+38, r25	; 0x26
    54ba:	af a3       	std	Y+39, r26	; 0x27
    54bc:	b8 a7       	std	Y+40, r27	; 0x28
        {
            return 1;
        }
        case 2: /* directory entry complete, finish */
        {
            arg->finished = 1;
    54be:	81 e0       	ldi	r24, 0x01	; 1
    54c0:	db 01       	movw	r26, r22
    54c2:	14 96       	adiw	r26, 0x04	; 4
    54c4:	8c 93       	st	X, r24
    54c6:	02 c0       	rjmp	.+4      	; 0x54cc <fat_dir_entry_read_callback+0x1c4>
            return 0;
    54c8:	81 e0       	ldi	r24, 0x01	; 1
    54ca:	01 c0       	rjmp	.+2      	; 0x54ce <fat_dir_entry_read_callback+0x1c6>
    54cc:	80 e0       	ldi	r24, 0x00	; 0
        }
    }

    return 0;
}
    54ce:	df 91       	pop	r29
    54d0:	cf 91       	pop	r28
    54d2:	1f 91       	pop	r17
    54d4:	0f 91       	pop	r16
    54d6:	ff 90       	pop	r15
    54d8:	ef 90       	pop	r14
    54da:	df 90       	pop	r13
    54dc:	cf 90       	pop	r12
    54de:	08 95       	ret

000054e0 <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    54e0:	2f 92       	push	r2
    54e2:	3f 92       	push	r3
    54e4:	4f 92       	push	r4
    54e6:	5f 92       	push	r5
    54e8:	6f 92       	push	r6
    54ea:	7f 92       	push	r7
    54ec:	8f 92       	push	r8
    54ee:	9f 92       	push	r9
    54f0:	af 92       	push	r10
    54f2:	bf 92       	push	r11
    54f4:	cf 92       	push	r12
    54f6:	df 92       	push	r13
    54f8:	ef 92       	push	r14
    54fa:	ff 92       	push	r15
    54fc:	0f 93       	push	r16
    54fe:	1f 93       	push	r17
    5500:	df 93       	push	r29
    5502:	cf 93       	push	r28
    5504:	cd b7       	in	r28, 0x3d	; 61
    5506:	de b7       	in	r29, 0x3e	; 62
    5508:	2c 97       	sbiw	r28, 0x0c	; 12
    550a:	0f b6       	in	r0, 0x3f	; 63
    550c:	f8 94       	cli
    550e:	de bf       	out	0x3e, r29	; 62
    5510:	0f be       	out	0x3f, r0	; 63
    5512:	cd bf       	out	0x3d, r28	; 61
    5514:	3c 01       	movw	r6, r24
    5516:	6b 01       	movw	r12, r22
    if(!fs || !dir_entry)
    5518:	00 97       	sbiw	r24, 0x00	; 0
    551a:	09 f4       	brne	.+2      	; 0x551e <fat_delete_file+0x3e>
    551c:	9c c0       	rjmp	.+312    	; 0x5656 <fat_delete_file+0x176>
    551e:	61 15       	cp	r22, r1
    5520:	71 05       	cpc	r23, r1
    5522:	09 f4       	brne	.+2      	; 0x5526 <fat_delete_file+0x46>
    5524:	98 c0       	rjmp	.+304    	; 0x5656 <fat_delete_file+0x176>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    5526:	db 01       	movw	r26, r22
    5528:	99 96       	adiw	r26, 0x29	; 41
    552a:	bc 90       	ld	r11, X
    552c:	99 97       	sbiw	r26, 0x29	; 41
    552e:	9a 96       	adiw	r26, 0x2a	; 42
    5530:	ac 90       	ld	r10, X
    5532:	9a 97       	sbiw	r26, 0x2a	; 42
    5534:	9b 96       	adiw	r26, 0x2b	; 43
    5536:	9c 90       	ld	r9, X
    5538:	9b 97       	sbiw	r26, 0x2b	; 43
    553a:	9c 96       	adiw	r26, 0x2c	; 44
    553c:	8c 90       	ld	r8, X
    553e:	9c 97       	sbiw	r26, 0x2c	; 44
    5540:	9d 96       	adiw	r26, 0x2d	; 45
    5542:	5c 90       	ld	r5, X
    5544:	9d 97       	sbiw	r26, 0x2d	; 45
    5546:	9e 96       	adiw	r26, 0x2e	; 46
    5548:	4c 90       	ld	r4, X
    554a:	9e 97       	sbiw	r26, 0x2e	; 46
    554c:	9f 96       	adiw	r26, 0x2f	; 47
    554e:	3c 90       	ld	r3, X
    5550:	9f 97       	sbiw	r26, 0x2f	; 47
    5552:	d0 96       	adiw	r26, 0x30	; 48
    5554:	2c 90       	ld	r2, X
    if(!dir_entry_offset)
    5556:	8b 2d       	mov	r24, r11
    5558:	8a 29       	or	r24, r10
    555a:	89 29       	or	r24, r9
    555c:	88 29       	or	r24, r8
    555e:	85 29       	or	r24, r5
    5560:	84 29       	or	r24, r4
    5562:	83 29       	or	r24, r3
    5564:	82 29       	or	r24, r2
    5566:	09 f4       	brne	.+2      	; 0x556a <fat_delete_file+0x8a>
    5568:	76 c0       	rjmp	.+236    	; 0x5656 <fat_delete_file+0x176>

    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    556a:	d3 01       	movw	r26, r6
    556c:	ed 91       	ld	r30, X+
    556e:	fc 91       	ld	r31, X
    5570:	01 90       	ld	r0, Z+
    5572:	f0 81       	ld	r31, Z
    5574:	e0 2d       	mov	r30, r0
    5576:	2b 2d       	mov	r18, r11
    5578:	3a 2d       	mov	r19, r10
    557a:	49 2d       	mov	r20, r9
    557c:	58 2d       	mov	r21, r8
    557e:	65 2d       	mov	r22, r5
    5580:	74 2d       	mov	r23, r4
    5582:	83 2d       	mov	r24, r3
    5584:	92 2d       	mov	r25, r2
    5586:	8e 01       	movw	r16, r28
    5588:	0f 5f       	subi	r16, 0xFF	; 255
    558a:	1f 4f       	sbci	r17, 0xFF	; 255
    558c:	ac e0       	ldi	r26, 0x0C	; 12
    558e:	ea 2e       	mov	r14, r26
    5590:	f1 2c       	mov	r15, r1
    5592:	09 95       	icall
    5594:	88 23       	and	r24, r24
    5596:	09 f4       	brne	.+2      	; 0x559a <fat_delete_file+0xba>
    5598:	5e c0       	rjmp	.+188    	; 0x5656 <fat_delete_file+0x176>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    559a:	b5 ee       	ldi	r27, 0xE5	; 229
    559c:	b9 83       	std	Y+1, r27	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    559e:	d3 01       	movw	r26, r6
    55a0:	ed 91       	ld	r30, X+
    55a2:	fc 91       	ld	r31, X
    55a4:	04 80       	ldd	r0, Z+4	; 0x04
    55a6:	f5 81       	ldd	r31, Z+5	; 0x05
    55a8:	e0 2d       	mov	r30, r0
    55aa:	2b 2d       	mov	r18, r11
    55ac:	3a 2d       	mov	r19, r10
    55ae:	49 2d       	mov	r20, r9
    55b0:	58 2d       	mov	r21, r8
    55b2:	65 2d       	mov	r22, r5
    55b4:	74 2d       	mov	r23, r4
    55b6:	83 2d       	mov	r24, r3
    55b8:	92 2d       	mov	r25, r2
    55ba:	8e 01       	movw	r16, r28
    55bc:	0f 5f       	subi	r16, 0xFF	; 255
    55be:	1f 4f       	sbci	r17, 0xFF	; 255
    55c0:	09 95       	icall
    55c2:	88 23       	and	r24, r24
    55c4:	09 f4       	brne	.+2      	; 0x55c8 <fat_delete_file+0xe8>
    55c6:	47 c0       	rjmp	.+142    	; 0x5656 <fat_delete_file+0x176>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    55c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    55ca:	8f 30       	cpi	r24, 0x0F	; 15
    55cc:	79 f5       	brne	.+94     	; 0x562c <fat_delete_file+0x14c>
            break;

        dir_entry_offset += 32;
    55ce:	7b 2d       	mov	r23, r11
    55d0:	70 5e       	subi	r23, 0xE0	; 224
    55d2:	81 e0       	ldi	r24, 0x01	; 1
    55d4:	7b 15       	cp	r23, r11
    55d6:	08 f0       	brcs	.+2      	; 0x55da <fat_delete_file+0xfa>
    55d8:	80 e0       	ldi	r24, 0x00	; 0
    55da:	68 2f       	mov	r22, r24
    55dc:	6a 0d       	add	r22, r10
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	6a 15       	cp	r22, r10
    55e2:	08 f0       	brcs	.+2      	; 0x55e6 <fat_delete_file+0x106>
    55e4:	80 e0       	ldi	r24, 0x00	; 0
    55e6:	58 2f       	mov	r21, r24
    55e8:	59 0d       	add	r21, r9
    55ea:	81 e0       	ldi	r24, 0x01	; 1
    55ec:	59 15       	cp	r21, r9
    55ee:	08 f0       	brcs	.+2      	; 0x55f2 <fat_delete_file+0x112>
    55f0:	80 e0       	ldi	r24, 0x00	; 0
    55f2:	48 2f       	mov	r20, r24
    55f4:	48 0d       	add	r20, r8
    55f6:	81 e0       	ldi	r24, 0x01	; 1
    55f8:	48 15       	cp	r20, r8
    55fa:	08 f0       	brcs	.+2      	; 0x55fe <fat_delete_file+0x11e>
    55fc:	80 e0       	ldi	r24, 0x00	; 0
    55fe:	38 2f       	mov	r19, r24
    5600:	35 0d       	add	r19, r5
    5602:	81 e0       	ldi	r24, 0x01	; 1
    5604:	35 15       	cp	r19, r5
    5606:	08 f0       	brcs	.+2      	; 0x560a <fat_delete_file+0x12a>
    5608:	80 e0       	ldi	r24, 0x00	; 0
    560a:	28 2f       	mov	r18, r24
    560c:	24 0d       	add	r18, r4
    560e:	81 e0       	ldi	r24, 0x01	; 1
    5610:	24 15       	cp	r18, r4
    5612:	08 f0       	brcs	.+2      	; 0x5616 <fat_delete_file+0x136>
    5614:	80 e0       	ldi	r24, 0x00	; 0
    5616:	83 0d       	add	r24, r3
    5618:	91 e0       	ldi	r25, 0x01	; 1
    561a:	83 15       	cp	r24, r3
    561c:	08 f0       	brcs	.+2      	; 0x5620 <fat_delete_file+0x140>
    561e:	90 e0       	ldi	r25, 0x00	; 0
    5620:	5b 01       	movw	r10, r22
    5622:	4a 01       	movw	r8, r20
    5624:	29 01       	movw	r4, r18
    5626:	38 2e       	mov	r3, r24
    5628:	29 0e       	add	r2, r25
    562a:	9f cf       	rjmp	.-194    	; 0x556a <fat_delete_file+0x8a>
    }

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    562c:	f6 01       	movw	r30, r12
    562e:	41 a1       	ldd	r20, Z+33	; 0x21
    5630:	52 a1       	ldd	r21, Z+34	; 0x22
    5632:	63 a1       	ldd	r22, Z+35	; 0x23
    5634:	74 a1       	ldd	r23, Z+36	; 0x24
    5636:	41 15       	cp	r20, r1
    5638:	51 05       	cpc	r21, r1
    563a:	61 05       	cpc	r22, r1
    563c:	71 05       	cpc	r23, r1
    563e:	39 f0       	breq	.+14     	; 0x564e <fat_delete_file+0x16e>
    5640:	c3 01       	movw	r24, r6
    5642:	0e 94 1b 21 	call	0x4236	; 0x4236 <fat_free_clusters>
    5646:	20 e0       	ldi	r18, 0x00	; 0
    5648:	30 e0       	ldi	r19, 0x00	; 0
    564a:	88 23       	and	r24, r24
    564c:	11 f0       	breq	.+4      	; 0x5652 <fat_delete_file+0x172>
    564e:	21 e0       	ldi	r18, 0x01	; 1
    5650:	30 e0       	ldi	r19, 0x00	; 0
    5652:	82 2f       	mov	r24, r18
    5654:	01 c0       	rjmp	.+2      	; 0x5658 <fat_delete_file+0x178>
    5656:	80 e0       	ldi	r24, 0x00	; 0
}
    5658:	2c 96       	adiw	r28, 0x0c	; 12
    565a:	0f b6       	in	r0, 0x3f	; 63
    565c:	f8 94       	cli
    565e:	de bf       	out	0x3e, r29	; 62
    5660:	0f be       	out	0x3f, r0	; 63
    5662:	cd bf       	out	0x3d, r28	; 61
    5664:	cf 91       	pop	r28
    5666:	df 91       	pop	r29
    5668:	1f 91       	pop	r17
    566a:	0f 91       	pop	r16
    566c:	ff 90       	pop	r15
    566e:	ef 90       	pop	r14
    5670:	df 90       	pop	r13
    5672:	cf 90       	pop	r12
    5674:	bf 90       	pop	r11
    5676:	af 90       	pop	r10
    5678:	9f 90       	pop	r9
    567a:	8f 90       	pop	r8
    567c:	7f 90       	pop	r7
    567e:	6f 90       	pop	r6
    5680:	5f 90       	pop	r5
    5682:	4f 90       	pop	r4
    5684:	3f 90       	pop	r3
    5686:	2f 90       	pop	r2
    5688:	08 95       	ret

0000568a <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    568a:	2f 92       	push	r2
    568c:	3f 92       	push	r3
    568e:	4f 92       	push	r4
    5690:	5f 92       	push	r5
    5692:	6f 92       	push	r6
    5694:	7f 92       	push	r7
    5696:	8f 92       	push	r8
    5698:	9f 92       	push	r9
    569a:	af 92       	push	r10
    569c:	bf 92       	push	r11
    569e:	cf 92       	push	r12
    56a0:	df 92       	push	r13
    56a2:	ef 92       	push	r14
    56a4:	ff 92       	push	r15
    56a6:	0f 93       	push	r16
    56a8:	1f 93       	push	r17
    56aa:	dc 01       	movw	r26, r24
    if(!fs)
    56ac:	00 97       	sbiw	r24, 0x00	; 0
    56ae:	49 f4       	brne	.+18     	; 0x56c2 <fat_get_fs_size+0x38>
    56b0:	20 e0       	ldi	r18, 0x00	; 0
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	40 e0       	ldi	r20, 0x00	; 0
    56b6:	50 e0       	ldi	r21, 0x00	; 0
    56b8:	60 e0       	ldi	r22, 0x00	; 0
    56ba:	70 e0       	ldi	r23, 0x00	; 0
    56bc:	80 e0       	ldi	r24, 0x00	; 0
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	30 c0       	rjmp	.+96     	; 0x5722 <fat_get_fs_size+0x98>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    56c2:	ed 91       	ld	r30, X+
    56c4:	fc 91       	ld	r31, X
    56c6:	11 97       	sbiw	r26, 0x01	; 1
    56c8:	80 85       	ldd	r24, Z+8	; 0x08
    56ca:	52 96       	adiw	r26, 0x12	; 18
    56cc:	2d 91       	ld	r18, X+
    56ce:	3d 91       	ld	r19, X+
    56d0:	4d 91       	ld	r20, X+
    56d2:	5c 91       	ld	r21, X
    56d4:	55 97       	sbiw	r26, 0x15	; 21
    56d6:	58 96       	adiw	r26, 0x18	; 24
    56d8:	ed 91       	ld	r30, X+
    56da:	fc 91       	ld	r31, X
    56dc:	59 97       	sbiw	r26, 0x19	; 25
    56de:	8b 30       	cpi	r24, 0x0B	; 11
    56e0:	41 f4       	brne	.+16     	; 0x56f2 <fat_get_fs_size+0x68>
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    56e2:	12 e0       	ldi	r17, 0x02	; 2
    56e4:	56 95       	lsr	r21
    56e6:	47 95       	ror	r20
    56e8:	37 95       	ror	r19
    56ea:	27 95       	ror	r18
    56ec:	1a 95       	dec	r17
    56ee:	d1 f7       	brne	.-12     	; 0x56e4 <fat_get_fs_size+0x5a>
    56f0:	04 c0       	rjmp	.+8      	; 0x56fa <fat_get_fs_size+0x70>
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    56f2:	56 95       	lsr	r21
    56f4:	47 95       	ror	r20
    56f6:	37 95       	ror	r19
    56f8:	27 95       	ror	r18
    56fa:	22 50       	subi	r18, 0x02	; 2
    56fc:	30 40       	sbci	r19, 0x00	; 0
    56fe:	40 40       	sbci	r20, 0x00	; 0
    5700:	50 40       	sbci	r21, 0x00	; 0
    5702:	59 01       	movw	r10, r18
    5704:	6a 01       	movw	r12, r20
    5706:	a6 01       	movw	r20, r12
    5708:	60 e0       	ldi	r22, 0x00	; 0
    570a:	70 e0       	ldi	r23, 0x00	; 0
    570c:	80 e0       	ldi	r24, 0x00	; 0
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	5f 01       	movw	r10, r30
    5712:	cc 24       	eor	r12, r12
    5714:	dd 24       	eor	r13, r13
    5716:	ee 24       	eor	r14, r14
    5718:	ff 24       	eor	r15, r15
    571a:	00 e0       	ldi	r16, 0x00	; 0
    571c:	10 e0       	ldi	r17, 0x00	; 0
    571e:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
}
    5722:	1f 91       	pop	r17
    5724:	0f 91       	pop	r16
    5726:	ff 90       	pop	r15
    5728:	ef 90       	pop	r14
    572a:	df 90       	pop	r13
    572c:	cf 90       	pop	r12
    572e:	bf 90       	pop	r11
    5730:	af 90       	pop	r10
    5732:	9f 90       	pop	r9
    5734:	8f 90       	pop	r8
    5736:	7f 90       	pop	r7
    5738:	6f 90       	pop	r6
    573a:	5f 90       	pop	r5
    573c:	4f 90       	pop	r4
    573e:	3f 90       	pop	r3
    5740:	2f 90       	pop	r2
    5742:	08 95       	ret

00005744 <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    5744:	2f 92       	push	r2
    5746:	3f 92       	push	r3
    5748:	4f 92       	push	r4
    574a:	5f 92       	push	r5
    574c:	6f 92       	push	r6
    574e:	7f 92       	push	r7
    5750:	8f 92       	push	r8
    5752:	9f 92       	push	r9
    5754:	af 92       	push	r10
    5756:	bf 92       	push	r11
    5758:	cf 92       	push	r12
    575a:	df 92       	push	r13
    575c:	ef 92       	push	r14
    575e:	ff 92       	push	r15
    5760:	0f 93       	push	r16
    5762:	1f 93       	push	r17
    5764:	df 93       	push	r29
    5766:	cf 93       	push	r28
    5768:	cd b7       	in	r28, 0x3d	; 61
    576a:	de b7       	in	r29, 0x3e	; 62
    576c:	e0 97       	sbiw	r28, 0x30	; 48
    576e:	0f b6       	in	r0, 0x3f	; 63
    5770:	f8 94       	cli
    5772:	de bf       	out	0x3e, r29	; 62
    5774:	0f be       	out	0x3f, r0	; 63
    5776:	cd bf       	out	0x3d, r28	; 61
    5778:	3c 01       	movw	r6, r24
    if(!fs)
    577a:	00 97       	sbiw	r24, 0x00	; 0
    577c:	09 f4       	brne	.+2      	; 0x5780 <fat_get_fs_free+0x3c>
    577e:	f8 c0       	rjmp	.+496    	; 0x5970 <fat_get_fs_free+0x22c>
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    5780:	19 82       	std	Y+1, r1	; 0x01
    5782:	1a 82       	std	Y+2, r1	; 0x02
    5784:	1b 82       	std	Y+3, r1	; 0x03
    5786:	1c 82       	std	Y+4, r1	; 0x04
    count_arg.buffer_size = sizeof(fat);
    5788:	80 e2       	ldi	r24, 0x20	; 32
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	9e 83       	std	Y+6, r25	; 0x06
    578e:	8d 83       	std	Y+5, r24	; 0x05

    offset_t fat_offset = fs->header.fat_offset;
    5790:	d3 01       	movw	r26, r6
    5792:	1a 96       	adiw	r26, 0x0a	; 10
    5794:	bc 91       	ld	r27, X
    5796:	b9 a7       	std	Y+41, r27	; 0x29
    5798:	f3 01       	movw	r30, r6
    579a:	f3 85       	ldd	r31, Z+11	; 0x0b
    579c:	fa a7       	std	Y+42, r31	; 0x2a
    579e:	d3 01       	movw	r26, r6
    57a0:	1c 96       	adiw	r26, 0x0c	; 12
    57a2:	bc 91       	ld	r27, X
    57a4:	bb a7       	std	Y+43, r27	; 0x2b
    57a6:	f3 01       	movw	r30, r6
    57a8:	f5 85       	ldd	r31, Z+13	; 0x0d
    57aa:	fc a7       	std	Y+44, r31	; 0x2c
    57ac:	d3 01       	movw	r26, r6
    57ae:	1e 96       	adiw	r26, 0x0e	; 14
    57b0:	bc 91       	ld	r27, X
    57b2:	bd a7       	std	Y+45, r27	; 0x2d
    57b4:	f3 01       	movw	r30, r6
    57b6:	f7 85       	ldd	r31, Z+15	; 0x0f
    57b8:	fe a7       	std	Y+46, r31	; 0x2e
    57ba:	d3 01       	movw	r26, r6
    57bc:	50 96       	adiw	r26, 0x10	; 16
    57be:	bc 91       	ld	r27, X
    57c0:	bf a7       	std	Y+47, r27	; 0x2f
    57c2:	f3 01       	movw	r30, r6
    57c4:	f1 89       	ldd	r31, Z+17	; 0x11
    57c6:	f8 ab       	std	Y+48, r31	; 0x30
    uint32_t fat_size = fs->header.fat_size;
    57c8:	d3 01       	movw	r26, r6
    57ca:	52 96       	adiw	r26, 0x12	; 18
    57cc:	2d 90       	ld	r2, X+
    57ce:	3d 90       	ld	r3, X+
    57d0:	4d 90       	ld	r4, X+
    57d2:	5c 90       	ld	r5, X
    57d4:	55 97       	sbiw	r26, 0x15	; 21
    57d6:	ad c0       	rjmp	.+346    	; 0x5932 <fat_get_fs_free+0x1ee>
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
    57d8:	be ef       	ldi	r27, 0xFE	; 254
    57da:	2b 16       	cp	r2, r27
    57dc:	bf ef       	ldi	r27, 0xFF	; 255
    57de:	3b 06       	cpc	r3, r27
    57e0:	b0 e0       	ldi	r27, 0x00	; 0
    57e2:	4b 06       	cpc	r4, r27
    57e4:	b0 e0       	ldi	r27, 0x00	; 0
    57e6:	5b 06       	cpc	r5, r27
    57e8:	28 f0       	brcs	.+10     	; 0x57f4 <fat_get_fs_free+0xb0>
    57ea:	ee ef       	ldi	r30, 0xFE	; 254
    57ec:	ff ef       	ldi	r31, 0xFF	; 255
    57ee:	f8 a7       	std	Y+40, r31	; 0x28
    57f0:	ef a3       	std	Y+39, r30	; 0x27
    57f2:	02 c0       	rjmp	.+4      	; 0x57f8 <fat_get_fs_free+0xb4>
            length = fat_size;
    57f4:	38 a6       	std	Y+40, r3	; 0x28
    57f6:	2f a2       	std	Y+39, r2	; 0x27

        if(!fs->partition->device_read_interval(fat_offset,
    57f8:	d3 01       	movw	r26, r6
    57fa:	ed 91       	ld	r30, X+
    57fc:	fc 91       	ld	r31, X
    57fe:	a2 81       	ldd	r26, Z+2	; 0x02
    5800:	b3 81       	ldd	r27, Z+3	; 0x03
    5802:	80 85       	ldd	r24, Z+8	; 0x08
    5804:	86 30       	cpi	r24, 0x06	; 6
    5806:	19 f0       	breq	.+6      	; 0x580e <fat_get_fs_free+0xca>
    5808:	ef ef       	ldi	r30, 0xFF	; 255
    580a:	fc e2       	ldi	r31, 0x2C	; 44
    580c:	02 c0       	rjmp	.+4      	; 0x5812 <fat_get_fs_free+0xce>
    580e:	e9 ed       	ldi	r30, 0xD9	; 217
    5810:	fc e2       	ldi	r31, 0x2C	; 44
    5812:	29 a5       	ldd	r18, Y+41	; 0x29
    5814:	3a a5       	ldd	r19, Y+42	; 0x2a
    5816:	4b a5       	ldd	r20, Y+43	; 0x2b
    5818:	5c a5       	ldd	r21, Y+44	; 0x2c
    581a:	6d a5       	ldd	r22, Y+45	; 0x2d
    581c:	7e a5       	ldd	r23, Y+46	; 0x2e
    581e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5820:	98 a9       	ldd	r25, Y+48	; 0x30
    5822:	8e 01       	movw	r16, r28
    5824:	09 5f       	subi	r16, 0xF9	; 249
    5826:	1f 4f       	sbci	r17, 0xFF	; 255
    5828:	ee 24       	eor	r14, r14
    582a:	ff 24       	eor	r15, r15
    582c:	68 94       	set
    582e:	e5 f8       	bld	r14, 5
    5830:	cf a0       	ldd	r12, Y+39	; 0x27
    5832:	d8 a4       	ldd	r13, Y+40	; 0x28
    5834:	5f 01       	movw	r10, r30
    5836:	4e 01       	movw	r8, r28
    5838:	08 94       	sec
    583a:	81 1c       	adc	r8, r1
    583c:	91 1c       	adc	r9, r1
    583e:	fd 01       	movw	r30, r26
    5840:	09 95       	icall
    5842:	88 23       	and	r24, r24
    5844:	09 f4       	brne	.+2      	; 0x5848 <fat_get_fs_free+0x104>
    5846:	94 c0       	rjmp	.+296    	; 0x5970 <fat_get_fs_free+0x22c>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
    5848:	cf a0       	ldd	r12, Y+39	; 0x27
    584a:	d8 a4       	ldd	r13, Y+40	; 0x28
    584c:	56 01       	movw	r10, r12
    584e:	cc 24       	eor	r12, r12
    5850:	dd 24       	eor	r13, r13
    5852:	ee 24       	eor	r14, r14
    5854:	ff 24       	eor	r15, r15
    5856:	87 01       	movw	r16, r14
    5858:	f9 a5       	ldd	r31, Y+41	; 0x29
    585a:	fa 0d       	add	r31, r10
    585c:	91 e0       	ldi	r25, 0x01	; 1
    585e:	b9 a5       	ldd	r27, Y+41	; 0x29
    5860:	fb 17       	cp	r31, r27
    5862:	08 f0       	brcs	.+2      	; 0x5866 <fat_get_fs_free+0x122>
    5864:	90 e0       	ldi	r25, 0x00	; 0
    5866:	8a a5       	ldd	r24, Y+42	; 0x2a
    5868:	8b 0d       	add	r24, r11
    586a:	21 e0       	ldi	r18, 0x01	; 1
    586c:	ea a5       	ldd	r30, Y+42	; 0x2a
    586e:	8e 17       	cp	r24, r30
    5870:	08 f0       	brcs	.+2      	; 0x5874 <fat_get_fs_free+0x130>
    5872:	20 e0       	ldi	r18, 0x00	; 0
    5874:	39 2f       	mov	r19, r25
    5876:	38 0f       	add	r19, r24
    5878:	91 e0       	ldi	r25, 0x01	; 1
    587a:	38 17       	cp	r19, r24
    587c:	08 f0       	brcs	.+2      	; 0x5880 <fat_get_fs_free+0x13c>
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	29 2b       	or	r18, r25
    5882:	8b a5       	ldd	r24, Y+43	; 0x2b
    5884:	8c 0d       	add	r24, r12
    5886:	51 e0       	ldi	r21, 0x01	; 1
    5888:	9b a5       	ldd	r25, Y+43	; 0x2b
    588a:	89 17       	cp	r24, r25
    588c:	08 f0       	brcs	.+2      	; 0x5890 <fat_get_fs_free+0x14c>
    588e:	50 e0       	ldi	r21, 0x00	; 0
    5890:	42 2f       	mov	r20, r18
    5892:	48 0f       	add	r20, r24
    5894:	91 e0       	ldi	r25, 0x01	; 1
    5896:	48 17       	cp	r20, r24
    5898:	08 f0       	brcs	.+2      	; 0x589c <fat_get_fs_free+0x158>
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	59 2b       	or	r21, r25
    589e:	8c a5       	ldd	r24, Y+44	; 0x2c
    58a0:	8d 0d       	add	r24, r13
    58a2:	21 e0       	ldi	r18, 0x01	; 1
    58a4:	ac a5       	ldd	r26, Y+44	; 0x2c
    58a6:	8a 17       	cp	r24, r26
    58a8:	08 f0       	brcs	.+2      	; 0x58ac <fat_get_fs_free+0x168>
    58aa:	20 e0       	ldi	r18, 0x00	; 0
    58ac:	58 0f       	add	r21, r24
    58ae:	91 e0       	ldi	r25, 0x01	; 1
    58b0:	58 17       	cp	r21, r24
    58b2:	08 f0       	brcs	.+2      	; 0x58b6 <fat_get_fs_free+0x172>
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	29 2b       	or	r18, r25
    58b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    58ba:	8e 0d       	add	r24, r14
    58bc:	71 e0       	ldi	r23, 0x01	; 1
    58be:	bd a5       	ldd	r27, Y+45	; 0x2d
    58c0:	8b 17       	cp	r24, r27
    58c2:	08 f0       	brcs	.+2      	; 0x58c6 <fat_get_fs_free+0x182>
    58c4:	70 e0       	ldi	r23, 0x00	; 0
    58c6:	62 2f       	mov	r22, r18
    58c8:	68 0f       	add	r22, r24
    58ca:	91 e0       	ldi	r25, 0x01	; 1
    58cc:	68 17       	cp	r22, r24
    58ce:	08 f0       	brcs	.+2      	; 0x58d2 <fat_get_fs_free+0x18e>
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	79 2b       	or	r23, r25
    58d4:	8e a5       	ldd	r24, Y+46	; 0x2e
    58d6:	8f 0d       	add	r24, r15
    58d8:	21 e0       	ldi	r18, 0x01	; 1
    58da:	ee a5       	ldd	r30, Y+46	; 0x2e
    58dc:	8e 17       	cp	r24, r30
    58de:	08 f0       	brcs	.+2      	; 0x58e2 <fat_get_fs_free+0x19e>
    58e0:	20 e0       	ldi	r18, 0x00	; 0
    58e2:	78 0f       	add	r23, r24
    58e4:	91 e0       	ldi	r25, 0x01	; 1
    58e6:	78 17       	cp	r23, r24
    58e8:	08 f0       	brcs	.+2      	; 0x58ec <fat_get_fs_free+0x1a8>
    58ea:	90 e0       	ldi	r25, 0x00	; 0
    58ec:	29 2b       	or	r18, r25
    58ee:	9f a5       	ldd	r25, Y+47	; 0x2f
    58f0:	90 0f       	add	r25, r16
    58f2:	e1 e0       	ldi	r30, 0x01	; 1
    58f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    58f6:	98 17       	cp	r25, r24
    58f8:	08 f0       	brcs	.+2      	; 0x58fc <fat_get_fs_free+0x1b8>
    58fa:	e0 e0       	ldi	r30, 0x00	; 0
    58fc:	82 2f       	mov	r24, r18
    58fe:	89 0f       	add	r24, r25
    5900:	21 e0       	ldi	r18, 0x01	; 1
    5902:	89 17       	cp	r24, r25
    5904:	08 f0       	brcs	.+2      	; 0x5908 <fat_get_fs_free+0x1c4>
    5906:	20 e0       	ldi	r18, 0x00	; 0
    5908:	e2 2b       	or	r30, r18
    590a:	98 a9       	ldd	r25, Y+48	; 0x30
    590c:	91 0f       	add	r25, r17
    590e:	f9 a7       	std	Y+41, r31	; 0x29
    5910:	3a a7       	std	Y+42, r19	; 0x2a
    5912:	4b a7       	std	Y+43, r20	; 0x2b
    5914:	5c a7       	std	Y+44, r21	; 0x2c
    5916:	6d a7       	std	Y+45, r22	; 0x2d
    5918:	7e a7       	std	Y+46, r23	; 0x2e
    591a:	8f a7       	std	Y+47, r24	; 0x2f
    591c:	9e 0f       	add	r25, r30
    591e:	98 ab       	std	Y+48, r25	; 0x30
        fat_size -= length;
    5920:	ef a1       	ldd	r30, Y+39	; 0x27
    5922:	f8 a5       	ldd	r31, Y+40	; 0x28
    5924:	cf 01       	movw	r24, r30
    5926:	a0 e0       	ldi	r26, 0x00	; 0
    5928:	b0 e0       	ldi	r27, 0x00	; 0
    592a:	28 1a       	sub	r2, r24
    592c:	39 0a       	sbc	r3, r25
    592e:	4a 0a       	sbc	r4, r26
    5930:	5b 0a       	sbc	r5, r27
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    5932:	21 14       	cp	r2, r1
    5934:	31 04       	cpc	r3, r1
    5936:	41 04       	cpc	r4, r1
    5938:	51 04       	cpc	r5, r1
    593a:	09 f0       	breq	.+2      	; 0x593e <fat_get_fs_free+0x1fa>
    593c:	4d cf       	rjmp	.-358    	; 0x57d8 <fat_get_fs_free+0x94>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    593e:	d3 01       	movw	r26, r6
    5940:	58 96       	adiw	r26, 0x18	; 24
    5942:	4d 91       	ld	r20, X+
    5944:	5c 91       	ld	r21, X
    5946:	59 97       	sbiw	r26, 0x19	; 25
    5948:	29 80       	ldd	r2, Y+1	; 0x01
    594a:	3a 80       	ldd	r3, Y+2	; 0x02
    594c:	4b 80       	ldd	r4, Y+3	; 0x03
    594e:	5c 80       	ldd	r5, Y+4	; 0x04
    5950:	9a 01       	movw	r18, r20
    5952:	40 e0       	ldi	r20, 0x00	; 0
    5954:	50 e0       	ldi	r21, 0x00	; 0
    5956:	60 e0       	ldi	r22, 0x00	; 0
    5958:	70 e0       	ldi	r23, 0x00	; 0
    595a:	80 e0       	ldi	r24, 0x00	; 0
    595c:	90 e0       	ldi	r25, 0x00	; 0
    595e:	51 01       	movw	r10, r2
    5960:	62 01       	movw	r12, r4
    5962:	ee 24       	eor	r14, r14
    5964:	ff 24       	eor	r15, r15
    5966:	00 e0       	ldi	r16, 0x00	; 0
    5968:	10 e0       	ldi	r17, 0x00	; 0
    596a:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    596e:	08 c0       	rjmp	.+16     	; 0x5980 <fat_get_fs_free+0x23c>
    5970:	20 e0       	ldi	r18, 0x00	; 0
    5972:	30 e0       	ldi	r19, 0x00	; 0
    5974:	40 e0       	ldi	r20, 0x00	; 0
    5976:	50 e0       	ldi	r21, 0x00	; 0
    5978:	60 e0       	ldi	r22, 0x00	; 0
    597a:	70 e0       	ldi	r23, 0x00	; 0
    597c:	80 e0       	ldi	r24, 0x00	; 0
    597e:	90 e0       	ldi	r25, 0x00	; 0
}
    5980:	e0 96       	adiw	r28, 0x30	; 48
    5982:	0f b6       	in	r0, 0x3f	; 63
    5984:	f8 94       	cli
    5986:	de bf       	out	0x3e, r29	; 62
    5988:	0f be       	out	0x3f, r0	; 63
    598a:	cd bf       	out	0x3d, r28	; 61
    598c:	cf 91       	pop	r28
    598e:	df 91       	pop	r29
    5990:	1f 91       	pop	r17
    5992:	0f 91       	pop	r16
    5994:	ff 90       	pop	r15
    5996:	ef 90       	pop	r14
    5998:	df 90       	pop	r13
    599a:	cf 90       	pop	r12
    599c:	bf 90       	pop	r11
    599e:	af 90       	pop	r10
    59a0:	9f 90       	pop	r9
    59a2:	8f 90       	pop	r8
    59a4:	7f 90       	pop	r7
    59a6:	6f 90       	pop	r6
    59a8:	5f 90       	pop	r5
    59aa:	4f 90       	pop	r4
    59ac:	3f 90       	pop	r3
    59ae:	2f 90       	pop	r2
    59b0:	08 95       	ret

000059b2 <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    59b2:	ef 92       	push	r14
    59b4:	ff 92       	push	r15
    59b6:	cf 93       	push	r28
    59b8:	df 93       	push	r29
    59ba:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    59bc:	f7 01       	movw	r30, r14
    uintptr_t buffer_size = count_arg->buffer_size;
    59be:	44 81       	ldd	r20, Z+4	; 0x04
    59c0:	55 81       	ldd	r21, Z+5	; 0x05
    59c2:	20 e0       	ldi	r18, 0x00	; 0
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    59c6:	12 c0       	rjmp	.+36     	; 0x59ec <fat_get_fs_free_16_callback+0x3a>

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    {
        uint16_t cluster = *((uint16_t*) &buffer[0]);
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
    59c8:	88 81       	ld	r24, Y
    59ca:	99 81       	ldd	r25, Y+1	; 0x01
    59cc:	89 2b       	or	r24, r25
    59ce:	59 f4       	brne	.+22     	; 0x59e6 <fat_get_fs_free_16_callback+0x34>
            ++(count_arg->cluster_count);
    59d0:	80 81       	ld	r24, Z
    59d2:	91 81       	ldd	r25, Z+1	; 0x01
    59d4:	a2 81       	ldd	r26, Z+2	; 0x02
    59d6:	b3 81       	ldd	r27, Z+3	; 0x03
    59d8:	01 96       	adiw	r24, 0x01	; 1
    59da:	a1 1d       	adc	r26, r1
    59dc:	b1 1d       	adc	r27, r1
    59de:	80 83       	st	Z, r24
    59e0:	91 83       	std	Z+1, r25	; 0x01
    59e2:	a2 83       	std	Z+2, r26	; 0x02
    59e4:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    59e6:	2e 5f       	subi	r18, 0xFE	; 254
    59e8:	3f 4f       	sbci	r19, 0xFF	; 255
    59ea:	22 96       	adiw	r28, 0x02	; 2
    59ec:	24 17       	cp	r18, r20
    59ee:	35 07       	cpc	r19, r21
    59f0:	58 f3       	brcs	.-42     	; 0x59c8 <fat_get_fs_free_16_callback+0x16>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    59f2:	81 e0       	ldi	r24, 0x01	; 1
    59f4:	df 91       	pop	r29
    59f6:	cf 91       	pop	r28
    59f8:	ff 90       	pop	r15
    59fa:	ef 90       	pop	r14
    59fc:	08 95       	ret

000059fe <fat_get_fs_free_32_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT32.
 */
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    59fe:	ef 92       	push	r14
    5a00:	ff 92       	push	r15
    5a02:	cf 93       	push	r28
    5a04:	df 93       	push	r29
    5a06:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    5a08:	f7 01       	movw	r30, r14
    uintptr_t buffer_size = count_arg->buffer_size;
    5a0a:	44 81       	ldd	r20, Z+4	; 0x04
    5a0c:	55 81       	ldd	r21, Z+5	; 0x05
    5a0e:	20 e0       	ldi	r18, 0x00	; 0
    5a10:	30 e0       	ldi	r19, 0x00	; 0
    5a12:	16 c0       	rjmp	.+44     	; 0x5a40 <fat_get_fs_free_32_callback+0x42>

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    {
        uint32_t cluster = *((uint32_t*) &buffer[0]);
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
    5a14:	88 81       	ld	r24, Y
    5a16:	99 81       	ldd	r25, Y+1	; 0x01
    5a18:	aa 81       	ldd	r26, Y+2	; 0x02
    5a1a:	bb 81       	ldd	r27, Y+3	; 0x03
    5a1c:	00 97       	sbiw	r24, 0x00	; 0
    5a1e:	a1 05       	cpc	r26, r1
    5a20:	b1 05       	cpc	r27, r1
    5a22:	59 f4       	brne	.+22     	; 0x5a3a <fat_get_fs_free_32_callback+0x3c>
            ++(count_arg->cluster_count);
    5a24:	80 81       	ld	r24, Z
    5a26:	91 81       	ldd	r25, Z+1	; 0x01
    5a28:	a2 81       	ldd	r26, Z+2	; 0x02
    5a2a:	b3 81       	ldd	r27, Z+3	; 0x03
    5a2c:	01 96       	adiw	r24, 0x01	; 1
    5a2e:	a1 1d       	adc	r26, r1
    5a30:	b1 1d       	adc	r27, r1
    5a32:	80 83       	st	Z, r24
    5a34:	91 83       	std	Z+1, r25	; 0x01
    5a36:	a2 83       	std	Z+2, r26	; 0x02
    5a38:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    5a3a:	2c 5f       	subi	r18, 0xFC	; 252
    5a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a3e:	24 96       	adiw	r28, 0x04	; 4
    5a40:	24 17       	cp	r18, r20
    5a42:	35 07       	cpc	r19, r21
    5a44:	38 f3       	brcs	.-50     	; 0x5a14 <fat_get_fs_free_32_callback+0x16>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    5a46:	81 e0       	ldi	r24, 0x01	; 1
    5a48:	df 91       	pop	r29
    5a4a:	cf 91       	pop	r28
    5a4c:	ff 90       	pop	r15
    5a4e:	ef 90       	pop	r14
    5a50:	08 95       	ret

00005a52 <fat_clear_handles>:
 * Initialize the data structures used to store file system handles
 */
void fat_clear_handles(void)
{
#if !USE_DYNAMIC_MEMORY
	memset(fat_fs_handles, 0, sizeof(fat_fs_handles));
    5a52:	8e e2       	ldi	r24, 0x2E	; 46
    5a54:	eb ed       	ldi	r30, 0xDB	; 219
    5a56:	f3 e0       	ldi	r31, 0x03	; 3
    5a58:	df 01       	movw	r26, r30
    5a5a:	1d 92       	st	X+, r1
    5a5c:	8a 95       	dec	r24
    5a5e:	e9 f7       	brne	.-6      	; 0x5a5a <fat_clear_handles+0x8>
	memset(fat_file_handles, 0, sizeof(fat_file_handles));
    5a60:	8f e3       	ldi	r24, 0x3F	; 63
    5a62:	e9 e0       	ldi	r30, 0x09	; 9
    5a64:	f4 e0       	ldi	r31, 0x04	; 4
    5a66:	df 01       	movw	r26, r30
    5a68:	1d 92       	st	X+, r1
    5a6a:	8a 95       	dec	r24
    5a6c:	e9 f7       	brne	.-6      	; 0x5a68 <fat_clear_handles+0x16>
	memset(fat_dir_handles, 0, sizeof(fat_dir_handles));
    5a6e:	82 e7       	ldi	r24, 0x72	; 114
    5a70:	e8 e4       	ldi	r30, 0x48	; 72
    5a72:	f4 e0       	ldi	r31, 0x04	; 4
    5a74:	df 01       	movw	r26, r30
    5a76:	1d 92       	st	X+, r1
    5a78:	8a 95       	dec	r24
    5a7a:	e9 f7       	brne	.-6      	; 0x5a76 <fat_clear_handles+0x24>
#endif
    5a7c:	08 95       	ret

00005a7e <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    5a7e:	2f 92       	push	r2
    5a80:	3f 92       	push	r3
    5a82:	4f 92       	push	r4
    5a84:	5f 92       	push	r5
    5a86:	6f 92       	push	r6
    5a88:	7f 92       	push	r7
    5a8a:	8f 92       	push	r8
    5a8c:	9f 92       	push	r9
    5a8e:	af 92       	push	r10
    5a90:	bf 92       	push	r11
    5a92:	cf 92       	push	r12
    5a94:	df 92       	push	r13
    5a96:	ef 92       	push	r14
    5a98:	ff 92       	push	r15
    5a9a:	0f 93       	push	r16
    5a9c:	1f 93       	push	r17
    5a9e:	df 93       	push	r29
    5aa0:	cf 93       	push	r28
    5aa2:	cd b7       	in	r28, 0x3d	; 61
    5aa4:	de b7       	in	r29, 0x3e	; 62
    5aa6:	62 97       	sbiw	r28, 0x12	; 18
    5aa8:	0f b6       	in	r0, 0x3f	; 63
    5aaa:	f8 94       	cli
    5aac:	de bf       	out	0x3e, r29	; 62
    5aae:	0f be       	out	0x3f, r0	; 63
    5ab0:	cd bf       	out	0x3d, r28	; 61
    5ab2:	9a 8b       	std	Y+18, r25	; 0x12
    5ab4:	89 8b       	std	Y+17, r24	; 0x11
    if(cluster_num < 2)
    5ab6:	42 30       	cpi	r20, 0x02	; 2
    5ab8:	51 05       	cpc	r21, r1
    5aba:	61 05       	cpc	r22, r1
    5abc:	71 05       	cpc	r23, r1
    5abe:	10 f4       	brcc	.+4      	; 0x5ac4 <fat_clear_cluster+0x46>
    5ac0:	80 e0       	ldi	r24, 0x00	; 0
    5ac2:	a2 c0       	rjmp	.+324    	; 0x5c08 <fat_clear_cluster+0x18a>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    5ac4:	89 89       	ldd	r24, Y+17	; 0x11
    5ac6:	9a 89       	ldd	r25, Y+18	; 0x12
    5ac8:	89 2b       	or	r24, r25
    5aca:	49 f4       	brne	.+18     	; 0x5ade <fat_clear_cluster+0x60>
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	30 e0       	ldi	r19, 0x00	; 0
    5ad0:	40 e0       	ldi	r20, 0x00	; 0
    5ad2:	50 e0       	ldi	r21, 0x00	; 0
    5ad4:	60 e0       	ldi	r22, 0x00	; 0
    5ad6:	70 e0       	ldi	r23, 0x00	; 0
    5ad8:	10 e0       	ldi	r17, 0x00	; 0
    5ada:	90 e0       	ldi	r25, 0x00	; 0
    5adc:	7b c0       	rjmp	.+246    	; 0x5bd4 <fat_clear_cluster+0x156>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    5ade:	42 50       	subi	r20, 0x02	; 2
    5ae0:	50 40       	sbci	r21, 0x00	; 0
    5ae2:	60 40       	sbci	r22, 0x00	; 0
    5ae4:	70 40       	sbci	r23, 0x00	; 0
    5ae6:	5a 01       	movw	r10, r20
    5ae8:	6b 01       	movw	r12, r22
    5aea:	e9 89       	ldd	r30, Y+17	; 0x11
    5aec:	fa 89       	ldd	r31, Y+18	; 0x12
    5aee:	20 8c       	ldd	r2, Z+24	; 0x18
    5af0:	31 8c       	ldd	r3, Z+25	; 0x19
    5af2:	9a 01       	movw	r18, r20
    5af4:	a6 01       	movw	r20, r12
    5af6:	60 e0       	ldi	r22, 0x00	; 0
    5af8:	70 e0       	ldi	r23, 0x00	; 0
    5afa:	80 e0       	ldi	r24, 0x00	; 0
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	51 01       	movw	r10, r2
    5b00:	cc 24       	eor	r12, r12
    5b02:	dd 24       	eor	r13, r13
    5b04:	ee 24       	eor	r14, r14
    5b06:	ff 24       	eor	r15, r15
    5b08:	00 e0       	ldi	r16, 0x00	; 0
    5b0a:	10 e0       	ldi	r17, 0x00	; 0
    5b0c:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    5b10:	c9 2e       	mov	r12, r25
    5b12:	e9 89       	ldd	r30, Y+17	; 0x11
    5b14:	fa 89       	ldd	r31, Y+18	; 0x12
    5b16:	b2 8d       	ldd	r27, Z+26	; 0x1a
    5b18:	b3 8c       	ldd	r11, Z+27	; 0x1b
    5b1a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5b1c:	15 8d       	ldd	r17, Z+29	; 0x1d
    5b1e:	f6 8c       	ldd	r15, Z+30	; 0x1e
    5b20:	e7 8c       	ldd	r14, Z+31	; 0x1f
    5b22:	d0 a0       	ldd	r13, Z+32	; 0x20
    5b24:	01 a1       	ldd	r16, Z+33	; 0x21
    5b26:	b2 0f       	add	r27, r18
    5b28:	e1 e0       	ldi	r30, 0x01	; 1
    5b2a:	b2 17       	cp	r27, r18
    5b2c:	08 f0       	brcs	.+2      	; 0x5b30 <fat_clear_cluster+0xb2>
    5b2e:	e0 e0       	ldi	r30, 0x00	; 0
    5b30:	23 2f       	mov	r18, r19
    5b32:	2b 0d       	add	r18, r11
    5b34:	f1 e0       	ldi	r31, 0x01	; 1
    5b36:	23 17       	cp	r18, r19
    5b38:	08 f0       	brcs	.+2      	; 0x5b3c <fat_clear_cluster+0xbe>
    5b3a:	f0 e0       	ldi	r31, 0x00	; 0
    5b3c:	3e 2f       	mov	r19, r30
    5b3e:	32 0f       	add	r19, r18
    5b40:	e1 e0       	ldi	r30, 0x01	; 1
    5b42:	32 17       	cp	r19, r18
    5b44:	08 f0       	brcs	.+2      	; 0x5b48 <fat_clear_cluster+0xca>
    5b46:	e0 e0       	ldi	r30, 0x00	; 0
    5b48:	fe 2b       	or	r31, r30
    5b4a:	24 2f       	mov	r18, r20
    5b4c:	2a 0f       	add	r18, r26
    5b4e:	a1 e0       	ldi	r26, 0x01	; 1
    5b50:	24 17       	cp	r18, r20
    5b52:	08 f0       	brcs	.+2      	; 0x5b56 <fat_clear_cluster+0xd8>
    5b54:	a0 e0       	ldi	r26, 0x00	; 0
    5b56:	4f 2f       	mov	r20, r31
    5b58:	42 0f       	add	r20, r18
    5b5a:	e1 e0       	ldi	r30, 0x01	; 1
    5b5c:	42 17       	cp	r20, r18
    5b5e:	08 f0       	brcs	.+2      	; 0x5b62 <fat_clear_cluster+0xe4>
    5b60:	e0 e0       	ldi	r30, 0x00	; 0
    5b62:	ae 2b       	or	r26, r30
    5b64:	25 2f       	mov	r18, r21
    5b66:	21 0f       	add	r18, r17
    5b68:	f1 e0       	ldi	r31, 0x01	; 1
    5b6a:	25 17       	cp	r18, r21
    5b6c:	08 f0       	brcs	.+2      	; 0x5b70 <fat_clear_cluster+0xf2>
    5b6e:	f0 e0       	ldi	r31, 0x00	; 0
    5b70:	5a 2f       	mov	r21, r26
    5b72:	52 0f       	add	r21, r18
    5b74:	e1 e0       	ldi	r30, 0x01	; 1
    5b76:	52 17       	cp	r21, r18
    5b78:	08 f0       	brcs	.+2      	; 0x5b7c <fat_clear_cluster+0xfe>
    5b7a:	e0 e0       	ldi	r30, 0x00	; 0
    5b7c:	fe 2b       	or	r31, r30
    5b7e:	26 2f       	mov	r18, r22
    5b80:	2f 0d       	add	r18, r15
    5b82:	a1 e0       	ldi	r26, 0x01	; 1
    5b84:	26 17       	cp	r18, r22
    5b86:	08 f0       	brcs	.+2      	; 0x5b8a <fat_clear_cluster+0x10c>
    5b88:	a0 e0       	ldi	r26, 0x00	; 0
    5b8a:	6f 2f       	mov	r22, r31
    5b8c:	62 0f       	add	r22, r18
    5b8e:	e1 e0       	ldi	r30, 0x01	; 1
    5b90:	62 17       	cp	r22, r18
    5b92:	08 f0       	brcs	.+2      	; 0x5b96 <fat_clear_cluster+0x118>
    5b94:	e0 e0       	ldi	r30, 0x00	; 0
    5b96:	ae 2b       	or	r26, r30
    5b98:	27 2f       	mov	r18, r23
    5b9a:	2e 0d       	add	r18, r14
    5b9c:	f1 e0       	ldi	r31, 0x01	; 1
    5b9e:	27 17       	cp	r18, r23
    5ba0:	08 f0       	brcs	.+2      	; 0x5ba4 <fat_clear_cluster+0x126>
    5ba2:	f0 e0       	ldi	r31, 0x00	; 0
    5ba4:	7a 2f       	mov	r23, r26
    5ba6:	72 0f       	add	r23, r18
    5ba8:	e1 e0       	ldi	r30, 0x01	; 1
    5baa:	72 17       	cp	r23, r18
    5bac:	08 f0       	brcs	.+2      	; 0x5bb0 <fat_clear_cluster+0x132>
    5bae:	e0 e0       	ldi	r30, 0x00	; 0
    5bb0:	fe 2b       	or	r31, r30
    5bb2:	28 2f       	mov	r18, r24
    5bb4:	2d 0d       	add	r18, r13
    5bb6:	e1 e0       	ldi	r30, 0x01	; 1
    5bb8:	28 17       	cp	r18, r24
    5bba:	08 f0       	brcs	.+2      	; 0x5bbe <fat_clear_cluster+0x140>
    5bbc:	e0 e0       	ldi	r30, 0x00	; 0
    5bbe:	8f 2f       	mov	r24, r31
    5bc0:	82 0f       	add	r24, r18
    5bc2:	91 e0       	ldi	r25, 0x01	; 1
    5bc4:	82 17       	cp	r24, r18
    5bc6:	08 f0       	brcs	.+2      	; 0x5bca <fat_clear_cluster+0x14c>
    5bc8:	90 e0       	ldi	r25, 0x00	; 0
    5bca:	9e 2b       	or	r25, r30
    5bcc:	0c 0d       	add	r16, r12
    5bce:	2b 2f       	mov	r18, r27
    5bd0:	18 2f       	mov	r17, r24
    5bd2:	90 0f       	add	r25, r16
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    5bd4:	de 01       	movw	r26, r28
    5bd6:	11 96       	adiw	r26, 0x01	; 1
    5bd8:	80 e1       	ldi	r24, 0x10	; 16
    5bda:	fd 01       	movw	r30, r26
    5bdc:	11 92       	st	Z+, r1
    5bde:	8a 95       	dec	r24
    5be0:	e9 f7       	brne	.-6      	; 0x5bdc <fat_clear_cluster+0x15e>
    return fs->partition->device_write_interval(cluster_offset,
    5be2:	e9 89       	ldd	r30, Y+17	; 0x11
    5be4:	fa 89       	ldd	r31, Y+18	; 0x12
    5be6:	c0 80       	ld	r12, Z
    5be8:	d1 80       	ldd	r13, Z+1	; 0x01
    5bea:	e0 8c       	ldd	r14, Z+24	; 0x18
    5bec:	f1 8c       	ldd	r15, Z+25	; 0x19
    5bee:	f6 01       	movw	r30, r12
    5bf0:	86 80       	ldd	r8, Z+6	; 0x06
    5bf2:	97 80       	ldd	r9, Z+7	; 0x07
    5bf4:	81 2f       	mov	r24, r17
    5bf6:	8d 01       	movw	r16, r26
    5bf8:	e4 e0       	ldi	r30, 0x04	; 4
    5bfa:	ce 2e       	mov	r12, r30
    5bfc:	e6 e2       	ldi	r30, 0x26	; 38
    5bfe:	de 2e       	mov	r13, r30
    5c00:	aa 24       	eor	r10, r10
    5c02:	bb 24       	eor	r11, r11
    5c04:	f4 01       	movw	r30, r8
    5c06:	09 95       	icall
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    5c08:	62 96       	adiw	r28, 0x12	; 18
    5c0a:	0f b6       	in	r0, 0x3f	; 63
    5c0c:	f8 94       	cli
    5c0e:	de bf       	out	0x3e, r29	; 62
    5c10:	0f be       	out	0x3f, r0	; 63
    5c12:	cd bf       	out	0x3d, r28	; 61
    5c14:	cf 91       	pop	r28
    5c16:	df 91       	pop	r29
    5c18:	1f 91       	pop	r17
    5c1a:	0f 91       	pop	r16
    5c1c:	ff 90       	pop	r15
    5c1e:	ef 90       	pop	r14
    5c20:	df 90       	pop	r13
    5c22:	cf 90       	pop	r12
    5c24:	bf 90       	pop	r11
    5c26:	af 90       	pop	r10
    5c28:	9f 90       	pop	r9
    5c2a:	8f 90       	pop	r8
    5c2c:	7f 90       	pop	r7
    5c2e:	6f 90       	pop	r6
    5c30:	5f 90       	pop	r5
    5c32:	4f 90       	pop	r4
    5c34:	3f 90       	pop	r3
    5c36:	2f 90       	pop	r2
    5c38:	08 95       	ret

00005c3a <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    5c3a:	2f 92       	push	r2
    5c3c:	3f 92       	push	r3
    5c3e:	4f 92       	push	r4
    5c40:	5f 92       	push	r5
    5c42:	6f 92       	push	r6
    5c44:	7f 92       	push	r7
    5c46:	8f 92       	push	r8
    5c48:	9f 92       	push	r9
    5c4a:	af 92       	push	r10
    5c4c:	bf 92       	push	r11
    5c4e:	cf 92       	push	r12
    5c50:	df 92       	push	r13
    5c52:	ef 92       	push	r14
    5c54:	ff 92       	push	r15
    5c56:	0f 93       	push	r16
    5c58:	1f 93       	push	r17
    5c5a:	df 93       	push	r29
    5c5c:	cf 93       	push	r28
    5c5e:	cd b7       	in	r28, 0x3d	; 61
    5c60:	de b7       	in	r29, 0x3e	; 62
    5c62:	e7 97       	sbiw	r28, 0x37	; 55
    5c64:	0f b6       	in	r0, 0x3f	; 63
    5c66:	f8 94       	cli
    5c68:	de bf       	out	0x3e, r29	; 62
    5c6a:	0f be       	out	0x3f, r0	; 63
    5c6c:	cd bf       	out	0x3d, r28	; 61
    5c6e:	9d ab       	std	Y+53, r25	; 0x35
    5c70:	8c ab       	std	Y+52, r24	; 0x34
    5c72:	7f ab       	std	Y+55, r23	; 0x37
    5c74:	6e ab       	std	Y+54, r22	; 0x36
    if(!dd || !dir_entry)
    5c76:	00 97       	sbiw	r24, 0x00	; 0
    5c78:	09 f4       	brne	.+2      	; 0x5c7c <fat_read_dir+0x42>
    5c7a:	5e c1       	rjmp	.+700    	; 0x5f38 <fat_read_dir+0x2fe>
    5c7c:	61 15       	cp	r22, r1
    5c7e:	71 05       	cpc	r23, r1
    5c80:	09 f4       	brne	.+2      	; 0x5c84 <fat_read_dir+0x4a>
    5c82:	5a c1       	rjmp	.+692    	; 0x5f38 <fat_read_dir+0x2fe>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    5c84:	dc 01       	movw	r26, r24
    5c86:	0d 90       	ld	r0, X+
    5c88:	bc 91       	ld	r27, X
    5c8a:	a0 2d       	mov	r26, r0
    5c8c:	bb ab       	std	Y+51, r27	; 0x33
    5c8e:	aa ab       	std	Y+50, r26	; 0x32
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    5c90:	58 96       	adiw	r26, 0x18	; 24
    5c92:	ed 91       	ld	r30, X+
    5c94:	fc 91       	ld	r31, X
    5c96:	59 97       	sbiw	r26, 0x19	; 25
    5c98:	f9 ab       	std	Y+49, r31	; 0x31
    5c9a:	e8 ab       	std	Y+48, r30	; 0x30
    cluster_t cluster_num = dd->entry_cluster;
    5c9c:	dc 01       	movw	r26, r24
    5c9e:	d3 96       	adiw	r26, 0x33	; 51
    5ca0:	2d 91       	ld	r18, X+
    5ca2:	3d 91       	ld	r19, X+
    5ca4:	4d 91       	ld	r20, X+
    5ca6:	5c 91       	ld	r21, X
    5ca8:	d6 97       	sbiw	r26, 0x36	; 54
    5caa:	2c a7       	std	Y+44, r18	; 0x2c
    5cac:	3d a7       	std	Y+45, r19	; 0x2d
    5cae:	4e a7       	std	Y+46, r20	; 0x2e
    5cb0:	5f a7       	std	Y+47, r21	; 0x2f
    uint16_t cluster_offset = dd->entry_offset;
    5cb2:	d7 96       	adiw	r26, 0x37	; 55
    5cb4:	ed 91       	ld	r30, X+
    5cb6:	fc 91       	ld	r31, X
    5cb8:	d8 97       	sbiw	r26, 0x38	; 56
    5cba:	fb a7       	std	Y+43, r31	; 0x2b
    5cbc:	ea a7       	std	Y+42, r30	; 0x2a
    struct fat_read_dir_callback_arg arg;

    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));
    5cbe:	81 e3       	ldi	r24, 0x31	; 49
    5cc0:	db 01       	movw	r26, r22
    5cc2:	1d 92       	st	X+, r1
    5cc4:	8a 95       	dec	r24
    5cc6:	e9 f7       	brne	.-6      	; 0x5cc2 <fat_read_dir+0x88>

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    5cc8:	fe 01       	movw	r30, r28
    5cca:	31 96       	adiw	r30, 0x01	; 1
    5ccc:	85 e0       	ldi	r24, 0x05	; 5
    5cce:	df 01       	movw	r26, r30
    5cd0:	1d 92       	st	X+, r1
    5cd2:	8a 95       	dec	r24
    5cd4:	e9 f7       	brne	.-6      	; 0x5cd0 <fat_read_dir+0x96>
    arg.dir_entry = dir_entry;

    /* check if we read from the root directory */
    if(cluster_num == 0)
    5cd6:	21 15       	cp	r18, r1
    5cd8:	31 05       	cpc	r19, r1
    5cda:	41 05       	cpc	r20, r1
    5cdc:	51 05       	cpc	r21, r1
    5cde:	09 f0       	breq	.+2      	; 0x5ce2 <fat_read_dir+0xa8>
    5ce0:	0a c1       	rjmp	.+532    	; 0x5ef6 <fat_read_dir+0x2bc>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    5ce2:	aa a9       	ldd	r26, Y+50	; 0x32
    5ce4:	bb a9       	ldd	r27, Y+51	; 0x33
    5ce6:	ed 91       	ld	r30, X+
    5ce8:	fc 91       	ld	r31, X
    5cea:	11 97       	sbiw	r26, 0x01	; 1
    5cec:	80 85       	ldd	r24, Z+8	; 0x08
    5cee:	8b 30       	cpi	r24, 0x0B	; 11
    5cf0:	59 f4       	brne	.+22     	; 0x5d08 <fat_read_dir+0xce>
            cluster_num = header->root_dir_cluster;
    5cf2:	9a 96       	adiw	r26, 0x2a	; 42
    5cf4:	2d 91       	ld	r18, X+
    5cf6:	3d 91       	ld	r19, X+
    5cf8:	4d 91       	ld	r20, X+
    5cfa:	5c 91       	ld	r21, X
    5cfc:	9d 97       	sbiw	r26, 0x2d	; 45
    5cfe:	2c a7       	std	Y+44, r18	; 0x2c
    5d00:	3d a7       	std	Y+45, r19	; 0x2d
    5d02:	4e a7       	std	Y+46, r20	; 0x2e
    5d04:	5f a7       	std	Y+47, r21	; 0x2f
    5d06:	f7 c0       	rjmp	.+494    	; 0x5ef6 <fat_read_dir+0x2bc>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    5d08:	ea a9       	ldd	r30, Y+50	; 0x32
    5d0a:	fb a9       	ldd	r31, Y+51	; 0x33
    5d0c:	02 8c       	ldd	r0, Z+26	; 0x1a
    5d0e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    5d10:	e0 2d       	mov	r30, r0
    5d12:	aa a9       	ldd	r26, Y+50	; 0x32
    5d14:	bb a9       	ldd	r27, Y+51	; 0x33
    5d16:	92 96       	adiw	r26, 0x22	; 34
    5d18:	8d 91       	ld	r24, X+
    5d1a:	9c 91       	ld	r25, X
    5d1c:	93 97       	sbiw	r26, 0x23	; 35
    5d1e:	e8 1b       	sub	r30, r24
    5d20:	f9 0b       	sbc	r31, r25
    5d22:	f9 ab       	std	Y+49, r31	; 0x31
    5d24:	e8 ab       	std	Y+48, r30	; 0x30
    5d26:	e7 c0       	rjmp	.+462    	; 0x5ef6 <fat_read_dir+0x2bc>
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
    5d28:	4a a5       	ldd	r20, Y+42	; 0x2a
    5d2a:	5b a5       	ldd	r21, Y+43	; 0x2b
    5d2c:	9a 01       	movw	r18, r20
    5d2e:	40 e0       	ldi	r20, 0x00	; 0
    5d30:	50 e0       	ldi	r21, 0x00	; 0
    5d32:	2e a3       	std	Y+38, r18	; 0x26
    5d34:	3f a3       	std	Y+39, r19	; 0x27
    5d36:	48 a7       	std	Y+40, r20	; 0x28
    5d38:	59 a7       	std	Y+41, r21	; 0x29
        if(cluster_num == 0)
    5d3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    5d3c:	9d a5       	ldd	r25, Y+45	; 0x2d
    5d3e:	ae a5       	ldd	r26, Y+46	; 0x2e
    5d40:	bf a5       	ldd	r27, Y+47	; 0x2f
    5d42:	00 97       	sbiw	r24, 0x00	; 0
    5d44:	a1 05       	cpc	r26, r1
    5d46:	b1 05       	cpc	r27, r1
    5d48:	39 f4       	brne	.+14     	; 0x5d58 <fat_read_dir+0x11e>
            pos += header->root_dir_offset;
    5d4a:	ea a9       	ldd	r30, Y+50	; 0x32
    5d4c:	fb a9       	ldd	r31, Y+51	; 0x33
    5d4e:	82 a1       	ldd	r24, Z+34	; 0x22
    5d50:	93 a1       	ldd	r25, Z+35	; 0x23
    5d52:	a4 a1       	ldd	r26, Z+36	; 0x24
    5d54:	b5 a1       	ldd	r27, Z+37	; 0x25
    5d56:	73 c0       	rjmp	.+230    	; 0x5e3e <fat_read_dir+0x204>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    5d58:	2a a9       	ldd	r18, Y+50	; 0x32
    5d5a:	3b a9       	ldd	r19, Y+51	; 0x33
    5d5c:	21 15       	cp	r18, r1
    5d5e:	31 05       	cpc	r19, r1
    5d60:	09 f4       	brne	.+2      	; 0x5d64 <fat_read_dir+0x12a>
    5d62:	65 c0       	rjmp	.+202    	; 0x5e2e <fat_read_dir+0x1f4>
    5d64:	8c a5       	ldd	r24, Y+44	; 0x2c
    5d66:	9d a5       	ldd	r25, Y+45	; 0x2d
    5d68:	ae a5       	ldd	r26, Y+46	; 0x2e
    5d6a:	bf a5       	ldd	r27, Y+47	; 0x2f
    5d6c:	82 30       	cpi	r24, 0x02	; 2
    5d6e:	91 05       	cpc	r25, r1
    5d70:	a1 05       	cpc	r26, r1
    5d72:	b1 05       	cpc	r27, r1
    5d74:	08 f4       	brcc	.+2      	; 0x5d78 <fat_read_dir+0x13e>
    5d76:	5b c0       	rjmp	.+182    	; 0x5e2e <fat_read_dir+0x1f4>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    5d78:	02 97       	sbiw	r24, 0x02	; 2
    5d7a:	a1 09       	sbc	r26, r1
    5d7c:	b1 09       	sbc	r27, r1
    5d7e:	5c 01       	movw	r10, r24
    5d80:	6d 01       	movw	r12, r26
    5d82:	02 96       	adiw	r24, 0x02	; 2
    5d84:	a1 1d       	adc	r26, r1
    5d86:	b1 1d       	adc	r27, r1
    5d88:	8c a7       	std	Y+44, r24	; 0x2c
    5d8a:	9d a7       	std	Y+45, r25	; 0x2d
    5d8c:	ae a7       	std	Y+46, r26	; 0x2e
    5d8e:	bf a7       	std	Y+47, r27	; 0x2f
    5d90:	d9 01       	movw	r26, r18
    5d92:	58 96       	adiw	r26, 0x18	; 24
    5d94:	2d 90       	ld	r2, X+
    5d96:	3c 90       	ld	r3, X
    5d98:	59 97       	sbiw	r26, 0x19	; 25
    5d9a:	95 01       	movw	r18, r10
    5d9c:	a6 01       	movw	r20, r12
    5d9e:	60 e0       	ldi	r22, 0x00	; 0
    5da0:	70 e0       	ldi	r23, 0x00	; 0
    5da2:	80 e0       	ldi	r24, 0x00	; 0
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	51 01       	movw	r10, r2
    5da8:	cc 24       	eor	r12, r12
    5daa:	dd 24       	eor	r13, r13
    5dac:	ee 24       	eor	r14, r14
    5dae:	ff 24       	eor	r15, r15
    5db0:	00 e0       	ldi	r16, 0x00	; 0
    5db2:	10 e0       	ldi	r17, 0x00	; 0
    5db4:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    5db8:	ea a9       	ldd	r30, Y+50	; 0x32
    5dba:	fb a9       	ldd	r31, Y+51	; 0x33
    5dbc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5dbe:	f3 8c       	ldd	r15, Z+27	; 0x1b
    5dc0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    5dc2:	05 8d       	ldd	r16, Z+29	; 0x1d
    5dc4:	d6 8c       	ldd	r13, Z+30	; 0x1e
    5dc6:	a2 0f       	add	r26, r18
    5dc8:	f1 e0       	ldi	r31, 0x01	; 1
    5dca:	a2 17       	cp	r26, r18
    5dcc:	08 f0       	brcs	.+2      	; 0x5dd0 <fat_read_dir+0x196>
    5dce:	f0 e0       	ldi	r31, 0x00	; 0
    5dd0:	23 2f       	mov	r18, r19
    5dd2:	2f 0d       	add	r18, r15
    5dd4:	e1 e0       	ldi	r30, 0x01	; 1
    5dd6:	23 17       	cp	r18, r19
    5dd8:	08 f0       	brcs	.+2      	; 0x5ddc <fat_read_dir+0x1a2>
    5dda:	e0 e0       	ldi	r30, 0x00	; 0
    5ddc:	cf 2e       	mov	r12, r31
    5dde:	c2 0e       	add	r12, r18
    5de0:	31 e0       	ldi	r19, 0x01	; 1
    5de2:	c2 16       	cp	r12, r18
    5de4:	08 f0       	brcs	.+2      	; 0x5de8 <fat_read_dir+0x1ae>
    5de6:	30 e0       	ldi	r19, 0x00	; 0
    5de8:	e3 2b       	or	r30, r19
    5dea:	24 2f       	mov	r18, r20
    5dec:	2b 0f       	add	r18, r27
    5dee:	f1 e0       	ldi	r31, 0x01	; 1
    5df0:	24 17       	cp	r18, r20
    5df2:	08 f0       	brcs	.+2      	; 0x5df6 <fat_read_dir+0x1bc>
    5df4:	f0 e0       	ldi	r31, 0x00	; 0
    5df6:	ee 2e       	mov	r14, r30
    5df8:	e2 0e       	add	r14, r18
    5dfa:	31 e0       	ldi	r19, 0x01	; 1
    5dfc:	e2 16       	cp	r14, r18
    5dfe:	08 f0       	brcs	.+2      	; 0x5e02 <fat_read_dir+0x1c8>
    5e00:	30 e0       	ldi	r19, 0x00	; 0
    5e02:	f3 2b       	or	r31, r19
    5e04:	25 2f       	mov	r18, r21
    5e06:	20 0f       	add	r18, r16
    5e08:	41 e0       	ldi	r20, 0x01	; 1
    5e0a:	25 17       	cp	r18, r21
    5e0c:	08 f0       	brcs	.+2      	; 0x5e10 <fat_read_dir+0x1d6>
    5e0e:	40 e0       	ldi	r20, 0x00	; 0
    5e10:	ff 2e       	mov	r15, r31
    5e12:	f2 0e       	add	r15, r18
    5e14:	31 e0       	ldi	r19, 0x01	; 1
    5e16:	f2 16       	cp	r15, r18
    5e18:	08 f0       	brcs	.+2      	; 0x5e1c <fat_read_dir+0x1e2>
    5e1a:	30 e0       	ldi	r19, 0x00	; 0
    5e1c:	43 2b       	or	r20, r19
    5e1e:	26 2f       	mov	r18, r22
    5e20:	2d 0d       	add	r18, r13
    5e22:	04 2f       	mov	r16, r20
    5e24:	02 0f       	add	r16, r18
    5e26:	2a 2f       	mov	r18, r26
    5e28:	3c 2d       	mov	r19, r12
    5e2a:	a7 01       	movw	r20, r14
    5e2c:	04 c0       	rjmp	.+8      	; 0x5e36 <fat_read_dir+0x1fc>
    5e2e:	20 e0       	ldi	r18, 0x00	; 0
    5e30:	30 e0       	ldi	r19, 0x00	; 0
    5e32:	40 e0       	ldi	r20, 0x00	; 0
    5e34:	50 e0       	ldi	r21, 0x00	; 0
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);
    5e36:	8e a1       	ldd	r24, Y+38	; 0x26
    5e38:	9f a1       	ldd	r25, Y+39	; 0x27
    5e3a:	a8 a5       	ldd	r26, Y+40	; 0x28
    5e3c:	b9 a5       	ldd	r27, Y+41	; 0x29
    5e3e:	82 0f       	add	r24, r18
    5e40:	93 1f       	adc	r25, r19
    5e42:	a4 1f       	adc	r26, r20
    5e44:	b5 1f       	adc	r27, r21

        arg.bytes_read = 0;
    5e46:	1c 82       	std	Y+4, r1	; 0x04
    5e48:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    5e4a:	ea a9       	ldd	r30, Y+50	; 0x32
    5e4c:	fb a9       	ldd	r31, Y+51	; 0x33
    5e4e:	20 81       	ld	r18, Z
    5e50:	31 81       	ldd	r19, Z+1	; 0x01
    5e52:	2c 01       	movw	r4, r24
    5e54:	3d 01       	movw	r6, r26
    5e56:	c8 a8       	ldd	r12, Y+48	; 0x30
    5e58:	d9 a8       	ldd	r13, Y+49	; 0x31
    5e5a:	4a a5       	ldd	r20, Y+42	; 0x2a
    5e5c:	5b a5       	ldd	r21, Y+43	; 0x2b
    5e5e:	c4 1a       	sub	r12, r20
    5e60:	d5 0a       	sbc	r13, r21
    5e62:	d9 01       	movw	r26, r18
    5e64:	12 96       	adiw	r26, 0x02	; 2
    5e66:	ed 91       	ld	r30, X+
    5e68:	fc 91       	ld	r31, X
    5e6a:	13 97       	sbiw	r26, 0x03	; 3
    5e6c:	92 01       	movw	r18, r4
    5e6e:	a3 01       	movw	r20, r6
    5e70:	60 e0       	ldi	r22, 0x00	; 0
    5e72:	70 e0       	ldi	r23, 0x00	; 0
    5e74:	80 e0       	ldi	r24, 0x00	; 0
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	8e 01       	movw	r16, r28
    5e7a:	0a 5f       	subi	r16, 0xFA	; 250
    5e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e7e:	b0 e2       	ldi	r27, 0x20	; 32
    5e80:	eb 2e       	mov	r14, r27
    5e82:	f1 2c       	mov	r15, r1
    5e84:	a4 e8       	ldi	r26, 0x84	; 132
    5e86:	aa 2e       	mov	r10, r26
    5e88:	a9 e2       	ldi	r26, 0x29	; 41
    5e8a:	ba 2e       	mov	r11, r26
    5e8c:	4e 01       	movw	r8, r28
    5e8e:	08 94       	sec
    5e90:	81 1c       	adc	r8, r1
    5e92:	91 1c       	adc	r9, r1
    5e94:	09 95       	icall
    5e96:	88 23       	and	r24, r24
    5e98:	09 f4       	brne	.+2      	; 0x5e9c <fat_read_dir+0x262>
    5e9a:	4e c0       	rjmp	.+156    	; 0x5f38 <fat_read_dir+0x2fe>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    5e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    5ea0:	ea a5       	ldd	r30, Y+42	; 0x2a
    5ea2:	fb a5       	ldd	r31, Y+43	; 0x2b
    5ea4:	e8 0f       	add	r30, r24
    5ea6:	f9 1f       	adc	r31, r25
    5ea8:	fb a7       	std	Y+43, r31	; 0x2b
    5eaa:	ea a7       	std	Y+42, r30	; 0x2a

        if(cluster_offset >= cluster_size)
    5eac:	28 a9       	ldd	r18, Y+48	; 0x30
    5eae:	39 a9       	ldd	r19, Y+49	; 0x31
    5eb0:	e2 17       	cp	r30, r18
    5eb2:	f3 07       	cpc	r31, r19
    5eb4:	20 f1       	brcs	.+72     	; 0x5efe <fat_read_dir+0x2c4>
        {
            /* we reached the cluster border and switch to the next cluster */
            cluster_offset = 0;

            /* get number of next cluster */
            if(!(cluster_num = fat_get_next_cluster(fs, cluster_num)))
    5eb6:	8a a9       	ldd	r24, Y+50	; 0x32
    5eb8:	9b a9       	ldd	r25, Y+51	; 0x33
    5eba:	4c a5       	ldd	r20, Y+44	; 0x2c
    5ebc:	5d a5       	ldd	r21, Y+45	; 0x2d
    5ebe:	6e a5       	ldd	r22, Y+46	; 0x2e
    5ec0:	7f a5       	ldd	r23, Y+47	; 0x2f
    5ec2:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <fat_get_next_cluster>
    5ec6:	6c a7       	std	Y+44, r22	; 0x2c
    5ec8:	7d a7       	std	Y+45, r23	; 0x2d
    5eca:	8e a7       	std	Y+46, r24	; 0x2e
    5ecc:	9f a7       	std	Y+47, r25	; 0x2f
    5ece:	1b a6       	std	Y+43, r1	; 0x2b
    5ed0:	1a a6       	std	Y+42, r1	; 0x2a
    5ed2:	61 15       	cp	r22, r1
    5ed4:	71 05       	cpc	r23, r1
    5ed6:	81 05       	cpc	r24, r1
    5ed8:	91 05       	cpc	r25, r1
    5eda:	89 f4       	brne	.+34     	; 0x5efe <fat_read_dir+0x2c4>
            {
                /* directory entry not found, reset directory handle */
                cluster_num = dd->dir_entry.cluster;
    5edc:	ac a9       	ldd	r26, Y+52	; 0x34
    5ede:	bd a9       	ldd	r27, Y+53	; 0x35
    5ee0:	93 96       	adiw	r26, 0x23	; 35
    5ee2:	8d 91       	ld	r24, X+
    5ee4:	9d 91       	ld	r25, X+
    5ee6:	0d 90       	ld	r0, X+
    5ee8:	bc 91       	ld	r27, X
    5eea:	a0 2d       	mov	r26, r0
    5eec:	8c a7       	std	Y+44, r24	; 0x2c
    5eee:	9d a7       	std	Y+45, r25	; 0x2d
    5ef0:	ae a7       	std	Y+46, r26	; 0x2e
    5ef2:	bf a7       	std	Y+47, r27	; 0x2f
    5ef4:	08 c0       	rjmp	.+16     	; 0x5f06 <fat_read_dir+0x2cc>
    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    arg.dir_entry = dir_entry;
    5ef6:	ee a9       	ldd	r30, Y+54	; 0x36
    5ef8:	ff a9       	ldd	r31, Y+55	; 0x37
    5efa:	fa 83       	std	Y+2, r31	; 0x02
    5efc:	e9 83       	std	Y+1, r30	; 0x01
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    5efe:	8d 81       	ldd	r24, Y+5	; 0x05
    5f00:	88 23       	and	r24, r24
    5f02:	09 f4       	brne	.+2      	; 0x5f06 <fat_read_dir+0x2cc>
    5f04:	11 cf       	rjmp	.-478    	; 0x5d28 <fat_read_dir+0xee>
                break;
            }
        }
    }

    dd->entry_cluster = cluster_num;
    5f06:	2c a5       	ldd	r18, Y+44	; 0x2c
    5f08:	3d a5       	ldd	r19, Y+45	; 0x2d
    5f0a:	4e a5       	ldd	r20, Y+46	; 0x2e
    5f0c:	5f a5       	ldd	r21, Y+47	; 0x2f
    5f0e:	ac a9       	ldd	r26, Y+52	; 0x34
    5f10:	bd a9       	ldd	r27, Y+53	; 0x35
    5f12:	d3 96       	adiw	r26, 0x33	; 51
    5f14:	2d 93       	st	X+, r18
    5f16:	3d 93       	st	X+, r19
    5f18:	4d 93       	st	X+, r20
    5f1a:	5c 93       	st	X, r21
    5f1c:	d6 97       	sbiw	r26, 0x36	; 54
    dd->entry_offset = cluster_offset;
    5f1e:	ea a5       	ldd	r30, Y+42	; 0x2a
    5f20:	fb a5       	ldd	r31, Y+43	; 0x2b
    5f22:	d8 96       	adiw	r26, 0x38	; 56
    5f24:	fc 93       	st	X, r31
    5f26:	ee 93       	st	-X, r30
    5f28:	d7 97       	sbiw	r26, 0x37	; 55

    return dir_entry->long_name[0] != '\0' ? 1 : 0;
    5f2a:	ae a9       	ldd	r26, Y+54	; 0x36
    5f2c:	bf a9       	ldd	r27, Y+55	; 0x37
    5f2e:	8c 91       	ld	r24, X
    5f30:	88 23       	and	r24, r24
    5f32:	19 f0       	breq	.+6      	; 0x5f3a <fat_read_dir+0x300>
    5f34:	81 e0       	ldi	r24, 0x01	; 1
    5f36:	01 c0       	rjmp	.+2      	; 0x5f3a <fat_read_dir+0x300>
    5f38:	80 e0       	ldi	r24, 0x00	; 0
}
    5f3a:	e7 96       	adiw	r28, 0x37	; 55
    5f3c:	0f b6       	in	r0, 0x3f	; 63
    5f3e:	f8 94       	cli
    5f40:	de bf       	out	0x3e, r29	; 62
    5f42:	0f be       	out	0x3f, r0	; 63
    5f44:	cd bf       	out	0x3d, r28	; 61
    5f46:	cf 91       	pop	r28
    5f48:	df 91       	pop	r29
    5f4a:	1f 91       	pop	r17
    5f4c:	0f 91       	pop	r16
    5f4e:	ff 90       	pop	r15
    5f50:	ef 90       	pop	r14
    5f52:	df 90       	pop	r13
    5f54:	cf 90       	pop	r12
    5f56:	bf 90       	pop	r11
    5f58:	af 90       	pop	r10
    5f5a:	9f 90       	pop	r9
    5f5c:	8f 90       	pop	r8
    5f5e:	7f 90       	pop	r7
    5f60:	6f 90       	pop	r6
    5f62:	5f 90       	pop	r5
    5f64:	4f 90       	pop	r4
    5f66:	3f 90       	pop	r3
    5f68:	2f 90       	pop	r2
    5f6a:	08 95       	ret

00005f6c <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    5f6c:	2f 92       	push	r2
    5f6e:	3f 92       	push	r3
    5f70:	4f 92       	push	r4
    5f72:	5f 92       	push	r5
    5f74:	6f 92       	push	r6
    5f76:	7f 92       	push	r7
    5f78:	8f 92       	push	r8
    5f7a:	9f 92       	push	r9
    5f7c:	af 92       	push	r10
    5f7e:	bf 92       	push	r11
    5f80:	cf 92       	push	r12
    5f82:	df 92       	push	r13
    5f84:	ef 92       	push	r14
    5f86:	ff 92       	push	r15
    5f88:	0f 93       	push	r16
    5f8a:	1f 93       	push	r17
    5f8c:	df 93       	push	r29
    5f8e:	cf 93       	push	r28
    5f90:	cd b7       	in	r28, 0x3d	; 61
    5f92:	de b7       	in	r29, 0x3e	; 62
    5f94:	cd 54       	subi	r28, 0x4D	; 77
    5f96:	d0 40       	sbci	r29, 0x00	; 0
    5f98:	0f b6       	in	r0, 0x3f	; 63
    5f9a:	f8 94       	cli
    5f9c:	de bf       	out	0x3e, r29	; 62
    5f9e:	0f be       	out	0x3f, r0	; 63
    5fa0:	cd bf       	out	0x3d, r28	; 61
    5fa2:	2c 01       	movw	r4, r24
    if(!partition ||
    5fa4:	00 97       	sbiw	r24, 0x00	; 0
    5fa6:	09 f4       	brne	.+2      	; 0x5faa <fat_open+0x3e>
    5fa8:	d9 c3       	rjmp	.+1970   	; 0x675c <fat_open+0x7f0>
    5faa:	dc 01       	movw	r26, r24
    5fac:	14 96       	adiw	r26, 0x04	; 4
    5fae:	8d 91       	ld	r24, X+
    5fb0:	9c 91       	ld	r25, X
    5fb2:	15 97       	sbiw	r26, 0x05	; 5
    5fb4:	89 2b       	or	r24, r25
    5fb6:	09 f4       	brne	.+2      	; 0x5fba <fat_open+0x4e>
    5fb8:	d1 c3       	rjmp	.+1954   	; 0x675c <fat_open+0x7f0>
    5fba:	16 96       	adiw	r26, 0x06	; 6
    5fbc:	8d 91       	ld	r24, X+
    5fbe:	9c 91       	ld	r25, X
    5fc0:	17 97       	sbiw	r26, 0x07	; 7
    5fc2:	89 2b       	or	r24, r25
    5fc4:	09 f4       	brne	.+2      	; 0x5fc8 <fat_open+0x5c>
    5fc6:	ca c3       	rjmp	.+1940   	; 0x675c <fat_open+0x7f0>
    5fc8:	e6 c3       	rjmp	.+1996   	; 0x6796 <fat_open+0x82a>
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    5fca:	eb ed       	ldi	r30, 0xDB	; 219
    5fcc:	f3 e0       	ldi	r31, 0x03	; 3
    5fce:	8e e2       	ldi	r24, 0x2E	; 46
    5fd0:	df 01       	movw	r26, r30
    5fd2:	1d 92       	st	X+, r1
    5fd4:	8a 95       	dec	r24
    5fd6:	e9 f7       	brne	.-6      	; 0x5fd2 <fat_open+0x66>

    fs->partition = partition;
    5fd8:	50 92 dc 03 	sts	0x03DC, r5
    5fdc:	40 92 db 03 	sts	0x03DB, r4
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    5fe0:	f2 01       	movw	r30, r4
    5fe2:	a1 84       	ldd	r10, Z+9	; 0x09
    5fe4:	b2 84       	ldd	r11, Z+10	; 0x0a
    5fe6:	c3 84       	ldd	r12, Z+11	; 0x0b
    5fe8:	d4 84       	ldd	r13, Z+12	; 0x0c
    5fea:	95 01       	movw	r18, r10
    5fec:	a6 01       	movw	r20, r12
    5fee:	60 e0       	ldi	r22, 0x00	; 0
    5ff0:	70 e0       	ldi	r23, 0x00	; 0
    5ff2:	80 e0       	ldi	r24, 0x00	; 0
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	09 e0       	ldi	r16, 0x09	; 9
    5ff8:	0e 94 c3 45 	call	0x8b86	; 0x8b86 <__ashldi3>
    5ffc:	2e af       	std	Y+62, r18	; 0x3e
    5ffe:	3f af       	std	Y+63, r19	; 0x3f
    6000:	21 96       	adiw	r28, 0x01	; 1
    6002:	4f af       	std	Y+63, r20	; 0x3f
    6004:	21 97       	sbiw	r28, 0x01	; 1
    6006:	22 96       	adiw	r28, 0x02	; 2
    6008:	5f af       	std	Y+63, r21	; 0x3f
    600a:	22 97       	sbiw	r28, 0x02	; 2
    600c:	23 96       	adiw	r28, 0x03	; 3
    600e:	6f af       	std	Y+63, r22	; 0x3f
    6010:	23 97       	sbiw	r28, 0x03	; 3
    6012:	24 96       	adiw	r28, 0x04	; 4
    6014:	7f af       	std	Y+63, r23	; 0x3f
    6016:	24 97       	sbiw	r28, 0x04	; 4
    6018:	25 96       	adiw	r28, 0x05	; 5
    601a:	8f af       	std	Y+63, r24	; 0x3f
    601c:	25 97       	sbiw	r28, 0x05	; 5
    601e:	26 96       	adiw	r28, 0x06	; 6
    6020:	9f af       	std	Y+63, r25	; 0x3f
    6022:	26 97       	sbiw	r28, 0x06	; 6
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    6024:	25 5f       	subi	r18, 0xF5	; 245
    6026:	31 e0       	ldi	r19, 0x01	; 1
    6028:	fe ad       	ldd	r31, Y+62	; 0x3e
    602a:	2f 17       	cp	r18, r31
    602c:	08 f0       	brcs	.+2      	; 0x6030 <fat_open+0xc4>
    602e:	30 e0       	ldi	r19, 0x00	; 0
    6030:	ef ac       	ldd	r14, Y+63	; 0x3f
    6032:	3e 0d       	add	r19, r14
    6034:	41 e0       	ldi	r20, 0x01	; 1
    6036:	3e 15       	cp	r19, r14
    6038:	08 f0       	brcs	.+2      	; 0x603c <fat_open+0xd0>
    603a:	40 e0       	ldi	r20, 0x00	; 0
    603c:	21 96       	adiw	r28, 0x01	; 1
    603e:	ff ac       	ldd	r15, Y+63	; 0x3f
    6040:	21 97       	sbiw	r28, 0x01	; 1
    6042:	4f 0d       	add	r20, r15
    6044:	51 e0       	ldi	r21, 0x01	; 1
    6046:	4f 15       	cp	r20, r15
    6048:	08 f0       	brcs	.+2      	; 0x604c <fat_open+0xe0>
    604a:	50 e0       	ldi	r21, 0x00	; 0
    604c:	22 96       	adiw	r28, 0x02	; 2
    604e:	0f ad       	ldd	r16, Y+63	; 0x3f
    6050:	22 97       	sbiw	r28, 0x02	; 2
    6052:	50 0f       	add	r21, r16
    6054:	61 e0       	ldi	r22, 0x01	; 1
    6056:	50 17       	cp	r21, r16
    6058:	08 f0       	brcs	.+2      	; 0x605c <fat_open+0xf0>
    605a:	60 e0       	ldi	r22, 0x00	; 0
    605c:	23 96       	adiw	r28, 0x03	; 3
    605e:	1f ad       	ldd	r17, Y+63	; 0x3f
    6060:	23 97       	sbiw	r28, 0x03	; 3
    6062:	61 0f       	add	r22, r17
    6064:	71 e0       	ldi	r23, 0x01	; 1
    6066:	61 17       	cp	r22, r17
    6068:	08 f0       	brcs	.+2      	; 0x606c <fat_open+0x100>
    606a:	70 e0       	ldi	r23, 0x00	; 0
    606c:	24 96       	adiw	r28, 0x04	; 4
    606e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6070:	24 97       	sbiw	r28, 0x04	; 4
    6072:	78 0f       	add	r23, r24
    6074:	81 e0       	ldi	r24, 0x01	; 1
    6076:	24 96       	adiw	r28, 0x04	; 4
    6078:	9f ad       	ldd	r25, Y+63	; 0x3f
    607a:	24 97       	sbiw	r28, 0x04	; 4
    607c:	79 17       	cp	r23, r25
    607e:	08 f0       	brcs	.+2      	; 0x6082 <fat_open+0x116>
    6080:	80 e0       	ldi	r24, 0x00	; 0
    6082:	25 96       	adiw	r28, 0x05	; 5
    6084:	af ad       	ldd	r26, Y+63	; 0x3f
    6086:	25 97       	sbiw	r28, 0x05	; 5
    6088:	8a 0f       	add	r24, r26
    608a:	91 e0       	ldi	r25, 0x01	; 1
    608c:	8a 17       	cp	r24, r26
    608e:	08 f0       	brcs	.+2      	; 0x6092 <fat_open+0x126>
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	d2 01       	movw	r26, r4
    6094:	ed 91       	ld	r30, X+
    6096:	fc 91       	ld	r31, X
    6098:	26 96       	adiw	r28, 0x06	; 6
    609a:	bf ad       	ldd	r27, Y+63	; 0x3f
    609c:	26 97       	sbiw	r28, 0x06	; 6
    609e:	9b 0f       	add	r25, r27
    60a0:	8e 01       	movw	r16, r28
    60a2:	0f 5f       	subi	r16, 0xFF	; 255
    60a4:	1f 4f       	sbci	r17, 0xFF	; 255
    60a6:	a5 e2       	ldi	r26, 0x25	; 37
    60a8:	ea 2e       	mov	r14, r26
    60aa:	f1 2c       	mov	r15, r1
    60ac:	09 95       	icall
    60ae:	88 23       	and	r24, r24
    60b0:	09 f4       	brne	.+2      	; 0x60b4 <fat_open+0x148>
    60b2:	78 c3       	rjmp	.+1776   	; 0x67a4 <fat_open+0x838>
        return 0;

    uint16_t bytes_per_sector = ltoh16(*((uint16_t*) &buffer[0x00]));
    60b4:	29 80       	ldd	r2, Y+1	; 0x01
    60b6:	3a 80       	ldd	r3, Y+2	; 0x02
    uint16_t reserved_sectors = ltoh16(*((uint16_t*) &buffer[0x03]));
    60b8:	ec 81       	ldd	r30, Y+4	; 0x04
    60ba:	fd 81       	ldd	r31, Y+5	; 0x05
    60bc:	ff a7       	std	Y+47, r31	; 0x2f
    60be:	ee a7       	std	Y+46, r30	; 0x2e
    uint8_t sectors_per_cluster = buffer[0x02];
    60c0:	fb 81       	ldd	r31, Y+3	; 0x03
    60c2:	f8 ab       	std	Y+48, r31	; 0x30
    uint8_t fat_copies = buffer[0x05];
    60c4:	ee 80       	ldd	r14, Y+6	; 0x06
    60c6:	e9 aa       	std	Y+49, r14	; 0x31
    uint16_t max_root_entries = ltoh16(*((uint16_t*) &buffer[0x06]));
    60c8:	0f 81       	ldd	r16, Y+7	; 0x07
    60ca:	18 85       	ldd	r17, Y+8	; 0x08
    60cc:	1b ab       	std	Y+51, r17	; 0x33
    60ce:	0a ab       	std	Y+50, r16	; 0x32
    uint16_t sector_count_16 = ltoh16(*((uint16_t*) &buffer[0x08]));
    60d0:	89 85       	ldd	r24, Y+9	; 0x09
    60d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    uint16_t sectors_per_fat = ltoh16(*((uint16_t*) &buffer[0x0b]));
    60d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    60d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    60d8:	3d ab       	std	Y+53, r19	; 0x35
    60da:	2c ab       	std	Y+52, r18	; 0x34
    uint32_t sector_count = ltoh32(*((uint32_t*) &buffer[0x15]));
    60dc:	ae 88       	ldd	r10, Y+22	; 0x16
    60de:	bf 88       	ldd	r11, Y+23	; 0x17
    60e0:	c8 8c       	ldd	r12, Y+24	; 0x18
    60e2:	d9 8c       	ldd	r13, Y+25	; 0x19
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = ltoh32(*((uint32_t*) &buffer[0x19]));
    60e4:	4a 8d       	ldd	r20, Y+26	; 0x1a
    60e6:	5b 8d       	ldd	r21, Y+27	; 0x1b
    60e8:	6c 8d       	ldd	r22, Y+28	; 0x1c
    60ea:	7d 8d       	ldd	r23, Y+29	; 0x1d
    60ec:	4e ab       	std	Y+54, r20	; 0x36
    60ee:	5f ab       	std	Y+55, r21	; 0x37
    60f0:	68 af       	std	Y+56, r22	; 0x38
    60f2:	79 af       	std	Y+57, r23	; 0x39
    uint32_t cluster_root_dir = ltoh32(*((uint32_t*) &buffer[0x21]));
    60f4:	ea a0       	ldd	r14, Y+34	; 0x22
    60f6:	fb a0       	ldd	r15, Y+35	; 0x23
    60f8:	0c a1       	ldd	r16, Y+36	; 0x24
    60fa:	1d a1       	ldd	r17, Y+37	; 0x25
    60fc:	ea ae       	std	Y+58, r14	; 0x3a
    60fe:	fb ae       	std	Y+59, r15	; 0x3b
    6100:	0c af       	std	Y+60, r16	; 0x3c
    6102:	1d af       	std	Y+61, r17	; 0x3d
#endif

    if(sector_count == 0)
    6104:	a1 14       	cp	r10, r1
    6106:	b1 04       	cpc	r11, r1
    6108:	c1 04       	cpc	r12, r1
    610a:	d1 04       	cpc	r13, r1
    610c:	31 f4       	brne	.+12     	; 0x611a <fat_open+0x1ae>
    {
        if(sector_count_16 == 0)
    610e:	00 97       	sbiw	r24, 0x00	; 0
    6110:	09 f4       	brne	.+2      	; 0x6114 <fat_open+0x1a8>
    6112:	48 c3       	rjmp	.+1680   	; 0x67a4 <fat_open+0x838>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    6114:	5c 01       	movw	r10, r24
    6116:	cc 24       	eor	r12, r12
    6118:	dd 24       	eor	r13, r13
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
    611a:	0c a9       	ldd	r16, Y+52	; 0x34
    611c:	1d a9       	ldd	r17, Y+53	; 0x35
    611e:	01 15       	cp	r16, r1
    6120:	11 05       	cpc	r17, r1
    6122:	41 f0       	breq	.+16     	; 0x6134 <fat_open+0x1c8>
        sectors_per_fat32 = sectors_per_fat;
    6124:	98 01       	movw	r18, r16
    6126:	40 e0       	ldi	r20, 0x00	; 0
    6128:	50 e0       	ldi	r21, 0x00	; 0
    612a:	2e ab       	std	Y+54, r18	; 0x36
    612c:	3f ab       	std	Y+55, r19	; 0x37
    612e:	48 af       	std	Y+56, r20	; 0x38
    6130:	59 af       	std	Y+57, r21	; 0x39
    6132:	0a c0       	rjmp	.+20     	; 0x6148 <fat_open+0x1dc>
    else if(sectors_per_fat32 == 0)
    6134:	6e a9       	ldd	r22, Y+54	; 0x36
    6136:	7f a9       	ldd	r23, Y+55	; 0x37
    6138:	88 ad       	ldd	r24, Y+56	; 0x38
    613a:	99 ad       	ldd	r25, Y+57	; 0x39
    613c:	61 15       	cp	r22, r1
    613e:	71 05       	cpc	r23, r1
    6140:	81 05       	cpc	r24, r1
    6142:	91 05       	cpc	r25, r1
    6144:	09 f4       	brne	.+2      	; 0x6148 <fat_open+0x1dc>
    6146:	2e c3       	rjmp	.+1628   	; 0x67a4 <fat_open+0x838>
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    6148:	ee a5       	ldd	r30, Y+46	; 0x2e
    614a:	ff a5       	ldd	r31, Y+47	; 0x2f
    614c:	cf 01       	movw	r24, r30
    614e:	a0 e0       	ldi	r26, 0x00	; 0
    6150:	b0 e0       	ldi	r27, 0x00	; 0
    6152:	86 01       	movw	r16, r12
    6154:	75 01       	movw	r14, r10
    6156:	e8 1a       	sub	r14, r24
    6158:	f9 0a       	sbc	r15, r25
    615a:	0a 0b       	sbc	r16, r26
    615c:	1b 0b       	sbc	r17, r27
    615e:	f9 a9       	ldd	r31, Y+49	; 0x31
    6160:	2f 2f       	mov	r18, r31
    6162:	30 e0       	ldi	r19, 0x00	; 0
    6164:	40 e0       	ldi	r20, 0x00	; 0
    6166:	50 e0       	ldi	r21, 0x00	; 0
    6168:	6e a9       	ldd	r22, Y+54	; 0x36
    616a:	7f a9       	ldd	r23, Y+55	; 0x37
    616c:	88 ad       	ldd	r24, Y+56	; 0x38
    616e:	99 ad       	ldd	r25, Y+57	; 0x39
    6170:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    6174:	e6 1a       	sub	r14, r22
    6176:	f7 0a       	sbc	r15, r23
    6178:	08 0b       	sbc	r16, r24
    617a:	19 0b       	sbc	r17, r25
    617c:	c1 01       	movw	r24, r2
    617e:	01 97       	sbiw	r24, 0x01	; 1
    6180:	2a a9       	ldd	r18, Y+50	; 0x32
    6182:	3b a9       	ldd	r19, Y+51	; 0x33
    6184:	45 e0       	ldi	r20, 0x05	; 5
    6186:	22 0f       	add	r18, r18
    6188:	33 1f       	adc	r19, r19
    618a:	4a 95       	dec	r20
    618c:	e1 f7       	brne	.-8      	; 0x6186 <fat_open+0x21a>
    618e:	82 0f       	add	r24, r18
    6190:	93 1f       	adc	r25, r19
    6192:	b1 01       	movw	r22, r2
    6194:	0e 94 9d 49 	call	0x933a	; 0x933a <__udivmodhi4>
    6198:	80 e0       	ldi	r24, 0x00	; 0
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	e6 1a       	sub	r14, r22
    619e:	f7 0a       	sbc	r15, r23
    61a0:	08 0b       	sbc	r16, r24
    61a2:	19 0b       	sbc	r17, r25
    61a4:	68 a9       	ldd	r22, Y+48	; 0x30
    61a6:	26 2f       	mov	r18, r22
    61a8:	30 e0       	ldi	r19, 0x00	; 0
    61aa:	40 e0       	ldi	r20, 0x00	; 0
    61ac:	50 e0       	ldi	r21, 0x00	; 0
    61ae:	c8 01       	movw	r24, r16
    61b0:	b7 01       	movw	r22, r14
    61b2:	0e 94 c4 49 	call	0x9388	; 0x9388 <__udivmodsi4>
    61b6:	39 01       	movw	r6, r18
    61b8:	4a 01       	movw	r8, r20
    if(data_cluster_count < 4085)
    61ba:	75 ef       	ldi	r23, 0xF5	; 245
    61bc:	67 16       	cp	r6, r23
    61be:	7f e0       	ldi	r23, 0x0F	; 15
    61c0:	77 06       	cpc	r7, r23
    61c2:	70 e0       	ldi	r23, 0x00	; 0
    61c4:	87 06       	cpc	r8, r23
    61c6:	70 e0       	ldi	r23, 0x00	; 0
    61c8:	97 06       	cpc	r9, r23
    61ca:	08 f4       	brcc	.+2      	; 0x61ce <fat_open+0x262>
    61cc:	eb c2       	rjmp	.+1494   	; 0x67a4 <fat_open+0x838>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    61ce:	85 ef       	ldi	r24, 0xF5	; 245
    61d0:	68 16       	cp	r6, r24
    61d2:	8f ef       	ldi	r24, 0xFF	; 255
    61d4:	78 06       	cpc	r7, r24
    61d6:	80 e0       	ldi	r24, 0x00	; 0
    61d8:	88 06       	cpc	r8, r24
    61da:	80 e0       	ldi	r24, 0x00	; 0
    61dc:	98 06       	cpc	r9, r24
    61de:	28 f4       	brcc	.+10     	; 0x61ea <fat_open+0x27e>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    61e0:	86 e0       	ldi	r24, 0x06	; 6
    61e2:	d2 01       	movw	r26, r4
    61e4:	18 96       	adiw	r26, 0x08	; 8
    61e6:	8c 93       	st	X, r24
    61e8:	03 c0       	rjmp	.+6      	; 0x61f0 <fat_open+0x284>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    61ea:	8b e0       	ldi	r24, 0x0B	; 11
    61ec:	f2 01       	movw	r30, r4
    61ee:	80 87       	std	Z+8, r24	; 0x08

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    61f0:	8c e2       	ldi	r24, 0x2C	; 44
    61f2:	ed ed       	ldi	r30, 0xDD	; 221
    61f4:	f3 e0       	ldi	r31, 0x03	; 3
    61f6:	df 01       	movw	r26, r30
    61f8:	1d 92       	st	X+, r1
    61fa:	8a 95       	dec	r24
    61fc:	e9 f7       	brne	.-6      	; 0x61f8 <fat_open+0x28c>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    61fe:	71 01       	movw	r14, r2
    6200:	00 e0       	ldi	r16, 0x00	; 0
    6202:	10 e0       	ldi	r17, 0x00	; 0
    6204:	20 e0       	ldi	r18, 0x00	; 0
    6206:	30 e0       	ldi	r19, 0x00	; 0
    6208:	40 e0       	ldi	r20, 0x00	; 0
    620a:	50 e0       	ldi	r21, 0x00	; 0
    620c:	2e a2       	std	Y+38, r2	; 0x26
    620e:	ff a2       	std	Y+39, r15	; 0x27
    6210:	08 a7       	std	Y+40, r16	; 0x28
    6212:	19 a7       	std	Y+41, r17	; 0x29
    6214:	2a a7       	std	Y+42, r18	; 0x2a
    6216:	3b a7       	std	Y+43, r19	; 0x2b
    6218:	4c a7       	std	Y+44, r20	; 0x2c
    621a:	5d a7       	std	Y+45, r21	; 0x2d
    621c:	95 01       	movw	r18, r10
    621e:	a6 01       	movw	r20, r12
    6220:	60 e0       	ldi	r22, 0x00	; 0
    6222:	70 e0       	ldi	r23, 0x00	; 0
    6224:	80 e0       	ldi	r24, 0x00	; 0
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	ae a0       	ldd	r10, Y+38	; 0x26
    622a:	bf a0       	ldd	r11, Y+39	; 0x27
    622c:	cc 24       	eor	r12, r12
    622e:	dd 24       	eor	r13, r13
    6230:	ee 24       	eor	r14, r14
    6232:	ff 24       	eor	r15, r15
    6234:	00 e0       	ldi	r16, 0x00	; 0
    6236:	10 e0       	ldi	r17, 0x00	; 0
    6238:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    623c:	20 93 dd 03 	sts	0x03DD, r18
    6240:	30 93 de 03 	sts	0x03DE, r19
    6244:	40 93 df 03 	sts	0x03DF, r20
    6248:	50 93 e0 03 	sts	0x03E0, r21
    624c:	60 93 e1 03 	sts	0x03E1, r22
    6250:	70 93 e2 03 	sts	0x03E2, r23
    6254:	80 93 e3 03 	sts	0x03E3, r24
    6258:	90 93 e4 03 	sts	0x03E4, r25

    header->fat_offset = /* jump to partition */
    625c:	0e a5       	ldd	r16, Y+46	; 0x2e
    625e:	1f a5       	ldd	r17, Y+47	; 0x2f
    6260:	98 01       	movw	r18, r16
    6262:	40 e0       	ldi	r20, 0x00	; 0
    6264:	50 e0       	ldi	r21, 0x00	; 0
    6266:	60 e0       	ldi	r22, 0x00	; 0
    6268:	70 e0       	ldi	r23, 0x00	; 0
    626a:	80 e0       	ldi	r24, 0x00	; 0
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	00 e0       	ldi	r16, 0x00	; 0
    6270:	10 e0       	ldi	r17, 0x00	; 0
    6272:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    6276:	a3 2f       	mov	r26, r19
    6278:	b4 2f       	mov	r27, r20
    627a:	15 2f       	mov	r17, r21
    627c:	06 2f       	mov	r16, r22
    627e:	f7 2e       	mov	r15, r23
    6280:	d8 2e       	mov	r13, r24
    6282:	ce ac       	ldd	r12, Y+62	; 0x3e
    6284:	c2 0e       	add	r12, r18
    6286:	f1 e0       	ldi	r31, 0x01	; 1
    6288:	c2 16       	cp	r12, r18
    628a:	08 f0       	brcs	.+2      	; 0x628e <fat_open+0x322>
    628c:	f0 e0       	ldi	r31, 0x00	; 0
    628e:	3f ad       	ldd	r19, Y+63	; 0x3f
    6290:	3a 0f       	add	r19, r26
    6292:	e1 e0       	ldi	r30, 0x01	; 1
    6294:	3a 17       	cp	r19, r26
    6296:	08 f0       	brcs	.+2      	; 0x629a <fat_open+0x32e>
    6298:	e0 e0       	ldi	r30, 0x00	; 0
    629a:	ef 2e       	mov	r14, r31
    629c:	e3 0e       	add	r14, r19
    629e:	21 e0       	ldi	r18, 0x01	; 1
    62a0:	e3 16       	cp	r14, r19
    62a2:	08 f0       	brcs	.+2      	; 0x62a6 <fat_open+0x33a>
    62a4:	20 e0       	ldi	r18, 0x00	; 0
    62a6:	e2 2b       	or	r30, r18
    62a8:	21 96       	adiw	r28, 0x01	; 1
    62aa:	4f ad       	ldd	r20, Y+63	; 0x3f
    62ac:	21 97       	sbiw	r28, 0x01	; 1
    62ae:	4b 0f       	add	r20, r27
    62b0:	31 e0       	ldi	r19, 0x01	; 1
    62b2:	4b 17       	cp	r20, r27
    62b4:	08 f0       	brcs	.+2      	; 0x62b8 <fat_open+0x34c>
    62b6:	30 e0       	ldi	r19, 0x00	; 0
    62b8:	ae 2f       	mov	r26, r30
    62ba:	a4 0f       	add	r26, r20
    62bc:	21 e0       	ldi	r18, 0x01	; 1
    62be:	a4 17       	cp	r26, r20
    62c0:	08 f0       	brcs	.+2      	; 0x62c4 <fat_open+0x358>
    62c2:	20 e0       	ldi	r18, 0x00	; 0
    62c4:	32 2b       	or	r19, r18
    62c6:	22 96       	adiw	r28, 0x02	; 2
    62c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    62ca:	22 97       	sbiw	r28, 0x02	; 2
    62cc:	51 0f       	add	r21, r17
    62ce:	41 e0       	ldi	r20, 0x01	; 1
    62d0:	51 17       	cp	r21, r17
    62d2:	08 f0       	brcs	.+2      	; 0x62d6 <fat_open+0x36a>
    62d4:	40 e0       	ldi	r20, 0x00	; 0
    62d6:	f3 2f       	mov	r31, r19
    62d8:	f5 0f       	add	r31, r21
    62da:	21 e0       	ldi	r18, 0x01	; 1
    62dc:	f5 17       	cp	r31, r21
    62de:	08 f0       	brcs	.+2      	; 0x62e2 <fat_open+0x376>
    62e0:	20 e0       	ldi	r18, 0x00	; 0
    62e2:	42 2b       	or	r20, r18
    62e4:	23 96       	adiw	r28, 0x03	; 3
    62e6:	6f ad       	ldd	r22, Y+63	; 0x3f
    62e8:	23 97       	sbiw	r28, 0x03	; 3
    62ea:	60 0f       	add	r22, r16
    62ec:	31 e0       	ldi	r19, 0x01	; 1
    62ee:	60 17       	cp	r22, r16
    62f0:	08 f0       	brcs	.+2      	; 0x62f4 <fat_open+0x388>
    62f2:	30 e0       	ldi	r19, 0x00	; 0
    62f4:	e4 2f       	mov	r30, r20
    62f6:	e6 0f       	add	r30, r22
    62f8:	21 e0       	ldi	r18, 0x01	; 1
    62fa:	e6 17       	cp	r30, r22
    62fc:	08 f0       	brcs	.+2      	; 0x6300 <fat_open+0x394>
    62fe:	20 e0       	ldi	r18, 0x00	; 0
    6300:	32 2b       	or	r19, r18
    6302:	24 96       	adiw	r28, 0x04	; 4
    6304:	7f ad       	ldd	r23, Y+63	; 0x3f
    6306:	24 97       	sbiw	r28, 0x04	; 4
    6308:	7f 0d       	add	r23, r15
    630a:	41 e0       	ldi	r20, 0x01	; 1
    630c:	7f 15       	cp	r23, r15
    630e:	08 f0       	brcs	.+2      	; 0x6312 <fat_open+0x3a6>
    6310:	40 e0       	ldi	r20, 0x00	; 0
    6312:	53 2f       	mov	r21, r19
    6314:	57 0f       	add	r21, r23
    6316:	21 e0       	ldi	r18, 0x01	; 1
    6318:	57 17       	cp	r21, r23
    631a:	08 f0       	brcs	.+2      	; 0x631e <fat_open+0x3b2>
    631c:	20 e0       	ldi	r18, 0x00	; 0
    631e:	42 2b       	or	r20, r18
    6320:	25 96       	adiw	r28, 0x05	; 5
    6322:	8f ad       	ldd	r24, Y+63	; 0x3f
    6324:	25 97       	sbiw	r28, 0x05	; 5
    6326:	8d 0d       	add	r24, r13
    6328:	21 e0       	ldi	r18, 0x01	; 1
    632a:	8d 15       	cp	r24, r13
    632c:	08 f0       	brcs	.+2      	; 0x6330 <fat_open+0x3c4>
    632e:	20 e0       	ldi	r18, 0x00	; 0
    6330:	48 0f       	add	r20, r24
    6332:	31 e0       	ldi	r19, 0x01	; 1
    6334:	48 17       	cp	r20, r24
    6336:	08 f0       	brcs	.+2      	; 0x633a <fat_open+0x3ce>
    6338:	30 e0       	ldi	r19, 0x00	; 0
    633a:	23 2b       	or	r18, r19
    633c:	26 96       	adiw	r28, 0x06	; 6
    633e:	1f ad       	ldd	r17, Y+63	; 0x3f
    6340:	26 97       	sbiw	r28, 0x06	; 6
    6342:	91 0f       	add	r25, r17
    6344:	29 0f       	add	r18, r25
    6346:	c0 92 e5 03 	sts	0x03E5, r12
    634a:	e0 92 e6 03 	sts	0x03E6, r14
    634e:	a0 93 e7 03 	sts	0x03E7, r26
    6352:	f0 93 e8 03 	sts	0x03E8, r31
    6356:	e0 93 e9 03 	sts	0x03E9, r30
    635a:	50 93 ea 03 	sts	0x03EA, r21
    635e:	40 93 eb 03 	sts	0x03EB, r20
    6362:	20 93 ec 03 	sts	0x03EC, r18
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    6366:	d2 01       	movw	r26, r4
    6368:	18 96       	adiw	r26, 0x08	; 8
    636a:	8c 91       	ld	r24, X
    636c:	86 30       	cpi	r24, 0x06	; 6
    636e:	29 f0       	breq	.+10     	; 0x637a <fat_open+0x40e>
    6370:	64 e0       	ldi	r22, 0x04	; 4
    6372:	70 e0       	ldi	r23, 0x00	; 0
    6374:	80 e0       	ldi	r24, 0x00	; 0
    6376:	90 e0       	ldi	r25, 0x00	; 0
    6378:	04 c0       	rjmp	.+8      	; 0x6382 <fat_open+0x416>
    637a:	62 e0       	ldi	r22, 0x02	; 2
    637c:	70 e0       	ldi	r23, 0x00	; 0
    637e:	80 e0       	ldi	r24, 0x00	; 0
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	12 e0       	ldi	r17, 0x02	; 2
    6384:	e1 2e       	mov	r14, r17
    6386:	f1 2c       	mov	r15, r1
    6388:	01 2d       	mov	r16, r1
    638a:	11 2d       	mov	r17, r1
    638c:	6e 0c       	add	r6, r14
    638e:	7f 1c       	adc	r7, r15
    6390:	80 1e       	adc	r8, r16
    6392:	91 1e       	adc	r9, r17
    6394:	a4 01       	movw	r20, r8
    6396:	93 01       	movw	r18, r6
    6398:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    639c:	60 93 ed 03 	sts	0x03ED, r22
    63a0:	70 93 ee 03 	sts	0x03EE, r23
    63a4:	80 93 ef 03 	sts	0x03EF, r24
    63a8:	90 93 f0 03 	sts	0x03F0, r25

    header->sector_size = bytes_per_sector;
    63ac:	30 92 f2 03 	sts	0x03F2, r3
    63b0:	20 92 f1 03 	sts	0x03F1, r2
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    63b4:	f8 a8       	ldd	r15, Y+48	; 0x30
    63b6:	8f 2d       	mov	r24, r15
    63b8:	90 e0       	ldi	r25, 0x00	; 0
    63ba:	8c 01       	movw	r16, r24
    63bc:	02 9d       	mul	r16, r2
    63be:	c0 01       	movw	r24, r0
    63c0:	03 9d       	mul	r16, r3
    63c2:	90 0d       	add	r25, r0
    63c4:	12 9d       	mul	r17, r2
    63c6:	90 0d       	add	r25, r0
    63c8:	11 24       	eor	r1, r1
    63ca:	90 93 f4 03 	sts	0x03F4, r25
    63ce:	80 93 f3 03 	sts	0x03F3, r24

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
    63d2:	d2 01       	movw	r26, r4
    63d4:	18 96       	adiw	r26, 0x08	; 8
    63d6:	8c 91       	ld	r24, X
    63d8:	f9 a8       	ldd	r15, Y+49	; 0x31
    63da:	ef 2c       	mov	r14, r15
    63dc:	ff 24       	eor	r15, r15
    63de:	00 e0       	ldi	r16, 0x00	; 0
    63e0:	10 e0       	ldi	r17, 0x00	; 0
    63e2:	20 e0       	ldi	r18, 0x00	; 0
    63e4:	30 e0       	ldi	r19, 0x00	; 0
    63e6:	40 e0       	ldi	r20, 0x00	; 0
    63e8:	50 e0       	ldi	r21, 0x00	; 0
    63ea:	27 96       	adiw	r28, 0x07	; 7
    63ec:	ef ae       	std	Y+63, r14	; 0x3f
    63ee:	27 97       	sbiw	r28, 0x07	; 7
    63f0:	28 96       	adiw	r28, 0x08	; 8
    63f2:	ff ae       	std	Y+63, r15	; 0x3f
    63f4:	28 97       	sbiw	r28, 0x08	; 8
    63f6:	29 96       	adiw	r28, 0x09	; 9
    63f8:	0f af       	std	Y+63, r16	; 0x3f
    63fa:	29 97       	sbiw	r28, 0x09	; 9
    63fc:	2a 96       	adiw	r28, 0x0a	; 10
    63fe:	1f af       	std	Y+63, r17	; 0x3f
    6400:	2a 97       	sbiw	r28, 0x0a	; 10
    6402:	2b 96       	adiw	r28, 0x0b	; 11
    6404:	2f af       	std	Y+63, r18	; 0x3f
    6406:	2b 97       	sbiw	r28, 0x0b	; 11
    6408:	2c 96       	adiw	r28, 0x0c	; 12
    640a:	3f af       	std	Y+63, r19	; 0x3f
    640c:	2c 97       	sbiw	r28, 0x0c	; 12
    640e:	2d 96       	adiw	r28, 0x0d	; 13
    6410:	4f af       	std	Y+63, r20	; 0x3f
    6412:	2d 97       	sbiw	r28, 0x0d	; 13
    6414:	2e 96       	adiw	r28, 0x0e	; 14
    6416:	5f af       	std	Y+63, r21	; 0x3f
    6418:	2e 97       	sbiw	r28, 0x0e	; 14
    641a:	86 30       	cpi	r24, 0x06	; 6
    641c:	09 f0       	breq	.+2      	; 0x6420 <fat_open+0x4b4>
    641e:	fa c0       	rjmp	.+500    	; 0x6614 <fat_open+0x6a8>
#endif
    {
        header->root_dir_offset = /* jump to fats */
    6420:	0c a9       	ldd	r16, Y+52	; 0x34
    6422:	1d a9       	ldd	r17, Y+53	; 0x35
    6424:	2e a1       	ldd	r18, Y+38	; 0x26
    6426:	3f a1       	ldd	r19, Y+39	; 0x27
    6428:	40 e0       	ldi	r20, 0x00	; 0
    642a:	50 e0       	ldi	r21, 0x00	; 0
    642c:	60 e0       	ldi	r22, 0x00	; 0
    642e:	70 e0       	ldi	r23, 0x00	; 0
    6430:	80 e0       	ldi	r24, 0x00	; 0
    6432:	90 e0       	ldi	r25, 0x00	; 0
    6434:	58 01       	movw	r10, r16
    6436:	cc 24       	eor	r12, r12
    6438:	dd 24       	eor	r13, r13
    643a:	ee 24       	eor	r14, r14
    643c:	ff 24       	eor	r15, r15
    643e:	00 e0       	ldi	r16, 0x00	; 0
    6440:	10 e0       	ldi	r17, 0x00	; 0
    6442:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    6446:	27 96       	adiw	r28, 0x07	; 7
    6448:	af ac       	ldd	r10, Y+63	; 0x3f
    644a:	27 97       	sbiw	r28, 0x07	; 7
    644c:	bb 24       	eor	r11, r11
    644e:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    6452:	f0 90 e5 03 	lds	r15, 0x03E5
    6456:	e0 91 e6 03 	lds	r30, 0x03E6
    645a:	b0 91 e7 03 	lds	r27, 0x03E7
    645e:	10 91 e8 03 	lds	r17, 0x03E8
    6462:	00 91 e9 03 	lds	r16, 0x03E9
    6466:	a0 90 ea 03 	lds	r10, 0x03EA
    646a:	90 90 eb 03 	lds	r9, 0x03EB
    646e:	a0 91 ec 03 	lds	r26, 0x03EC
    6472:	f2 0e       	add	r15, r18
    6474:	f1 e0       	ldi	r31, 0x01	; 1
    6476:	f2 16       	cp	r15, r18
    6478:	08 f0       	brcs	.+2      	; 0x647c <fat_open+0x510>
    647a:	f0 e0       	ldi	r31, 0x00	; 0
    647c:	23 2f       	mov	r18, r19
    647e:	2e 0f       	add	r18, r30
    6480:	e1 e0       	ldi	r30, 0x01	; 1
    6482:	23 17       	cp	r18, r19
    6484:	08 f0       	brcs	.+2      	; 0x6488 <fat_open+0x51c>
    6486:	e0 e0       	ldi	r30, 0x00	; 0
    6488:	ef 2e       	mov	r14, r31
    648a:	e2 0e       	add	r14, r18
    648c:	31 e0       	ldi	r19, 0x01	; 1
    648e:	e2 16       	cp	r14, r18
    6490:	08 f0       	brcs	.+2      	; 0x6494 <fat_open+0x528>
    6492:	30 e0       	ldi	r19, 0x00	; 0
    6494:	e3 2b       	or	r30, r19
    6496:	24 2f       	mov	r18, r20
    6498:	2b 0f       	add	r18, r27
    649a:	f1 e0       	ldi	r31, 0x01	; 1
    649c:	24 17       	cp	r18, r20
    649e:	08 f0       	brcs	.+2      	; 0x64a2 <fat_open+0x536>
    64a0:	f0 e0       	ldi	r31, 0x00	; 0
    64a2:	de 2e       	mov	r13, r30
    64a4:	d2 0e       	add	r13, r18
    64a6:	31 e0       	ldi	r19, 0x01	; 1
    64a8:	d2 16       	cp	r13, r18
    64aa:	08 f0       	brcs	.+2      	; 0x64ae <fat_open+0x542>
    64ac:	30 e0       	ldi	r19, 0x00	; 0
    64ae:	f3 2b       	or	r31, r19
    64b0:	25 2f       	mov	r18, r21
    64b2:	21 0f       	add	r18, r17
    64b4:	41 e0       	ldi	r20, 0x01	; 1
    64b6:	25 17       	cp	r18, r21
    64b8:	08 f0       	brcs	.+2      	; 0x64bc <fat_open+0x550>
    64ba:	40 e0       	ldi	r20, 0x00	; 0
    64bc:	cf 2e       	mov	r12, r31
    64be:	c2 0e       	add	r12, r18
    64c0:	31 e0       	ldi	r19, 0x01	; 1
    64c2:	c2 16       	cp	r12, r18
    64c4:	08 f0       	brcs	.+2      	; 0x64c8 <fat_open+0x55c>
    64c6:	30 e0       	ldi	r19, 0x00	; 0
    64c8:	43 2b       	or	r20, r19
    64ca:	26 2f       	mov	r18, r22
    64cc:	20 0f       	add	r18, r16
    64ce:	51 e0       	ldi	r21, 0x01	; 1
    64d0:	26 17       	cp	r18, r22
    64d2:	08 f0       	brcs	.+2      	; 0x64d6 <fat_open+0x56a>
    64d4:	50 e0       	ldi	r21, 0x00	; 0
    64d6:	b4 2e       	mov	r11, r20
    64d8:	b2 0e       	add	r11, r18
    64da:	31 e0       	ldi	r19, 0x01	; 1
    64dc:	b2 16       	cp	r11, r18
    64de:	08 f0       	brcs	.+2      	; 0x64e2 <fat_open+0x576>
    64e0:	30 e0       	ldi	r19, 0x00	; 0
    64e2:	53 2b       	or	r21, r19
    64e4:	27 2f       	mov	r18, r23
    64e6:	2a 0d       	add	r18, r10
    64e8:	41 e0       	ldi	r20, 0x01	; 1
    64ea:	27 17       	cp	r18, r23
    64ec:	08 f0       	brcs	.+2      	; 0x64f0 <fat_open+0x584>
    64ee:	40 e0       	ldi	r20, 0x00	; 0
    64f0:	a5 2e       	mov	r10, r21
    64f2:	a2 0e       	add	r10, r18
    64f4:	31 e0       	ldi	r19, 0x01	; 1
    64f6:	a2 16       	cp	r10, r18
    64f8:	08 f0       	brcs	.+2      	; 0x64fc <fat_open+0x590>
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	43 2b       	or	r20, r19
    64fe:	28 2f       	mov	r18, r24
    6500:	29 0d       	add	r18, r9
    6502:	31 e0       	ldi	r19, 0x01	; 1
    6504:	28 17       	cp	r18, r24
    6506:	08 f0       	brcs	.+2      	; 0x650a <fat_open+0x59e>
    6508:	30 e0       	ldi	r19, 0x00	; 0
    650a:	94 2e       	mov	r9, r20
    650c:	92 0e       	add	r9, r18
    650e:	81 e0       	ldi	r24, 0x01	; 1
    6510:	92 16       	cp	r9, r18
    6512:	08 f0       	brcs	.+2      	; 0x6516 <fat_open+0x5aa>
    6514:	80 e0       	ldi	r24, 0x00	; 0
    6516:	13 2f       	mov	r17, r19
    6518:	18 2b       	or	r17, r24
    651a:	a9 0f       	add	r26, r25
    651c:	1a 0f       	add	r17, r26
    651e:	f0 92 fd 03 	sts	0x03FD, r15
    6522:	e0 92 fe 03 	sts	0x03FE, r14
    6526:	d0 92 ff 03 	sts	0x03FF, r13
    652a:	c0 92 00 04 	sts	0x0400, r12
    652e:	b0 92 01 04 	sts	0x0401, r11
    6532:	a0 92 02 04 	sts	0x0402, r10
    6536:	90 92 03 04 	sts	0x0403, r9
    653a:	10 93 04 04 	sts	0x0404, r17
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    653e:	2a a9       	ldd	r18, Y+50	; 0x32
    6540:	3b a9       	ldd	r19, Y+51	; 0x33
    6542:	40 e0       	ldi	r20, 0x00	; 0
    6544:	50 e0       	ldi	r21, 0x00	; 0
    6546:	60 e0       	ldi	r22, 0x00	; 0
    6548:	70 e0       	ldi	r23, 0x00	; 0
    654a:	80 e0       	ldi	r24, 0x00	; 0
    654c:	90 e0       	ldi	r25, 0x00	; 0
    654e:	05 e0       	ldi	r16, 0x05	; 5
    6550:	0e 94 c3 45 	call	0x8b86	; 0x8b86 <__ashldi3>
    6554:	2f 0d       	add	r18, r15
    6556:	e1 e0       	ldi	r30, 0x01	; 1
    6558:	2f 15       	cp	r18, r15
    655a:	08 f0       	brcs	.+2      	; 0x655e <fat_open+0x5f2>
    655c:	e0 e0       	ldi	r30, 0x00	; 0
    655e:	3e 0d       	add	r19, r14
    6560:	f1 e0       	ldi	r31, 0x01	; 1
    6562:	3e 15       	cp	r19, r14
    6564:	08 f0       	brcs	.+2      	; 0x6568 <fat_open+0x5fc>
    6566:	f0 e0       	ldi	r31, 0x00	; 0
    6568:	be 2f       	mov	r27, r30
    656a:	b3 0f       	add	r27, r19
    656c:	e1 e0       	ldi	r30, 0x01	; 1
    656e:	b3 17       	cp	r27, r19
    6570:	08 f0       	brcs	.+2      	; 0x6574 <fat_open+0x608>
    6572:	e0 e0       	ldi	r30, 0x00	; 0
    6574:	fe 2b       	or	r31, r30
    6576:	4d 0d       	add	r20, r13
    6578:	e1 e0       	ldi	r30, 0x01	; 1
    657a:	4d 15       	cp	r20, r13
    657c:	08 f0       	brcs	.+2      	; 0x6580 <fat_open+0x614>
    657e:	e0 e0       	ldi	r30, 0x00	; 0
    6580:	af 2f       	mov	r26, r31
    6582:	a4 0f       	add	r26, r20
    6584:	31 e0       	ldi	r19, 0x01	; 1
    6586:	a4 17       	cp	r26, r20
    6588:	08 f0       	brcs	.+2      	; 0x658c <fat_open+0x620>
    658a:	30 e0       	ldi	r19, 0x00	; 0
    658c:	e3 2b       	or	r30, r19
    658e:	5c 0d       	add	r21, r12
    6590:	41 e0       	ldi	r20, 0x01	; 1
    6592:	5c 15       	cp	r21, r12
    6594:	08 f0       	brcs	.+2      	; 0x6598 <fat_open+0x62c>
    6596:	40 e0       	ldi	r20, 0x00	; 0
    6598:	fe 2f       	mov	r31, r30
    659a:	f5 0f       	add	r31, r21
    659c:	31 e0       	ldi	r19, 0x01	; 1
    659e:	f5 17       	cp	r31, r21
    65a0:	08 f0       	brcs	.+2      	; 0x65a4 <fat_open+0x638>
    65a2:	30 e0       	ldi	r19, 0x00	; 0
    65a4:	43 2b       	or	r20, r19
    65a6:	6b 0d       	add	r22, r11
    65a8:	51 e0       	ldi	r21, 0x01	; 1
    65aa:	6b 15       	cp	r22, r11
    65ac:	08 f0       	brcs	.+2      	; 0x65b0 <fat_open+0x644>
    65ae:	50 e0       	ldi	r21, 0x00	; 0
    65b0:	e4 2f       	mov	r30, r20
    65b2:	e6 0f       	add	r30, r22
    65b4:	31 e0       	ldi	r19, 0x01	; 1
    65b6:	e6 17       	cp	r30, r22
    65b8:	08 f0       	brcs	.+2      	; 0x65bc <fat_open+0x650>
    65ba:	30 e0       	ldi	r19, 0x00	; 0
    65bc:	53 2b       	or	r21, r19
    65be:	7a 0d       	add	r23, r10
    65c0:	41 e0       	ldi	r20, 0x01	; 1
    65c2:	7a 15       	cp	r23, r10
    65c4:	08 f0       	brcs	.+2      	; 0x65c8 <fat_open+0x65c>
    65c6:	40 e0       	ldi	r20, 0x00	; 0
    65c8:	65 2f       	mov	r22, r21
    65ca:	67 0f       	add	r22, r23
    65cc:	31 e0       	ldi	r19, 0x01	; 1
    65ce:	67 17       	cp	r22, r23
    65d0:	08 f0       	brcs	.+2      	; 0x65d4 <fat_open+0x668>
    65d2:	30 e0       	ldi	r19, 0x00	; 0
    65d4:	43 2b       	or	r20, r19
    65d6:	89 0d       	add	r24, r9
    65d8:	31 e0       	ldi	r19, 0x01	; 1
    65da:	89 15       	cp	r24, r9
    65dc:	08 f0       	brcs	.+2      	; 0x65e0 <fat_open+0x674>
    65de:	30 e0       	ldi	r19, 0x00	; 0
    65e0:	54 2f       	mov	r21, r20
    65e2:	58 0f       	add	r21, r24
    65e4:	41 e0       	ldi	r20, 0x01	; 1
    65e6:	58 17       	cp	r21, r24
    65e8:	08 f0       	brcs	.+2      	; 0x65ec <fat_open+0x680>
    65ea:	40 e0       	ldi	r20, 0x00	; 0
    65ec:	34 2b       	or	r19, r20
    65ee:	19 0f       	add	r17, r25
    65f0:	31 0f       	add	r19, r17
    65f2:	20 93 f5 03 	sts	0x03F5, r18
    65f6:	b0 93 f6 03 	sts	0x03F6, r27
    65fa:	a0 93 f7 03 	sts	0x03F7, r26
    65fe:	f0 93 f8 03 	sts	0x03F8, r31
    6602:	e0 93 f9 03 	sts	0x03F9, r30
    6606:	60 93 fa 03 	sts	0x03FA, r22
    660a:	50 93 fb 03 	sts	0x03FB, r21
    660e:	30 93 fc 03 	sts	0x03FC, r19
    6612:	a1 c0       	rjmp	.+322    	; 0x6756 <fat_open+0x7ea>
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
    6614:	27 96       	adiw	r28, 0x07	; 7
    6616:	af ac       	ldd	r10, Y+63	; 0x3f
    6618:	27 97       	sbiw	r28, 0x07	; 7
    661a:	2e a1       	ldd	r18, Y+38	; 0x26
    661c:	3f a1       	ldd	r19, Y+39	; 0x27
    661e:	40 e0       	ldi	r20, 0x00	; 0
    6620:	50 e0       	ldi	r21, 0x00	; 0
    6622:	60 e0       	ldi	r22, 0x00	; 0
    6624:	70 e0       	ldi	r23, 0x00	; 0
    6626:	80 e0       	ldi	r24, 0x00	; 0
    6628:	90 e0       	ldi	r25, 0x00	; 0
    662a:	bb 24       	eor	r11, r11
    662c:	cc 24       	eor	r12, r12
    662e:	dd 24       	eor	r13, r13
    6630:	ee 24       	eor	r14, r14
    6632:	ff 24       	eor	r15, r15
    6634:	00 e0       	ldi	r16, 0x00	; 0
    6636:	10 e0       	ldi	r17, 0x00	; 0
    6638:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    663c:	ee a8       	ldd	r14, Y+54	; 0x36
    663e:	ff a8       	ldd	r15, Y+55	; 0x37
    6640:	08 ad       	ldd	r16, Y+56	; 0x38
    6642:	19 ad       	ldd	r17, Y+57	; 0x39
    6644:	17 01       	movw	r2, r14
    6646:	28 01       	movw	r4, r16
    6648:	57 01       	movw	r10, r14
    664a:	62 01       	movw	r12, r4
    664c:	ee 24       	eor	r14, r14
    664e:	ff 24       	eor	r15, r15
    6650:	00 e0       	ldi	r16, 0x00	; 0
    6652:	10 e0       	ldi	r17, 0x00	; 0
    6654:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    6658:	a0 91 e5 03 	lds	r26, 0x03E5
    665c:	e0 91 e6 03 	lds	r30, 0x03E6
    6660:	10 91 e7 03 	lds	r17, 0x03E7
    6664:	00 91 e8 03 	lds	r16, 0x03E8
    6668:	f0 90 e9 03 	lds	r15, 0x03E9
    666c:	d0 90 ea 03 	lds	r13, 0x03EA
    6670:	c0 90 eb 03 	lds	r12, 0x03EB
    6674:	b0 91 ec 03 	lds	r27, 0x03EC
    6678:	a2 0f       	add	r26, r18
    667a:	f1 e0       	ldi	r31, 0x01	; 1
    667c:	a2 17       	cp	r26, r18
    667e:	08 f0       	brcs	.+2      	; 0x6682 <fat_open+0x716>
    6680:	f0 e0       	ldi	r31, 0x00	; 0
    6682:	23 2f       	mov	r18, r19
    6684:	2e 0f       	add	r18, r30
    6686:	e1 e0       	ldi	r30, 0x01	; 1
    6688:	23 17       	cp	r18, r19
    668a:	08 f0       	brcs	.+2      	; 0x668e <fat_open+0x722>
    668c:	e0 e0       	ldi	r30, 0x00	; 0
    668e:	ef 2e       	mov	r14, r31
    6690:	e2 0e       	add	r14, r18
    6692:	31 e0       	ldi	r19, 0x01	; 1
    6694:	e2 16       	cp	r14, r18
    6696:	08 f0       	brcs	.+2      	; 0x669a <fat_open+0x72e>
    6698:	30 e0       	ldi	r19, 0x00	; 0
    669a:	e3 2b       	or	r30, r19
    669c:	24 2f       	mov	r18, r20
    669e:	21 0f       	add	r18, r17
    66a0:	f1 e0       	ldi	r31, 0x01	; 1
    66a2:	24 17       	cp	r18, r20
    66a4:	08 f0       	brcs	.+2      	; 0x66a8 <fat_open+0x73c>
    66a6:	f0 e0       	ldi	r31, 0x00	; 0
    66a8:	1e 2f       	mov	r17, r30
    66aa:	12 0f       	add	r17, r18
    66ac:	31 e0       	ldi	r19, 0x01	; 1
    66ae:	12 17       	cp	r17, r18
    66b0:	08 f0       	brcs	.+2      	; 0x66b4 <fat_open+0x748>
    66b2:	30 e0       	ldi	r19, 0x00	; 0
    66b4:	f3 2b       	or	r31, r19
    66b6:	25 2f       	mov	r18, r21
    66b8:	20 0f       	add	r18, r16
    66ba:	41 e0       	ldi	r20, 0x01	; 1
    66bc:	25 17       	cp	r18, r21
    66be:	08 f0       	brcs	.+2      	; 0x66c2 <fat_open+0x756>
    66c0:	40 e0       	ldi	r20, 0x00	; 0
    66c2:	ef 2f       	mov	r30, r31
    66c4:	e2 0f       	add	r30, r18
    66c6:	31 e0       	ldi	r19, 0x01	; 1
    66c8:	e2 17       	cp	r30, r18
    66ca:	08 f0       	brcs	.+2      	; 0x66ce <fat_open+0x762>
    66cc:	30 e0       	ldi	r19, 0x00	; 0
    66ce:	43 2b       	or	r20, r19
    66d0:	26 2f       	mov	r18, r22
    66d2:	2f 0d       	add	r18, r15
    66d4:	51 e0       	ldi	r21, 0x01	; 1
    66d6:	26 17       	cp	r18, r22
    66d8:	08 f0       	brcs	.+2      	; 0x66dc <fat_open+0x770>
    66da:	50 e0       	ldi	r21, 0x00	; 0
    66dc:	64 2f       	mov	r22, r20
    66de:	62 0f       	add	r22, r18
    66e0:	31 e0       	ldi	r19, 0x01	; 1
    66e2:	62 17       	cp	r22, r18
    66e4:	08 f0       	brcs	.+2      	; 0x66e8 <fat_open+0x77c>
    66e6:	30 e0       	ldi	r19, 0x00	; 0
    66e8:	53 2b       	or	r21, r19
    66ea:	27 2f       	mov	r18, r23
    66ec:	2d 0d       	add	r18, r13
    66ee:	41 e0       	ldi	r20, 0x01	; 1
    66f0:	27 17       	cp	r18, r23
    66f2:	08 f0       	brcs	.+2      	; 0x66f6 <fat_open+0x78a>
    66f4:	40 e0       	ldi	r20, 0x00	; 0
    66f6:	52 0f       	add	r21, r18
    66f8:	31 e0       	ldi	r19, 0x01	; 1
    66fa:	52 17       	cp	r21, r18
    66fc:	08 f0       	brcs	.+2      	; 0x6700 <fat_open+0x794>
    66fe:	30 e0       	ldi	r19, 0x00	; 0
    6700:	43 2b       	or	r20, r19
    6702:	28 2f       	mov	r18, r24
    6704:	2c 0d       	add	r18, r12
    6706:	31 e0       	ldi	r19, 0x01	; 1
    6708:	28 17       	cp	r18, r24
    670a:	08 f0       	brcs	.+2      	; 0x670e <fat_open+0x7a2>
    670c:	30 e0       	ldi	r19, 0x00	; 0
    670e:	42 0f       	add	r20, r18
    6710:	81 e0       	ldi	r24, 0x01	; 1
    6712:	42 17       	cp	r20, r18
    6714:	08 f0       	brcs	.+2      	; 0x6718 <fat_open+0x7ac>
    6716:	80 e0       	ldi	r24, 0x00	; 0
    6718:	38 2b       	or	r19, r24
    671a:	b9 0f       	add	r27, r25
    671c:	3b 0f       	add	r19, r27
    671e:	a0 93 f5 03 	sts	0x03F5, r26
    6722:	e0 92 f6 03 	sts	0x03F6, r14
    6726:	10 93 f7 03 	sts	0x03F7, r17
    672a:	e0 93 f8 03 	sts	0x03F8, r30
    672e:	60 93 f9 03 	sts	0x03F9, r22
    6732:	50 93 fa 03 	sts	0x03FA, r21
    6736:	40 93 fb 03 	sts	0x03FB, r20
    673a:	30 93 fc 03 	sts	0x03FC, r19
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
    673e:	0a ad       	ldd	r16, Y+58	; 0x3a
    6740:	1b ad       	ldd	r17, Y+59	; 0x3b
    6742:	2c ad       	ldd	r18, Y+60	; 0x3c
    6744:	3d ad       	ldd	r19, Y+61	; 0x3d
    6746:	00 93 05 04 	sts	0x0405, r16
    674a:	10 93 06 04 	sts	0x0406, r17
    674e:	20 93 07 04 	sts	0x0407, r18
    6752:	30 93 08 04 	sts	0x0408, r19
    6756:	2b ed       	ldi	r18, 0xDB	; 219
    6758:	33 e0       	ldi	r19, 0x03	; 3
    675a:	02 c0       	rjmp	.+4      	; 0x6760 <fat_open+0x7f4>
    675c:	20 e0       	ldi	r18, 0x00	; 0
    675e:	30 e0       	ldi	r19, 0x00	; 0
#endif
        return 0;
    }
    
    return fs;
}
    6760:	c9 01       	movw	r24, r18
    6762:	c3 5b       	subi	r28, 0xB3	; 179
    6764:	df 4f       	sbci	r29, 0xFF	; 255
    6766:	0f b6       	in	r0, 0x3f	; 63
    6768:	f8 94       	cli
    676a:	de bf       	out	0x3e, r29	; 62
    676c:	0f be       	out	0x3f, r0	; 63
    676e:	cd bf       	out	0x3d, r28	; 61
    6770:	cf 91       	pop	r28
    6772:	df 91       	pop	r29
    6774:	1f 91       	pop	r17
    6776:	0f 91       	pop	r16
    6778:	ff 90       	pop	r15
    677a:	ef 90       	pop	r14
    677c:	df 90       	pop	r13
    677e:	cf 90       	pop	r12
    6780:	bf 90       	pop	r11
    6782:	af 90       	pop	r10
    6784:	9f 90       	pop	r9
    6786:	8f 90       	pop	r8
    6788:	7f 90       	pop	r7
    678a:	6f 90       	pop	r6
    678c:	5f 90       	pop	r5
    678e:	4f 90       	pop	r4
    6790:	3f 90       	pop	r3
    6792:	2f 90       	pop	r2
    6794:	08 95       	ret
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    6796:	80 91 db 03 	lds	r24, 0x03DB
    679a:	90 91 dc 03 	lds	r25, 0x03DC
    679e:	89 2b       	or	r24, r25
    67a0:	e9 f6       	brne	.-70     	; 0x675c <fat_open+0x7f0>
    67a2:	13 cc       	rjmp	.-2010   	; 0x5fca <fat_open+0x5e>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    67a4:	10 92 dc 03 	sts	0x03DC, r1
    67a8:	10 92 db 03 	sts	0x03DB, r1
    67ac:	d7 cf       	rjmp	.-82     	; 0x675c <fat_open+0x7f0>

000067ae <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(const struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    67ae:	2f 92       	push	r2
    67b0:	3f 92       	push	r3
    67b2:	4f 92       	push	r4
    67b4:	5f 92       	push	r5
    67b6:	6f 92       	push	r6
    67b8:	7f 92       	push	r7
    67ba:	8f 92       	push	r8
    67bc:	9f 92       	push	r9
    67be:	af 92       	push	r10
    67c0:	bf 92       	push	r11
    67c2:	cf 92       	push	r12
    67c4:	df 92       	push	r13
    67c6:	ef 92       	push	r14
    67c8:	ff 92       	push	r15
    67ca:	0f 93       	push	r16
    67cc:	1f 93       	push	r17
    67ce:	df 93       	push	r29
    67d0:	cf 93       	push	r28
    67d2:	cd b7       	in	r28, 0x3d	; 61
    67d4:	de b7       	in	r29, 0x3e	; 62
    67d6:	69 97       	sbiw	r28, 0x19	; 25
    67d8:	0f b6       	in	r0, 0x3f	; 63
    67da:	f8 94       	cli
    67dc:	de bf       	out	0x3e, r29	; 62
    67de:	0f be       	out	0x3f, r0	; 63
    67e0:	cd bf       	out	0x3d, r28	; 61
    67e2:	9d 87       	std	Y+13, r25	; 0x0d
    67e4:	8c 87       	std	Y+12, r24	; 0x0c
    67e6:	9b 01       	movw	r18, r22
    if(!fs || !dir_entry)
    67e8:	89 2b       	or	r24, r25
    67ea:	09 f4       	brne	.+2      	; 0x67ee <fat_find_offset_for_dir_entry+0x40>
    67ec:	e2 c2       	rjmp	.+1476   	; 0x6db2 <fat_find_offset_for_dir_entry+0x604>
    67ee:	41 15       	cp	r20, r1
    67f0:	51 05       	cpc	r21, r1
    67f2:	09 f4       	brne	.+2      	; 0x67f6 <fat_find_offset_for_dir_entry+0x48>
    67f4:	de c2       	rjmp	.+1468   	; 0x6db2 <fat_find_offset_for_dir_entry+0x604>
        return 0;

    /* search for a place where to write the directory entry to disk */
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    67f6:	da 01       	movw	r26, r20
    67f8:	0d 90       	ld	r0, X+
    67fa:	00 20       	and	r0, r0
    67fc:	e9 f7       	brne	.-6      	; 0x67f8 <fat_find_offset_for_dir_entry+0x4a>
    67fe:	a4 1b       	sub	r26, r20
    6800:	b5 0b       	sbc	r27, r21
    6802:	cd 01       	movw	r24, r26
    6804:	0b 96       	adiw	r24, 0x0b	; 11
    6806:	6d e0       	ldi	r22, 0x0D	; 13
    6808:	70 e0       	ldi	r23, 0x00	; 0
    680a:	0e 94 9d 49 	call	0x933a	; 0x933a <__udivmodhi4>
    680e:	46 2f       	mov	r20, r22
    6810:	4f 5f       	subi	r20, 0xFF	; 255
    6812:	4b 87       	std	Y+11, r20	; 0x0b
    uint8_t free_dir_entries_found = 0;
    cluster_t cluster_num = parent->dir_entry.cluster;
    6814:	d9 01       	movw	r26, r18
    6816:	93 96       	adiw	r26, 0x23	; 35
    6818:	8d 91       	ld	r24, X+
    681a:	9d 91       	ld	r25, X+
    681c:	0d 90       	ld	r0, X+
    681e:	bc 91       	ld	r27, X
    6820:	a0 2d       	mov	r26, r0
    6822:	8e 83       	std	Y+6, r24	; 0x06
    6824:	9f 83       	std	Y+7, r25	; 0x07
    6826:	a8 87       	std	Y+8, r26	; 0x08
    6828:	b9 87       	std	Y+9, r27	; 0x09
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    682a:	ac 85       	ldd	r26, Y+12	; 0x0c
    682c:	bd 85       	ldd	r27, Y+13	; 0x0d
    682e:	ed 91       	ld	r30, X+
    6830:	fc 91       	ld	r31, X
    6832:	80 85       	ldd	r24, Z+8	; 0x08
#endif

    if(cluster_num == 0)
    6834:	2e 81       	ldd	r18, Y+6	; 0x06
    6836:	3f 81       	ldd	r19, Y+7	; 0x07
    6838:	48 85       	ldd	r20, Y+8	; 0x08
    683a:	59 85       	ldd	r21, Y+9	; 0x09
    683c:	21 15       	cp	r18, r1
    683e:	31 05       	cpc	r19, r1
    6840:	41 05       	cpc	r20, r1
    6842:	51 05       	cpc	r21, r1
    6844:	71 f4       	brne	.+28     	; 0x6862 <fat_find_offset_for_dir_entry+0xb4>
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    6846:	8b 30       	cpi	r24, 0x0B	; 11
    6848:	29 f5       	brne	.+74     	; 0x6894 <fat_find_offset_for_dir_entry+0xe6>
        {
            cluster_num = fs->header.root_dir_cluster;
    684a:	ac 85       	ldd	r26, Y+12	; 0x0c
    684c:	bd 85       	ldd	r27, Y+13	; 0x0d
    684e:	9a 96       	adiw	r26, 0x2a	; 42
    6850:	8d 91       	ld	r24, X+
    6852:	9d 91       	ld	r25, X+
    6854:	0d 90       	ld	r0, X+
    6856:	bc 91       	ld	r27, X
    6858:	a0 2d       	mov	r26, r0
    685a:	8e 83       	std	Y+6, r24	; 0x06
    685c:	9f 83       	std	Y+7, r25	; 0x07
    685e:	a8 87       	std	Y+8, r26	; 0x08
    6860:	b9 87       	std	Y+9, r27	; 0x09
    6862:	1e 8a       	std	Y+22, r1	; 0x16
    6864:	1f 8a       	std	Y+23, r1	; 0x17
    6866:	18 8e       	std	Y+24, r1	; 0x18
    6868:	19 8e       	std	Y+25, r1	; 0x19
    686a:	33 24       	eor	r3, r3
    686c:	44 24       	eor	r4, r4
    686e:	55 24       	eor	r5, r5
    6870:	66 24       	eor	r6, r6
    6872:	dd 24       	eor	r13, r13
    6874:	cc 24       	eor	r12, r12
    6876:	bb 24       	eor	r11, r11
    6878:	aa 24       	eor	r10, r10
    687a:	22 24       	eor	r2, r2
    687c:	99 24       	eor	r9, r9
    687e:	88 24       	eor	r8, r8
    6880:	77 24       	eor	r7, r7
    6882:	1e 86       	std	Y+14, r1	; 0x0e
    6884:	1f 86       	std	Y+15, r1	; 0x0f
    6886:	18 8a       	std	Y+16, r1	; 0x10
    6888:	19 8a       	std	Y+17, r1	; 0x11
    688a:	1a 8a       	std	Y+18, r1	; 0x12
    688c:	1b 8a       	std	Y+19, r1	; 0x13
    688e:	1c 8a       	std	Y+20, r1	; 0x14
    6890:	1d 8a       	std	Y+21, r1	; 0x15
    6892:	34 c0       	rjmp	.+104    	; 0x68fc <fat_find_offset_for_dir_entry+0x14e>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
    6894:	ec 85       	ldd	r30, Y+12	; 0x0c
    6896:	fd 85       	ldd	r31, Y+13	; 0x0d
    6898:	d2 a0       	ldd	r13, Z+34	; 0x22
    689a:	c3 a0       	ldd	r12, Z+35	; 0x23
    689c:	b4 a0       	ldd	r11, Z+36	; 0x24
    689e:	a5 a0       	ldd	r10, Z+37	; 0x25
    68a0:	26 a0       	ldd	r2, Z+38	; 0x26
    68a2:	97 a0       	ldd	r9, Z+39	; 0x27
    68a4:	80 a4       	ldd	r8, Z+40	; 0x28
    68a6:	71 a4       	ldd	r7, Z+41	; 0x29
            offset_to = fs->header.cluster_zero_offset;
    68a8:	f2 8d       	ldd	r31, Z+26	; 0x1a
    68aa:	fe 87       	std	Y+14, r31	; 0x0e
    68ac:	ac 85       	ldd	r26, Y+12	; 0x0c
    68ae:	bd 85       	ldd	r27, Y+13	; 0x0d
    68b0:	5b 96       	adiw	r26, 0x1b	; 27
    68b2:	bc 91       	ld	r27, X
    68b4:	bf 87       	std	Y+15, r27	; 0x0f
    68b6:	ec 85       	ldd	r30, Y+12	; 0x0c
    68b8:	fd 85       	ldd	r31, Y+13	; 0x0d
    68ba:	f4 8d       	ldd	r31, Z+28	; 0x1c
    68bc:	f8 8b       	std	Y+16, r31	; 0x10
    68be:	ac 85       	ldd	r26, Y+12	; 0x0c
    68c0:	bd 85       	ldd	r27, Y+13	; 0x0d
    68c2:	5d 96       	adiw	r26, 0x1d	; 29
    68c4:	bc 91       	ld	r27, X
    68c6:	b9 8b       	std	Y+17, r27	; 0x11
    68c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    68ca:	fd 85       	ldd	r31, Y+13	; 0x0d
    68cc:	f6 8d       	ldd	r31, Z+30	; 0x1e
    68ce:	fa 8b       	std	Y+18, r31	; 0x12
    68d0:	ac 85       	ldd	r26, Y+12	; 0x0c
    68d2:	bd 85       	ldd	r27, Y+13	; 0x0d
    68d4:	5f 96       	adiw	r26, 0x1f	; 31
    68d6:	bc 91       	ld	r27, X
    68d8:	bb 8b       	std	Y+19, r27	; 0x13
    68da:	ec 85       	ldd	r30, Y+12	; 0x0c
    68dc:	fd 85       	ldd	r31, Y+13	; 0x0d
    68de:	f0 a1       	ldd	r31, Z+32	; 0x20
    68e0:	fc 8b       	std	Y+20, r31	; 0x14
    68e2:	ac 85       	ldd	r26, Y+12	; 0x0c
    68e4:	bd 85       	ldd	r27, Y+13	; 0x0d
    68e6:	91 96       	adiw	r26, 0x21	; 33
    68e8:	bc 91       	ld	r27, X
    68ea:	bd 8b       	std	Y+21, r27	; 0x15
    68ec:	de 8a       	std	Y+22, r13	; 0x16
    68ee:	cf 8a       	std	Y+23, r12	; 0x17
    68f0:	b8 8e       	std	Y+24, r11	; 0x18
    68f2:	a9 8e       	std	Y+25, r10	; 0x19
    68f4:	32 2c       	mov	r3, r2
    68f6:	49 2c       	mov	r4, r9
    68f8:	58 2c       	mov	r5, r8
    68fa:	67 2c       	mov	r6, r7
    68fc:	1a 86       	std	Y+10, r1	; 0x0a
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    68fe:	ee 85       	ldd	r30, Y+14	; 0x0e
    6900:	de 16       	cp	r13, r30
    6902:	09 f0       	breq	.+2      	; 0x6906 <fat_find_offset_for_dir_entry+0x158>
    6904:	d1 c1       	rjmp	.+930    	; 0x6ca8 <fat_find_offset_for_dir_entry+0x4fa>
    6906:	ff 85       	ldd	r31, Y+15	; 0x0f
    6908:	cf 16       	cp	r12, r31
    690a:	09 f0       	breq	.+2      	; 0x690e <fat_find_offset_for_dir_entry+0x160>
    690c:	cd c1       	rjmp	.+922    	; 0x6ca8 <fat_find_offset_for_dir_entry+0x4fa>
    690e:	28 89       	ldd	r18, Y+16	; 0x10
    6910:	b2 16       	cp	r11, r18
    6912:	09 f0       	breq	.+2      	; 0x6916 <fat_find_offset_for_dir_entry+0x168>
    6914:	c9 c1       	rjmp	.+914    	; 0x6ca8 <fat_find_offset_for_dir_entry+0x4fa>
    6916:	39 89       	ldd	r19, Y+17	; 0x11
    6918:	a3 16       	cp	r10, r19
    691a:	09 f0       	breq	.+2      	; 0x691e <fat_find_offset_for_dir_entry+0x170>
    691c:	c5 c1       	rjmp	.+906    	; 0x6ca8 <fat_find_offset_for_dir_entry+0x4fa>
    691e:	4a 89       	ldd	r20, Y+18	; 0x12
    6920:	24 16       	cp	r2, r20
    6922:	09 f0       	breq	.+2      	; 0x6926 <fat_find_offset_for_dir_entry+0x178>
    6924:	c1 c1       	rjmp	.+898    	; 0x6ca8 <fat_find_offset_for_dir_entry+0x4fa>
    6926:	5b 89       	ldd	r21, Y+19	; 0x13
    6928:	95 16       	cp	r9, r21
    692a:	09 f0       	breq	.+2      	; 0x692e <fat_find_offset_for_dir_entry+0x180>
    692c:	bd c1       	rjmp	.+890    	; 0x6ca8 <fat_find_offset_for_dir_entry+0x4fa>
    692e:	8c 89       	ldd	r24, Y+20	; 0x14
    6930:	88 16       	cp	r8, r24
    6932:	09 f0       	breq	.+2      	; 0x6936 <fat_find_offset_for_dir_entry+0x188>
    6934:	b9 c1       	rjmp	.+882    	; 0x6ca8 <fat_find_offset_for_dir_entry+0x4fa>
    6936:	9d 89       	ldd	r25, Y+21	; 0x15
    6938:	79 16       	cp	r7, r25
    693a:	09 f0       	breq	.+2      	; 0x693e <fat_find_offset_for_dir_entry+0x190>
    693c:	b5 c1       	rjmp	.+874    	; 0x6ca8 <fat_find_offset_for_dir_entry+0x4fa>
        {
            if(cluster_num == 0)
    693e:	2e 81       	ldd	r18, Y+6	; 0x06
    6940:	3f 81       	ldd	r19, Y+7	; 0x07
    6942:	48 85       	ldd	r20, Y+8	; 0x08
    6944:	59 85       	ldd	r21, Y+9	; 0x09
    6946:	21 15       	cp	r18, r1
    6948:	31 05       	cpc	r19, r1
    694a:	41 05       	cpc	r20, r1
    694c:	51 05       	cpc	r21, r1
    694e:	09 f4       	brne	.+2      	; 0x6952 <fat_find_offset_for_dir_entry+0x1a4>
    6950:	30 c2       	rjmp	.+1120   	; 0x6db2 <fat_find_offset_for_dir_entry+0x604>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    6952:	8d 2d       	mov	r24, r13
    6954:	8c 29       	or	r24, r12
    6956:	8b 29       	or	r24, r11
    6958:	8a 29       	or	r24, r10
    695a:	82 29       	or	r24, r2
    695c:	89 29       	or	r24, r9
    695e:	88 29       	or	r24, r8
    6960:	87 29       	or	r24, r7
    6962:	09 f4       	brne	.+2      	; 0x6966 <fat_find_offset_for_dir_entry+0x1b8>
    6964:	ba c0       	rjmp	.+372    	; 0x6ada <fat_find_offset_for_dir_entry+0x32c>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    6966:	8c 85       	ldd	r24, Y+12	; 0x0c
    6968:	9d 85       	ldd	r25, Y+13	; 0x0d
    696a:	ba 01       	movw	r22, r20
    696c:	a9 01       	movw	r20, r18
    696e:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <fat_get_next_cluster>
                if(!cluster_next)
    6972:	61 15       	cp	r22, r1
    6974:	71 05       	cpc	r23, r1
    6976:	81 05       	cpc	r24, r1
    6978:	91 05       	cpc	r25, r1
    697a:	09 f0       	breq	.+2      	; 0x697e <fat_find_offset_for_dir_entry+0x1d0>
    697c:	aa c0       	rjmp	.+340    	; 0x6ad2 <fat_find_offset_for_dir_entry+0x324>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    697e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6980:	9d 85       	ldd	r25, Y+13	; 0x0d
    6982:	4e 81       	ldd	r20, Y+6	; 0x06
    6984:	5f 81       	ldd	r21, Y+7	; 0x07
    6986:	68 85       	ldd	r22, Y+8	; 0x08
    6988:	79 85       	ldd	r23, Y+9	; 0x09
    698a:	01 e0       	ldi	r16, 0x01	; 1
    698c:	10 e0       	ldi	r17, 0x00	; 0
    698e:	20 e0       	ldi	r18, 0x00	; 0
    6990:	30 e0       	ldi	r19, 0x00	; 0
    6992:	0e 94 d7 22 	call	0x45ae	; 0x45ae <fat_append_clusters>
    6996:	6a 83       	std	Y+2, r22	; 0x02
    6998:	7b 83       	std	Y+3, r23	; 0x03
    699a:	8c 83       	std	Y+4, r24	; 0x04
    699c:	9d 83       	std	Y+5, r25	; 0x05
                    if(!cluster_next)
    699e:	61 15       	cp	r22, r1
    69a0:	71 05       	cpc	r23, r1
    69a2:	81 05       	cpc	r24, r1
    69a4:	91 05       	cpc	r25, r1
    69a6:	09 f4       	brne	.+2      	; 0x69aa <fat_find_offset_for_dir_entry+0x1fc>
    69a8:	04 c2       	rjmp	.+1032   	; 0x6db2 <fat_find_offset_for_dir_entry+0x604>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    69aa:	dc 01       	movw	r26, r24
    69ac:	cb 01       	movw	r24, r22
    69ae:	02 97       	sbiw	r24, 0x02	; 2
    69b0:	a1 09       	sbc	r26, r1
    69b2:	b1 09       	sbc	r27, r1
    69b4:	5c 01       	movw	r10, r24
    69b6:	6d 01       	movw	r12, r26
    69b8:	02 96       	adiw	r24, 0x02	; 2
    69ba:	a1 1d       	adc	r26, r1
    69bc:	b1 1d       	adc	r27, r1
    69be:	8a 83       	std	Y+2, r24	; 0x02
    69c0:	9b 83       	std	Y+3, r25	; 0x03
    69c2:	ac 83       	std	Y+4, r26	; 0x04
    69c4:	bd 83       	std	Y+5, r27	; 0x05
    69c6:	ac 85       	ldd	r26, Y+12	; 0x0c
    69c8:	bd 85       	ldd	r27, Y+13	; 0x0d
    69ca:	58 96       	adiw	r26, 0x18	; 24
    69cc:	2d 90       	ld	r2, X+
    69ce:	3c 90       	ld	r3, X
    69d0:	59 97       	sbiw	r26, 0x19	; 25
    69d2:	95 01       	movw	r18, r10
    69d4:	a6 01       	movw	r20, r12
    69d6:	60 e0       	ldi	r22, 0x00	; 0
    69d8:	70 e0       	ldi	r23, 0x00	; 0
    69da:	80 e0       	ldi	r24, 0x00	; 0
    69dc:	90 e0       	ldi	r25, 0x00	; 0
    69de:	51 01       	movw	r10, r2
    69e0:	cc 24       	eor	r12, r12
    69e2:	dd 24       	eor	r13, r13
    69e4:	ee 24       	eor	r14, r14
    69e6:	ff 24       	eor	r15, r15
    69e8:	00 e0       	ldi	r16, 0x00	; 0
    69ea:	10 e0       	ldi	r17, 0x00	; 0
    69ec:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    69f0:	c9 2e       	mov	r12, r25
    69f2:	ec 85       	ldd	r30, Y+12	; 0x0c
    69f4:	fd 85       	ldd	r31, Y+13	; 0x0d
    69f6:	b2 8d       	ldd	r27, Z+26	; 0x1a
    69f8:	b3 8c       	ldd	r11, Z+27	; 0x1b
    69fa:	a4 8d       	ldd	r26, Z+28	; 0x1c
    69fc:	05 8d       	ldd	r16, Z+29	; 0x1d
    69fe:	f6 8c       	ldd	r15, Z+30	; 0x1e
    6a00:	e7 8c       	ldd	r14, Z+31	; 0x1f
    6a02:	d0 a0       	ldd	r13, Z+32	; 0x20
    6a04:	11 a1       	ldd	r17, Z+33	; 0x21
    6a06:	b2 0f       	add	r27, r18
    6a08:	e1 e0       	ldi	r30, 0x01	; 1
    6a0a:	b2 17       	cp	r27, r18
    6a0c:	08 f0       	brcs	.+2      	; 0x6a10 <fat_find_offset_for_dir_entry+0x262>
    6a0e:	e0 e0       	ldi	r30, 0x00	; 0
    6a10:	23 2f       	mov	r18, r19
    6a12:	2b 0d       	add	r18, r11
    6a14:	f1 e0       	ldi	r31, 0x01	; 1
    6a16:	23 17       	cp	r18, r19
    6a18:	08 f0       	brcs	.+2      	; 0x6a1c <fat_find_offset_for_dir_entry+0x26e>
    6a1a:	f0 e0       	ldi	r31, 0x00	; 0
    6a1c:	3e 2f       	mov	r19, r30
    6a1e:	32 0f       	add	r19, r18
    6a20:	e1 e0       	ldi	r30, 0x01	; 1
    6a22:	32 17       	cp	r19, r18
    6a24:	08 f0       	brcs	.+2      	; 0x6a28 <fat_find_offset_for_dir_entry+0x27a>
    6a26:	e0 e0       	ldi	r30, 0x00	; 0
    6a28:	fe 2b       	or	r31, r30
    6a2a:	24 2f       	mov	r18, r20
    6a2c:	2a 0f       	add	r18, r26
    6a2e:	a1 e0       	ldi	r26, 0x01	; 1
    6a30:	24 17       	cp	r18, r20
    6a32:	08 f0       	brcs	.+2      	; 0x6a36 <fat_find_offset_for_dir_entry+0x288>
    6a34:	a0 e0       	ldi	r26, 0x00	; 0
    6a36:	4f 2f       	mov	r20, r31
    6a38:	42 0f       	add	r20, r18
    6a3a:	e1 e0       	ldi	r30, 0x01	; 1
    6a3c:	42 17       	cp	r20, r18
    6a3e:	08 f0       	brcs	.+2      	; 0x6a42 <fat_find_offset_for_dir_entry+0x294>
    6a40:	e0 e0       	ldi	r30, 0x00	; 0
    6a42:	ae 2b       	or	r26, r30
    6a44:	25 2f       	mov	r18, r21
    6a46:	20 0f       	add	r18, r16
    6a48:	f1 e0       	ldi	r31, 0x01	; 1
    6a4a:	25 17       	cp	r18, r21
    6a4c:	08 f0       	brcs	.+2      	; 0x6a50 <fat_find_offset_for_dir_entry+0x2a2>
    6a4e:	f0 e0       	ldi	r31, 0x00	; 0
    6a50:	5a 2f       	mov	r21, r26
    6a52:	52 0f       	add	r21, r18
    6a54:	e1 e0       	ldi	r30, 0x01	; 1
    6a56:	52 17       	cp	r21, r18
    6a58:	08 f0       	brcs	.+2      	; 0x6a5c <fat_find_offset_for_dir_entry+0x2ae>
    6a5a:	e0 e0       	ldi	r30, 0x00	; 0
    6a5c:	fe 2b       	or	r31, r30
    6a5e:	26 2f       	mov	r18, r22
    6a60:	2f 0d       	add	r18, r15
    6a62:	a1 e0       	ldi	r26, 0x01	; 1
    6a64:	26 17       	cp	r18, r22
    6a66:	08 f0       	brcs	.+2      	; 0x6a6a <fat_find_offset_for_dir_entry+0x2bc>
    6a68:	a0 e0       	ldi	r26, 0x00	; 0
    6a6a:	6f 2f       	mov	r22, r31
    6a6c:	62 0f       	add	r22, r18
    6a6e:	e1 e0       	ldi	r30, 0x01	; 1
    6a70:	62 17       	cp	r22, r18
    6a72:	08 f0       	brcs	.+2      	; 0x6a76 <fat_find_offset_for_dir_entry+0x2c8>
    6a74:	e0 e0       	ldi	r30, 0x00	; 0
    6a76:	ae 2b       	or	r26, r30
    6a78:	27 2f       	mov	r18, r23
    6a7a:	2e 0d       	add	r18, r14
    6a7c:	f1 e0       	ldi	r31, 0x01	; 1
    6a7e:	27 17       	cp	r18, r23
    6a80:	08 f0       	brcs	.+2      	; 0x6a84 <fat_find_offset_for_dir_entry+0x2d6>
    6a82:	f0 e0       	ldi	r31, 0x00	; 0
    6a84:	7a 2f       	mov	r23, r26
    6a86:	72 0f       	add	r23, r18
    6a88:	e1 e0       	ldi	r30, 0x01	; 1
    6a8a:	72 17       	cp	r23, r18
    6a8c:	08 f0       	brcs	.+2      	; 0x6a90 <fat_find_offset_for_dir_entry+0x2e2>
    6a8e:	e0 e0       	ldi	r30, 0x00	; 0
    6a90:	fe 2b       	or	r31, r30
    6a92:	28 2f       	mov	r18, r24
    6a94:	2d 0d       	add	r18, r13
    6a96:	e1 e0       	ldi	r30, 0x01	; 1
    6a98:	28 17       	cp	r18, r24
    6a9a:	08 f0       	brcs	.+2      	; 0x6a9e <fat_find_offset_for_dir_entry+0x2f0>
    6a9c:	e0 e0       	ldi	r30, 0x00	; 0
    6a9e:	8f 2f       	mov	r24, r31
    6aa0:	82 0f       	add	r24, r18
    6aa2:	91 e0       	ldi	r25, 0x01	; 1
    6aa4:	82 17       	cp	r24, r18
    6aa6:	08 f0       	brcs	.+2      	; 0x6aaa <fat_find_offset_for_dir_entry+0x2fc>
    6aa8:	90 e0       	ldi	r25, 0x00	; 0
    6aaa:	6e 2e       	mov	r6, r30
    6aac:	69 2a       	or	r6, r25
    6aae:	1c 0d       	add	r17, r12
    6ab0:	be 8b       	std	Y+22, r27	; 0x16
    6ab2:	3f 8b       	std	Y+23, r19	; 0x17
    6ab4:	48 8f       	std	Y+24, r20	; 0x18
    6ab6:	59 8f       	std	Y+25, r21	; 0x19
    6ab8:	36 2e       	mov	r3, r22
    6aba:	47 2e       	mov	r4, r23
    6abc:	58 2e       	mov	r5, r24
    6abe:	61 0e       	add	r6, r17
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    6ac0:	8c 85       	ldd	r24, Y+12	; 0x0c
    6ac2:	9d 85       	ldd	r25, Y+13	; 0x0d
    6ac4:	4a 81       	ldd	r20, Y+2	; 0x02
    6ac6:	5b 81       	ldd	r21, Y+3	; 0x03
    6ac8:	6c 81       	ldd	r22, Y+4	; 0x04
    6aca:	7d 81       	ldd	r23, Y+5	; 0x05
    6acc:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <fat_clear_cluster>
    6ad0:	78 c1       	rjmp	.+752    	; 0x6dc2 <fat_find_offset_for_dir_entry+0x614>

                    break;
    6ad2:	6e 83       	std	Y+6, r22	; 0x06
    6ad4:	7f 83       	std	Y+7, r23	; 0x07
    6ad6:	88 87       	std	Y+8, r24	; 0x08
    6ad8:	99 87       	std	Y+9, r25	; 0x09
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    6ada:	2e 81       	ldd	r18, Y+6	; 0x06
    6adc:	3f 81       	ldd	r19, Y+7	; 0x07
    6ade:	48 85       	ldd	r20, Y+8	; 0x08
    6ae0:	59 85       	ldd	r21, Y+9	; 0x09
    6ae2:	22 30       	cpi	r18, 0x02	; 2
    6ae4:	31 05       	cpc	r19, r1
    6ae6:	41 05       	cpc	r20, r1
    6ae8:	51 05       	cpc	r21, r1
    6aea:	48 f4       	brcc	.+18     	; 0x6afe <fat_find_offset_for_dir_entry+0x350>
    6aec:	dd 24       	eor	r13, r13
    6aee:	cc 24       	eor	r12, r12
    6af0:	bb 24       	eor	r11, r11
    6af2:	aa 24       	eor	r10, r10
    6af4:	22 24       	eor	r2, r2
    6af6:	99 24       	eor	r9, r9
    6af8:	88 24       	eor	r8, r8
    6afa:	77 24       	eor	r7, r7
    6afc:	8d c0       	rjmp	.+282    	; 0x6c18 <fat_find_offset_for_dir_entry+0x46a>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    6afe:	8e 81       	ldd	r24, Y+6	; 0x06
    6b00:	9f 81       	ldd	r25, Y+7	; 0x07
    6b02:	a8 85       	ldd	r26, Y+8	; 0x08
    6b04:	b9 85       	ldd	r27, Y+9	; 0x09
    6b06:	02 97       	sbiw	r24, 0x02	; 2
    6b08:	a1 09       	sbc	r26, r1
    6b0a:	b1 09       	sbc	r27, r1
    6b0c:	5c 01       	movw	r10, r24
    6b0e:	6d 01       	movw	r12, r26
    6b10:	02 96       	adiw	r24, 0x02	; 2
    6b12:	a1 1d       	adc	r26, r1
    6b14:	b1 1d       	adc	r27, r1
    6b16:	8e 83       	std	Y+6, r24	; 0x06
    6b18:	9f 83       	std	Y+7, r25	; 0x07
    6b1a:	a8 87       	std	Y+8, r26	; 0x08
    6b1c:	b9 87       	std	Y+9, r27	; 0x09
    6b1e:	ac 85       	ldd	r26, Y+12	; 0x0c
    6b20:	bd 85       	ldd	r27, Y+13	; 0x0d
    6b22:	58 96       	adiw	r26, 0x18	; 24
    6b24:	2d 90       	ld	r2, X+
    6b26:	3c 90       	ld	r3, X
    6b28:	59 97       	sbiw	r26, 0x19	; 25
    6b2a:	95 01       	movw	r18, r10
    6b2c:	a6 01       	movw	r20, r12
    6b2e:	60 e0       	ldi	r22, 0x00	; 0
    6b30:	70 e0       	ldi	r23, 0x00	; 0
    6b32:	80 e0       	ldi	r24, 0x00	; 0
    6b34:	90 e0       	ldi	r25, 0x00	; 0
    6b36:	51 01       	movw	r10, r2
    6b38:	cc 24       	eor	r12, r12
    6b3a:	dd 24       	eor	r13, r13
    6b3c:	ee 24       	eor	r14, r14
    6b3e:	ff 24       	eor	r15, r15
    6b40:	00 e0       	ldi	r16, 0x00	; 0
    6b42:	10 e0       	ldi	r17, 0x00	; 0
    6b44:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    6b48:	c9 2e       	mov	r12, r25
    6b4a:	ec 85       	ldd	r30, Y+12	; 0x0c
    6b4c:	fd 85       	ldd	r31, Y+13	; 0x0d
    6b4e:	b2 8d       	ldd	r27, Z+26	; 0x1a
    6b50:	b3 8c       	ldd	r11, Z+27	; 0x1b
    6b52:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6b54:	05 8d       	ldd	r16, Z+29	; 0x1d
    6b56:	f6 8c       	ldd	r15, Z+30	; 0x1e
    6b58:	e7 8c       	ldd	r14, Z+31	; 0x1f
    6b5a:	d0 a0       	ldd	r13, Z+32	; 0x20
    6b5c:	11 a1       	ldd	r17, Z+33	; 0x21
    6b5e:	b2 0f       	add	r27, r18
    6b60:	e1 e0       	ldi	r30, 0x01	; 1
    6b62:	b2 17       	cp	r27, r18
    6b64:	08 f0       	brcs	.+2      	; 0x6b68 <fat_find_offset_for_dir_entry+0x3ba>
    6b66:	e0 e0       	ldi	r30, 0x00	; 0
    6b68:	23 2f       	mov	r18, r19
    6b6a:	2b 0d       	add	r18, r11
    6b6c:	f1 e0       	ldi	r31, 0x01	; 1
    6b6e:	23 17       	cp	r18, r19
    6b70:	08 f0       	brcs	.+2      	; 0x6b74 <fat_find_offset_for_dir_entry+0x3c6>
    6b72:	f0 e0       	ldi	r31, 0x00	; 0
    6b74:	3e 2f       	mov	r19, r30
    6b76:	32 0f       	add	r19, r18
    6b78:	e1 e0       	ldi	r30, 0x01	; 1
    6b7a:	32 17       	cp	r19, r18
    6b7c:	08 f0       	brcs	.+2      	; 0x6b80 <fat_find_offset_for_dir_entry+0x3d2>
    6b7e:	e0 e0       	ldi	r30, 0x00	; 0
    6b80:	fe 2b       	or	r31, r30
    6b82:	24 2f       	mov	r18, r20
    6b84:	2a 0f       	add	r18, r26
    6b86:	a1 e0       	ldi	r26, 0x01	; 1
    6b88:	24 17       	cp	r18, r20
    6b8a:	08 f0       	brcs	.+2      	; 0x6b8e <fat_find_offset_for_dir_entry+0x3e0>
    6b8c:	a0 e0       	ldi	r26, 0x00	; 0
    6b8e:	4f 2f       	mov	r20, r31
    6b90:	42 0f       	add	r20, r18
    6b92:	e1 e0       	ldi	r30, 0x01	; 1
    6b94:	42 17       	cp	r20, r18
    6b96:	08 f0       	brcs	.+2      	; 0x6b9a <fat_find_offset_for_dir_entry+0x3ec>
    6b98:	e0 e0       	ldi	r30, 0x00	; 0
    6b9a:	ae 2b       	or	r26, r30
    6b9c:	25 2f       	mov	r18, r21
    6b9e:	20 0f       	add	r18, r16
    6ba0:	f1 e0       	ldi	r31, 0x01	; 1
    6ba2:	25 17       	cp	r18, r21
    6ba4:	08 f0       	brcs	.+2      	; 0x6ba8 <fat_find_offset_for_dir_entry+0x3fa>
    6ba6:	f0 e0       	ldi	r31, 0x00	; 0
    6ba8:	5a 2f       	mov	r21, r26
    6baa:	52 0f       	add	r21, r18
    6bac:	e1 e0       	ldi	r30, 0x01	; 1
    6bae:	52 17       	cp	r21, r18
    6bb0:	08 f0       	brcs	.+2      	; 0x6bb4 <fat_find_offset_for_dir_entry+0x406>
    6bb2:	e0 e0       	ldi	r30, 0x00	; 0
    6bb4:	fe 2b       	or	r31, r30
    6bb6:	26 2f       	mov	r18, r22
    6bb8:	2f 0d       	add	r18, r15
    6bba:	a1 e0       	ldi	r26, 0x01	; 1
    6bbc:	26 17       	cp	r18, r22
    6bbe:	08 f0       	brcs	.+2      	; 0x6bc2 <fat_find_offset_for_dir_entry+0x414>
    6bc0:	a0 e0       	ldi	r26, 0x00	; 0
    6bc2:	6f 2f       	mov	r22, r31
    6bc4:	62 0f       	add	r22, r18
    6bc6:	e1 e0       	ldi	r30, 0x01	; 1
    6bc8:	62 17       	cp	r22, r18
    6bca:	08 f0       	brcs	.+2      	; 0x6bce <fat_find_offset_for_dir_entry+0x420>
    6bcc:	e0 e0       	ldi	r30, 0x00	; 0
    6bce:	ae 2b       	or	r26, r30
    6bd0:	27 2f       	mov	r18, r23
    6bd2:	2e 0d       	add	r18, r14
    6bd4:	f1 e0       	ldi	r31, 0x01	; 1
    6bd6:	27 17       	cp	r18, r23
    6bd8:	08 f0       	brcs	.+2      	; 0x6bdc <fat_find_offset_for_dir_entry+0x42e>
    6bda:	f0 e0       	ldi	r31, 0x00	; 0
    6bdc:	7a 2f       	mov	r23, r26
    6bde:	72 0f       	add	r23, r18
    6be0:	e1 e0       	ldi	r30, 0x01	; 1
    6be2:	72 17       	cp	r23, r18
    6be4:	08 f0       	brcs	.+2      	; 0x6be8 <fat_find_offset_for_dir_entry+0x43a>
    6be6:	e0 e0       	ldi	r30, 0x00	; 0
    6be8:	fe 2b       	or	r31, r30
    6bea:	28 2f       	mov	r18, r24
    6bec:	2d 0d       	add	r18, r13
    6bee:	e1 e0       	ldi	r30, 0x01	; 1
    6bf0:	28 17       	cp	r18, r24
    6bf2:	08 f0       	brcs	.+2      	; 0x6bf6 <fat_find_offset_for_dir_entry+0x448>
    6bf4:	e0 e0       	ldi	r30, 0x00	; 0
    6bf6:	8f 2f       	mov	r24, r31
    6bf8:	82 0f       	add	r24, r18
    6bfa:	91 e0       	ldi	r25, 0x01	; 1
    6bfc:	82 17       	cp	r24, r18
    6bfe:	08 f0       	brcs	.+2      	; 0x6c02 <fat_find_offset_for_dir_entry+0x454>
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	7e 2e       	mov	r7, r30
    6c04:	79 2a       	or	r7, r25
    6c06:	1c 0d       	add	r17, r12
    6c08:	db 2e       	mov	r13, r27
    6c0a:	c3 2e       	mov	r12, r19
    6c0c:	b4 2e       	mov	r11, r20
    6c0e:	a5 2e       	mov	r10, r21
    6c10:	26 2e       	mov	r2, r22
    6c12:	97 2e       	mov	r9, r23
    6c14:	88 2e       	mov	r8, r24
    6c16:	71 0e       	add	r7, r17
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
    6c18:	ac 85       	ldd	r26, Y+12	; 0x0c
    6c1a:	bd 85       	ldd	r27, Y+13	; 0x0d
    6c1c:	58 96       	adiw	r26, 0x18	; 24
    6c1e:	8d 91       	ld	r24, X+
    6c20:	9c 91       	ld	r25, X
    6c22:	59 97       	sbiw	r26, 0x19	; 25
    6c24:	9c 01       	movw	r18, r24
    6c26:	fd 2d       	mov	r31, r13
    6c28:	f8 0f       	add	r31, r24
    6c2a:	e1 e0       	ldi	r30, 0x01	; 1
    6c2c:	fd 15       	cp	r31, r13
    6c2e:	08 f0       	brcs	.+2      	; 0x6c32 <fat_find_offset_for_dir_entry+0x484>
    6c30:	e0 e0       	ldi	r30, 0x00	; 0
    6c32:	8c 2d       	mov	r24, r12
    6c34:	83 0f       	add	r24, r19
    6c36:	21 e0       	ldi	r18, 0x01	; 1
    6c38:	8c 15       	cp	r24, r12
    6c3a:	08 f0       	brcs	.+2      	; 0x6c3e <fat_find_offset_for_dir_entry+0x490>
    6c3c:	20 e0       	ldi	r18, 0x00	; 0
    6c3e:	6e 2f       	mov	r22, r30
    6c40:	68 0f       	add	r22, r24
    6c42:	91 e0       	ldi	r25, 0x01	; 1
    6c44:	68 17       	cp	r22, r24
    6c46:	08 f0       	brcs	.+2      	; 0x6c4a <fat_find_offset_for_dir_entry+0x49c>
    6c48:	90 e0       	ldi	r25, 0x00	; 0
    6c4a:	92 2b       	or	r25, r18
    6c4c:	9b 0d       	add	r25, r11
    6c4e:	81 e0       	ldi	r24, 0x01	; 1
    6c50:	9b 15       	cp	r25, r11
    6c52:	08 f0       	brcs	.+2      	; 0x6c56 <fat_find_offset_for_dir_entry+0x4a8>
    6c54:	80 e0       	ldi	r24, 0x00	; 0
    6c56:	58 2f       	mov	r21, r24
    6c58:	5a 0d       	add	r21, r10
    6c5a:	81 e0       	ldi	r24, 0x01	; 1
    6c5c:	5a 15       	cp	r21, r10
    6c5e:	08 f0       	brcs	.+2      	; 0x6c62 <fat_find_offset_for_dir_entry+0x4b4>
    6c60:	80 e0       	ldi	r24, 0x00	; 0
    6c62:	48 2f       	mov	r20, r24
    6c64:	42 0d       	add	r20, r2
    6c66:	81 e0       	ldi	r24, 0x01	; 1
    6c68:	42 15       	cp	r20, r2
    6c6a:	08 f0       	brcs	.+2      	; 0x6c6e <fat_find_offset_for_dir_entry+0x4c0>
    6c6c:	80 e0       	ldi	r24, 0x00	; 0
    6c6e:	38 2f       	mov	r19, r24
    6c70:	39 0d       	add	r19, r9
    6c72:	81 e0       	ldi	r24, 0x01	; 1
    6c74:	39 15       	cp	r19, r9
    6c76:	08 f0       	brcs	.+2      	; 0x6c7a <fat_find_offset_for_dir_entry+0x4cc>
    6c78:	80 e0       	ldi	r24, 0x00	; 0
    6c7a:	88 0d       	add	r24, r8
    6c7c:	21 e0       	ldi	r18, 0x01	; 1
    6c7e:	88 15       	cp	r24, r8
    6c80:	08 f0       	brcs	.+2      	; 0x6c84 <fat_find_offset_for_dir_entry+0x4d6>
    6c82:	20 e0       	ldi	r18, 0x00	; 0
    6c84:	fe 87       	std	Y+14, r31	; 0x0e
    6c86:	6f 87       	std	Y+15, r22	; 0x0f
    6c88:	98 8b       	std	Y+16, r25	; 0x10
    6c8a:	59 8b       	std	Y+17, r21	; 0x11
    6c8c:	4a 8b       	std	Y+18, r20	; 0x12
    6c8e:	3b 8b       	std	Y+19, r19	; 0x13
    6c90:	8c 8b       	std	Y+20, r24	; 0x14
    6c92:	27 0d       	add	r18, r7
    6c94:	2d 8b       	std	Y+21, r18	; 0x15
    6c96:	de 8a       	std	Y+22, r13	; 0x16
    6c98:	cf 8a       	std	Y+23, r12	; 0x17
    6c9a:	b8 8e       	std	Y+24, r11	; 0x18
    6c9c:	a9 8e       	std	Y+25, r10	; 0x19
    6c9e:	32 2c       	mov	r3, r2
    6ca0:	49 2c       	mov	r4, r9
    6ca2:	58 2c       	mov	r5, r8
    6ca4:	67 2c       	mov	r6, r7
    6ca6:	1a 86       	std	Y+10, r1	; 0x0a
            free_dir_entries_found = 0;
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    6ca8:	ac 85       	ldd	r26, Y+12	; 0x0c
    6caa:	bd 85       	ldd	r27, Y+13	; 0x0d
    6cac:	ed 91       	ld	r30, X+
    6cae:	fc 91       	ld	r31, X
    6cb0:	01 90       	ld	r0, Z+
    6cb2:	f0 81       	ld	r31, Z
    6cb4:	e0 2d       	mov	r30, r0
    6cb6:	2d 2d       	mov	r18, r13
    6cb8:	3c 2d       	mov	r19, r12
    6cba:	4b 2d       	mov	r20, r11
    6cbc:	5a 2d       	mov	r21, r10
    6cbe:	62 2d       	mov	r22, r2
    6cc0:	79 2d       	mov	r23, r9
    6cc2:	88 2d       	mov	r24, r8
    6cc4:	97 2d       	mov	r25, r7
    6cc6:	8e 01       	movw	r16, r28
    6cc8:	0f 5f       	subi	r16, 0xFF	; 255
    6cca:	1f 4f       	sbci	r17, 0xFF	; 255
    6ccc:	b1 e0       	ldi	r27, 0x01	; 1
    6cce:	eb 2e       	mov	r14, r27
    6cd0:	f1 2c       	mov	r15, r1
    6cd2:	09 95       	icall
    6cd4:	88 23       	and	r24, r24
    6cd6:	09 f4       	brne	.+2      	; 0x6cda <fat_find_offset_for_dir_entry+0x52c>
    6cd8:	6c c0       	rjmp	.+216    	; 0x6db2 <fat_find_offset_for_dir_entry+0x604>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    6cda:	89 81       	ldd	r24, Y+1	; 0x01
    6cdc:	85 3e       	cpi	r24, 0xE5	; 229
    6cde:	11 f0       	breq	.+4      	; 0x6ce4 <fat_find_offset_for_dir_entry+0x536>
    6ce0:	88 23       	and	r24, r24
    6ce2:	b9 f5       	brne	.+110    	; 0x6d52 <fat_find_offset_for_dir_entry+0x5a4>
        {
            /* check if we have the needed number of available entries */
            ++free_dir_entries_found;
    6ce4:	ba 85       	ldd	r27, Y+10	; 0x0a
    6ce6:	bf 5f       	subi	r27, 0xFF	; 255
    6ce8:	ba 87       	std	Y+10, r27	; 0x0a
            if(free_dir_entries_found >= free_dir_entries_needed)
    6cea:	eb 85       	ldd	r30, Y+11	; 0x0b
    6cec:	be 17       	cp	r27, r30
    6cee:	08 f0       	brcs	.+2      	; 0x6cf2 <fat_find_offset_for_dir_entry+0x544>
    6cf0:	68 c0       	rjmp	.+208    	; 0x6dc2 <fat_find_offset_for_dir_entry+0x614>
                break;

            offset += 32;
    6cf2:	7d 2d       	mov	r23, r13
    6cf4:	70 5e       	subi	r23, 0xE0	; 224
    6cf6:	81 e0       	ldi	r24, 0x01	; 1
    6cf8:	7d 15       	cp	r23, r13
    6cfa:	08 f0       	brcs	.+2      	; 0x6cfe <fat_find_offset_for_dir_entry+0x550>
    6cfc:	80 e0       	ldi	r24, 0x00	; 0
    6cfe:	68 2f       	mov	r22, r24
    6d00:	6c 0d       	add	r22, r12
    6d02:	81 e0       	ldi	r24, 0x01	; 1
    6d04:	6c 15       	cp	r22, r12
    6d06:	08 f0       	brcs	.+2      	; 0x6d0a <fat_find_offset_for_dir_entry+0x55c>
    6d08:	80 e0       	ldi	r24, 0x00	; 0
    6d0a:	58 2f       	mov	r21, r24
    6d0c:	5b 0d       	add	r21, r11
    6d0e:	81 e0       	ldi	r24, 0x01	; 1
    6d10:	5b 15       	cp	r21, r11
    6d12:	08 f0       	brcs	.+2      	; 0x6d16 <fat_find_offset_for_dir_entry+0x568>
    6d14:	80 e0       	ldi	r24, 0x00	; 0
    6d16:	48 2f       	mov	r20, r24
    6d18:	4a 0d       	add	r20, r10
    6d1a:	81 e0       	ldi	r24, 0x01	; 1
    6d1c:	4a 15       	cp	r20, r10
    6d1e:	08 f0       	brcs	.+2      	; 0x6d22 <fat_find_offset_for_dir_entry+0x574>
    6d20:	80 e0       	ldi	r24, 0x00	; 0
    6d22:	38 2f       	mov	r19, r24
    6d24:	32 0d       	add	r19, r2
    6d26:	81 e0       	ldi	r24, 0x01	; 1
    6d28:	32 15       	cp	r19, r2
    6d2a:	08 f0       	brcs	.+2      	; 0x6d2e <fat_find_offset_for_dir_entry+0x580>
    6d2c:	80 e0       	ldi	r24, 0x00	; 0
    6d2e:	28 2f       	mov	r18, r24
    6d30:	29 0d       	add	r18, r9
    6d32:	81 e0       	ldi	r24, 0x01	; 1
    6d34:	29 15       	cp	r18, r9
    6d36:	08 f0       	brcs	.+2      	; 0x6d3a <fat_find_offset_for_dir_entry+0x58c>
    6d38:	80 e0       	ldi	r24, 0x00	; 0
    6d3a:	88 0d       	add	r24, r8
    6d3c:	91 e0       	ldi	r25, 0x01	; 1
    6d3e:	88 15       	cp	r24, r8
    6d40:	08 f0       	brcs	.+2      	; 0x6d44 <fat_find_offset_for_dir_entry+0x596>
    6d42:	90 e0       	ldi	r25, 0x00	; 0
    6d44:	6b 01       	movw	r12, r22
    6d46:	5a 01       	movw	r10, r20
    6d48:	23 2e       	mov	r2, r19
    6d4a:	92 2e       	mov	r9, r18
    6d4c:	88 2e       	mov	r8, r24
    6d4e:	79 0e       	add	r7, r25
    6d50:	d6 cd       	rjmp	.-1108   	; 0x68fe <fat_find_offset_for_dir_entry+0x150>
        }
        else
        {
            offset += 32;
    6d52:	7d 2d       	mov	r23, r13
    6d54:	70 5e       	subi	r23, 0xE0	; 224
    6d56:	81 e0       	ldi	r24, 0x01	; 1
    6d58:	7d 15       	cp	r23, r13
    6d5a:	08 f0       	brcs	.+2      	; 0x6d5e <fat_find_offset_for_dir_entry+0x5b0>
    6d5c:	80 e0       	ldi	r24, 0x00	; 0
    6d5e:	68 2f       	mov	r22, r24
    6d60:	6c 0d       	add	r22, r12
    6d62:	81 e0       	ldi	r24, 0x01	; 1
    6d64:	6c 15       	cp	r22, r12
    6d66:	08 f0       	brcs	.+2      	; 0x6d6a <fat_find_offset_for_dir_entry+0x5bc>
    6d68:	80 e0       	ldi	r24, 0x00	; 0
    6d6a:	58 2f       	mov	r21, r24
    6d6c:	5b 0d       	add	r21, r11
    6d6e:	81 e0       	ldi	r24, 0x01	; 1
    6d70:	5b 15       	cp	r21, r11
    6d72:	08 f0       	brcs	.+2      	; 0x6d76 <fat_find_offset_for_dir_entry+0x5c8>
    6d74:	80 e0       	ldi	r24, 0x00	; 0
    6d76:	48 2f       	mov	r20, r24
    6d78:	4a 0d       	add	r20, r10
    6d7a:	81 e0       	ldi	r24, 0x01	; 1
    6d7c:	4a 15       	cp	r20, r10
    6d7e:	08 f0       	brcs	.+2      	; 0x6d82 <fat_find_offset_for_dir_entry+0x5d4>
    6d80:	80 e0       	ldi	r24, 0x00	; 0
    6d82:	38 2f       	mov	r19, r24
    6d84:	32 0d       	add	r19, r2
    6d86:	81 e0       	ldi	r24, 0x01	; 1
    6d88:	32 15       	cp	r19, r2
    6d8a:	08 f0       	brcs	.+2      	; 0x6d8e <fat_find_offset_for_dir_entry+0x5e0>
    6d8c:	80 e0       	ldi	r24, 0x00	; 0
    6d8e:	28 2f       	mov	r18, r24
    6d90:	29 0d       	add	r18, r9
    6d92:	81 e0       	ldi	r24, 0x01	; 1
    6d94:	29 15       	cp	r18, r9
    6d96:	08 f0       	brcs	.+2      	; 0x6d9a <fat_find_offset_for_dir_entry+0x5ec>
    6d98:	80 e0       	ldi	r24, 0x00	; 0
    6d9a:	88 0d       	add	r24, r8
    6d9c:	91 e0       	ldi	r25, 0x01	; 1
    6d9e:	88 15       	cp	r24, r8
    6da0:	08 f0       	brcs	.+2      	; 0x6da4 <fat_find_offset_for_dir_entry+0x5f6>
    6da2:	90 e0       	ldi	r25, 0x00	; 0
    6da4:	6b 01       	movw	r12, r22
    6da6:	5a 01       	movw	r10, r20
    6da8:	23 2e       	mov	r2, r19
    6daa:	92 2e       	mov	r9, r18
    6dac:	88 2e       	mov	r8, r24
    6dae:	79 0e       	add	r7, r25
    6db0:	9d cd       	rjmp	.-1222   	; 0x68ec <fat_find_offset_for_dir_entry+0x13e>
    6db2:	1e 8a       	std	Y+22, r1	; 0x16
    6db4:	1f 8a       	std	Y+23, r1	; 0x17
    6db6:	18 8e       	std	Y+24, r1	; 0x18
    6db8:	19 8e       	std	Y+25, r1	; 0x19
    6dba:	33 24       	eor	r3, r3
    6dbc:	44 24       	eor	r4, r4
    6dbe:	55 24       	eor	r5, r5
    6dc0:	66 24       	eor	r6, r6
            free_dir_entries_found = 0;
        }
    }

    return dir_entry_offset;
}
    6dc2:	2e 89       	ldd	r18, Y+22	; 0x16
    6dc4:	3f 89       	ldd	r19, Y+23	; 0x17
    6dc6:	48 8d       	ldd	r20, Y+24	; 0x18
    6dc8:	59 8d       	ldd	r21, Y+25	; 0x19
    6dca:	63 2d       	mov	r22, r3
    6dcc:	74 2d       	mov	r23, r4
    6dce:	85 2d       	mov	r24, r5
    6dd0:	96 2d       	mov	r25, r6
    6dd2:	69 96       	adiw	r28, 0x19	; 25
    6dd4:	0f b6       	in	r0, 0x3f	; 63
    6dd6:	f8 94       	cli
    6dd8:	de bf       	out	0x3e, r29	; 62
    6dda:	0f be       	out	0x3f, r0	; 63
    6ddc:	cd bf       	out	0x3d, r28	; 61
    6dde:	cf 91       	pop	r28
    6de0:	df 91       	pop	r29
    6de2:	1f 91       	pop	r17
    6de4:	0f 91       	pop	r16
    6de6:	ff 90       	pop	r15
    6de8:	ef 90       	pop	r14
    6dea:	df 90       	pop	r13
    6dec:	cf 90       	pop	r12
    6dee:	bf 90       	pop	r11
    6df0:	af 90       	pop	r10
    6df2:	9f 90       	pop	r9
    6df4:	8f 90       	pop	r8
    6df6:	7f 90       	pop	r7
    6df8:	6f 90       	pop	r6
    6dfa:	5f 90       	pop	r5
    6dfc:	4f 90       	pop	r4
    6dfe:	3f 90       	pop	r3
    6e00:	2f 90       	pop	r2
    6e02:	08 95       	ret

00006e04 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    6e04:	2f 92       	push	r2
    6e06:	3f 92       	push	r3
    6e08:	4f 92       	push	r4
    6e0a:	5f 92       	push	r5
    6e0c:	6f 92       	push	r6
    6e0e:	7f 92       	push	r7
    6e10:	8f 92       	push	r8
    6e12:	9f 92       	push	r9
    6e14:	af 92       	push	r10
    6e16:	bf 92       	push	r11
    6e18:	cf 92       	push	r12
    6e1a:	df 92       	push	r13
    6e1c:	ef 92       	push	r14
    6e1e:	ff 92       	push	r15
    6e20:	0f 93       	push	r16
    6e22:	1f 93       	push	r17
    6e24:	df 93       	push	r29
    6e26:	cf 93       	push	r28
    6e28:	cd b7       	in	r28, 0x3d	; 61
    6e2a:	de b7       	in	r29, 0x3e	; 62
    6e2c:	a5 97       	sbiw	r28, 0x25	; 37
    6e2e:	0f b6       	in	r0, 0x3f	; 63
    6e30:	f8 94       	cli
    6e32:	de bf       	out	0x3e, r29	; 62
    6e34:	0f be       	out	0x3f, r0	; 63
    6e36:	cd bf       	out	0x3d, r28	; 61
    6e38:	fc 01       	movw	r30, r24
    6e3a:	6b 01       	movw	r12, r22
    if(!fs || !dir_entry)
    6e3c:	00 97       	sbiw	r24, 0x00	; 0
    6e3e:	09 f4       	brne	.+2      	; 0x6e42 <fat_write_dir_entry+0x3e>
    6e40:	b3 c1       	rjmp	.+870    	; 0x71a8 <fat_write_dir_entry+0x3a4>
    6e42:	61 15       	cp	r22, r1
    6e44:	71 05       	cpc	r23, r1
    6e46:	09 f4       	brne	.+2      	; 0x6e4a <fat_write_dir_entry+0x46>
    6e48:	af c1       	rjmp	.+862    	; 0x71a8 <fat_write_dir_entry+0x3a4>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    6e4a:	01 90       	ld	r0, Z+
    6e4c:	f0 81       	ld	r31, Z
    6e4e:	e0 2d       	mov	r30, r0
    6e50:	84 81       	ldd	r24, Z+4	; 0x04
    6e52:	95 81       	ldd	r25, Z+5	; 0x05
    6e54:	9b a3       	std	Y+35, r25	; 0x23
    6e56:	8a a3       	std	Y+34, r24	; 0x22
    offset_t offset = dir_entry->entry_offset;
    6e58:	db 01       	movw	r26, r22
    6e5a:	99 96       	adiw	r26, 0x29	; 41
    6e5c:	2c 90       	ld	r2, X
    6e5e:	99 97       	sbiw	r26, 0x29	; 41
    6e60:	9a 96       	adiw	r26, 0x2a	; 42
    6e62:	bc 91       	ld	r27, X
    6e64:	bc a3       	std	Y+36, r27	; 0x24
    6e66:	fb 01       	movw	r30, r22
    6e68:	73 a4       	ldd	r7, Z+43	; 0x2b
    6e6a:	64 a4       	ldd	r6, Z+44	; 0x2c
    6e6c:	55 a4       	ldd	r5, Z+45	; 0x2d
    6e6e:	46 a4       	ldd	r4, Z+46	; 0x2e
    6e70:	37 a4       	ldd	r3, Z+47	; 0x2f
    6e72:	f0 a9       	ldd	r31, Z+48	; 0x30
    6e74:	fd a3       	std	Y+37, r31	; 0x25
    const char* name = dir_entry->long_name;
    6e76:	06 2f       	mov	r16, r22
    6e78:	fd 2c       	mov	r15, r13
    uint8_t name_len = strlen(name);
    6e7a:	fb 01       	movw	r30, r22
    6e7c:	01 90       	ld	r0, Z+
    6e7e:	00 20       	and	r0, r0
    6e80:	e9 f7       	brne	.-6      	; 0x6e7c <fat_write_dir_entry+0x78>
    6e82:	31 97       	sbiw	r30, 0x01	; 1
    6e84:	1e 2f       	mov	r17, r30
    6e86:	16 1b       	sub	r17, r22
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    6e88:	81 2f       	mov	r24, r17
    6e8a:	90 e0       	ldi	r25, 0x00	; 0
    6e8c:	0c 96       	adiw	r24, 0x0c	; 12
    6e8e:	6d e0       	ldi	r22, 0x0D	; 13
    6e90:	70 e0       	ldi	r23, 0x00	; 0
    6e92:	0e 94 b1 49 	call	0x9362	; 0x9362 <__divmodhi4>
    6e96:	69 a3       	std	Y+33, r22	; 0x21
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    6e98:	ce 01       	movw	r24, r28
    6e9a:	01 96       	adiw	r24, 0x01	; 1
    6e9c:	60 e2       	ldi	r22, 0x20	; 32
    6e9e:	70 e0       	ldi	r23, 0x00	; 0
    6ea0:	4b e0       	ldi	r20, 0x0B	; 11
    6ea2:	50 e0       	ldi	r21, 0x00	; 0
    6ea4:	0e 94 80 46 	call	0x8d00	; 0x8d00 <memset>
    char* name_ext = strrchr(name, '.');
    6ea8:	c6 01       	movw	r24, r12
    6eaa:	6e e2       	ldi	r22, 0x2E	; 46
    6eac:	70 e0       	ldi	r23, 0x00	; 0
    6eae:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <strrchr>
    6eb2:	fc 01       	movw	r30, r24
    if(name_ext && *++name_ext)
    6eb4:	00 97       	sbiw	r24, 0x00	; 0
    6eb6:	e1 f0       	breq	.+56     	; 0x6ef0 <fat_write_dir_entry+0xec>
    6eb8:	9c 01       	movw	r18, r24
    6eba:	2f 5f       	subi	r18, 0xFF	; 255
    6ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    6ebe:	81 81       	ldd	r24, Z+1	; 0x01
    6ec0:	88 23       	and	r24, r24
    6ec2:	b1 f0       	breq	.+44     	; 0x6ef0 <fat_write_dir_entry+0xec>
    {
        uint8_t name_ext_len = strlen(name_ext);
    6ec4:	d9 01       	movw	r26, r18
    6ec6:	0d 90       	ld	r0, X+
    6ec8:	00 20       	and	r0, r0
    6eca:	e9 f7       	brne	.-6      	; 0x6ec6 <fat_write_dir_entry+0xc2>
    6ecc:	11 97       	sbiw	r26, 0x01	; 1
    6ece:	a2 1b       	sub	r26, r18
    6ed0:	b3 0b       	sbc	r27, r19
        name_len -= name_ext_len + 1;
    6ed2:	8a 2f       	mov	r24, r26
    6ed4:	80 95       	com	r24
    6ed6:	18 0f       	add	r17, r24

        if(name_ext_len > 3)
            name_ext_len = 3;
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    6ed8:	be 01       	movw	r22, r28
    6eda:	67 5f       	subi	r22, 0xF7	; 247
    6edc:	7f 4f       	sbci	r23, 0xFF	; 255
    6ede:	4a 2f       	mov	r20, r26
    6ee0:	a4 30       	cpi	r26, 0x04	; 4
    6ee2:	08 f0       	brcs	.+2      	; 0x6ee6 <fat_write_dir_entry+0xe2>
    6ee4:	43 e0       	ldi	r20, 0x03	; 3
    6ee6:	cb 01       	movw	r24, r22
    6ee8:	b9 01       	movw	r22, r18
    6eea:	50 e0       	ldi	r21, 0x00	; 0
    6eec:	0e 94 77 46 	call	0x8cee	; 0x8cee <memcpy>
    6ef0:	ce 01       	movw	r24, r28
    6ef2:	01 96       	adiw	r24, 0x01	; 1
    }
    
    if(name_len <= 8)
    6ef4:	19 30       	cpi	r17, 0x09	; 9
    6ef6:	a0 f4       	brcc	.+40     	; 0x6f20 <fat_write_dir_entry+0x11c>
    {
        memcpy(buffer, name, name_len);
    6ef8:	60 2f       	mov	r22, r16
    6efa:	7f 2d       	mov	r23, r15
    6efc:	41 2f       	mov	r20, r17
    6efe:	50 e0       	ldi	r21, 0x00	; 0
    6f00:	0e 94 77 46 	call	0x8cee	; 0x8cee <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    6f04:	d6 01       	movw	r26, r12
    6f06:	8c 91       	ld	r24, X
    6f08:	8e 32       	cpi	r24, 0x2E	; 46
    6f0a:	41 f5       	brne	.+80     	; 0x6f5c <fat_write_dir_entry+0x158>
    6f0c:	11 96       	adiw	r26, 0x01	; 1
    6f0e:	8c 91       	ld	r24, X
    6f10:	11 97       	sbiw	r26, 0x01	; 1
    6f12:	8e 32       	cpi	r24, 0x2E	; 46
    6f14:	11 f4       	brne	.+4      	; 0x6f1a <fat_write_dir_entry+0x116>
    6f16:	12 96       	adiw	r26, 0x02	; 2
    6f18:	8c 91       	ld	r24, X
    6f1a:	88 23       	and	r24, r24
    6f1c:	f1 f0       	breq	.+60     	; 0x6f5a <fat_write_dir_entry+0x156>
    6f1e:	1e c0       	rjmp	.+60     	; 0x6f5c <fat_write_dir_entry+0x158>
          )
            lfn_entry_count = 0;
    }
    else
    {
        memcpy(buffer, name, 8);
    6f20:	dc 01       	movw	r26, r24
    6f22:	80 2f       	mov	r24, r16
    6f24:	9f 2d       	mov	r25, r15
    6f26:	9c 01       	movw	r18, r24
    6f28:	f9 01       	movw	r30, r18
    6f2a:	88 e0       	ldi	r24, 0x08	; 8
    6f2c:	01 90       	ld	r0, Z+
    6f2e:	0d 92       	st	X+, r0
    6f30:	81 50       	subi	r24, 0x01	; 1
    6f32:	e1 f7       	brne	.-8      	; 0x6f2c <fat_write_dir_entry+0x128>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    6f34:	f6 01       	movw	r30, r12
    6f36:	81 a1       	ldd	r24, Z+33	; 0x21
    6f38:	98 2f       	mov	r25, r24
    6f3a:	92 95       	swap	r25
    6f3c:	9f 70       	andi	r25, 0x0F	; 15

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    6f3e:	80 3a       	cpi	r24, 0xA0	; 160
    6f40:	10 f4       	brcc	.+4      	; 0x6f46 <fat_write_dir_entry+0x142>
    6f42:	90 5d       	subi	r25, 0xD0	; 208
    6f44:	01 c0       	rjmp	.+2      	; 0x6f48 <fat_write_dir_entry+0x144>
    6f46:	9f 59       	subi	r25, 0x9F	; 159
        num &= 0x0f;
    6f48:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    6f4a:	8a 30       	cpi	r24, 0x0A	; 10
    6f4c:	10 f4       	brcc	.+4      	; 0x6f52 <fat_write_dir_entry+0x14e>
    6f4e:	80 5d       	subi	r24, 0xD0	; 208
    6f50:	01 c0       	rjmp	.+2      	; 0x6f54 <fat_write_dir_entry+0x150>
    6f52:	8f 59       	subi	r24, 0x9F	; 159
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    6f54:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    6f56:	88 87       	std	Y+8, r24	; 0x08
    6f58:	01 c0       	rjmp	.+2      	; 0x6f5c <fat_write_dir_entry+0x158>
    6f5a:	19 a2       	std	Y+33, r1	; 0x21
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    6f5c:	89 81       	ldd	r24, Y+1	; 0x01
    6f5e:	85 3e       	cpi	r24, 0xE5	; 229
    6f60:	11 f4       	brne	.+4      	; 0x6f66 <fat_write_dir_entry+0x162>
        buffer[0] = 0x05;
    6f62:	85 e0       	ldi	r24, 0x05	; 5
    6f64:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    6f66:	85 e1       	ldi	r24, 0x15	; 21
    6f68:	fe 01       	movw	r30, r28
    6f6a:	3c 96       	adiw	r30, 0x0c	; 12
    6f6c:	df 01       	movw	r26, r30
    6f6e:	1d 92       	st	X+, r1
    6f70:	8a 95       	dec	r24
    6f72:	e9 f7       	brne	.-6      	; 0x6f6e <fat_write_dir_entry+0x16a>
    buffer[0x0b] = dir_entry->attributes;
    6f74:	f6 01       	movw	r30, r12
    6f76:	80 a1       	ldd	r24, Z+32	; 0x20
    6f78:	8c 87       	std	Y+12, r24	; 0x0c
#if FAT_DATETIME_SUPPORT
    *((uint16_t*) &buffer[0x16]) = htol16(dir_entry->modification_time);
    *((uint16_t*) &buffer[0x18]) = htol16(dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    *((uint16_t*) &buffer[0x14]) = htol16((uint16_t) (dir_entry->cluster >> 16));
    6f7a:	21 a1       	ldd	r18, Z+33	; 0x21
    6f7c:	32 a1       	ldd	r19, Z+34	; 0x22
    6f7e:	43 a1       	ldd	r20, Z+35	; 0x23
    6f80:	54 a1       	ldd	r21, Z+36	; 0x24
    6f82:	ca 01       	movw	r24, r20
    6f84:	aa 27       	eor	r26, r26
    6f86:	bb 27       	eor	r27, r27
    6f88:	9e 8b       	std	Y+22, r25	; 0x16
    6f8a:	8d 8b       	std	Y+21, r24	; 0x15
#endif
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    6f8c:	3c 8f       	std	Y+28, r19	; 0x1c
    6f8e:	2b 8f       	std	Y+27, r18	; 0x1b
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);
    6f90:	85 a1       	ldd	r24, Z+37	; 0x25
    6f92:	96 a1       	ldd	r25, Z+38	; 0x26
    6f94:	a7 a1       	ldd	r26, Z+39	; 0x27
    6f96:	b0 a5       	ldd	r27, Z+40	; 0x28
    6f98:	8d 8f       	std	Y+29, r24	; 0x1d
    6f9a:	9e 8f       	std	Y+30, r25	; 0x1e
    6f9c:	af 8f       	std	Y+31, r26	; 0x1f
    6f9e:	b8 a3       	std	Y+32, r27	; 0x20

    /* write to disk */
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    6fa0:	f9 a1       	ldd	r31, Y+33	; 0x21
    6fa2:	8f 2f       	mov	r24, r31
    6fa4:	90 e0       	ldi	r25, 0x00	; 0
    6fa6:	a5 e0       	ldi	r26, 0x05	; 5
    6fa8:	88 0f       	add	r24, r24
    6faa:	99 1f       	adc	r25, r25
    6fac:	aa 95       	dec	r26
    6fae:	e1 f7       	brne	.-8      	; 0x6fa8 <fat_write_dir_entry+0x1a4>
    6fb0:	9c 01       	movw	r18, r24
    6fb2:	40 e0       	ldi	r20, 0x00	; 0
    6fb4:	50 e0       	ldi	r21, 0x00	; 0
    6fb6:	60 e0       	ldi	r22, 0x00	; 0
    6fb8:	70 e0       	ldi	r23, 0x00	; 0
    6fba:	80 e0       	ldi	r24, 0x00	; 0
    6fbc:	90 e0       	ldi	r25, 0x00	; 0
    6fbe:	b2 2e       	mov	r11, r18
    6fc0:	b2 0c       	add	r11, r2
    6fc2:	a1 e0       	ldi	r26, 0x01	; 1
    6fc4:	b2 16       	cp	r11, r18
    6fc6:	08 f0       	brcs	.+2      	; 0x6fca <fat_write_dir_entry+0x1c6>
    6fc8:	a0 e0       	ldi	r26, 0x00	; 0
    6fca:	ec a1       	ldd	r30, Y+36	; 0x24
    6fcc:	e3 0f       	add	r30, r19
    6fce:	f1 e0       	ldi	r31, 0x01	; 1
    6fd0:	e3 17       	cp	r30, r19
    6fd2:	08 f0       	brcs	.+2      	; 0x6fd6 <fat_write_dir_entry+0x1d2>
    6fd4:	f0 e0       	ldi	r31, 0x00	; 0
    6fd6:	ea 2e       	mov	r14, r26
    6fd8:	ee 0e       	add	r14, r30
    6fda:	a1 e0       	ldi	r26, 0x01	; 1
    6fdc:	ee 16       	cp	r14, r30
    6fde:	08 f0       	brcs	.+2      	; 0x6fe2 <fat_write_dir_entry+0x1de>
    6fe0:	a0 e0       	ldi	r26, 0x00	; 0
    6fe2:	fa 2b       	or	r31, r26
    6fe4:	e1 e0       	ldi	r30, 0x01	; 1
    6fe6:	74 16       	cp	r7, r20
    6fe8:	08 f0       	brcs	.+2      	; 0x6fec <fat_write_dir_entry+0x1e8>
    6fea:	e0 e0       	ldi	r30, 0x00	; 0
    6fec:	ff 2e       	mov	r15, r31
    6fee:	f7 0c       	add	r15, r7
    6ff0:	f1 e0       	ldi	r31, 0x01	; 1
    6ff2:	f7 14       	cp	r15, r7
    6ff4:	08 f0       	brcs	.+2      	; 0x6ff8 <fat_write_dir_entry+0x1f4>
    6ff6:	f0 e0       	ldi	r31, 0x00	; 0
    6ff8:	ef 2b       	or	r30, r31
    6ffa:	f1 e0       	ldi	r31, 0x01	; 1
    6ffc:	65 16       	cp	r6, r21
    6ffe:	08 f0       	brcs	.+2      	; 0x7002 <fat_write_dir_entry+0x1fe>
    7000:	f0 e0       	ldi	r31, 0x00	; 0
    7002:	0e 2f       	mov	r16, r30
    7004:	06 0d       	add	r16, r6
    7006:	e1 e0       	ldi	r30, 0x01	; 1
    7008:	06 15       	cp	r16, r6
    700a:	08 f0       	brcs	.+2      	; 0x700e <fat_write_dir_entry+0x20a>
    700c:	e0 e0       	ldi	r30, 0x00	; 0
    700e:	fe 2b       	or	r31, r30
    7010:	e1 e0       	ldi	r30, 0x01	; 1
    7012:	56 16       	cp	r5, r22
    7014:	08 f0       	brcs	.+2      	; 0x7018 <fat_write_dir_entry+0x214>
    7016:	e0 e0       	ldi	r30, 0x00	; 0
    7018:	1f 2f       	mov	r17, r31
    701a:	15 0d       	add	r17, r5
    701c:	f1 e0       	ldi	r31, 0x01	; 1
    701e:	15 15       	cp	r17, r5
    7020:	08 f0       	brcs	.+2      	; 0x7024 <fat_write_dir_entry+0x220>
    7022:	f0 e0       	ldi	r31, 0x00	; 0
    7024:	ef 2b       	or	r30, r31
    7026:	f1 e0       	ldi	r31, 0x01	; 1
    7028:	47 16       	cp	r4, r23
    702a:	08 f0       	brcs	.+2      	; 0x702e <fat_write_dir_entry+0x22a>
    702c:	f0 e0       	ldi	r31, 0x00	; 0
    702e:	be 2f       	mov	r27, r30
    7030:	b4 0d       	add	r27, r4
    7032:	e1 e0       	ldi	r30, 0x01	; 1
    7034:	b4 15       	cp	r27, r4
    7036:	08 f0       	brcs	.+2      	; 0x703a <fat_write_dir_entry+0x236>
    7038:	e0 e0       	ldi	r30, 0x00	; 0
    703a:	fe 2b       	or	r31, r30
    703c:	a1 e0       	ldi	r26, 0x01	; 1
    703e:	38 16       	cp	r3, r24
    7040:	08 f0       	brcs	.+2      	; 0x7044 <fat_write_dir_entry+0x240>
    7042:	a0 e0       	ldi	r26, 0x00	; 0
    7044:	8f 2f       	mov	r24, r31
    7046:	83 0d       	add	r24, r3
    7048:	e1 e0       	ldi	r30, 0x01	; 1
    704a:	83 15       	cp	r24, r3
    704c:	08 f0       	brcs	.+2      	; 0x7050 <fat_write_dir_entry+0x24c>
    704e:	e0 e0       	ldi	r30, 0x00	; 0
    7050:	ae 2b       	or	r26, r30
    7052:	2b 2d       	mov	r18, r11
    7054:	3e 2d       	mov	r19, r14
    7056:	4f 2d       	mov	r20, r15
    7058:	50 2f       	mov	r21, r16
    705a:	61 2f       	mov	r22, r17
    705c:	7b 2f       	mov	r23, r27
    705e:	9d a1       	ldd	r25, Y+37	; 0x25
    7060:	9a 0f       	add	r25, r26
    7062:	8e 01       	movw	r16, r28
    7064:	0f 5f       	subi	r16, 0xFF	; 255
    7066:	1f 4f       	sbci	r17, 0xFF	; 255
    7068:	f0 e2       	ldi	r31, 0x20	; 32
    706a:	ef 2e       	mov	r14, r31
    706c:	f1 2c       	mov	r15, r1
    706e:	aa a1       	ldd	r26, Y+34	; 0x22
    7070:	bb a1       	ldd	r27, Y+35	; 0x23
    7072:	fd 01       	movw	r30, r26
    7074:	09 95       	icall
    7076:	88 23       	and	r24, r24
    7078:	09 f4       	brne	.+2      	; 0x707c <fat_write_dir_entry+0x278>
    707a:	96 c0       	rjmp	.+300    	; 0x71a8 <fat_write_dir_entry+0x3a4>
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    707c:	b9 80       	ldd	r11, Y+1	; 0x01
    707e:	fe 01       	movw	r30, r28
    7080:	32 96       	adiw	r30, 0x02	; 2
    for(uint8_t i = 1; i < 11; ++i)
    7082:	9e 01       	movw	r18, r28
    7084:	24 5f       	subi	r18, 0xF4	; 244
    7086:	3f 4f       	sbci	r19, 0xFF	; 255
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    7088:	8b 2d       	mov	r24, r11
    708a:	86 95       	lsr	r24
    708c:	b7 94       	ror	r11
    708e:	bb 24       	eor	r11, r11
    7090:	b7 94       	ror	r11
    7092:	b8 2a       	or	r11, r24
    7094:	81 91       	ld	r24, Z+
    7096:	b8 0e       	add	r11, r24
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
    7098:	e2 17       	cp	r30, r18
    709a:	f3 07       	cpc	r31, r19
    709c:	a9 f7       	brne	.-22     	; 0x7088 <fat_write_dir_entry+0x284>
    709e:	a9 a0       	ldd	r10, Y+33	; 0x21
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    70a0:	4e 01       	movw	r8, r28
    70a2:	08 94       	sec
    70a4:	81 1c       	adc	r8, r1
    70a6:	91 1c       	adc	r9, r1
    70a8:	7a c0       	rjmp	.+244    	; 0x719e <fat_write_dir_entry+0x39a>
    70aa:	c4 01       	movw	r24, r8
    70ac:	6f ef       	ldi	r22, 0xFF	; 255
    70ae:	70 e0       	ldi	r23, 0x00	; 0
    70b0:	40 e2       	ldi	r20, 0x20	; 32
    70b2:	50 e0       	ldi	r21, 0x00	; 0
    70b4:	0e 94 80 46 	call	0x8d00	; 0x8d00 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    70b8:	ed e0       	ldi	r30, 0x0D	; 13
    70ba:	ae 9e       	mul	r10, r30
    70bc:	d0 01       	movw	r26, r0
    70be:	11 24       	eor	r1, r1
    70c0:	1d 97       	sbiw	r26, 0x0d	; 13
    70c2:	ac 0d       	add	r26, r12
    70c4:	bd 1d       	adc	r27, r13
    70c6:	91 e0       	ldi	r25, 0x01	; 1
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    70c8:	f4 01       	movw	r30, r8
    70ca:	e9 0f       	add	r30, r25
    70cc:	f1 1d       	adc	r31, r1
    70ce:	8c 91       	ld	r24, X
    70d0:	80 83       	st	Z, r24
    70d2:	89 2f       	mov	r24, r25
    70d4:	8f 5f       	subi	r24, 0xFF	; 255
            buffer[i++] = 0;
    70d6:	f4 01       	movw	r30, r8
    70d8:	e8 0f       	add	r30, r24
    70da:	f1 1d       	adc	r31, r1
    70dc:	10 82       	st	Z, r1
    70de:	9e 5f       	subi	r25, 0xFE	; 254

            switch(i)
    70e0:	9b 30       	cpi	r25, 0x0B	; 11
    70e2:	19 f0       	breq	.+6      	; 0x70ea <fat_write_dir_entry+0x2e6>
    70e4:	9a 31       	cpi	r25, 0x1A	; 26
    70e6:	21 f4       	brne	.+8      	; 0x70f0 <fat_write_dir_entry+0x2ec>
    70e8:	02 c0       	rjmp	.+4      	; 0x70ee <fat_write_dir_entry+0x2ea>
    70ea:	9e e0       	ldi	r25, 0x0E	; 14
    70ec:	01 c0       	rjmp	.+2      	; 0x70f0 <fat_write_dir_entry+0x2ec>
    70ee:	9c e1       	ldi	r25, 0x1C	; 28
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    70f0:	8c 91       	ld	r24, X
    70f2:	88 23       	and	r24, r24
    70f4:	21 f0       	breq	.+8      	; 0x70fe <fat_write_dir_entry+0x2fa>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    70f6:	9f 31       	cpi	r25, 0x1F	; 31
    70f8:	10 f4       	brcc	.+4      	; 0x70fe <fat_write_dir_entry+0x2fa>
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    70fa:	11 96       	adiw	r26, 0x01	; 1
    70fc:	e5 cf       	rjmp	.-54     	; 0x70c8 <fat_write_dir_entry+0x2c4>
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    70fe:	a9 82       	std	Y+1, r10	; 0x01
        if(lfn_entry == lfn_entry_count)
    7100:	f9 a1       	ldd	r31, Y+33	; 0x21
    7102:	af 16       	cp	r10, r31
    7104:	19 f4       	brne	.+6      	; 0x710c <fat_write_dir_entry+0x308>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    7106:	8a 2d       	mov	r24, r10
    7108:	80 64       	ori	r24, 0x40	; 64
    710a:	89 83       	std	Y+1, r24	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    710c:	2f e0       	ldi	r18, 0x0F	; 15
    710e:	2c 87       	std	Y+12, r18	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    7110:	be 86       	std	Y+14, r11	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    7112:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    7114:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    7116:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    7118:	22 2d       	mov	r18, r2
    711a:	3c a1       	ldd	r19, Y+36	; 0x24
    711c:	47 2d       	mov	r20, r7
    711e:	56 2d       	mov	r21, r6
    7120:	65 2d       	mov	r22, r5
    7122:	74 2d       	mov	r23, r4
    7124:	83 2d       	mov	r24, r3
    7126:	9d a1       	ldd	r25, Y+37	; 0x25
    7128:	84 01       	movw	r16, r8
    712a:	e0 e2       	ldi	r30, 0x20	; 32
    712c:	ee 2e       	mov	r14, r30
    712e:	f1 2c       	mov	r15, r1
    7130:	aa a1       	ldd	r26, Y+34	; 0x22
    7132:	bb a1       	ldd	r27, Y+35	; 0x23
    7134:	fd 01       	movw	r30, r26
    7136:	09 95       	icall
    
        offset += sizeof(buffer);
    7138:	72 2d       	mov	r23, r2
    713a:	70 5e       	subi	r23, 0xE0	; 224
    713c:	81 e0       	ldi	r24, 0x01	; 1
    713e:	72 15       	cp	r23, r2
    7140:	08 f0       	brcs	.+2      	; 0x7144 <fat_write_dir_entry+0x340>
    7142:	80 e0       	ldi	r24, 0x00	; 0
    7144:	6c a1       	ldd	r22, Y+36	; 0x24
    7146:	68 0f       	add	r22, r24
    7148:	81 e0       	ldi	r24, 0x01	; 1
    714a:	bc a1       	ldd	r27, Y+36	; 0x24
    714c:	6b 17       	cp	r22, r27
    714e:	08 f0       	brcs	.+2      	; 0x7152 <fat_write_dir_entry+0x34e>
    7150:	80 e0       	ldi	r24, 0x00	; 0
    7152:	58 2f       	mov	r21, r24
    7154:	57 0d       	add	r21, r7
    7156:	81 e0       	ldi	r24, 0x01	; 1
    7158:	57 15       	cp	r21, r7
    715a:	08 f0       	brcs	.+2      	; 0x715e <fat_write_dir_entry+0x35a>
    715c:	80 e0       	ldi	r24, 0x00	; 0
    715e:	48 2f       	mov	r20, r24
    7160:	46 0d       	add	r20, r6
    7162:	81 e0       	ldi	r24, 0x01	; 1
    7164:	46 15       	cp	r20, r6
    7166:	08 f0       	brcs	.+2      	; 0x716a <fat_write_dir_entry+0x366>
    7168:	80 e0       	ldi	r24, 0x00	; 0
    716a:	38 2f       	mov	r19, r24
    716c:	35 0d       	add	r19, r5
    716e:	81 e0       	ldi	r24, 0x01	; 1
    7170:	35 15       	cp	r19, r5
    7172:	08 f0       	brcs	.+2      	; 0x7176 <fat_write_dir_entry+0x372>
    7174:	80 e0       	ldi	r24, 0x00	; 0
    7176:	28 2f       	mov	r18, r24
    7178:	24 0d       	add	r18, r4
    717a:	81 e0       	ldi	r24, 0x01	; 1
    717c:	24 15       	cp	r18, r4
    717e:	08 f0       	brcs	.+2      	; 0x7182 <fat_write_dir_entry+0x37e>
    7180:	80 e0       	ldi	r24, 0x00	; 0
    7182:	83 0d       	add	r24, r3
    7184:	91 e0       	ldi	r25, 0x01	; 1
    7186:	83 15       	cp	r24, r3
    7188:	08 f0       	brcs	.+2      	; 0x718c <fat_write_dir_entry+0x388>
    718a:	90 e0       	ldi	r25, 0x00	; 0
    718c:	27 2e       	mov	r2, r23
    718e:	6c a3       	std	Y+36, r22	; 0x24
    7190:	3a 01       	movw	r6, r20
    7192:	29 01       	movw	r4, r18
    7194:	38 2e       	mov	r3, r24
    7196:	ed a1       	ldd	r30, Y+37	; 0x25
    7198:	e9 0f       	add	r30, r25
    719a:	ed a3       	std	Y+37, r30	; 0x25
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    719c:	aa 94       	dec	r10
    719e:	aa 20       	and	r10, r10
    71a0:	09 f0       	breq	.+2      	; 0x71a4 <fat_write_dir_entry+0x3a0>
    71a2:	83 cf       	rjmp	.-250    	; 0x70aa <fat_write_dir_entry+0x2a6>
    71a4:	81 e0       	ldi	r24, 0x01	; 1
    71a6:	01 c0       	rjmp	.+2      	; 0x71aa <fat_write_dir_entry+0x3a6>
    71a8:	80 e0       	ldi	r24, 0x00	; 0
    
        offset += sizeof(buffer);
    }
    
    return 1;
}
    71aa:	a5 96       	adiw	r28, 0x25	; 37
    71ac:	0f b6       	in	r0, 0x3f	; 63
    71ae:	f8 94       	cli
    71b0:	de bf       	out	0x3e, r29	; 62
    71b2:	0f be       	out	0x3f, r0	; 63
    71b4:	cd bf       	out	0x3d, r28	; 61
    71b6:	cf 91       	pop	r28
    71b8:	df 91       	pop	r29
    71ba:	1f 91       	pop	r17
    71bc:	0f 91       	pop	r16
    71be:	ff 90       	pop	r15
    71c0:	ef 90       	pop	r14
    71c2:	df 90       	pop	r13
    71c4:	cf 90       	pop	r12
    71c6:	bf 90       	pop	r11
    71c8:	af 90       	pop	r10
    71ca:	9f 90       	pop	r9
    71cc:	8f 90       	pop	r8
    71ce:	7f 90       	pop	r7
    71d0:	6f 90       	pop	r6
    71d2:	5f 90       	pop	r5
    71d4:	4f 90       	pop	r4
    71d6:	3f 90       	pop	r3
    71d8:	2f 90       	pop	r2
    71da:	08 95       	ret

000071dc <fat_create_dir>:
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    71dc:	2f 92       	push	r2
    71de:	3f 92       	push	r3
    71e0:	4f 92       	push	r4
    71e2:	5f 92       	push	r5
    71e4:	6f 92       	push	r6
    71e6:	7f 92       	push	r7
    71e8:	8f 92       	push	r8
    71ea:	9f 92       	push	r9
    71ec:	af 92       	push	r10
    71ee:	bf 92       	push	r11
    71f0:	cf 92       	push	r12
    71f2:	df 92       	push	r13
    71f4:	ef 92       	push	r14
    71f6:	ff 92       	push	r15
    71f8:	0f 93       	push	r16
    71fa:	1f 93       	push	r17
    71fc:	df 93       	push	r29
    71fe:	cf 93       	push	r28
    7200:	cd b7       	in	r28, 0x3d	; 61
    7202:	de b7       	in	r29, 0x3e	; 62
    7204:	2e 97       	sbiw	r28, 0x0e	; 14
    7206:	0f b6       	in	r0, 0x3f	; 63
    7208:	f8 94       	cli
    720a:	de bf       	out	0x3e, r29	; 62
    720c:	0f be       	out	0x3f, r0	; 63
    720e:	cd bf       	out	0x3d, r28	; 61
    7210:	98 87       	std	Y+8, r25	; 0x08
    7212:	8f 83       	std	Y+7, r24	; 0x07
    7214:	7a 87       	std	Y+10, r23	; 0x0a
    7216:	69 87       	std	Y+9, r22	; 0x09
    7218:	5e 87       	std	Y+14, r21	; 0x0e
    721a:	4d 87       	std	Y+13, r20	; 0x0d
    if(!parent || !dir || !dir[0] || !dir_entry)
    721c:	89 2b       	or	r24, r25
    721e:	09 f4       	brne	.+2      	; 0x7222 <fat_create_dir+0x46>
    7220:	ac c1       	rjmp	.+856    	; 0x757a <fat_create_dir+0x39e>
    7222:	61 15       	cp	r22, r1
    7224:	71 05       	cpc	r23, r1
    7226:	09 f4       	brne	.+2      	; 0x722a <fat_create_dir+0x4e>
    7228:	a8 c1       	rjmp	.+848    	; 0x757a <fat_create_dir+0x39e>
    722a:	db 01       	movw	r26, r22
    722c:	8c 91       	ld	r24, X
    722e:	88 23       	and	r24, r24
    7230:	09 f4       	brne	.+2      	; 0x7234 <fat_create_dir+0x58>
    7232:	a3 c1       	rjmp	.+838    	; 0x757a <fat_create_dir+0x39e>
    7234:	45 2b       	or	r20, r21
    7236:	b1 f4       	brne	.+44     	; 0x7264 <fat_create_dir+0x88>
    7238:	a0 c1       	rjmp	.+832    	; 0x757a <fat_create_dir+0x39e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    723a:	89 85       	ldd	r24, Y+9	; 0x09
    723c:	9a 85       	ldd	r25, Y+10	; 0x0a
    723e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7240:	7c 85       	ldd	r23, Y+12	; 0x0c
    7242:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <strcmp>
    7246:	00 97       	sbiw	r24, 0x00	; 0
    7248:	89 f4       	brne	.+34     	; 0x726c <fat_create_dir+0x90>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    724a:	ef 81       	ldd	r30, Y+7	; 0x07
    724c:	f8 85       	ldd	r31, Y+8	; 0x08
    724e:	83 a1       	ldd	r24, Z+35	; 0x23
    7250:	94 a1       	ldd	r25, Z+36	; 0x24
    7252:	a5 a1       	ldd	r26, Z+37	; 0x25
    7254:	b6 a1       	ldd	r27, Z+38	; 0x26
    7256:	83 ab       	std	Z+51, r24	; 0x33
    7258:	94 ab       	std	Z+52, r25	; 0x34
    725a:	a5 ab       	std	Z+53, r26	; 0x35
    725c:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    725e:	10 ae       	std	Z+56, r1	; 0x38
    7260:	17 aa       	std	Z+55, r1	; 0x37
    7262:	8b c1       	rjmp	.+790    	; 0x757a <fat_create_dir+0x39e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    7264:	fd 85       	ldd	r31, Y+13	; 0x0d
    7266:	fb 87       	std	Y+11, r31	; 0x0b
    7268:	8e 85       	ldd	r24, Y+14	; 0x0e
    726a:	8c 87       	std	Y+12, r24	; 0x0c
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    726c:	8f 81       	ldd	r24, Y+7	; 0x07
    726e:	98 85       	ldd	r25, Y+8	; 0x08
    7270:	6d 85       	ldd	r22, Y+13	; 0x0d
    7272:	7e 85       	ldd	r23, Y+14	; 0x0e
    7274:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <fat_read_dir>
    7278:	88 23       	and	r24, r24
    727a:	f9 f6       	brne	.-66     	; 0x723a <fat_create_dir+0x5e>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    727c:	af 81       	ldd	r26, Y+7	; 0x07
    727e:	b8 85       	ldd	r27, Y+8	; 0x08
    7280:	0d 90       	ld	r0, X+
    7282:	bc 91       	ld	r27, X
    7284:	a0 2d       	mov	r26, r0
    7286:	be 83       	std	Y+6, r27	; 0x06
    7288:	ad 83       	std	Y+5, r26	; 0x05

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    728a:	cd 01       	movw	r24, r26
    728c:	40 e0       	ldi	r20, 0x00	; 0
    728e:	50 e0       	ldi	r21, 0x00	; 0
    7290:	60 e0       	ldi	r22, 0x00	; 0
    7292:	70 e0       	ldi	r23, 0x00	; 0
    7294:	01 e0       	ldi	r16, 0x01	; 1
    7296:	10 e0       	ldi	r17, 0x00	; 0
    7298:	20 e0       	ldi	r18, 0x00	; 0
    729a:	30 e0       	ldi	r19, 0x00	; 0
    729c:	0e 94 d7 22 	call	0x45ae	; 0x45ae <fat_append_clusters>
    72a0:	69 83       	std	Y+1, r22	; 0x01
    72a2:	7a 83       	std	Y+2, r23	; 0x02
    72a4:	8b 83       	std	Y+3, r24	; 0x03
    72a6:	9c 83       	std	Y+4, r25	; 0x04
    if(!dir_cluster)
    72a8:	61 15       	cp	r22, r1
    72aa:	71 05       	cpc	r23, r1
    72ac:	81 05       	cpc	r24, r1
    72ae:	91 05       	cpc	r25, r1
    72b0:	09 f4       	brne	.+2      	; 0x72b4 <fat_create_dir+0xd8>
    72b2:	63 c1       	rjmp	.+710    	; 0x757a <fat_create_dir+0x39e>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    72b4:	8d 81       	ldd	r24, Y+5	; 0x05
    72b6:	9e 81       	ldd	r25, Y+6	; 0x06
    72b8:	49 81       	ldd	r20, Y+1	; 0x01
    72ba:	5a 81       	ldd	r21, Y+2	; 0x02
    72bc:	6b 81       	ldd	r22, Y+3	; 0x03
    72be:	7c 81       	ldd	r23, Y+4	; 0x04
    72c0:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <fat_clear_cluster>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    72c4:	81 e3       	ldi	r24, 0x31	; 49
    72c6:	ed 85       	ldd	r30, Y+13	; 0x0d
    72c8:	fe 85       	ldd	r31, Y+14	; 0x0e
    72ca:	11 92       	st	Z+, r1
    72cc:	8a 95       	dec	r24
    72ce:	e9 f7       	brne	.-6      	; 0x72ca <fat_create_dir+0xee>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    72d0:	80 e1       	ldi	r24, 0x10	; 16
    72d2:	ad 85       	ldd	r26, Y+13	; 0x0d
    72d4:	be 85       	ldd	r27, Y+14	; 0x0e
    72d6:	90 96       	adiw	r26, 0x20	; 32
    72d8:	8c 93       	st	X, r24

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    72da:	89 81       	ldd	r24, Y+1	; 0x01
    72dc:	9a 81       	ldd	r25, Y+2	; 0x02
    72de:	ab 81       	ldd	r26, Y+3	; 0x03
    72e0:	bc 81       	ldd	r27, Y+4	; 0x04
    72e2:	02 97       	sbiw	r24, 0x02	; 2
    72e4:	a1 09       	sbc	r26, r1
    72e6:	b1 09       	sbc	r27, r1
    72e8:	5c 01       	movw	r10, r24
    72ea:	6d 01       	movw	r12, r26
    72ec:	02 96       	adiw	r24, 0x02	; 2
    72ee:	a1 1d       	adc	r26, r1
    72f0:	b1 1d       	adc	r27, r1
    72f2:	89 83       	std	Y+1, r24	; 0x01
    72f4:	9a 83       	std	Y+2, r25	; 0x02
    72f6:	ab 83       	std	Y+3, r26	; 0x03
    72f8:	bc 83       	std	Y+4, r27	; 0x04
    72fa:	ad 81       	ldd	r26, Y+5	; 0x05
    72fc:	be 81       	ldd	r27, Y+6	; 0x06
    72fe:	58 96       	adiw	r26, 0x18	; 24
    7300:	2d 90       	ld	r2, X+
    7302:	3c 90       	ld	r3, X
    7304:	59 97       	sbiw	r26, 0x19	; 25
    7306:	95 01       	movw	r18, r10
    7308:	a6 01       	movw	r20, r12
    730a:	60 e0       	ldi	r22, 0x00	; 0
    730c:	70 e0       	ldi	r23, 0x00	; 0
    730e:	80 e0       	ldi	r24, 0x00	; 0
    7310:	90 e0       	ldi	r25, 0x00	; 0
    7312:	51 01       	movw	r10, r2
    7314:	cc 24       	eor	r12, r12
    7316:	dd 24       	eor	r13, r13
    7318:	ee 24       	eor	r14, r14
    731a:	ff 24       	eor	r15, r15
    731c:	00 e0       	ldi	r16, 0x00	; 0
    731e:	10 e0       	ldi	r17, 0x00	; 0
    7320:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    7324:	ed 81       	ldd	r30, Y+5	; 0x05
    7326:	fe 81       	ldd	r31, Y+6	; 0x06
    7328:	a2 8d       	ldd	r26, Z+26	; 0x1a
    732a:	e3 8c       	ldd	r14, Z+27	; 0x1b
    732c:	14 8d       	ldd	r17, Z+28	; 0x1c
    732e:	05 8d       	ldd	r16, Z+29	; 0x1d
    7330:	f6 8c       	ldd	r15, Z+30	; 0x1e
    7332:	d7 8c       	ldd	r13, Z+31	; 0x1f
    7334:	c0 a0       	ldd	r12, Z+32	; 0x20
    7336:	b1 a1       	ldd	r27, Z+33	; 0x21
    7338:	a2 0f       	add	r26, r18
    733a:	f1 e0       	ldi	r31, 0x01	; 1
    733c:	a2 17       	cp	r26, r18
    733e:	08 f0       	brcs	.+2      	; 0x7342 <fat_create_dir+0x166>
    7340:	f0 e0       	ldi	r31, 0x00	; 0
    7342:	23 2f       	mov	r18, r19
    7344:	2e 0d       	add	r18, r14
    7346:	e1 e0       	ldi	r30, 0x01	; 1
    7348:	23 17       	cp	r18, r19
    734a:	08 f0       	brcs	.+2      	; 0x734e <fat_create_dir+0x172>
    734c:	e0 e0       	ldi	r30, 0x00	; 0
    734e:	ef 2e       	mov	r14, r31
    7350:	e2 0e       	add	r14, r18
    7352:	31 e0       	ldi	r19, 0x01	; 1
    7354:	e2 16       	cp	r14, r18
    7356:	08 f0       	brcs	.+2      	; 0x735a <fat_create_dir+0x17e>
    7358:	30 e0       	ldi	r19, 0x00	; 0
    735a:	e3 2b       	or	r30, r19
    735c:	24 2f       	mov	r18, r20
    735e:	21 0f       	add	r18, r17
    7360:	f1 e0       	ldi	r31, 0x01	; 1
    7362:	24 17       	cp	r18, r20
    7364:	08 f0       	brcs	.+2      	; 0x7368 <fat_create_dir+0x18c>
    7366:	f0 e0       	ldi	r31, 0x00	; 0
    7368:	1e 2f       	mov	r17, r30
    736a:	12 0f       	add	r17, r18
    736c:	31 e0       	ldi	r19, 0x01	; 1
    736e:	12 17       	cp	r17, r18
    7370:	08 f0       	brcs	.+2      	; 0x7374 <fat_create_dir+0x198>
    7372:	30 e0       	ldi	r19, 0x00	; 0
    7374:	f3 2b       	or	r31, r19
    7376:	25 2f       	mov	r18, r21
    7378:	20 0f       	add	r18, r16
    737a:	41 e0       	ldi	r20, 0x01	; 1
    737c:	25 17       	cp	r18, r21
    737e:	08 f0       	brcs	.+2      	; 0x7382 <fat_create_dir+0x1a6>
    7380:	40 e0       	ldi	r20, 0x00	; 0
    7382:	0f 2f       	mov	r16, r31
    7384:	02 0f       	add	r16, r18
    7386:	31 e0       	ldi	r19, 0x01	; 1
    7388:	02 17       	cp	r16, r18
    738a:	08 f0       	brcs	.+2      	; 0x738e <fat_create_dir+0x1b2>
    738c:	30 e0       	ldi	r19, 0x00	; 0
    738e:	43 2b       	or	r20, r19
    7390:	26 2f       	mov	r18, r22
    7392:	2f 0d       	add	r18, r15
    7394:	51 e0       	ldi	r21, 0x01	; 1
    7396:	26 17       	cp	r18, r22
    7398:	08 f0       	brcs	.+2      	; 0x739c <fat_create_dir+0x1c0>
    739a:	50 e0       	ldi	r21, 0x00	; 0
    739c:	64 2f       	mov	r22, r20
    739e:	62 0f       	add	r22, r18
    73a0:	31 e0       	ldi	r19, 0x01	; 1
    73a2:	62 17       	cp	r22, r18
    73a4:	08 f0       	brcs	.+2      	; 0x73a8 <fat_create_dir+0x1cc>
    73a6:	30 e0       	ldi	r19, 0x00	; 0
    73a8:	53 2b       	or	r21, r19
    73aa:	27 2f       	mov	r18, r23
    73ac:	2d 0d       	add	r18, r13
    73ae:	41 e0       	ldi	r20, 0x01	; 1
    73b0:	27 17       	cp	r18, r23
    73b2:	08 f0       	brcs	.+2      	; 0x73b6 <fat_create_dir+0x1da>
    73b4:	40 e0       	ldi	r20, 0x00	; 0
    73b6:	52 0f       	add	r21, r18
    73b8:	31 e0       	ldi	r19, 0x01	; 1
    73ba:	52 17       	cp	r21, r18
    73bc:	08 f0       	brcs	.+2      	; 0x73c0 <fat_create_dir+0x1e4>
    73be:	30 e0       	ldi	r19, 0x00	; 0
    73c0:	43 2b       	or	r20, r19
    73c2:	28 2f       	mov	r18, r24
    73c4:	2c 0d       	add	r18, r12
    73c6:	31 e0       	ldi	r19, 0x01	; 1
    73c8:	28 17       	cp	r18, r24
    73ca:	08 f0       	brcs	.+2      	; 0x73ce <fat_create_dir+0x1f2>
    73cc:	30 e0       	ldi	r19, 0x00	; 0
    73ce:	42 0f       	add	r20, r18
    73d0:	81 e0       	ldi	r24, 0x01	; 1
    73d2:	42 17       	cp	r20, r18
    73d4:	08 f0       	brcs	.+2      	; 0x73d8 <fat_create_dir+0x1fc>
    73d6:	80 e0       	ldi	r24, 0x00	; 0
    73d8:	38 2b       	or	r19, r24
    73da:	b9 0f       	add	r27, r25
    73dc:	3b 0f       	add	r19, r27
    73de:	ed 85       	ldd	r30, Y+13	; 0x0d
    73e0:	fe 85       	ldd	r31, Y+14	; 0x0e
    73e2:	a1 a7       	std	Z+41, r26	; 0x29
    73e4:	e2 a6       	std	Z+42, r14	; 0x2a
    73e6:	13 a7       	std	Z+43, r17	; 0x2b
    73e8:	04 a7       	std	Z+44, r16	; 0x2c
    73ea:	65 a7       	std	Z+45, r22	; 0x2d
    73ec:	56 a7       	std	Z+46, r21	; 0x2e
    73ee:	47 a7       	std	Z+47, r20	; 0x2f
    73f0:	30 ab       	std	Z+48, r19	; 0x30
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
    73f2:	8e e2       	ldi	r24, 0x2E	; 46
    73f4:	80 83       	st	Z, r24
    dir_entry->cluster = dir_cluster;
    73f6:	89 81       	ldd	r24, Y+1	; 0x01
    73f8:	9a 81       	ldd	r25, Y+2	; 0x02
    73fa:	ab 81       	ldd	r26, Y+3	; 0x03
    73fc:	bc 81       	ldd	r27, Y+4	; 0x04
    73fe:	ed 85       	ldd	r30, Y+13	; 0x0d
    7400:	fe 85       	ldd	r31, Y+14	; 0x0e
    7402:	81 a3       	std	Z+33, r24	; 0x21
    7404:	92 a3       	std	Z+34, r25	; 0x22
    7406:	a3 a3       	std	Z+35, r26	; 0x23
    7408:	b4 a3       	std	Z+36, r27	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    740a:	8d 81       	ldd	r24, Y+5	; 0x05
    740c:	9e 81       	ldd	r25, Y+6	; 0x06
    740e:	bf 01       	movw	r22, r30
    7410:	0e 94 02 37 	call	0x6e04	; 0x6e04 <fat_write_dir_entry>
    7414:	88 23       	and	r24, r24
    7416:	09 f4       	brne	.+2      	; 0x741a <fat_create_dir+0x23e>
    7418:	a8 c0       	rjmp	.+336    	; 0x756a <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
    741a:	ad 85       	ldd	r26, Y+13	; 0x0d
    741c:	be 85       	ldd	r27, Y+14	; 0x0e
    741e:	99 96       	adiw	r26, 0x29	; 41
    7420:	8c 91       	ld	r24, X
    7422:	99 97       	sbiw	r26, 0x29	; 41
    7424:	9a 96       	adiw	r26, 0x2a	; 42
    7426:	2c 91       	ld	r18, X
    7428:	9a 97       	sbiw	r26, 0x2a	; 42
    742a:	9b 96       	adiw	r26, 0x2b	; 43
    742c:	3c 91       	ld	r19, X
    742e:	9b 97       	sbiw	r26, 0x2b	; 43
    7430:	9c 96       	adiw	r26, 0x2c	; 44
    7432:	4c 91       	ld	r20, X
    7434:	9c 97       	sbiw	r26, 0x2c	; 44
    7436:	9d 96       	adiw	r26, 0x2d	; 45
    7438:	6c 91       	ld	r22, X
    743a:	9d 97       	sbiw	r26, 0x2d	; 45
    743c:	9e 96       	adiw	r26, 0x2e	; 46
    743e:	fc 90       	ld	r15, X
    7440:	9e 97       	sbiw	r26, 0x2e	; 46
    7442:	9f 96       	adiw	r26, 0x2f	; 47
    7444:	ac 91       	ld	r26, X
    7446:	ed 85       	ldd	r30, Y+13	; 0x0d
    7448:	fe 85       	ldd	r31, Y+14	; 0x0e
    744a:	10 a9       	ldd	r17, Z+48	; 0x30
    744c:	b8 2f       	mov	r27, r24
    744e:	b0 5e       	subi	r27, 0xE0	; 224
    7450:	91 e0       	ldi	r25, 0x01	; 1
    7452:	b8 17       	cp	r27, r24
    7454:	08 f0       	brcs	.+2      	; 0x7458 <fat_create_dir+0x27c>
    7456:	90 e0       	ldi	r25, 0x00	; 0
    7458:	09 2f       	mov	r16, r25
    745a:	02 0f       	add	r16, r18
    745c:	81 e0       	ldi	r24, 0x01	; 1
    745e:	02 17       	cp	r16, r18
    7460:	08 f0       	brcs	.+2      	; 0x7464 <fat_create_dir+0x288>
    7462:	80 e0       	ldi	r24, 0x00	; 0
    7464:	78 2f       	mov	r23, r24
    7466:	73 0f       	add	r23, r19
    7468:	81 e0       	ldi	r24, 0x01	; 1
    746a:	73 17       	cp	r23, r19
    746c:	08 f0       	brcs	.+2      	; 0x7470 <fat_create_dir+0x294>
    746e:	80 e0       	ldi	r24, 0x00	; 0
    7470:	58 2f       	mov	r21, r24
    7472:	54 0f       	add	r21, r20
    7474:	81 e0       	ldi	r24, 0x01	; 1
    7476:	54 17       	cp	r21, r20
    7478:	08 f0       	brcs	.+2      	; 0x747c <fat_create_dir+0x2a0>
    747a:	80 e0       	ldi	r24, 0x00	; 0
    747c:	38 2f       	mov	r19, r24
    747e:	36 0f       	add	r19, r22
    7480:	81 e0       	ldi	r24, 0x01	; 1
    7482:	36 17       	cp	r19, r22
    7484:	08 f0       	brcs	.+2      	; 0x7488 <fat_create_dir+0x2ac>
    7486:	80 e0       	ldi	r24, 0x00	; 0
    7488:	28 2f       	mov	r18, r24
    748a:	2f 0d       	add	r18, r15
    748c:	81 e0       	ldi	r24, 0x01	; 1
    748e:	2f 15       	cp	r18, r15
    7490:	08 f0       	brcs	.+2      	; 0x7494 <fat_create_dir+0x2b8>
    7492:	80 e0       	ldi	r24, 0x00	; 0
    7494:	98 2f       	mov	r25, r24
    7496:	9a 0f       	add	r25, r26
    7498:	81 e0       	ldi	r24, 0x01	; 1
    749a:	9a 17       	cp	r25, r26
    749c:	08 f0       	brcs	.+2      	; 0x74a0 <fat_create_dir+0x2c4>
    749e:	80 e0       	ldi	r24, 0x00	; 0
    74a0:	81 0f       	add	r24, r17
    74a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    74a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    74a6:	b1 a7       	std	Z+41, r27	; 0x29
    74a8:	02 a7       	std	Z+42, r16	; 0x2a
    74aa:	73 a7       	std	Z+43, r23	; 0x2b
    74ac:	54 a7       	std	Z+44, r21	; 0x2c
    74ae:	35 a7       	std	Z+45, r19	; 0x2d
    74b0:	26 a7       	std	Z+46, r18	; 0x2e
    74b2:	97 a7       	std	Z+47, r25	; 0x2f
    74b4:	80 ab       	std	Z+48, r24	; 0x30
    dir_entry->long_name[1] = '.';
    74b6:	8e e2       	ldi	r24, 0x2E	; 46
    74b8:	81 83       	std	Z+1, r24	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    74ba:	ef 81       	ldd	r30, Y+7	; 0x07
    74bc:	f8 85       	ldd	r31, Y+8	; 0x08
    74be:	83 a1       	ldd	r24, Z+35	; 0x23
    74c0:	94 a1       	ldd	r25, Z+36	; 0x24
    74c2:	a5 a1       	ldd	r26, Z+37	; 0x25
    74c4:	b6 a1       	ldd	r27, Z+38	; 0x26
    74c6:	ed 85       	ldd	r30, Y+13	; 0x0d
    74c8:	fe 85       	ldd	r31, Y+14	; 0x0e
    74ca:	81 a3       	std	Z+33, r24	; 0x21
    74cc:	92 a3       	std	Z+34, r25	; 0x22
    74ce:	a3 a3       	std	Z+35, r26	; 0x23
    74d0:	b4 a3       	std	Z+36, r27	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    74d2:	8d 81       	ldd	r24, Y+5	; 0x05
    74d4:	9e 81       	ldd	r25, Y+6	; 0x06
    74d6:	bf 01       	movw	r22, r30
    74d8:	0e 94 02 37 	call	0x6e04	; 0x6e04 <fat_write_dir_entry>
    74dc:	88 23       	and	r24, r24
    74de:	09 f4       	brne	.+2      	; 0x74e2 <fat_create_dir+0x306>
    74e0:	44 c0       	rjmp	.+136    	; 0x756a <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    74e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    74e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    74e6:	69 85       	ldd	r22, Y+9	; 0x09
    74e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    74ea:	4f e1       	ldi	r20, 0x1F	; 31
    74ec:	50 e0       	ldi	r21, 0x00	; 0
    74ee:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <strncpy>
    dir_entry->cluster = dir_cluster;
    74f2:	89 81       	ldd	r24, Y+1	; 0x01
    74f4:	9a 81       	ldd	r25, Y+2	; 0x02
    74f6:	ab 81       	ldd	r26, Y+3	; 0x03
    74f8:	bc 81       	ldd	r27, Y+4	; 0x04
    74fa:	ed 85       	ldd	r30, Y+13	; 0x0d
    74fc:	fe 85       	ldd	r31, Y+14	; 0x0e
    74fe:	81 a3       	std	Z+33, r24	; 0x21
    7500:	92 a3       	std	Z+34, r25	; 0x22
    7502:	a3 a3       	std	Z+35, r26	; 0x23
    7504:	b4 a3       	std	Z+36, r27	; 0x24

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    7506:	8d 81       	ldd	r24, Y+5	; 0x05
    7508:	9e 81       	ldd	r25, Y+6	; 0x06
    750a:	6f 81       	ldd	r22, Y+7	; 0x07
    750c:	78 85       	ldd	r23, Y+8	; 0x08
    750e:	af 01       	movw	r20, r30
    7510:	0e 94 d7 33 	call	0x67ae	; 0x67ae <fat_find_offset_for_dir_entry>
    7514:	ad 85       	ldd	r26, Y+13	; 0x0d
    7516:	be 85       	ldd	r27, Y+14	; 0x0e
    7518:	99 96       	adiw	r26, 0x29	; 41
    751a:	2c 93       	st	X, r18
    751c:	99 97       	sbiw	r26, 0x29	; 41
    751e:	9a 96       	adiw	r26, 0x2a	; 42
    7520:	3c 93       	st	X, r19
    7522:	9a 97       	sbiw	r26, 0x2a	; 42
    7524:	9b 96       	adiw	r26, 0x2b	; 43
    7526:	4c 93       	st	X, r20
    7528:	9b 97       	sbiw	r26, 0x2b	; 43
    752a:	9c 96       	adiw	r26, 0x2c	; 44
    752c:	5c 93       	st	X, r21
    752e:	9c 97       	sbiw	r26, 0x2c	; 44
    7530:	9d 96       	adiw	r26, 0x2d	; 45
    7532:	6c 93       	st	X, r22
    7534:	9d 97       	sbiw	r26, 0x2d	; 45
    7536:	9e 96       	adiw	r26, 0x2e	; 46
    7538:	7c 93       	st	X, r23
    753a:	9e 97       	sbiw	r26, 0x2e	; 46
    753c:	9f 96       	adiw	r26, 0x2f	; 47
    753e:	8c 93       	st	X, r24
    7540:	9f 97       	sbiw	r26, 0x2f	; 47
    7542:	d0 96       	adiw	r26, 0x30	; 48
    7544:	9c 93       	st	X, r25
    7546:	23 2b       	or	r18, r19
    7548:	24 2b       	or	r18, r20
    754a:	25 2b       	or	r18, r21
    754c:	26 2b       	or	r18, r22
    754e:	27 2b       	or	r18, r23
    7550:	28 2b       	or	r18, r24
    7552:	29 2b       	or	r18, r25
    7554:	51 f0       	breq	.+20     	; 0x756a <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    7556:	8d 81       	ldd	r24, Y+5	; 0x05
    7558:	9e 81       	ldd	r25, Y+6	; 0x06
    755a:	6d 85       	ldd	r22, Y+13	; 0x0d
    755c:	7e 85       	ldd	r23, Y+14	; 0x0e
    755e:	0e 94 02 37 	call	0x6e04	; 0x6e04 <fat_write_dir_entry>
    7562:	88 23       	and	r24, r24
    7564:	11 f0       	breq	.+4      	; 0x756a <fat_create_dir+0x38e>
    7566:	81 e0       	ldi	r24, 0x01	; 1
    7568:	09 c0       	rjmp	.+18     	; 0x757c <fat_create_dir+0x3a0>
    {
        fat_free_clusters(fs, dir_cluster);
    756a:	8d 81       	ldd	r24, Y+5	; 0x05
    756c:	9e 81       	ldd	r25, Y+6	; 0x06
    756e:	49 81       	ldd	r20, Y+1	; 0x01
    7570:	5a 81       	ldd	r21, Y+2	; 0x02
    7572:	6b 81       	ldd	r22, Y+3	; 0x03
    7574:	7c 81       	ldd	r23, Y+4	; 0x04
    7576:	0e 94 1b 21 	call	0x4236	; 0x4236 <fat_free_clusters>
        return 0;
    757a:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    757c:	2e 96       	adiw	r28, 0x0e	; 14
    757e:	0f b6       	in	r0, 0x3f	; 63
    7580:	f8 94       	cli
    7582:	de bf       	out	0x3e, r29	; 62
    7584:	0f be       	out	0x3f, r0	; 63
    7586:	cd bf       	out	0x3d, r28	; 61
    7588:	cf 91       	pop	r28
    758a:	df 91       	pop	r29
    758c:	1f 91       	pop	r17
    758e:	0f 91       	pop	r16
    7590:	ff 90       	pop	r15
    7592:	ef 90       	pop	r14
    7594:	df 90       	pop	r13
    7596:	cf 90       	pop	r12
    7598:	bf 90       	pop	r11
    759a:	af 90       	pop	r10
    759c:	9f 90       	pop	r9
    759e:	8f 90       	pop	r8
    75a0:	7f 90       	pop	r7
    75a2:	6f 90       	pop	r6
    75a4:	5f 90       	pop	r5
    75a6:	4f 90       	pop	r4
    75a8:	3f 90       	pop	r3
    75aa:	2f 90       	pop	r2
    75ac:	08 95       	ret

000075ae <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    75ae:	af 92       	push	r10
    75b0:	bf 92       	push	r11
    75b2:	cf 92       	push	r12
    75b4:	df 92       	push	r13
    75b6:	ef 92       	push	r14
    75b8:	ff 92       	push	r15
    75ba:	0f 93       	push	r16
    75bc:	1f 93       	push	r17
    75be:	cf 93       	push	r28
    75c0:	df 93       	push	r29
    75c2:	8c 01       	movw	r16, r24
    75c4:	7b 01       	movw	r14, r22
    75c6:	ea 01       	movw	r28, r20
    if(!parent || !file || !file[0] || !dir_entry)
    75c8:	00 97       	sbiw	r24, 0x00	; 0
    75ca:	09 f4       	brne	.+2      	; 0x75ce <fat_create_file+0x20>
    75cc:	54 c0       	rjmp	.+168    	; 0x7676 <fat_create_file+0xc8>
    75ce:	61 15       	cp	r22, r1
    75d0:	71 05       	cpc	r23, r1
    75d2:	09 f4       	brne	.+2      	; 0x75d6 <fat_create_file+0x28>
    75d4:	50 c0       	rjmp	.+160    	; 0x7676 <fat_create_file+0xc8>
    75d6:	fb 01       	movw	r30, r22
    75d8:	80 81       	ld	r24, Z
    75da:	88 23       	and	r24, r24
    75dc:	09 f4       	brne	.+2      	; 0x75e0 <fat_create_file+0x32>
    75de:	4b c0       	rjmp	.+150    	; 0x7676 <fat_create_file+0xc8>
    75e0:	41 15       	cp	r20, r1
    75e2:	51 05       	cpc	r21, r1
    75e4:	09 f4       	brne	.+2      	; 0x75e8 <fat_create_file+0x3a>
    75e6:	47 c0       	rjmp	.+142    	; 0x7676 <fat_create_file+0xc8>
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    75e8:	b4 2e       	mov	r11, r20
    75ea:	ad 2e       	mov	r10, r29
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    75ec:	c8 01       	movw	r24, r16
    75ee:	be 01       	movw	r22, r28
    75f0:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <fat_read_dir>
    75f4:	88 23       	and	r24, r24
    75f6:	99 f0       	breq	.+38     	; 0x761e <fat_create_file+0x70>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    75f8:	c7 01       	movw	r24, r14
    75fa:	6b 2d       	mov	r22, r11
    75fc:	7a 2d       	mov	r23, r10
    75fe:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <strcmp>
    7602:	00 97       	sbiw	r24, 0x00	; 0
    7604:	99 f7       	brne	.-26     	; 0x75ec <fat_create_file+0x3e>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    7606:	f8 01       	movw	r30, r16
    7608:	83 a1       	ldd	r24, Z+35	; 0x23
    760a:	94 a1       	ldd	r25, Z+36	; 0x24
    760c:	a5 a1       	ldd	r26, Z+37	; 0x25
    760e:	b6 a1       	ldd	r27, Z+38	; 0x26
    7610:	83 ab       	std	Z+51, r24	; 0x33
    7612:	94 ab       	std	Z+52, r25	; 0x34
    7614:	a5 ab       	std	Z+53, r26	; 0x35
    7616:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    7618:	10 ae       	std	Z+56, r1	; 0x38
    761a:	17 aa       	std	Z+55, r1	; 0x37
    761c:	2c c0       	rjmp	.+88     	; 0x7676 <fat_create_file+0xc8>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    761e:	f8 01       	movw	r30, r16
    7620:	c0 80       	ld	r12, Z
    7622:	d1 80       	ldd	r13, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    7624:	81 e3       	ldi	r24, 0x31	; 49
    7626:	fe 01       	movw	r30, r28
    7628:	11 92       	st	Z+, r1
    762a:	8a 95       	dec	r24
    762c:	e9 f7       	brne	.-6      	; 0x7628 <fat_create_file+0x7a>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    762e:	8b 2d       	mov	r24, r11
    7630:	9a 2d       	mov	r25, r10
    7632:	b7 01       	movw	r22, r14
    7634:	4f e1       	ldi	r20, 0x1F	; 31
    7636:	50 e0       	ldi	r21, 0x00	; 0
    7638:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    763c:	c6 01       	movw	r24, r12
    763e:	b8 01       	movw	r22, r16
    7640:	ae 01       	movw	r20, r28
    7642:	0e 94 d7 33 	call	0x67ae	; 0x67ae <fat_find_offset_for_dir_entry>
    7646:	29 a7       	std	Y+41, r18	; 0x29
    7648:	3a a7       	std	Y+42, r19	; 0x2a
    764a:	4b a7       	std	Y+43, r20	; 0x2b
    764c:	5c a7       	std	Y+44, r21	; 0x2c
    764e:	6d a7       	std	Y+45, r22	; 0x2d
    7650:	7e a7       	std	Y+46, r23	; 0x2e
    7652:	8f a7       	std	Y+47, r24	; 0x2f
    7654:	98 ab       	std	Y+48, r25	; 0x30
    7656:	23 2b       	or	r18, r19
    7658:	24 2b       	or	r18, r20
    765a:	25 2b       	or	r18, r21
    765c:	26 2b       	or	r18, r22
    765e:	27 2b       	or	r18, r23
    7660:	28 2b       	or	r18, r24
    7662:	29 2b       	or	r18, r25
    7664:	41 f0       	breq	.+16     	; 0x7676 <fat_create_file+0xc8>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    7666:	c6 01       	movw	r24, r12
    7668:	be 01       	movw	r22, r28
    766a:	0e 94 02 37 	call	0x6e04	; 0x6e04 <fat_write_dir_entry>
    766e:	88 23       	and	r24, r24
    7670:	19 f0       	breq	.+6      	; 0x7678 <fat_create_file+0xca>
    7672:	81 e0       	ldi	r24, 0x01	; 1
    7674:	01 c0       	rjmp	.+2      	; 0x7678 <fat_create_file+0xca>
    7676:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    
    return 1;
}
    7678:	df 91       	pop	r29
    767a:	cf 91       	pop	r28
    767c:	1f 91       	pop	r17
    767e:	0f 91       	pop	r16
    7680:	ff 90       	pop	r15
    7682:	ef 90       	pop	r14
    7684:	df 90       	pop	r13
    7686:	cf 90       	pop	r12
    7688:	bf 90       	pop	r11
    768a:	af 90       	pop	r10
    768c:	08 95       	ret

0000768e <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    768e:	2f 92       	push	r2
    7690:	3f 92       	push	r3
    7692:	4f 92       	push	r4
    7694:	5f 92       	push	r5
    7696:	6f 92       	push	r6
    7698:	7f 92       	push	r7
    769a:	8f 92       	push	r8
    769c:	9f 92       	push	r9
    769e:	af 92       	push	r10
    76a0:	bf 92       	push	r11
    76a2:	cf 92       	push	r12
    76a4:	df 92       	push	r13
    76a6:	ef 92       	push	r14
    76a8:	ff 92       	push	r15
    76aa:	0f 93       	push	r16
    76ac:	1f 93       	push	r17
    76ae:	df 93       	push	r29
    76b0:	cf 93       	push	r28
    76b2:	cd b7       	in	r28, 0x3d	; 61
    76b4:	de b7       	in	r29, 0x3e	; 62
    76b6:	62 97       	sbiw	r28, 0x12	; 18
    76b8:	0f b6       	in	r0, 0x3f	; 63
    76ba:	f8 94       	cli
    76bc:	de bf       	out	0x3e, r29	; 62
    76be:	0f be       	out	0x3f, r0	; 63
    76c0:	cd bf       	out	0x3d, r28	; 61
    76c2:	1c 01       	movw	r2, r24
    76c4:	4b 87       	std	Y+11, r20	; 0x0b
    76c6:	5c 87       	std	Y+12, r21	; 0x0c
    76c8:	6d 87       	std	Y+13, r22	; 0x0d
    76ca:	7e 87       	std	Y+14, r23	; 0x0e
    if(!fd)
    76cc:	00 97       	sbiw	r24, 0x00	; 0
    76ce:	09 f4       	brne	.+2      	; 0x76d2 <fat_resize_file+0x44>
    76d0:	15 c2       	rjmp	.+1066   	; 0x7afc <fat_resize_file+0x46e>
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    76d2:	dc 01       	movw	r26, r24
    76d4:	93 96       	adiw	r26, 0x23	; 35
    76d6:	cd 90       	ld	r12, X+
    76d8:	dd 90       	ld	r13, X+
    76da:	ed 90       	ld	r14, X+
    76dc:	fc 90       	ld	r15, X
    76de:	96 97       	sbiw	r26, 0x26	; 38
    uint16_t cluster_size = fd->fs->header.cluster_size;
    76e0:	ed 91       	ld	r30, X+
    76e2:	fc 91       	ld	r31, X
    76e4:	20 8d       	ldd	r18, Z+24	; 0x18
    76e6:	31 8d       	ldd	r19, Z+25	; 0x19
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    76e8:	c1 14       	cp	r12, r1
    76ea:	d1 04       	cpc	r13, r1
    76ec:	e1 04       	cpc	r14, r1
    76ee:	f1 04       	cpc	r15, r1
    76f0:	99 f0       	breq	.+38     	; 0x7718 <fat_resize_file+0x8a>
    76f2:	4b 84       	ldd	r4, Y+11	; 0x0b
    76f4:	5c 84       	ldd	r5, Y+12	; 0x0c
    76f6:	6d 84       	ldd	r6, Y+13	; 0x0d
    76f8:	7e 84       	ldd	r7, Y+14	; 0x0e
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    76fa:	49 01       	movw	r8, r18
    76fc:	aa 24       	eor	r10, r10
    76fe:	bb 24       	eor	r11, r11
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    7700:	22 27       	eor	r18, r18
    7702:	33 27       	eor	r19, r19
    7704:	a9 01       	movw	r20, r18
    7706:	28 19       	sub	r18, r8
    7708:	39 09       	sbc	r19, r9
    770a:	4a 09       	sbc	r20, r10
    770c:	5b 09       	sbc	r21, r11
    770e:	2f 87       	std	Y+15, r18	; 0x0f
    7710:	38 8b       	std	Y+16, r19	; 0x10
    7712:	49 8b       	std	Y+17, r20	; 0x11
    7714:	5a 8b       	std	Y+18, r21	; 0x12
    7716:	20 c0       	rjmp	.+64     	; 0x7758 <fat_resize_file+0xca>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    7718:	8b 85       	ldd	r24, Y+11	; 0x0b
    771a:	9c 85       	ldd	r25, Y+12	; 0x0c
    771c:	ad 85       	ldd	r26, Y+13	; 0x0d
    771e:	be 85       	ldd	r27, Y+14	; 0x0e
    7720:	00 97       	sbiw	r24, 0x00	; 0
    7722:	a1 05       	cpc	r26, r1
    7724:	b1 05       	cpc	r27, r1
    7726:	09 f4       	brne	.+2      	; 0x772a <fat_resize_file+0x9c>
    7728:	97 c1       	rjmp	.+814    	; 0x7a58 <fat_resize_file+0x3ca>
    772a:	e3 cf       	rjmp	.-58     	; 0x76f2 <fat_resize_file+0x64>

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    772c:	d1 01       	movw	r26, r2
    772e:	8d 91       	ld	r24, X+
    7730:	9c 91       	ld	r25, X
    7732:	b7 01       	movw	r22, r14
    7734:	a6 01       	movw	r20, r12
    7736:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <fat_get_next_cluster>
            if(cluster_num_next)
    773a:	61 15       	cp	r22, r1
    773c:	71 05       	cpc	r23, r1
    773e:	81 05       	cpc	r24, r1
    7740:	91 05       	cpc	r25, r1
    7742:	81 f0       	breq	.+32     	; 0x7764 <fat_resize_file+0xd6>
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    7744:	2f 85       	ldd	r18, Y+15	; 0x0f
    7746:	38 89       	ldd	r19, Y+16	; 0x10
    7748:	49 89       	ldd	r20, Y+17	; 0x11
    774a:	5a 89       	ldd	r21, Y+18	; 0x12
    774c:	42 0e       	add	r4, r18
    774e:	53 1e       	adc	r5, r19
    7750:	64 1e       	adc	r6, r20
    7752:	75 1e       	adc	r7, r21
    7754:	6b 01       	movw	r12, r22
    7756:	7c 01       	movw	r14, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    7758:	84 14       	cp	r8, r4
    775a:	95 04       	cpc	r9, r5
    775c:	a6 04       	cpc	r10, r6
    775e:	b7 04       	cpc	r11, r7
    7760:	28 f3       	brcs	.-54     	; 0x772c <fat_resize_file+0x9e>
    7762:	e6 c1       	rjmp	.+972    	; 0x7b30 <fat_resize_file+0x4a2>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    7764:	c3 01       	movw	r24, r6
    7766:	b2 01       	movw	r22, r4
    7768:	68 0d       	add	r22, r8
    776a:	79 1d       	adc	r23, r9
    776c:	8a 1d       	adc	r24, r10
    776e:	9b 1d       	adc	r25, r11
    7770:	61 50       	subi	r22, 0x01	; 1
    7772:	70 40       	sbci	r23, 0x00	; 0
    7774:	80 40       	sbci	r24, 0x00	; 0
    7776:	90 40       	sbci	r25, 0x00	; 0
    7778:	a5 01       	movw	r20, r10
    777a:	94 01       	movw	r18, r8
    777c:	0e 94 c4 49 	call	0x9388	; 0x9388 <__udivmodsi4>
    7780:	89 01       	movw	r16, r18
    7782:	9a 01       	movw	r18, r20
    7784:	d1 01       	movw	r26, r2
    7786:	8d 91       	ld	r24, X+
    7788:	9c 91       	ld	r25, X
    778a:	b7 01       	movw	r22, r14
    778c:	a6 01       	movw	r20, r12
    778e:	0e 94 d7 22 	call	0x45ae	; 0x45ae <fat_append_clusters>
            if(!cluster_new_chain)
    7792:	61 15       	cp	r22, r1
    7794:	71 05       	cpc	r23, r1
    7796:	81 05       	cpc	r24, r1
    7798:	91 05       	cpc	r25, r1
    779a:	09 f4       	brne	.+2      	; 0x779e <fat_resize_file+0x110>
    779c:	af c1       	rjmp	.+862    	; 0x7afc <fat_resize_file+0x46e>
                return 0;

            if(!cluster_num)
    779e:	c1 14       	cp	r12, r1
    77a0:	d1 04       	cpc	r13, r1
    77a2:	e1 04       	cpc	r14, r1
    77a4:	f1 04       	cpc	r15, r1
    77a6:	39 f4       	brne	.+14     	; 0x77b6 <fat_resize_file+0x128>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    77a8:	f1 01       	movw	r30, r2
    77aa:	63 a3       	std	Z+35, r22	; 0x23
    77ac:	74 a3       	std	Z+36, r23	; 0x24
    77ae:	85 a3       	std	Z+37, r24	; 0x25
    77b0:	96 a3       	std	Z+38, r25	; 0x26
    77b2:	6b 01       	movw	r12, r22
    77b4:	7c 01       	movw	r14, r24
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    77b6:	2b 85       	ldd	r18, Y+11	; 0x0b
    77b8:	3c 85       	ldd	r19, Y+12	; 0x0c
    77ba:	4d 85       	ldd	r20, Y+13	; 0x0d
    77bc:	5e 85       	ldd	r21, Y+14	; 0x0e
    77be:	d1 01       	movw	r26, r2
    77c0:	97 96       	adiw	r26, 0x27	; 39
    77c2:	2d 93       	st	X+, r18
    77c4:	3d 93       	st	X+, r19
    77c6:	4d 93       	st	X+, r20
    77c8:	5c 93       	st	X, r21
    77ca:	9a 97       	sbiw	r26, 0x2a	; 42
        if(size == 0)
    77cc:	21 15       	cp	r18, r1
    77ce:	31 05       	cpc	r19, r1
    77d0:	41 05       	cpc	r20, r1
    77d2:	51 05       	cpc	r21, r1
    77d4:	29 f4       	brne	.+10     	; 0x77e0 <fat_resize_file+0x152>
            fd->dir_entry.cluster = 0;
    77d6:	f1 01       	movw	r30, r2
    77d8:	13 a2       	std	Z+35, r1	; 0x23
    77da:	14 a2       	std	Z+36, r1	; 0x24
    77dc:	15 a2       	std	Z+37, r1	; 0x25
    77de:	16 a2       	std	Z+38, r1	; 0x26
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    77e0:	f1 01       	movw	r30, r2
    77e2:	81 91       	ld	r24, Z+
    77e4:	91 91       	ld	r25, Z+
    77e6:	bf 01       	movw	r22, r30
    77e8:	0e 94 02 37 	call	0x6e04	; 0x6e04 <fat_write_dir_entry>
    77ec:	88 23       	and	r24, r24
    77ee:	09 f4       	brne	.+2      	; 0x77f2 <fat_resize_file+0x164>
    77f0:	85 c1       	rjmp	.+778    	; 0x7afc <fat_resize_file+0x46e>
            return 0;

        if(size == 0)
    77f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    77f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    77f6:	4d 85       	ldd	r20, Y+13	; 0x0d
    77f8:	5e 85       	ldd	r21, Y+14	; 0x0e
    77fa:	21 15       	cp	r18, r1
    77fc:	31 05       	cpc	r19, r1
    77fe:	41 05       	cpc	r20, r1
    7800:	51 05       	cpc	r21, r1
    7802:	31 f4       	brne	.+12     	; 0x7810 <fat_resize_file+0x182>
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    7804:	d1 01       	movw	r26, r2
    7806:	8d 91       	ld	r24, X+
    7808:	9c 91       	ld	r25, X
    780a:	b7 01       	movw	r22, r14
    780c:	a6 01       	movw	r20, r12
    780e:	22 c1       	rjmp	.+580    	; 0x7a54 <fat_resize_file+0x3c6>
        }
        else if(size_new <= cluster_size)
    7810:	84 14       	cp	r8, r4
    7812:	95 04       	cpc	r9, r5
    7814:	a6 04       	cpc	r10, r6
    7816:	b7 04       	cpc	r11, r7
    7818:	08 f4       	brcc	.+2      	; 0x781c <fat_resize_file+0x18e>
    781a:	1e c1       	rjmp	.+572    	; 0x7a58 <fat_resize_file+0x3ca>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    781c:	f1 01       	movw	r30, r2
    781e:	a0 80       	ld	r10, Z
    7820:	b1 80       	ldd	r11, Z+1	; 0x01
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    7822:	a1 14       	cp	r10, r1
    7824:	b1 04       	cpc	r11, r1
    7826:	09 f4       	brne	.+2      	; 0x782a <fat_resize_file+0x19c>
    7828:	17 c1       	rjmp	.+558    	; 0x7a58 <fat_resize_file+0x3ca>
    782a:	f2 e0       	ldi	r31, 0x02	; 2
    782c:	cf 16       	cp	r12, r31
    782e:	d1 04       	cpc	r13, r1
    7830:	e1 04       	cpc	r14, r1
    7832:	f1 04       	cpc	r15, r1
    7834:	08 f4       	brcc	.+2      	; 0x7838 <fat_resize_file+0x1aa>
    7836:	10 c1       	rjmp	.+544    	; 0x7a58 <fat_resize_file+0x3ca>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    7838:	c5 01       	movw	r24, r10
    783a:	b7 01       	movw	r22, r14
    783c:	a6 01       	movw	r20, r12
    783e:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <fat_get_next_cluster>
    7842:	6f 83       	std	Y+7, r22	; 0x07
    7844:	78 87       	std	Y+8, r23	; 0x08
    7846:	89 87       	std	Y+9, r24	; 0x09
    7848:	9a 87       	std	Y+10, r25	; 0x0a

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    784a:	d5 01       	movw	r26, r10
    784c:	8d 90       	ld	r8, X+
    784e:	9c 90       	ld	r9, X
    7850:	f4 01       	movw	r30, r8
    7852:	80 85       	ldd	r24, Z+8	; 0x08
    7854:	8b 30       	cpi	r24, 0x0B	; 11
    7856:	09 f0       	breq	.+2      	; 0x785a <fat_resize_file+0x1cc>
    7858:	7b c0       	rjmp	.+246    	; 0x7950 <fat_resize_file+0x2c2>
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
    785a:	8f ef       	ldi	r24, 0xFF	; 255
    785c:	9f ef       	ldi	r25, 0xFF	; 255
    785e:	af ef       	ldi	r26, 0xFF	; 255
    7860:	bf e0       	ldi	r27, 0x0F	; 15
    7862:	8b 83       	std	Y+3, r24	; 0x03
    7864:	9c 83       	std	Y+4, r25	; 0x04
    7866:	ad 83       	std	Y+5, r26	; 0x05
    7868:	be 83       	std	Y+6, r27	; 0x06
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    786a:	b2 e0       	ldi	r27, 0x02	; 2
    786c:	cc 0c       	add	r12, r12
    786e:	dd 1c       	adc	r13, r13
    7870:	ee 1c       	adc	r14, r14
    7872:	ff 1c       	adc	r15, r15
    7874:	ba 95       	dec	r27
    7876:	d1 f7       	brne	.-12     	; 0x786c <fat_resize_file+0x1de>
    7878:	b7 01       	movw	r22, r14
    787a:	a6 01       	movw	r20, r12
    787c:	80 e0       	ldi	r24, 0x00	; 0
    787e:	90 e0       	ldi	r25, 0x00	; 0
    7880:	a0 e0       	ldi	r26, 0x00	; 0
    7882:	b0 e0       	ldi	r27, 0x00	; 0
    7884:	f5 01       	movw	r30, r10
    7886:	22 85       	ldd	r18, Z+10	; 0x0a
    7888:	13 85       	ldd	r17, Z+11	; 0x0b
    788a:	04 85       	ldd	r16, Z+12	; 0x0c
    788c:	c5 84       	ldd	r12, Z+13	; 0x0d
    788e:	f6 84       	ldd	r15, Z+14	; 0x0e
    7890:	e7 84       	ldd	r14, Z+15	; 0x0f
    7892:	d0 88       	ldd	r13, Z+16	; 0x10
    7894:	51 88       	ldd	r5, Z+17	; 0x11
    7896:	24 0f       	add	r18, r20
    7898:	31 e0       	ldi	r19, 0x01	; 1
    789a:	24 17       	cp	r18, r20
    789c:	08 f0       	brcs	.+2      	; 0x78a0 <fat_resize_file+0x212>
    789e:	30 e0       	ldi	r19, 0x00	; 0
    78a0:	e1 2f       	mov	r30, r17
    78a2:	e5 0f       	add	r30, r21
    78a4:	11 e0       	ldi	r17, 0x01	; 1
    78a6:	e5 17       	cp	r30, r21
    78a8:	08 f0       	brcs	.+2      	; 0x78ac <fat_resize_file+0x21e>
    78aa:	10 e0       	ldi	r17, 0x00	; 0
    78ac:	3e 0f       	add	r19, r30
    78ae:	f1 e0       	ldi	r31, 0x01	; 1
    78b0:	3e 17       	cp	r19, r30
    78b2:	08 f0       	brcs	.+2      	; 0x78b6 <fat_resize_file+0x228>
    78b4:	f0 e0       	ldi	r31, 0x00	; 0
    78b6:	1f 2b       	or	r17, r31
    78b8:	e6 2f       	mov	r30, r22
    78ba:	e0 0f       	add	r30, r16
    78bc:	01 e0       	ldi	r16, 0x01	; 1
    78be:	e6 17       	cp	r30, r22
    78c0:	08 f0       	brcs	.+2      	; 0x78c4 <fat_resize_file+0x236>
    78c2:	00 e0       	ldi	r16, 0x00	; 0
    78c4:	61 2e       	mov	r6, r17
    78c6:	6e 0e       	add	r6, r30
    78c8:	f1 e0       	ldi	r31, 0x01	; 1
    78ca:	6e 16       	cp	r6, r30
    78cc:	08 f0       	brcs	.+2      	; 0x78d0 <fat_resize_file+0x242>
    78ce:	f0 e0       	ldi	r31, 0x00	; 0
    78d0:	0f 2b       	or	r16, r31
    78d2:	e7 2f       	mov	r30, r23
    78d4:	ec 0d       	add	r30, r12
    78d6:	f1 e0       	ldi	r31, 0x01	; 1
    78d8:	e7 17       	cp	r30, r23
    78da:	08 f0       	brcs	.+2      	; 0x78de <fat_resize_file+0x250>
    78dc:	f0 e0       	ldi	r31, 0x00	; 0
    78de:	70 2e       	mov	r7, r16
    78e0:	7e 0e       	add	r7, r30
    78e2:	11 e0       	ldi	r17, 0x01	; 1
    78e4:	7e 16       	cp	r7, r30
    78e6:	08 f0       	brcs	.+2      	; 0x78ea <fat_resize_file+0x25c>
    78e8:	10 e0       	ldi	r17, 0x00	; 0
    78ea:	f1 2b       	or	r31, r17
    78ec:	e1 e0       	ldi	r30, 0x01	; 1
    78ee:	f8 16       	cp	r15, r24
    78f0:	08 f0       	brcs	.+2      	; 0x78f4 <fat_resize_file+0x266>
    78f2:	e0 e0       	ldi	r30, 0x00	; 0
    78f4:	cf 2e       	mov	r12, r31
    78f6:	cf 0c       	add	r12, r15
    78f8:	f1 e0       	ldi	r31, 0x01	; 1
    78fa:	cf 14       	cp	r12, r15
    78fc:	08 f0       	brcs	.+2      	; 0x7900 <fat_resize_file+0x272>
    78fe:	f0 e0       	ldi	r31, 0x00	; 0
    7900:	ef 2b       	or	r30, r31
    7902:	f1 e0       	ldi	r31, 0x01	; 1
    7904:	e9 16       	cp	r14, r25
    7906:	08 f0       	brcs	.+2      	; 0x790a <fat_resize_file+0x27c>
    7908:	f0 e0       	ldi	r31, 0x00	; 0
    790a:	0e 2f       	mov	r16, r30
    790c:	0e 0d       	add	r16, r14
    790e:	e1 e0       	ldi	r30, 0x01	; 1
    7910:	0e 15       	cp	r16, r14
    7912:	08 f0       	brcs	.+2      	; 0x7916 <fat_resize_file+0x288>
    7914:	e0 e0       	ldi	r30, 0x00	; 0
    7916:	fe 2b       	or	r31, r30
    7918:	11 e0       	ldi	r17, 0x01	; 1
    791a:	da 16       	cp	r13, r26
    791c:	08 f0       	brcs	.+2      	; 0x7920 <fat_resize_file+0x292>
    791e:	10 e0       	ldi	r17, 0x00	; 0
    7920:	8f 2f       	mov	r24, r31
    7922:	8d 0d       	add	r24, r13
    7924:	e1 e0       	ldi	r30, 0x01	; 1
    7926:	8d 15       	cp	r24, r13
    7928:	08 f0       	brcs	.+2      	; 0x792c <fat_resize_file+0x29e>
    792a:	e0 e0       	ldi	r30, 0x00	; 0
    792c:	1e 2b       	or	r17, r30
    792e:	d4 01       	movw	r26, r8
    7930:	14 96       	adiw	r26, 0x04	; 4
    7932:	ed 91       	ld	r30, X+
    7934:	fc 91       	ld	r31, X
    7936:	15 97       	sbiw	r26, 0x05	; 5
    7938:	a3 01       	movw	r20, r6
    793a:	6c 2d       	mov	r22, r12
    793c:	70 2f       	mov	r23, r16
    793e:	91 2f       	mov	r25, r17
    7940:	95 0d       	add	r25, r5
    7942:	8e 01       	movw	r16, r28
    7944:	0d 5f       	subi	r16, 0xFD	; 253
    7946:	1f 4f       	sbci	r17, 0xFF	; 255
    7948:	a4 e0       	ldi	r26, 0x04	; 4
    794a:	ea 2e       	mov	r14, r26
    794c:	f1 2c       	mov	r15, r1
    794e:	73 c0       	rjmp	.+230    	; 0x7a36 <fat_resize_file+0x3a8>
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    7950:	8f ef       	ldi	r24, 0xFF	; 255
    7952:	9f ef       	ldi	r25, 0xFF	; 255
    7954:	9a 83       	std	Y+2, r25	; 0x02
    7956:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    7958:	cc 0c       	add	r12, r12
    795a:	dd 1c       	adc	r13, r13
    795c:	ee 1c       	adc	r14, r14
    795e:	ff 1c       	adc	r15, r15
    7960:	b7 01       	movw	r22, r14
    7962:	a6 01       	movw	r20, r12
    7964:	80 e0       	ldi	r24, 0x00	; 0
    7966:	90 e0       	ldi	r25, 0x00	; 0
    7968:	a0 e0       	ldi	r26, 0x00	; 0
    796a:	b0 e0       	ldi	r27, 0x00	; 0
    796c:	f5 01       	movw	r30, r10
    796e:	22 85       	ldd	r18, Z+10	; 0x0a
    7970:	13 85       	ldd	r17, Z+11	; 0x0b
    7972:	04 85       	ldd	r16, Z+12	; 0x0c
    7974:	c5 84       	ldd	r12, Z+13	; 0x0d
    7976:	f6 84       	ldd	r15, Z+14	; 0x0e
    7978:	e7 84       	ldd	r14, Z+15	; 0x0f
    797a:	d0 88       	ldd	r13, Z+16	; 0x10
    797c:	51 88       	ldd	r5, Z+17	; 0x11
    797e:	24 0f       	add	r18, r20
    7980:	31 e0       	ldi	r19, 0x01	; 1
    7982:	24 17       	cp	r18, r20
    7984:	08 f0       	brcs	.+2      	; 0x7988 <fat_resize_file+0x2fa>
    7986:	30 e0       	ldi	r19, 0x00	; 0
    7988:	e1 2f       	mov	r30, r17
    798a:	e5 0f       	add	r30, r21
    798c:	11 e0       	ldi	r17, 0x01	; 1
    798e:	e5 17       	cp	r30, r21
    7990:	08 f0       	brcs	.+2      	; 0x7994 <fat_resize_file+0x306>
    7992:	10 e0       	ldi	r17, 0x00	; 0
    7994:	3e 0f       	add	r19, r30
    7996:	f1 e0       	ldi	r31, 0x01	; 1
    7998:	3e 17       	cp	r19, r30
    799a:	08 f0       	brcs	.+2      	; 0x799e <fat_resize_file+0x310>
    799c:	f0 e0       	ldi	r31, 0x00	; 0
    799e:	1f 2b       	or	r17, r31
    79a0:	e6 2f       	mov	r30, r22
    79a2:	e0 0f       	add	r30, r16
    79a4:	01 e0       	ldi	r16, 0x01	; 1
    79a6:	e6 17       	cp	r30, r22
    79a8:	08 f0       	brcs	.+2      	; 0x79ac <fat_resize_file+0x31e>
    79aa:	00 e0       	ldi	r16, 0x00	; 0
    79ac:	61 2e       	mov	r6, r17
    79ae:	6e 0e       	add	r6, r30
    79b0:	f1 e0       	ldi	r31, 0x01	; 1
    79b2:	6e 16       	cp	r6, r30
    79b4:	08 f0       	brcs	.+2      	; 0x79b8 <fat_resize_file+0x32a>
    79b6:	f0 e0       	ldi	r31, 0x00	; 0
    79b8:	0f 2b       	or	r16, r31
    79ba:	e7 2f       	mov	r30, r23
    79bc:	ec 0d       	add	r30, r12
    79be:	f1 e0       	ldi	r31, 0x01	; 1
    79c0:	e7 17       	cp	r30, r23
    79c2:	08 f0       	brcs	.+2      	; 0x79c6 <fat_resize_file+0x338>
    79c4:	f0 e0       	ldi	r31, 0x00	; 0
    79c6:	70 2e       	mov	r7, r16
    79c8:	7e 0e       	add	r7, r30
    79ca:	11 e0       	ldi	r17, 0x01	; 1
    79cc:	7e 16       	cp	r7, r30
    79ce:	08 f0       	brcs	.+2      	; 0x79d2 <fat_resize_file+0x344>
    79d0:	10 e0       	ldi	r17, 0x00	; 0
    79d2:	f1 2b       	or	r31, r17
    79d4:	e1 e0       	ldi	r30, 0x01	; 1
    79d6:	f8 16       	cp	r15, r24
    79d8:	08 f0       	brcs	.+2      	; 0x79dc <fat_resize_file+0x34e>
    79da:	e0 e0       	ldi	r30, 0x00	; 0
    79dc:	cf 2e       	mov	r12, r31
    79de:	cf 0c       	add	r12, r15
    79e0:	f1 e0       	ldi	r31, 0x01	; 1
    79e2:	cf 14       	cp	r12, r15
    79e4:	08 f0       	brcs	.+2      	; 0x79e8 <fat_resize_file+0x35a>
    79e6:	f0 e0       	ldi	r31, 0x00	; 0
    79e8:	ef 2b       	or	r30, r31
    79ea:	f1 e0       	ldi	r31, 0x01	; 1
    79ec:	e9 16       	cp	r14, r25
    79ee:	08 f0       	brcs	.+2      	; 0x79f2 <fat_resize_file+0x364>
    79f0:	f0 e0       	ldi	r31, 0x00	; 0
    79f2:	0e 2f       	mov	r16, r30
    79f4:	0e 0d       	add	r16, r14
    79f6:	e1 e0       	ldi	r30, 0x01	; 1
    79f8:	0e 15       	cp	r16, r14
    79fa:	08 f0       	brcs	.+2      	; 0x79fe <fat_resize_file+0x370>
    79fc:	e0 e0       	ldi	r30, 0x00	; 0
    79fe:	fe 2b       	or	r31, r30
    7a00:	11 e0       	ldi	r17, 0x01	; 1
    7a02:	da 16       	cp	r13, r26
    7a04:	08 f0       	brcs	.+2      	; 0x7a08 <fat_resize_file+0x37a>
    7a06:	10 e0       	ldi	r17, 0x00	; 0
    7a08:	8f 2f       	mov	r24, r31
    7a0a:	8d 0d       	add	r24, r13
    7a0c:	e1 e0       	ldi	r30, 0x01	; 1
    7a0e:	8d 15       	cp	r24, r13
    7a10:	08 f0       	brcs	.+2      	; 0x7a14 <fat_resize_file+0x386>
    7a12:	e0 e0       	ldi	r30, 0x00	; 0
    7a14:	1e 2b       	or	r17, r30
    7a16:	d4 01       	movw	r26, r8
    7a18:	14 96       	adiw	r26, 0x04	; 4
    7a1a:	ed 91       	ld	r30, X+
    7a1c:	fc 91       	ld	r31, X
    7a1e:	15 97       	sbiw	r26, 0x05	; 5
    7a20:	a3 01       	movw	r20, r6
    7a22:	6c 2d       	mov	r22, r12
    7a24:	70 2f       	mov	r23, r16
    7a26:	91 2f       	mov	r25, r17
    7a28:	95 0d       	add	r25, r5
    7a2a:	8e 01       	movw	r16, r28
    7a2c:	0f 5f       	subi	r16, 0xFF	; 255
    7a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    7a30:	a2 e0       	ldi	r26, 0x02	; 2
    7a32:	ea 2e       	mov	r14, r26
    7a34:	f1 2c       	mov	r15, r1
    7a36:	09 95       	icall
    7a38:	88 23       	and	r24, r24
    7a3a:	71 f0       	breq	.+28     	; 0x7a58 <fat_resize_file+0x3ca>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    7a3c:	2f 81       	ldd	r18, Y+7	; 0x07
    7a3e:	38 85       	ldd	r19, Y+8	; 0x08
    7a40:	49 85       	ldd	r20, Y+9	; 0x09
    7a42:	5a 85       	ldd	r21, Y+10	; 0x0a
    7a44:	21 15       	cp	r18, r1
    7a46:	31 05       	cpc	r19, r1
    7a48:	41 05       	cpc	r20, r1
    7a4a:	51 05       	cpc	r21, r1
    7a4c:	29 f0       	breq	.+10     	; 0x7a58 <fat_resize_file+0x3ca>
        return fat_free_clusters(fs, cluster_num_next);
    7a4e:	c5 01       	movw	r24, r10
    7a50:	ba 01       	movw	r22, r20
    7a52:	a9 01       	movw	r20, r18
    7a54:	0e 94 1b 21 	call	0x4236	; 0x4236 <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    7a58:	8b 85       	ldd	r24, Y+11	; 0x0b
    7a5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    7a5c:	ad 85       	ldd	r26, Y+13	; 0x0d
    7a5e:	be 85       	ldd	r27, Y+14	; 0x0e
    7a60:	8c 01       	movw	r16, r24
    7a62:	9d 01       	movw	r18, r26
    7a64:	40 e0       	ldi	r20, 0x00	; 0
    7a66:	50 e0       	ldi	r21, 0x00	; 0
    7a68:	60 e0       	ldi	r22, 0x00	; 0
    7a6a:	70 e0       	ldi	r23, 0x00	; 0
    7a6c:	d1 01       	movw	r26, r2
    7a6e:	da 96       	adiw	r26, 0x3a	; 58
    7a70:	8c 91       	ld	r24, X
    7a72:	da 97       	sbiw	r26, 0x3a	; 58
    7a74:	78 17       	cp	r23, r24
    7a76:	80 f1       	brcs	.+96     	; 0x7ad8 <fat_resize_file+0x44a>
    7a78:	87 17       	cp	r24, r23
    7a7a:	f1 f5       	brne	.+124    	; 0x7af8 <fat_resize_file+0x46a>
    7a7c:	d9 96       	adiw	r26, 0x39	; 57
    7a7e:	8c 91       	ld	r24, X
    7a80:	d9 97       	sbiw	r26, 0x39	; 57
    7a82:	68 17       	cp	r22, r24
    7a84:	48 f1       	brcs	.+82     	; 0x7ad8 <fat_resize_file+0x44a>
    7a86:	86 17       	cp	r24, r22
    7a88:	b9 f5       	brne	.+110    	; 0x7af8 <fat_resize_file+0x46a>
    7a8a:	d8 96       	adiw	r26, 0x38	; 56
    7a8c:	8c 91       	ld	r24, X
    7a8e:	d8 97       	sbiw	r26, 0x38	; 56
    7a90:	58 17       	cp	r21, r24
    7a92:	10 f1       	brcs	.+68     	; 0x7ad8 <fat_resize_file+0x44a>
    7a94:	85 17       	cp	r24, r21
    7a96:	81 f5       	brne	.+96     	; 0x7af8 <fat_resize_file+0x46a>
    7a98:	d7 96       	adiw	r26, 0x37	; 55
    7a9a:	8c 91       	ld	r24, X
    7a9c:	d7 97       	sbiw	r26, 0x37	; 55
    7a9e:	48 17       	cp	r20, r24
    7aa0:	d8 f0       	brcs	.+54     	; 0x7ad8 <fat_resize_file+0x44a>
    7aa2:	84 17       	cp	r24, r20
    7aa4:	49 f5       	brne	.+82     	; 0x7af8 <fat_resize_file+0x46a>
    7aa6:	d6 96       	adiw	r26, 0x36	; 54
    7aa8:	8c 91       	ld	r24, X
    7aaa:	d6 97       	sbiw	r26, 0x36	; 54
    7aac:	38 17       	cp	r19, r24
    7aae:	a0 f0       	brcs	.+40     	; 0x7ad8 <fat_resize_file+0x44a>
    7ab0:	83 17       	cp	r24, r19
    7ab2:	11 f5       	brne	.+68     	; 0x7af8 <fat_resize_file+0x46a>
    7ab4:	d5 96       	adiw	r26, 0x35	; 53
    7ab6:	8c 91       	ld	r24, X
    7ab8:	d5 97       	sbiw	r26, 0x35	; 53
    7aba:	28 17       	cp	r18, r24
    7abc:	68 f0       	brcs	.+26     	; 0x7ad8 <fat_resize_file+0x44a>
    7abe:	82 17       	cp	r24, r18
    7ac0:	d9 f4       	brne	.+54     	; 0x7af8 <fat_resize_file+0x46a>
    7ac2:	d4 96       	adiw	r26, 0x34	; 52
    7ac4:	8c 91       	ld	r24, X
    7ac6:	d4 97       	sbiw	r26, 0x34	; 52
    7ac8:	18 17       	cp	r17, r24
    7aca:	30 f0       	brcs	.+12     	; 0x7ad8 <fat_resize_file+0x44a>
    7acc:	81 17       	cp	r24, r17
    7ace:	a1 f4       	brne	.+40     	; 0x7af8 <fat_resize_file+0x46a>
    7ad0:	d3 96       	adiw	r26, 0x33	; 51
    7ad2:	8c 91       	ld	r24, X
    7ad4:	08 17       	cp	r16, r24
    7ad6:	80 f4       	brcc	.+32     	; 0x7af8 <fat_resize_file+0x46a>
    {
        fd->pos = size;
    7ad8:	f1 01       	movw	r30, r2
    7ada:	03 ab       	std	Z+51, r16	; 0x33
    7adc:	14 ab       	std	Z+52, r17	; 0x34
    7ade:	25 ab       	std	Z+53, r18	; 0x35
    7ae0:	36 ab       	std	Z+54, r19	; 0x36
    7ae2:	17 aa       	std	Z+55, r1	; 0x37
    7ae4:	10 ae       	std	Z+56, r1	; 0x38
    7ae6:	11 ae       	std	Z+57, r1	; 0x39
    7ae8:	12 ae       	std	Z+58, r1	; 0x3a
        fd->pos_cluster = 0;
    7aea:	d1 01       	movw	r26, r2
    7aec:	db 96       	adiw	r26, 0x3b	; 59
    7aee:	1d 92       	st	X+, r1
    7af0:	1d 92       	st	X+, r1
    7af2:	1d 92       	st	X+, r1
    7af4:	1c 92       	st	X, r1
    7af6:	de 97       	sbiw	r26, 0x3e	; 62
    7af8:	81 e0       	ldi	r24, 0x01	; 1
    7afa:	01 c0       	rjmp	.+2      	; 0x7afe <fat_resize_file+0x470>
    7afc:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    7afe:	62 96       	adiw	r28, 0x12	; 18
    7b00:	0f b6       	in	r0, 0x3f	; 63
    7b02:	f8 94       	cli
    7b04:	de bf       	out	0x3e, r29	; 62
    7b06:	0f be       	out	0x3f, r0	; 63
    7b08:	cd bf       	out	0x3d, r28	; 61
    7b0a:	cf 91       	pop	r28
    7b0c:	df 91       	pop	r29
    7b0e:	1f 91       	pop	r17
    7b10:	0f 91       	pop	r16
    7b12:	ff 90       	pop	r15
    7b14:	ef 90       	pop	r14
    7b16:	df 90       	pop	r13
    7b18:	cf 90       	pop	r12
    7b1a:	bf 90       	pop	r11
    7b1c:	af 90       	pop	r10
    7b1e:	9f 90       	pop	r9
    7b20:	8f 90       	pop	r8
    7b22:	7f 90       	pop	r7
    7b24:	6f 90       	pop	r6
    7b26:	5f 90       	pop	r5
    7b28:	4f 90       	pop	r4
    7b2a:	3f 90       	pop	r3
    7b2c:	2f 90       	pop	r2
    7b2e:	08 95       	ret
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    7b30:	c1 14       	cp	r12, r1
    7b32:	d1 04       	cpc	r13, r1
    7b34:	e1 04       	cpc	r14, r1
    7b36:	f1 04       	cpc	r15, r1
    7b38:	09 f4       	brne	.+2      	; 0x7b3c <fat_resize_file+0x4ae>
    7b3a:	14 ce       	rjmp	.-984    	; 0x7764 <fat_resize_file+0xd6>
    7b3c:	3c ce       	rjmp	.-904    	; 0x77b6 <fat_resize_file+0x128>

00007b3e <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    7b3e:	cf 92       	push	r12
    7b40:	df 92       	push	r13
    7b42:	ef 92       	push	r14
    7b44:	ff 92       	push	r15
    7b46:	0f 93       	push	r16
    7b48:	1f 93       	push	r17
    7b4a:	cf 93       	push	r28
    7b4c:	df 93       	push	r29
    7b4e:	ec 01       	movw	r28, r24
    7b50:	6b 01       	movw	r12, r22
    if(!fd || !offset)
    7b52:	00 97       	sbiw	r24, 0x00	; 0
    7b54:	09 f4       	brne	.+2      	; 0x7b58 <fat_seek_file+0x1a>
    7b56:	51 c0       	rjmp	.+162    	; 0x7bfa <fat_seek_file+0xbc>
    7b58:	61 15       	cp	r22, r1
    7b5a:	71 05       	cpc	r23, r1
    7b5c:	09 f4       	brne	.+2      	; 0x7b60 <fat_seek_file+0x22>
    7b5e:	4d c0       	rjmp	.+154    	; 0x7bfa <fat_seek_file+0xbc>
        return 0;

    uint32_t new_pos = fd->pos;
    7b60:	2b a9       	ldd	r18, Y+51	; 0x33
    7b62:	3c a9       	ldd	r19, Y+52	; 0x34
    7b64:	5d a9       	ldd	r21, Y+53	; 0x35
    7b66:	6e a9       	ldd	r22, Y+54	; 0x36
    switch(whence)
    7b68:	41 30       	cpi	r20, 0x01	; 1
    7b6a:	61 f0       	breq	.+24     	; 0x7b84 <fat_seek_file+0x46>
    7b6c:	41 30       	cpi	r20, 0x01	; 1
    7b6e:	20 f0       	brcs	.+8      	; 0x7b78 <fat_seek_file+0x3a>
    7b70:	42 30       	cpi	r20, 0x02	; 2
    7b72:	09 f0       	breq	.+2      	; 0x7b76 <fat_seek_file+0x38>
    7b74:	42 c0       	rjmp	.+132    	; 0x7bfa <fat_seek_file+0xbc>
    7b76:	0f c0       	rjmp	.+30     	; 0x7b96 <fat_seek_file+0x58>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    7b78:	f6 01       	movw	r30, r12
    7b7a:	e0 80       	ld	r14, Z
    7b7c:	f1 80       	ldd	r15, Z+1	; 0x01
    7b7e:	02 81       	ldd	r16, Z+2	; 0x02
    7b80:	13 81       	ldd	r17, Z+3	; 0x03
    7b82:	16 c0       	rjmp	.+44     	; 0x7bb0 <fat_seek_file+0x72>
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
    7b84:	c9 01       	movw	r24, r18
    7b86:	a5 2f       	mov	r26, r21
    7b88:	b6 2f       	mov	r27, r22
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    7b8a:	f6 01       	movw	r30, r12
    7b8c:	e0 80       	ld	r14, Z
    7b8e:	f1 80       	ldd	r15, Z+1	; 0x01
    7b90:	02 81       	ldd	r16, Z+2	; 0x02
    7b92:	13 81       	ldd	r17, Z+3	; 0x03
    7b94:	09 c0       	rjmp	.+18     	; 0x7ba8 <fat_seek_file+0x6a>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    7b96:	f6 01       	movw	r30, r12
    7b98:	e0 80       	ld	r14, Z
    7b9a:	f1 80       	ldd	r15, Z+1	; 0x01
    7b9c:	02 81       	ldd	r16, Z+2	; 0x02
    7b9e:	13 81       	ldd	r17, Z+3	; 0x03
    7ba0:	8f a1       	ldd	r24, Y+39	; 0x27
    7ba2:	98 a5       	ldd	r25, Y+40	; 0x28
    7ba4:	a9 a5       	ldd	r26, Y+41	; 0x29
    7ba6:	ba a5       	ldd	r27, Y+42	; 0x2a
    7ba8:	e8 0e       	add	r14, r24
    7baa:	f9 1e       	adc	r15, r25
    7bac:	0a 1f       	adc	r16, r26
    7bae:	1b 1f       	adc	r17, r27
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    7bb0:	8f a1       	ldd	r24, Y+39	; 0x27
    7bb2:	98 a5       	ldd	r25, Y+40	; 0x28
    7bb4:	a9 a5       	ldd	r26, Y+41	; 0x29
    7bb6:	ba a5       	ldd	r27, Y+42	; 0x2a
    7bb8:	8e 15       	cp	r24, r14
    7bba:	9f 05       	cpc	r25, r15
    7bbc:	a0 07       	cpc	r26, r16
    7bbe:	b1 07       	cpc	r27, r17
    7bc0:	38 f4       	brcc	.+14     	; 0x7bd0 <fat_seek_file+0x92>
    7bc2:	ce 01       	movw	r24, r28
    7bc4:	b8 01       	movw	r22, r16
    7bc6:	a7 01       	movw	r20, r14
    7bc8:	0e 94 47 3b 	call	0x768e	; 0x768e <fat_resize_file>
    7bcc:	88 23       	and	r24, r24
    7bce:	a9 f0       	breq	.+42     	; 0x7bfa <fat_seek_file+0xbc>
       && !fat_resize_file(fd, new_pos)
#endif
       )
        return 0;

    fd->pos = new_pos;
    7bd0:	a8 01       	movw	r20, r16
    7bd2:	97 01       	movw	r18, r14
    7bd4:	eb aa       	std	Y+51, r14	; 0x33
    7bd6:	3c ab       	std	Y+52, r19	; 0x34
    7bd8:	4d ab       	std	Y+53, r20	; 0x35
    7bda:	5e ab       	std	Y+54, r21	; 0x36
    7bdc:	1f aa       	std	Y+55, r1	; 0x37
    7bde:	18 ae       	std	Y+56, r1	; 0x38
    7be0:	19 ae       	std	Y+57, r1	; 0x39
    7be2:	1a ae       	std	Y+58, r1	; 0x3a
    fd->pos_cluster = 0;
    7be4:	1b ae       	std	Y+59, r1	; 0x3b
    7be6:	1c ae       	std	Y+60, r1	; 0x3c
    7be8:	1d ae       	std	Y+61, r1	; 0x3d
    7bea:	1e ae       	std	Y+62, r1	; 0x3e

    *offset = (int32_t) new_pos;
    7bec:	f6 01       	movw	r30, r12
    7bee:	e0 82       	st	Z, r14
    7bf0:	f1 82       	std	Z+1, r15	; 0x01
    7bf2:	02 83       	std	Z+2, r16	; 0x02
    7bf4:	13 83       	std	Z+3, r17	; 0x03
    7bf6:	81 e0       	ldi	r24, 0x01	; 1
    7bf8:	01 c0       	rjmp	.+2      	; 0x7bfc <fat_seek_file+0xbe>
    return 1;
    7bfa:	80 e0       	ldi	r24, 0x00	; 0
}
    7bfc:	df 91       	pop	r29
    7bfe:	cf 91       	pop	r28
    7c00:	1f 91       	pop	r17
    7c02:	0f 91       	pop	r16
    7c04:	ff 90       	pop	r15
    7c06:	ef 90       	pop	r14
    7c08:	df 90       	pop	r13
    7c0a:	cf 90       	pop	r12
    7c0c:	08 95       	ret

00007c0e <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    7c0e:	2f 92       	push	r2
    7c10:	3f 92       	push	r3
    7c12:	4f 92       	push	r4
    7c14:	5f 92       	push	r5
    7c16:	6f 92       	push	r6
    7c18:	7f 92       	push	r7
    7c1a:	8f 92       	push	r8
    7c1c:	9f 92       	push	r9
    7c1e:	af 92       	push	r10
    7c20:	bf 92       	push	r11
    7c22:	cf 92       	push	r12
    7c24:	df 92       	push	r13
    7c26:	ef 92       	push	r14
    7c28:	ff 92       	push	r15
    7c2a:	0f 93       	push	r16
    7c2c:	1f 93       	push	r17
    7c2e:	df 93       	push	r29
    7c30:	cf 93       	push	r28
    7c32:	cd b7       	in	r28, 0x3d	; 61
    7c34:	de b7       	in	r29, 0x3e	; 62
    7c36:	66 97       	sbiw	r28, 0x16	; 22
    7c38:	0f b6       	in	r0, 0x3f	; 63
    7c3a:	f8 94       	cli
    7c3c:	de bf       	out	0x3e, r29	; 62
    7c3e:	0f be       	out	0x3f, r0	; 63
    7c40:	cd bf       	out	0x3d, r28	; 61
    7c42:	9e 8b       	std	Y+22, r25	; 0x16
    7c44:	8d 8b       	std	Y+21, r24	; 0x15
    7c46:	7e 87       	std	Y+14, r23	; 0x0e
    7c48:	6d 87       	std	Y+13, r22	; 0x0d
    7c4a:	58 8b       	std	Y+16, r21	; 0x10
    7c4c:	4f 87       	std	Y+15, r20	; 0x0f
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    7c4e:	00 97       	sbiw	r24, 0x00	; 0
    7c50:	09 f4       	brne	.+2      	; 0x7c54 <fat_write_file+0x46>
    7c52:	8e c3       	rjmp	.+1820   	; 0x8370 <fat_write_file+0x762>
    7c54:	67 2b       	or	r22, r23
    7c56:	09 f4       	brne	.+2      	; 0x7c5a <fat_write_file+0x4c>
    7c58:	8b c3       	rjmp	.+1814   	; 0x8370 <fat_write_file+0x762>
    7c5a:	45 2b       	or	r20, r21
    7c5c:	09 f4       	brne	.+2      	; 0x7c60 <fat_write_file+0x52>
    7c5e:	88 c3       	rjmp	.+1808   	; 0x8370 <fat_write_file+0x762>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    7c60:	dc 01       	movw	r26, r24
    7c62:	d3 96       	adiw	r26, 0x33	; 51
    7c64:	8c 90       	ld	r8, X
    7c66:	d3 97       	sbiw	r26, 0x33	; 51
    7c68:	d4 96       	adiw	r26, 0x34	; 52
    7c6a:	9c 90       	ld	r9, X
    7c6c:	d4 97       	sbiw	r26, 0x34	; 52
    7c6e:	d5 96       	adiw	r26, 0x35	; 53
    7c70:	ac 90       	ld	r10, X
    7c72:	d5 97       	sbiw	r26, 0x35	; 53
    7c74:	d6 96       	adiw	r26, 0x36	; 54
    7c76:	bc 90       	ld	r11, X
    7c78:	d6 97       	sbiw	r26, 0x36	; 54
    7c7a:	d7 96       	adiw	r26, 0x37	; 55
    7c7c:	cc 90       	ld	r12, X
    7c7e:	d7 97       	sbiw	r26, 0x37	; 55
    7c80:	d8 96       	adiw	r26, 0x38	; 56
    7c82:	dc 90       	ld	r13, X
    7c84:	d8 97       	sbiw	r26, 0x38	; 56
    7c86:	d9 96       	adiw	r26, 0x39	; 57
    7c88:	ec 90       	ld	r14, X
    7c8a:	d9 97       	sbiw	r26, 0x39	; 57
    7c8c:	da 96       	adiw	r26, 0x3a	; 58
    7c8e:	fc 90       	ld	r15, X
    7c90:	fc 01       	movw	r30, r24
    7c92:	87 a1       	ldd	r24, Z+39	; 0x27
    7c94:	90 a5       	ldd	r25, Z+40	; 0x28
    7c96:	a1 a5       	ldd	r26, Z+41	; 0x29
    7c98:	b2 a5       	ldd	r27, Z+42	; 0x2a
    7c9a:	9c 01       	movw	r18, r24
    7c9c:	ad 01       	movw	r20, r26
    7c9e:	60 e0       	ldi	r22, 0x00	; 0
    7ca0:	70 e0       	ldi	r23, 0x00	; 0
    7ca2:	80 e0       	ldi	r24, 0x00	; 0
    7ca4:	90 e0       	ldi	r25, 0x00	; 0
    7ca6:	9f 15       	cp	r25, r15
    7ca8:	08 f4       	brcc	.+2      	; 0x7cac <fat_write_file+0x9e>
    7caa:	62 c3       	rjmp	.+1732   	; 0x8370 <fat_write_file+0x762>
    7cac:	f9 16       	cp	r15, r25
    7cae:	09 f5       	brne	.+66     	; 0x7cf2 <fat_write_file+0xe4>
    7cb0:	8e 15       	cp	r24, r14
    7cb2:	08 f4       	brcc	.+2      	; 0x7cb6 <fat_write_file+0xa8>
    7cb4:	5d c3       	rjmp	.+1722   	; 0x8370 <fat_write_file+0x762>
    7cb6:	e8 16       	cp	r14, r24
    7cb8:	e1 f4       	brne	.+56     	; 0x7cf2 <fat_write_file+0xe4>
    7cba:	7d 15       	cp	r23, r13
    7cbc:	08 f4       	brcc	.+2      	; 0x7cc0 <fat_write_file+0xb2>
    7cbe:	58 c3       	rjmp	.+1712   	; 0x8370 <fat_write_file+0x762>
    7cc0:	d7 16       	cp	r13, r23
    7cc2:	b9 f4       	brne	.+46     	; 0x7cf2 <fat_write_file+0xe4>
    7cc4:	6c 15       	cp	r22, r12
    7cc6:	08 f4       	brcc	.+2      	; 0x7cca <fat_write_file+0xbc>
    7cc8:	53 c3       	rjmp	.+1702   	; 0x8370 <fat_write_file+0x762>
    7cca:	c6 16       	cp	r12, r22
    7ccc:	91 f4       	brne	.+36     	; 0x7cf2 <fat_write_file+0xe4>
    7cce:	5b 15       	cp	r21, r11
    7cd0:	08 f4       	brcc	.+2      	; 0x7cd4 <fat_write_file+0xc6>
    7cd2:	4e c3       	rjmp	.+1692   	; 0x8370 <fat_write_file+0x762>
    7cd4:	b5 16       	cp	r11, r21
    7cd6:	69 f4       	brne	.+26     	; 0x7cf2 <fat_write_file+0xe4>
    7cd8:	4a 15       	cp	r20, r10
    7cda:	08 f4       	brcc	.+2      	; 0x7cde <fat_write_file+0xd0>
    7cdc:	49 c3       	rjmp	.+1682   	; 0x8370 <fat_write_file+0x762>
    7cde:	a4 16       	cp	r10, r20
    7ce0:	41 f4       	brne	.+16     	; 0x7cf2 <fat_write_file+0xe4>
    7ce2:	39 15       	cp	r19, r9
    7ce4:	08 f4       	brcc	.+2      	; 0x7ce8 <fat_write_file+0xda>
    7ce6:	44 c3       	rjmp	.+1672   	; 0x8370 <fat_write_file+0x762>
    7ce8:	93 16       	cp	r9, r19
    7cea:	19 f4       	brne	.+6      	; 0x7cf2 <fat_write_file+0xe4>
    7cec:	28 15       	cp	r18, r8
    7cee:	08 f4       	brcc	.+2      	; 0x7cf2 <fat_write_file+0xe4>
    7cf0:	3f c3       	rjmp	.+1662   	; 0x8370 <fat_write_file+0x762>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    7cf2:	ad 89       	ldd	r26, Y+21	; 0x15
    7cf4:	be 89       	ldd	r27, Y+22	; 0x16
    7cf6:	2d 91       	ld	r18, X+
    7cf8:	3c 91       	ld	r19, X
    7cfa:	11 97       	sbiw	r26, 0x01	; 1
    7cfc:	f9 01       	movw	r30, r18
    7cfe:	00 8c       	ldd	r0, Z+24	; 0x18
    7d00:	f1 8d       	ldd	r31, Z+25	; 0x19
    7d02:	e0 2d       	mov	r30, r0
    7d04:	fc 87       	std	Y+12, r31	; 0x0c
    7d06:	eb 87       	std	Y+11, r30	; 0x0b
    cluster_t cluster_num = fd->pos_cluster;
    7d08:	db 96       	adiw	r26, 0x3b	; 59
    7d0a:	8d 91       	ld	r24, X+
    7d0c:	9d 91       	ld	r25, X+
    7d0e:	0d 90       	ld	r0, X+
    7d10:	bc 91       	ld	r27, X
    7d12:	a0 2d       	mov	r26, r0
    7d14:	8f 83       	std	Y+7, r24	; 0x07
    7d16:	98 87       	std	Y+8, r25	; 0x08
    7d18:	a9 87       	std	Y+9, r26	; 0x09
    7d1a:	ba 87       	std	Y+10, r27	; 0x0a
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    7d1c:	00 97       	sbiw	r24, 0x00	; 0
    7d1e:	a1 05       	cpc	r26, r1
    7d20:	b1 05       	cpc	r27, r1
    7d22:	09 f0       	breq	.+2      	; 0x7d26 <fat_write_file+0x118>
    7d24:	ae c0       	rjmp	.+348    	; 0x7e82 <fat_write_file+0x274>
    {
        cluster_num = fd->dir_entry.cluster;
    7d26:	ad 89       	ldd	r26, Y+21	; 0x15
    7d28:	be 89       	ldd	r27, Y+22	; 0x16
    7d2a:	93 96       	adiw	r26, 0x23	; 35
    7d2c:	8d 91       	ld	r24, X+
    7d2e:	9d 91       	ld	r25, X+
    7d30:	0d 90       	ld	r0, X+
    7d32:	bc 91       	ld	r27, X
    7d34:	a0 2d       	mov	r26, r0
    7d36:	8f 83       	std	Y+7, r24	; 0x07
    7d38:	98 87       	std	Y+8, r25	; 0x08
    7d3a:	a9 87       	std	Y+9, r26	; 0x09
    7d3c:	ba 87       	std	Y+10, r27	; 0x0a
        
        if(!cluster_num)
    7d3e:	00 97       	sbiw	r24, 0x00	; 0
    7d40:	a1 05       	cpc	r26, r1
    7d42:	b1 05       	cpc	r27, r1
    7d44:	29 f5       	brne	.+74     	; 0x7d90 <fat_write_file+0x182>
        {
            if(!fd->pos)
    7d46:	88 2d       	mov	r24, r8
    7d48:	89 29       	or	r24, r9
    7d4a:	8a 29       	or	r24, r10
    7d4c:	8b 29       	or	r24, r11
    7d4e:	8c 29       	or	r24, r12
    7d50:	8d 29       	or	r24, r13
    7d52:	8e 29       	or	r24, r14
    7d54:	8f 29       	or	r24, r15
    7d56:	09 f0       	breq	.+2      	; 0x7d5a <fat_write_file+0x14c>
    7d58:	0b c3       	rjmp	.+1558   	; 0x8370 <fat_write_file+0x762>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    7d5a:	c9 01       	movw	r24, r18
    7d5c:	40 e0       	ldi	r20, 0x00	; 0
    7d5e:	50 e0       	ldi	r21, 0x00	; 0
    7d60:	60 e0       	ldi	r22, 0x00	; 0
    7d62:	70 e0       	ldi	r23, 0x00	; 0
    7d64:	01 e0       	ldi	r16, 0x01	; 1
    7d66:	10 e0       	ldi	r17, 0x00	; 0
    7d68:	20 e0       	ldi	r18, 0x00	; 0
    7d6a:	30 e0       	ldi	r19, 0x00	; 0
    7d6c:	0e 94 d7 22 	call	0x45ae	; 0x45ae <fat_append_clusters>
    7d70:	6f 83       	std	Y+7, r22	; 0x07
    7d72:	78 87       	std	Y+8, r23	; 0x08
    7d74:	89 87       	std	Y+9, r24	; 0x09
    7d76:	9a 87       	std	Y+10, r25	; 0x0a
    7d78:	ed 89       	ldd	r30, Y+21	; 0x15
    7d7a:	fe 89       	ldd	r31, Y+22	; 0x16
    7d7c:	63 a3       	std	Z+35, r22	; 0x23
    7d7e:	74 a3       	std	Z+36, r23	; 0x24
    7d80:	85 a3       	std	Z+37, r24	; 0x25
    7d82:	96 a3       	std	Z+38, r25	; 0x26
                if(!cluster_num)
    7d84:	61 15       	cp	r22, r1
    7d86:	71 05       	cpc	r23, r1
    7d88:	81 05       	cpc	r24, r1
    7d8a:	91 05       	cpc	r25, r1
    7d8c:	09 f4       	brne	.+2      	; 0x7d90 <fat_write_file+0x182>
    7d8e:	f0 c2       	rjmp	.+1504   	; 0x8370 <fat_write_file+0x762>
            {
                return -1;
            }
        }

        if(fd->pos)
    7d90:	ad 89       	ldd	r26, Y+21	; 0x15
    7d92:	be 89       	ldd	r27, Y+22	; 0x16
    7d94:	d3 96       	adiw	r26, 0x33	; 51
    7d96:	6c 91       	ld	r22, X
    7d98:	d3 97       	sbiw	r26, 0x33	; 51
    7d9a:	d4 96       	adiw	r26, 0x34	; 52
    7d9c:	7c 91       	ld	r23, X
    7d9e:	d4 97       	sbiw	r26, 0x34	; 52
    7da0:	d5 96       	adiw	r26, 0x35	; 53
    7da2:	ec 91       	ld	r30, X
    7da4:	d5 97       	sbiw	r26, 0x35	; 53
    7da6:	d6 96       	adiw	r26, 0x36	; 54
    7da8:	fc 91       	ld	r31, X
    7daa:	d6 97       	sbiw	r26, 0x36	; 54
    7dac:	d7 96       	adiw	r26, 0x37	; 55
    7dae:	9c 91       	ld	r25, X
    7db0:	d7 97       	sbiw	r26, 0x37	; 55
    7db2:	d8 96       	adiw	r26, 0x38	; 56
    7db4:	2c 91       	ld	r18, X
    7db6:	d8 97       	sbiw	r26, 0x38	; 56
    7db8:	d9 96       	adiw	r26, 0x39	; 57
    7dba:	3c 91       	ld	r19, X
    7dbc:	d9 97       	sbiw	r26, 0x39	; 57
    7dbe:	da 96       	adiw	r26, 0x3a	; 58
    7dc0:	4c 91       	ld	r20, X
    7dc2:	86 2f       	mov	r24, r22
    7dc4:	87 2b       	or	r24, r23
    7dc6:	8e 2b       	or	r24, r30
    7dc8:	8f 2b       	or	r24, r31
    7dca:	89 2b       	or	r24, r25
    7dcc:	82 2b       	or	r24, r18
    7dce:	83 2b       	or	r24, r19
    7dd0:	84 2b       	or	r24, r20
    7dd2:	09 f4       	brne	.+2      	; 0x7dd6 <fat_write_file+0x1c8>
    7dd4:	56 c0       	rjmp	.+172    	; 0x7e82 <fat_write_file+0x274>
        {
            uint32_t pos = fd->pos;
    7dd6:	9b 01       	movw	r18, r22
    7dd8:	af 01       	movw	r20, r30
    7dda:	c9 01       	movw	r24, r18
    7ddc:	da 01       	movw	r26, r20
    7dde:	2c 01       	movw	r4, r24
    7de0:	3d 01       	movw	r6, r26
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    7de2:	4b 85       	ldd	r20, Y+11	; 0x0b
    7de4:	5c 85       	ldd	r21, Y+12	; 0x0c
    7de6:	9a 01       	movw	r18, r20
    7de8:	40 e0       	ldi	r20, 0x00	; 0
    7dea:	50 e0       	ldi	r21, 0x00	; 0
    7dec:	29 8b       	std	Y+17, r18	; 0x11
    7dee:	3a 8b       	std	Y+18, r19	; 0x12
    7df0:	4b 8b       	std	Y+19, r20	; 0x13
    7df2:	5c 8b       	std	Y+20, r21	; 0x14
    7df4:	3c c0       	rjmp	.+120    	; 0x7e6e <fat_write_file+0x260>
            {
                pos -= cluster_size;
    7df6:	89 89       	ldd	r24, Y+17	; 0x11
    7df8:	9a 89       	ldd	r25, Y+18	; 0x12
    7dfa:	ab 89       	ldd	r26, Y+19	; 0x13
    7dfc:	bc 89       	ldd	r27, Y+20	; 0x14
    7dfe:	48 1a       	sub	r4, r24
    7e00:	59 0a       	sbc	r5, r25
    7e02:	6a 0a       	sbc	r6, r26
    7e04:	7b 0a       	sbc	r7, r27
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    7e06:	ad 89       	ldd	r26, Y+21	; 0x15
    7e08:	be 89       	ldd	r27, Y+22	; 0x16
    7e0a:	8d 91       	ld	r24, X+
    7e0c:	9c 91       	ld	r25, X
    7e0e:	4f 81       	ldd	r20, Y+7	; 0x07
    7e10:	58 85       	ldd	r21, Y+8	; 0x08
    7e12:	69 85       	ldd	r22, Y+9	; 0x09
    7e14:	7a 85       	ldd	r23, Y+10	; 0x0a
    7e16:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <fat_get_next_cluster>
                if(!cluster_num_next && pos == 0)
    7e1a:	61 15       	cp	r22, r1
    7e1c:	71 05       	cpc	r23, r1
    7e1e:	81 05       	cpc	r24, r1
    7e20:	91 05       	cpc	r25, r1
    7e22:	29 f0       	breq	.+10     	; 0x7e2e <fat_write_file+0x220>
    7e24:	6f 83       	std	Y+7, r22	; 0x07
    7e26:	78 87       	std	Y+8, r23	; 0x08
    7e28:	89 87       	std	Y+9, r24	; 0x09
    7e2a:	9a 87       	std	Y+10, r25	; 0x0a
    7e2c:	20 c0       	rjmp	.+64     	; 0x7e6e <fat_write_file+0x260>
    7e2e:	41 14       	cp	r4, r1
    7e30:	51 04       	cpc	r5, r1
    7e32:	61 04       	cpc	r6, r1
    7e34:	71 04       	cpc	r7, r1
    7e36:	09 f0       	breq	.+2      	; 0x7e3a <fat_write_file+0x22c>
    7e38:	9b c2       	rjmp	.+1334   	; 0x8370 <fat_write_file+0x762>
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    7e3a:	ed 89       	ldd	r30, Y+21	; 0x15
    7e3c:	fe 89       	ldd	r31, Y+22	; 0x16
    7e3e:	80 81       	ld	r24, Z
    7e40:	91 81       	ldd	r25, Z+1	; 0x01
    7e42:	4f 81       	ldd	r20, Y+7	; 0x07
    7e44:	58 85       	ldd	r21, Y+8	; 0x08
    7e46:	69 85       	ldd	r22, Y+9	; 0x09
    7e48:	7a 85       	ldd	r23, Y+10	; 0x0a
    7e4a:	01 e0       	ldi	r16, 0x01	; 1
    7e4c:	10 e0       	ldi	r17, 0x00	; 0
    7e4e:	20 e0       	ldi	r18, 0x00	; 0
    7e50:	30 e0       	ldi	r19, 0x00	; 0
    7e52:	0e 94 d7 22 	call	0x45ae	; 0x45ae <fat_append_clusters>
    7e56:	ab 01       	movw	r20, r22
    7e58:	bc 01       	movw	r22, r24
                if(!cluster_num_next)
    7e5a:	41 15       	cp	r20, r1
    7e5c:	51 05       	cpc	r21, r1
    7e5e:	61 05       	cpc	r22, r1
    7e60:	71 05       	cpc	r23, r1
    7e62:	09 f4       	brne	.+2      	; 0x7e66 <fat_write_file+0x258>
    7e64:	85 c2       	rjmp	.+1290   	; 0x8370 <fat_write_file+0x762>
    7e66:	4f 83       	std	Y+7, r20	; 0x07
    7e68:	58 87       	std	Y+8, r21	; 0x08
    7e6a:	69 87       	std	Y+9, r22	; 0x09
    7e6c:	7a 87       	std	Y+10, r23	; 0x0a

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    7e6e:	29 89       	ldd	r18, Y+17	; 0x11
    7e70:	3a 89       	ldd	r19, Y+18	; 0x12
    7e72:	4b 89       	ldd	r20, Y+19	; 0x13
    7e74:	5c 89       	ldd	r21, Y+20	; 0x14
    7e76:	42 16       	cp	r4, r18
    7e78:	53 06       	cpc	r5, r19
    7e7a:	64 06       	cpc	r6, r20
    7e7c:	75 06       	cpc	r7, r21
    7e7e:	08 f0       	brcs	.+2      	; 0x7e82 <fat_write_file+0x274>
    7e80:	ba cf       	rjmp	.-140    	; 0x7df6 <fat_write_file+0x1e8>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    7e82:	4b 85       	ldd	r20, Y+11	; 0x0b
    7e84:	5c 85       	ldd	r21, Y+12	; 0x0c
    7e86:	41 50       	subi	r20, 0x01	; 1
    7e88:	50 40       	sbci	r21, 0x00	; 0
    7e8a:	5c 87       	std	Y+12, r21	; 0x0c
    7e8c:	4b 87       	std	Y+11, r20	; 0x0b
    7e8e:	48 21       	and	r20, r8
    7e90:	59 21       	and	r21, r9
    7e92:	5c 83       	std	Y+4, r21	; 0x04
    7e94:	4b 83       	std	Y+3, r20	; 0x03
    7e96:	8b 85       	ldd	r24, Y+11	; 0x0b
    7e98:	9c 85       	ldd	r25, Y+12	; 0x0c
    7e9a:	01 96       	adiw	r24, 0x01	; 1
    7e9c:	9c 87       	std	Y+12, r25	; 0x0c
    7e9e:	8b 87       	std	Y+11, r24	; 0x0b
    7ea0:	af 85       	ldd	r26, Y+15	; 0x0f
    7ea2:	b8 89       	ldd	r27, Y+16	; 0x10
    7ea4:	be 83       	std	Y+6, r27	; 0x06
    7ea6:	ad 83       	std	Y+5, r26	; 0x05
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    7ea8:	ed 89       	ldd	r30, Y+21	; 0x15
    7eaa:	fe 89       	ldd	r31, Y+22	; 0x16
    7eac:	01 90       	ld	r0, Z+
    7eae:	f0 81       	ld	r31, Z
    7eb0:	e0 2d       	mov	r30, r0
    7eb2:	fa 83       	std	Y+2, r31	; 0x02
    7eb4:	e9 83       	std	Y+1, r30	; 0x01
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    7eb6:	30 97       	sbiw	r30, 0x00	; 0
    7eb8:	09 f4       	brne	.+2      	; 0x7ebc <fat_write_file+0x2ae>
    7eba:	8e c0       	rjmp	.+284    	; 0x7fd8 <fat_write_file+0x3ca>
    7ebc:	2f 81       	ldd	r18, Y+7	; 0x07
    7ebe:	38 85       	ldd	r19, Y+8	; 0x08
    7ec0:	49 85       	ldd	r20, Y+9	; 0x09
    7ec2:	5a 85       	ldd	r21, Y+10	; 0x0a
    7ec4:	22 30       	cpi	r18, 0x02	; 2
    7ec6:	31 05       	cpc	r19, r1
    7ec8:	41 05       	cpc	r20, r1
    7eca:	51 05       	cpc	r21, r1
    7ecc:	08 f4       	brcc	.+2      	; 0x7ed0 <fat_write_file+0x2c2>
    7ece:	84 c0       	rjmp	.+264    	; 0x7fd8 <fat_write_file+0x3ca>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    7ed0:	22 50       	subi	r18, 0x02	; 2
    7ed2:	30 40       	sbci	r19, 0x00	; 0
    7ed4:	40 40       	sbci	r20, 0x00	; 0
    7ed6:	50 40       	sbci	r21, 0x00	; 0
    7ed8:	59 01       	movw	r10, r18
    7eda:	6a 01       	movw	r12, r20
    7edc:	2e 5f       	subi	r18, 0xFE	; 254
    7ede:	3f 4f       	sbci	r19, 0xFF	; 255
    7ee0:	4f 4f       	sbci	r20, 0xFF	; 255
    7ee2:	5f 4f       	sbci	r21, 0xFF	; 255
    7ee4:	2f 83       	std	Y+7, r18	; 0x07
    7ee6:	38 87       	std	Y+8, r19	; 0x08
    7ee8:	49 87       	std	Y+9, r20	; 0x09
    7eea:	5a 87       	std	Y+10, r21	; 0x0a
    7eec:	20 8c       	ldd	r2, Z+24	; 0x18
    7eee:	31 8c       	ldd	r3, Z+25	; 0x19
    7ef0:	95 01       	movw	r18, r10
    7ef2:	a6 01       	movw	r20, r12
    7ef4:	60 e0       	ldi	r22, 0x00	; 0
    7ef6:	70 e0       	ldi	r23, 0x00	; 0
    7ef8:	80 e0       	ldi	r24, 0x00	; 0
    7efa:	90 e0       	ldi	r25, 0x00	; 0
    7efc:	51 01       	movw	r10, r2
    7efe:	cc 24       	eor	r12, r12
    7f00:	dd 24       	eor	r13, r13
    7f02:	ee 24       	eor	r14, r14
    7f04:	ff 24       	eor	r15, r15
    7f06:	00 e0       	ldi	r16, 0x00	; 0
    7f08:	10 e0       	ldi	r17, 0x00	; 0
    7f0a:	0e 94 49 44 	call	0x8892	; 0x8892 <__muldi3>
    7f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    7f10:	fa 81       	ldd	r31, Y+2	; 0x02
    7f12:	b2 8d       	ldd	r27, Z+26	; 0x1a
    7f14:	f3 8c       	ldd	r15, Z+27	; 0x1b
    7f16:	a4 8d       	ldd	r26, Z+28	; 0x1c
    7f18:	05 8d       	ldd	r16, Z+29	; 0x1d
    7f1a:	d6 8c       	ldd	r13, Z+30	; 0x1e
    7f1c:	c7 8c       	ldd	r12, Z+31	; 0x1f
    7f1e:	b0 a0       	ldd	r11, Z+32	; 0x20
    7f20:	11 a1       	ldd	r17, Z+33	; 0x21
    7f22:	b2 0f       	add	r27, r18
    7f24:	f1 e0       	ldi	r31, 0x01	; 1
    7f26:	b2 17       	cp	r27, r18
    7f28:	08 f0       	brcs	.+2      	; 0x7f2c <fat_write_file+0x31e>
    7f2a:	f0 e0       	ldi	r31, 0x00	; 0
    7f2c:	23 2f       	mov	r18, r19
    7f2e:	2f 0d       	add	r18, r15
    7f30:	e1 e0       	ldi	r30, 0x01	; 1
    7f32:	23 17       	cp	r18, r19
    7f34:	08 f0       	brcs	.+2      	; 0x7f38 <fat_write_file+0x32a>
    7f36:	e0 e0       	ldi	r30, 0x00	; 0
    7f38:	ef 2e       	mov	r14, r31
    7f3a:	e2 0e       	add	r14, r18
    7f3c:	31 e0       	ldi	r19, 0x01	; 1
    7f3e:	e2 16       	cp	r14, r18
    7f40:	08 f0       	brcs	.+2      	; 0x7f44 <fat_write_file+0x336>
    7f42:	30 e0       	ldi	r19, 0x00	; 0
    7f44:	e3 2b       	or	r30, r19
    7f46:	24 2f       	mov	r18, r20
    7f48:	2a 0f       	add	r18, r26
    7f4a:	f1 e0       	ldi	r31, 0x01	; 1
    7f4c:	24 17       	cp	r18, r20
    7f4e:	08 f0       	brcs	.+2      	; 0x7f52 <fat_write_file+0x344>
    7f50:	f0 e0       	ldi	r31, 0x00	; 0
    7f52:	fe 2e       	mov	r15, r30
    7f54:	f2 0e       	add	r15, r18
    7f56:	31 e0       	ldi	r19, 0x01	; 1
    7f58:	f2 16       	cp	r15, r18
    7f5a:	08 f0       	brcs	.+2      	; 0x7f5e <fat_write_file+0x350>
    7f5c:	30 e0       	ldi	r19, 0x00	; 0
    7f5e:	f3 2b       	or	r31, r19
    7f60:	25 2f       	mov	r18, r21
    7f62:	20 0f       	add	r18, r16
    7f64:	41 e0       	ldi	r20, 0x01	; 1
    7f66:	25 17       	cp	r18, r21
    7f68:	08 f0       	brcs	.+2      	; 0x7f6c <fat_write_file+0x35e>
    7f6a:	40 e0       	ldi	r20, 0x00	; 0
    7f6c:	f2 0f       	add	r31, r18
    7f6e:	31 e0       	ldi	r19, 0x01	; 1
    7f70:	f2 17       	cp	r31, r18
    7f72:	08 f0       	brcs	.+2      	; 0x7f76 <fat_write_file+0x368>
    7f74:	30 e0       	ldi	r19, 0x00	; 0
    7f76:	43 2b       	or	r20, r19
    7f78:	26 2f       	mov	r18, r22
    7f7a:	2d 0d       	add	r18, r13
    7f7c:	51 e0       	ldi	r21, 0x01	; 1
    7f7e:	26 17       	cp	r18, r22
    7f80:	08 f0       	brcs	.+2      	; 0x7f84 <fat_write_file+0x376>
    7f82:	50 e0       	ldi	r21, 0x00	; 0
    7f84:	e4 2f       	mov	r30, r20
    7f86:	e2 0f       	add	r30, r18
    7f88:	31 e0       	ldi	r19, 0x01	; 1
    7f8a:	e2 17       	cp	r30, r18
    7f8c:	08 f0       	brcs	.+2      	; 0x7f90 <fat_write_file+0x382>
    7f8e:	30 e0       	ldi	r19, 0x00	; 0
    7f90:	53 2b       	or	r21, r19
    7f92:	27 2f       	mov	r18, r23
    7f94:	2c 0d       	add	r18, r12
    7f96:	41 e0       	ldi	r20, 0x01	; 1
    7f98:	27 17       	cp	r18, r23
    7f9a:	08 f0       	brcs	.+2      	; 0x7f9e <fat_write_file+0x390>
    7f9c:	40 e0       	ldi	r20, 0x00	; 0
    7f9e:	52 0f       	add	r21, r18
    7fa0:	31 e0       	ldi	r19, 0x01	; 1
    7fa2:	52 17       	cp	r21, r18
    7fa4:	08 f0       	brcs	.+2      	; 0x7fa8 <fat_write_file+0x39a>
    7fa6:	30 e0       	ldi	r19, 0x00	; 0
    7fa8:	43 2b       	or	r20, r19
    7faa:	28 2f       	mov	r18, r24
    7fac:	2b 0d       	add	r18, r11
    7fae:	31 e0       	ldi	r19, 0x01	; 1
    7fb0:	28 17       	cp	r18, r24
    7fb2:	08 f0       	brcs	.+2      	; 0x7fb6 <fat_write_file+0x3a8>
    7fb4:	30 e0       	ldi	r19, 0x00	; 0
    7fb6:	42 0f       	add	r20, r18
    7fb8:	81 e0       	ldi	r24, 0x01	; 1
    7fba:	42 17       	cp	r20, r18
    7fbc:	08 f0       	brcs	.+2      	; 0x7fc0 <fat_write_file+0x3b2>
    7fbe:	80 e0       	ldi	r24, 0x00	; 0
    7fc0:	a3 2f       	mov	r26, r19
    7fc2:	a8 2b       	or	r26, r24
    7fc4:	19 0f       	add	r17, r25
    7fc6:	2b 2f       	mov	r18, r27
    7fc8:	9e 2d       	mov	r25, r14
    7fca:	6f 2d       	mov	r22, r15
    7fcc:	7f 2f       	mov	r23, r31
    7fce:	4e 2e       	mov	r4, r30
    7fd0:	25 2e       	mov	r2, r21
    7fd2:	b4 2f       	mov	r27, r20
    7fd4:	a1 0f       	add	r26, r17
    7fd6:	08 c0       	rjmp	.+16     	; 0x7fe8 <fat_write_file+0x3da>
    7fd8:	20 e0       	ldi	r18, 0x00	; 0
    7fda:	90 e0       	ldi	r25, 0x00	; 0
    7fdc:	60 e0       	ldi	r22, 0x00	; 0
    7fde:	70 e0       	ldi	r23, 0x00	; 0
    7fe0:	44 24       	eor	r4, r4
    7fe2:	22 24       	eor	r2, r2
    7fe4:	b0 e0       	ldi	r27, 0x00	; 0
    7fe6:	a0 e0       	ldi	r26, 0x00	; 0
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t write_length = cluster_size - first_cluster_offset;
    7fe8:	8b 84       	ldd	r8, Y+11	; 0x0b
    7fea:	9c 84       	ldd	r9, Y+12	; 0x0c
    7fec:	4b 81       	ldd	r20, Y+3	; 0x03
    7fee:	5c 81       	ldd	r21, Y+4	; 0x04
    7ff0:	84 1a       	sub	r8, r20
    7ff2:	95 0a       	sbc	r9, r21
    7ff4:	ed 81       	ldd	r30, Y+5	; 0x05
    7ff6:	fe 81       	ldd	r31, Y+6	; 0x06
    7ff8:	e8 15       	cp	r30, r8
    7ffa:	f9 05       	cpc	r31, r9
    7ffc:	08 f4       	brcc	.+2      	; 0x8000 <fat_write_file+0x3f2>
    7ffe:	4f 01       	movw	r8, r30
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    8000:	e9 81       	ldd	r30, Y+1	; 0x01
    8002:	fa 81       	ldd	r31, Y+2	; 0x02
    8004:	60 80       	ld	r6, Z
    8006:	71 80       	ldd	r7, Z+1	; 0x01
    8008:	4b 81       	ldd	r20, Y+3	; 0x03
    800a:	5c 81       	ldd	r21, Y+4	; 0x04
    800c:	5a 01       	movw	r10, r20
    800e:	cc 24       	eor	r12, r12
    8010:	dd 24       	eor	r13, r13
    8012:	ee 24       	eor	r14, r14
    8014:	ff 24       	eor	r15, r15
    8016:	87 01       	movw	r16, r14
    8018:	52 2e       	mov	r5, r18
    801a:	54 0e       	add	r5, r20
    801c:	31 e0       	ldi	r19, 0x01	; 1
    801e:	52 16       	cp	r5, r18
    8020:	08 f0       	brcs	.+2      	; 0x8024 <fat_write_file+0x416>
    8022:	30 e0       	ldi	r19, 0x00	; 0
    8024:	89 2f       	mov	r24, r25
    8026:	8b 0d       	add	r24, r11
    8028:	41 e0       	ldi	r20, 0x01	; 1
    802a:	89 17       	cp	r24, r25
    802c:	08 f0       	brcs	.+2      	; 0x8030 <fat_write_file+0x422>
    802e:	40 e0       	ldi	r20, 0x00	; 0
    8030:	38 0f       	add	r19, r24
    8032:	91 e0       	ldi	r25, 0x01	; 1
    8034:	38 17       	cp	r19, r24
    8036:	08 f0       	brcs	.+2      	; 0x803a <fat_write_file+0x42c>
    8038:	90 e0       	ldi	r25, 0x00	; 0
    803a:	49 2b       	or	r20, r25
    803c:	86 2f       	mov	r24, r22
    803e:	8c 0d       	add	r24, r12
    8040:	51 e0       	ldi	r21, 0x01	; 1
    8042:	86 17       	cp	r24, r22
    8044:	08 f0       	brcs	.+2      	; 0x8048 <fat_write_file+0x43a>
    8046:	50 e0       	ldi	r21, 0x00	; 0
    8048:	48 0f       	add	r20, r24
    804a:	91 e0       	ldi	r25, 0x01	; 1
    804c:	48 17       	cp	r20, r24
    804e:	08 f0       	brcs	.+2      	; 0x8052 <fat_write_file+0x444>
    8050:	90 e0       	ldi	r25, 0x00	; 0
    8052:	59 2b       	or	r21, r25
    8054:	87 2f       	mov	r24, r23
    8056:	8d 0d       	add	r24, r13
    8058:	61 e0       	ldi	r22, 0x01	; 1
    805a:	87 17       	cp	r24, r23
    805c:	08 f0       	brcs	.+2      	; 0x8060 <fat_write_file+0x452>
    805e:	60 e0       	ldi	r22, 0x00	; 0
    8060:	58 0f       	add	r21, r24
    8062:	91 e0       	ldi	r25, 0x01	; 1
    8064:	58 17       	cp	r21, r24
    8066:	08 f0       	brcs	.+2      	; 0x806a <fat_write_file+0x45c>
    8068:	90 e0       	ldi	r25, 0x00	; 0
    806a:	69 2b       	or	r22, r25
    806c:	84 2d       	mov	r24, r4
    806e:	8e 0d       	add	r24, r14
    8070:	71 e0       	ldi	r23, 0x01	; 1
    8072:	84 15       	cp	r24, r4
    8074:	08 f0       	brcs	.+2      	; 0x8078 <fat_write_file+0x46a>
    8076:	70 e0       	ldi	r23, 0x00	; 0
    8078:	68 0f       	add	r22, r24
    807a:	91 e0       	ldi	r25, 0x01	; 1
    807c:	68 17       	cp	r22, r24
    807e:	08 f0       	brcs	.+2      	; 0x8082 <fat_write_file+0x474>
    8080:	90 e0       	ldi	r25, 0x00	; 0
    8082:	79 2b       	or	r23, r25
    8084:	92 2d       	mov	r25, r2
    8086:	9f 0d       	add	r25, r15
    8088:	81 e0       	ldi	r24, 0x01	; 1
    808a:	92 15       	cp	r25, r2
    808c:	08 f0       	brcs	.+2      	; 0x8090 <fat_write_file+0x482>
    808e:	80 e0       	ldi	r24, 0x00	; 0
    8090:	79 0f       	add	r23, r25
    8092:	e1 e0       	ldi	r30, 0x01	; 1
    8094:	79 17       	cp	r23, r25
    8096:	08 f0       	brcs	.+2      	; 0x809a <fat_write_file+0x48c>
    8098:	e0 e0       	ldi	r30, 0x00	; 0
    809a:	8e 2b       	or	r24, r30
    809c:	eb 2f       	mov	r30, r27
    809e:	e0 0f       	add	r30, r16
    80a0:	91 e0       	ldi	r25, 0x01	; 1
    80a2:	eb 17       	cp	r30, r27
    80a4:	08 f0       	brcs	.+2      	; 0x80a8 <fat_write_file+0x49a>
    80a6:	90 e0       	ldi	r25, 0x00	; 0
    80a8:	8e 0f       	add	r24, r30
    80aa:	f1 e0       	ldi	r31, 0x01	; 1
    80ac:	8e 17       	cp	r24, r30
    80ae:	08 f0       	brcs	.+2      	; 0x80b2 <fat_write_file+0x4a4>
    80b0:	f0 e0       	ldi	r31, 0x00	; 0
    80b2:	9f 2b       	or	r25, r31
    80b4:	a1 0f       	add	r26, r17
    80b6:	f3 01       	movw	r30, r6
    80b8:	c4 80       	ldd	r12, Z+4	; 0x04
    80ba:	d5 80       	ldd	r13, Z+5	; 0x05
    80bc:	25 2d       	mov	r18, r5
    80be:	9a 0f       	add	r25, r26
    80c0:	0d 85       	ldd	r16, Y+13	; 0x0d
    80c2:	1e 85       	ldd	r17, Y+14	; 0x0e
    80c4:	74 01       	movw	r14, r8
    80c6:	f6 01       	movw	r30, r12
    80c8:	09 95       	icall
    80ca:	88 23       	and	r24, r24
    80cc:	09 f4       	brne	.+2      	; 0x80d0 <fat_write_file+0x4c2>
    80ce:	e5 c0       	rjmp	.+458    	; 0x829a <fat_write_file+0x68c>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
    80d0:	2d 81       	ldd	r18, Y+5	; 0x05
    80d2:	3e 81       	ldd	r19, Y+6	; 0x06
    80d4:	28 19       	sub	r18, r8
    80d6:	39 09       	sbc	r19, r9
    80d8:	3e 83       	std	Y+6, r19	; 0x06
    80da:	2d 83       	std	Y+5, r18	; 0x05
        fd->pos += write_length;
    80dc:	94 01       	movw	r18, r8
    80de:	40 e0       	ldi	r20, 0x00	; 0
    80e0:	50 e0       	ldi	r21, 0x00	; 0
    80e2:	60 e0       	ldi	r22, 0x00	; 0
    80e4:	70 e0       	ldi	r23, 0x00	; 0
    80e6:	80 e0       	ldi	r24, 0x00	; 0
    80e8:	90 e0       	ldi	r25, 0x00	; 0
    80ea:	ad 89       	ldd	r26, Y+21	; 0x15
    80ec:	be 89       	ldd	r27, Y+22	; 0x16
    80ee:	d3 96       	adiw	r26, 0x33	; 51
    80f0:	1c 91       	ld	r17, X
    80f2:	d3 97       	sbiw	r26, 0x33	; 51
    80f4:	d4 96       	adiw	r26, 0x34	; 52
    80f6:	dc 90       	ld	r13, X
    80f8:	d4 97       	sbiw	r26, 0x34	; 52
    80fa:	d5 96       	adiw	r26, 0x35	; 53
    80fc:	bc 91       	ld	r27, X
    80fe:	ed 89       	ldd	r30, Y+21	; 0x15
    8100:	fe 89       	ldd	r31, Y+22	; 0x16
    8102:	06 a9       	ldd	r16, Z+54	; 0x36
    8104:	e7 a8       	ldd	r14, Z+55	; 0x37
    8106:	a0 ac       	ldd	r10, Z+56	; 0x38
    8108:	71 ac       	ldd	r7, Z+57	; 0x39
    810a:	f2 ac       	ldd	r15, Z+58	; 0x3a
    810c:	18 0d       	add	r17, r8
    810e:	f1 e0       	ldi	r31, 0x01	; 1
    8110:	18 15       	cp	r17, r8
    8112:	08 f0       	brcs	.+2      	; 0x8116 <fat_write_file+0x508>
    8114:	f0 e0       	ldi	r31, 0x00	; 0
    8116:	ed 2d       	mov	r30, r13
    8118:	e3 0f       	add	r30, r19
    811a:	a1 e0       	ldi	r26, 0x01	; 1
    811c:	e3 17       	cp	r30, r19
    811e:	08 f0       	brcs	.+2      	; 0x8122 <fat_write_file+0x514>
    8120:	a0 e0       	ldi	r26, 0x00	; 0
    8122:	bf 2e       	mov	r11, r31
    8124:	be 0e       	add	r11, r30
    8126:	f1 e0       	ldi	r31, 0x01	; 1
    8128:	be 16       	cp	r11, r30
    812a:	08 f0       	brcs	.+2      	; 0x812e <fat_write_file+0x520>
    812c:	f0 e0       	ldi	r31, 0x00	; 0
    812e:	af 2b       	or	r26, r31
    8130:	e4 2f       	mov	r30, r20
    8132:	eb 0f       	add	r30, r27
    8134:	b1 e0       	ldi	r27, 0x01	; 1
    8136:	e4 17       	cp	r30, r20
    8138:	08 f0       	brcs	.+2      	; 0x813c <fat_write_file+0x52e>
    813a:	b0 e0       	ldi	r27, 0x00	; 0
    813c:	ca 2e       	mov	r12, r26
    813e:	ce 0e       	add	r12, r30
    8140:	f1 e0       	ldi	r31, 0x01	; 1
    8142:	ce 16       	cp	r12, r30
    8144:	08 f0       	brcs	.+2      	; 0x8148 <fat_write_file+0x53a>
    8146:	f0 e0       	ldi	r31, 0x00	; 0
    8148:	bf 2b       	or	r27, r31
    814a:	e5 2f       	mov	r30, r21
    814c:	e0 0f       	add	r30, r16
    814e:	a1 e0       	ldi	r26, 0x01	; 1
    8150:	e5 17       	cp	r30, r21
    8152:	08 f0       	brcs	.+2      	; 0x8156 <fat_write_file+0x548>
    8154:	a0 e0       	ldi	r26, 0x00	; 0
    8156:	db 2e       	mov	r13, r27
    8158:	de 0e       	add	r13, r30
    815a:	f1 e0       	ldi	r31, 0x01	; 1
    815c:	de 16       	cp	r13, r30
    815e:	08 f0       	brcs	.+2      	; 0x8162 <fat_write_file+0x554>
    8160:	f0 e0       	ldi	r31, 0x00	; 0
    8162:	af 2b       	or	r26, r31
    8164:	e6 2f       	mov	r30, r22
    8166:	ee 0d       	add	r30, r14
    8168:	b1 e0       	ldi	r27, 0x01	; 1
    816a:	e6 17       	cp	r30, r22
    816c:	08 f0       	brcs	.+2      	; 0x8170 <fat_write_file+0x562>
    816e:	b0 e0       	ldi	r27, 0x00	; 0
    8170:	ea 2e       	mov	r14, r26
    8172:	ee 0e       	add	r14, r30
    8174:	f1 e0       	ldi	r31, 0x01	; 1
    8176:	ee 16       	cp	r14, r30
    8178:	08 f0       	brcs	.+2      	; 0x817c <fat_write_file+0x56e>
    817a:	f0 e0       	ldi	r31, 0x00	; 0
    817c:	bf 2b       	or	r27, r31
    817e:	e7 2f       	mov	r30, r23
    8180:	ea 0d       	add	r30, r10
    8182:	a1 e0       	ldi	r26, 0x01	; 1
    8184:	e7 17       	cp	r30, r23
    8186:	08 f0       	brcs	.+2      	; 0x818a <fat_write_file+0x57c>
    8188:	a0 e0       	ldi	r26, 0x00	; 0
    818a:	0b 2f       	mov	r16, r27
    818c:	0e 0f       	add	r16, r30
    818e:	f1 e0       	ldi	r31, 0x01	; 1
    8190:	0e 17       	cp	r16, r30
    8192:	08 f0       	brcs	.+2      	; 0x8196 <fat_write_file+0x588>
    8194:	f0 e0       	ldi	r31, 0x00	; 0
    8196:	af 2b       	or	r26, r31
    8198:	e8 2f       	mov	r30, r24
    819a:	e7 0d       	add	r30, r7
    819c:	f1 e0       	ldi	r31, 0x01	; 1
    819e:	e8 17       	cp	r30, r24
    81a0:	08 f0       	brcs	.+2      	; 0x81a4 <fat_write_file+0x596>
    81a2:	f0 e0       	ldi	r31, 0x00	; 0
    81a4:	aa 2e       	mov	r10, r26
    81a6:	ae 0e       	add	r10, r30
    81a8:	a1 e0       	ldi	r26, 0x01	; 1
    81aa:	ae 16       	cp	r10, r30
    81ac:	08 f0       	brcs	.+2      	; 0x81b0 <fat_write_file+0x5a2>
    81ae:	a0 e0       	ldi	r26, 0x00	; 0
    81b0:	fa 2b       	or	r31, r26
    81b2:	f9 0e       	add	r15, r25
    81b4:	ff 0d       	add	r31, r15
    81b6:	ad 89       	ldd	r26, Y+21	; 0x15
    81b8:	be 89       	ldd	r27, Y+22	; 0x16
    81ba:	d3 96       	adiw	r26, 0x33	; 51
    81bc:	1c 93       	st	X, r17
    81be:	d3 97       	sbiw	r26, 0x33	; 51
    81c0:	d4 96       	adiw	r26, 0x34	; 52
    81c2:	bc 92       	st	X, r11
    81c4:	d4 97       	sbiw	r26, 0x34	; 52
    81c6:	d5 96       	adiw	r26, 0x35	; 53
    81c8:	cc 92       	st	X, r12
    81ca:	d5 97       	sbiw	r26, 0x35	; 53
    81cc:	d6 96       	adiw	r26, 0x36	; 54
    81ce:	dc 92       	st	X, r13
    81d0:	d6 97       	sbiw	r26, 0x36	; 54
    81d2:	d7 96       	adiw	r26, 0x37	; 55
    81d4:	ec 92       	st	X, r14
    81d6:	d7 97       	sbiw	r26, 0x37	; 55
    81d8:	d8 96       	adiw	r26, 0x38	; 56
    81da:	0c 93       	st	X, r16
    81dc:	d8 97       	sbiw	r26, 0x38	; 56
    81de:	d9 96       	adiw	r26, 0x39	; 57
    81e0:	ac 92       	st	X, r10
    81e2:	d9 97       	sbiw	r26, 0x39	; 57
    81e4:	da 96       	adiw	r26, 0x3a	; 58
    81e6:	fc 93       	st	X, r31
    81e8:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + write_length >= cluster_size)
    81ea:	8b 81       	ldd	r24, Y+3	; 0x03
    81ec:	9c 81       	ldd	r25, Y+4	; 0x04
    81ee:	88 0d       	add	r24, r8
    81f0:	99 1d       	adc	r25, r9
    81f2:	eb 85       	ldd	r30, Y+11	; 0x0b
    81f4:	fc 85       	ldd	r31, Y+12	; 0x0c
    81f6:	8e 17       	cp	r24, r30
    81f8:	9f 07       	cpc	r25, r31
    81fa:	c0 f1       	brcs	.+112    	; 0x826c <fat_write_file+0x65e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    81fc:	8d 91       	ld	r24, X+
    81fe:	9c 91       	ld	r25, X
    8200:	4f 81       	ldd	r20, Y+7	; 0x07
    8202:	58 85       	ldd	r21, Y+8	; 0x08
    8204:	69 85       	ldd	r22, Y+9	; 0x09
    8206:	7a 85       	ldd	r23, Y+10	; 0x0a
    8208:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    820c:	61 15       	cp	r22, r1
    820e:	71 05       	cpc	r23, r1
    8210:	81 05       	cpc	r24, r1
    8212:	91 05       	cpc	r25, r1
    8214:	29 f0       	breq	.+10     	; 0x8220 <fat_write_file+0x612>
    8216:	6f 83       	std	Y+7, r22	; 0x07
    8218:	78 87       	std	Y+8, r23	; 0x08
    821a:	89 87       	std	Y+9, r24	; 0x09
    821c:	9a 87       	std	Y+10, r25	; 0x0a
    821e:	24 c0       	rjmp	.+72     	; 0x8268 <fat_write_file+0x65a>
    8220:	2d 81       	ldd	r18, Y+5	; 0x05
    8222:	3e 81       	ldd	r19, Y+6	; 0x06
    8224:	23 2b       	or	r18, r19
    8226:	a9 f0       	breq	.+42     	; 0x8252 <fat_write_file+0x644>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    8228:	ad 89       	ldd	r26, Y+21	; 0x15
    822a:	be 89       	ldd	r27, Y+22	; 0x16
    822c:	8d 91       	ld	r24, X+
    822e:	9c 91       	ld	r25, X
    8230:	4f 81       	ldd	r20, Y+7	; 0x07
    8232:	58 85       	ldd	r21, Y+8	; 0x08
    8234:	69 85       	ldd	r22, Y+9	; 0x09
    8236:	7a 85       	ldd	r23, Y+10	; 0x0a
    8238:	01 e0       	ldi	r16, 0x01	; 1
    823a:	10 e0       	ldi	r17, 0x00	; 0
    823c:	20 e0       	ldi	r18, 0x00	; 0
    823e:	30 e0       	ldi	r19, 0x00	; 0
    8240:	0e 94 d7 22 	call	0x45ae	; 0x45ae <fat_append_clusters>
    8244:	ab 01       	movw	r20, r22
    8246:	bc 01       	movw	r22, r24
            if(!cluster_num_next)
    8248:	41 15       	cp	r20, r1
    824a:	51 05       	cpc	r21, r1
    824c:	61 05       	cpc	r22, r1
    824e:	71 05       	cpc	r23, r1
    8250:	39 f4       	brne	.+14     	; 0x8260 <fat_write_file+0x652>
            {
                fd->pos_cluster = 0;
    8252:	ed 89       	ldd	r30, Y+21	; 0x15
    8254:	fe 89       	ldd	r31, Y+22	; 0x16
    8256:	13 ae       	std	Z+59, r1	; 0x3b
    8258:	14 ae       	std	Z+60, r1	; 0x3c
    825a:	15 ae       	std	Z+61, r1	; 0x3d
    825c:	16 ae       	std	Z+62, r1	; 0x3e
    825e:	1d c0       	rjmp	.+58     	; 0x829a <fat_write_file+0x68c>
                break;
    8260:	4f 83       	std	Y+7, r20	; 0x07
    8262:	58 87       	std	Y+8, r21	; 0x08
    8264:	69 87       	std	Y+9, r22	; 0x09
    8266:	7a 87       	std	Y+10, r23	; 0x0a
    8268:	1c 82       	std	Y+4, r1	; 0x04
    826a:	1b 82       	std	Y+3, r1	; 0x03

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    826c:	2f 81       	ldd	r18, Y+7	; 0x07
    826e:	38 85       	ldd	r19, Y+8	; 0x08
    8270:	49 85       	ldd	r20, Y+9	; 0x09
    8272:	5a 85       	ldd	r21, Y+10	; 0x0a
    8274:	ad 89       	ldd	r26, Y+21	; 0x15
    8276:	be 89       	ldd	r27, Y+22	; 0x16
    8278:	db 96       	adiw	r26, 0x3b	; 59
    827a:	2d 93       	st	X+, r18
    827c:	3d 93       	st	X+, r19
    827e:	4d 93       	st	X+, r20
    8280:	5c 93       	st	X, r21
    8282:	de 97       	sbiw	r26, 0x3e	; 62

    } while(buffer_left > 0); /* check if we are done */
    8284:	ed 81       	ldd	r30, Y+5	; 0x05
    8286:	fe 81       	ldd	r31, Y+6	; 0x06
    8288:	ef 2b       	or	r30, r31
    828a:	39 f0       	breq	.+14     	; 0x829a <fat_write_file+0x68c>
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
    828c:	2d 85       	ldd	r18, Y+13	; 0x0d
    828e:	3e 85       	ldd	r19, Y+14	; 0x0e
    8290:	28 0d       	add	r18, r8
    8292:	39 1d       	adc	r19, r9
    8294:	3e 87       	std	Y+14, r19	; 0x0e
    8296:	2d 87       	std	Y+13, r18	; 0x0d
    8298:	07 ce       	rjmp	.-1010   	; 0x7ea8 <fat_write_file+0x29a>
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    829a:	ad 89       	ldd	r26, Y+21	; 0x15
    829c:	be 89       	ldd	r27, Y+22	; 0x16
    829e:	d3 96       	adiw	r26, 0x33	; 51
    82a0:	7c 91       	ld	r23, X
    82a2:	d3 97       	sbiw	r26, 0x33	; 51
    82a4:	d4 96       	adiw	r26, 0x34	; 52
    82a6:	4c 91       	ld	r20, X
    82a8:	d4 97       	sbiw	r26, 0x34	; 52
    82aa:	d5 96       	adiw	r26, 0x35	; 53
    82ac:	5c 91       	ld	r21, X
    82ae:	d5 97       	sbiw	r26, 0x35	; 53
    82b0:	d6 96       	adiw	r26, 0x36	; 54
    82b2:	6c 91       	ld	r22, X
    82b4:	d6 97       	sbiw	r26, 0x36	; 54
    82b6:	d7 96       	adiw	r26, 0x37	; 55
    82b8:	3c 91       	ld	r19, X
    82ba:	d7 97       	sbiw	r26, 0x37	; 55
    82bc:	d8 96       	adiw	r26, 0x38	; 56
    82be:	2c 91       	ld	r18, X
    82c0:	d8 97       	sbiw	r26, 0x38	; 56
    82c2:	d9 96       	adiw	r26, 0x39	; 57
    82c4:	9c 91       	ld	r25, X
    82c6:	d9 97       	sbiw	r26, 0x39	; 57
    82c8:	da 96       	adiw	r26, 0x3a	; 58
    82ca:	8c 91       	ld	r24, X
    82cc:	da 97       	sbiw	r26, 0x3a	; 58
    82ce:	97 96       	adiw	r26, 0x27	; 39
    82d0:	6d 90       	ld	r6, X+
    82d2:	7d 90       	ld	r7, X+
    82d4:	8d 90       	ld	r8, X+
    82d6:	9c 90       	ld	r9, X
    82d8:	9a 97       	sbiw	r26, 0x2a	; 42
    82da:	64 01       	movw	r12, r8
    82dc:	53 01       	movw	r10, r6
    82de:	ee 24       	eor	r14, r14
    82e0:	ff 24       	eor	r15, r15
    82e2:	87 01       	movw	r16, r14
    82e4:	18 17       	cp	r17, r24
    82e6:	e0 f0       	brcs	.+56     	; 0x8320 <fat_write_file+0x712>
    82e8:	81 17       	cp	r24, r17
    82ea:	d9 f5       	brne	.+118    	; 0x8362 <fat_write_file+0x754>
    82ec:	09 17       	cp	r16, r25
    82ee:	c0 f0       	brcs	.+48     	; 0x8320 <fat_write_file+0x712>
    82f0:	90 17       	cp	r25, r16
    82f2:	b9 f5       	brne	.+110    	; 0x8362 <fat_write_file+0x754>
    82f4:	f2 16       	cp	r15, r18
    82f6:	a0 f0       	brcs	.+40     	; 0x8320 <fat_write_file+0x712>
    82f8:	2f 15       	cp	r18, r15
    82fa:	99 f5       	brne	.+102    	; 0x8362 <fat_write_file+0x754>
    82fc:	e3 16       	cp	r14, r19
    82fe:	80 f0       	brcs	.+32     	; 0x8320 <fat_write_file+0x712>
    8300:	3e 15       	cp	r19, r14
    8302:	79 f5       	brne	.+94     	; 0x8362 <fat_write_file+0x754>
    8304:	d6 16       	cp	r13, r22
    8306:	60 f0       	brcs	.+24     	; 0x8320 <fat_write_file+0x712>
    8308:	6d 15       	cp	r22, r13
    830a:	59 f5       	brne	.+86     	; 0x8362 <fat_write_file+0x754>
    830c:	c5 16       	cp	r12, r21
    830e:	40 f0       	brcs	.+16     	; 0x8320 <fat_write_file+0x712>
    8310:	5c 15       	cp	r21, r12
    8312:	39 f5       	brne	.+78     	; 0x8362 <fat_write_file+0x754>
    8314:	b4 16       	cp	r11, r20
    8316:	20 f0       	brcs	.+8      	; 0x8320 <fat_write_file+0x712>
    8318:	4b 15       	cp	r20, r11
    831a:	19 f5       	brne	.+70     	; 0x8362 <fat_write_file+0x754>
    831c:	67 16       	cp	r6, r23
    831e:	08 f5       	brcc	.+66     	; 0x8362 <fat_write_file+0x754>
    {
        uint32_t size_old = fd->dir_entry.file_size;

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    8320:	ed 89       	ldd	r30, Y+21	; 0x15
    8322:	fe 89       	ldd	r31, Y+22	; 0x16
    8324:	77 a3       	std	Z+39, r23	; 0x27
    8326:	40 a7       	std	Z+40, r20	; 0x28
    8328:	51 a7       	std	Z+41, r21	; 0x29
    832a:	62 a7       	std	Z+42, r22	; 0x2a
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    832c:	81 91       	ld	r24, Z+
    832e:	91 91       	ld	r25, Z+
    8330:	bf 01       	movw	r22, r30
    8332:	0e 94 02 37 	call	0x6e04	; 0x6e04 <fat_write_dir_entry>
    8336:	88 23       	and	r24, r24
    8338:	a1 f4       	brne	.+40     	; 0x8362 <fat_write_file+0x754>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    833a:	ad 89       	ldd	r26, Y+21	; 0x15
    833c:	be 89       	ldd	r27, Y+22	; 0x16
    833e:	d3 96       	adiw	r26, 0x33	; 51
    8340:	0d 90       	ld	r0, X+
    8342:	bc 91       	ld	r27, X
    8344:	a0 2d       	mov	r26, r0
    8346:	a6 19       	sub	r26, r6
    8348:	b7 09       	sbc	r27, r7
    834a:	be 83       	std	Y+6, r27	; 0x06
    834c:	ad 83       	std	Y+5, r26	; 0x05
            fd->pos = size_old;
    834e:	ed 89       	ldd	r30, Y+21	; 0x15
    8350:	fe 89       	ldd	r31, Y+22	; 0x16
    8352:	a3 aa       	std	Z+51, r10	; 0x33
    8354:	b4 aa       	std	Z+52, r11	; 0x34
    8356:	c5 aa       	std	Z+53, r12	; 0x35
    8358:	d6 aa       	std	Z+54, r13	; 0x36
    835a:	17 aa       	std	Z+55, r1	; 0x37
    835c:	10 ae       	std	Z+56, r1	; 0x38
    835e:	11 ae       	std	Z+57, r1	; 0x39
    8360:	12 ae       	std	Z+58, r1	; 0x3a
        }
    }

    return buffer_len - buffer_left;
    8362:	4f 85       	ldd	r20, Y+15	; 0x0f
    8364:	58 89       	ldd	r21, Y+16	; 0x10
    8366:	2d 81       	ldd	r18, Y+5	; 0x05
    8368:	3e 81       	ldd	r19, Y+6	; 0x06
    836a:	42 1b       	sub	r20, r18
    836c:	53 0b       	sbc	r21, r19
    836e:	02 c0       	rjmp	.+4      	; 0x8374 <fat_write_file+0x766>
    8370:	4f ef       	ldi	r20, 0xFF	; 255
    8372:	5f ef       	ldi	r21, 0xFF	; 255
}
    8374:	ca 01       	movw	r24, r20
    8376:	66 96       	adiw	r28, 0x16	; 22
    8378:	0f b6       	in	r0, 0x3f	; 63
    837a:	f8 94       	cli
    837c:	de bf       	out	0x3e, r29	; 62
    837e:	0f be       	out	0x3f, r0	; 63
    8380:	cd bf       	out	0x3d, r28	; 61
    8382:	cf 91       	pop	r28
    8384:	df 91       	pop	r29
    8386:	1f 91       	pop	r17
    8388:	0f 91       	pop	r16
    838a:	ff 90       	pop	r15
    838c:	ef 90       	pop	r14
    838e:	df 90       	pop	r13
    8390:	cf 90       	pop	r12
    8392:	bf 90       	pop	r11
    8394:	af 90       	pop	r10
    8396:	9f 90       	pop	r9
    8398:	8f 90       	pop	r8
    839a:	7f 90       	pop	r7
    839c:	6f 90       	pop	r6
    839e:	5f 90       	pop	r5
    83a0:	4f 90       	pop	r4
    83a2:	3f 90       	pop	r3
    83a4:	2f 90       	pop	r2
    83a6:	08 95       	ret

000083a8 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    83a8:	cf 93       	push	r28
    83aa:	df 93       	push	r29
    83ac:	ac 01       	movw	r20, r24
    83ae:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    83b0:	00 97       	sbiw	r24, 0x00	; 0
    83b2:	a9 f1       	breq	.+106    	; 0x841e <fat_open_dir+0x76>
    83b4:	61 15       	cp	r22, r1
    83b6:	71 05       	cpc	r23, r1
    83b8:	91 f1       	breq	.+100    	; 0x841e <fat_open_dir+0x76>
    83ba:	90 96       	adiw	r26, 0x20	; 32
    83bc:	8c 91       	ld	r24, X
    83be:	90 97       	sbiw	r26, 0x20	; 32
    83c0:	84 ff       	sbrs	r24, 4
    83c2:	2d c0       	rjmp	.+90     	; 0x841e <fat_open_dir+0x76>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    83c4:	80 91 48 04 	lds	r24, 0x0448
    83c8:	90 91 49 04 	lds	r25, 0x0449
    83cc:	89 2b       	or	r24, r25
    83ce:	19 f4       	brne	.+6      	; 0x83d6 <fat_open_dir+0x2e>
    83d0:	e8 e4       	ldi	r30, 0x48	; 72
    83d2:	f4 e0       	ldi	r31, 0x04	; 4
    83d4:	08 c0       	rjmp	.+16     	; 0x83e6 <fat_open_dir+0x3e>
    83d6:	80 91 81 04 	lds	r24, 0x0481
    83da:	90 91 82 04 	lds	r25, 0x0482
    83de:	89 2b       	or	r24, r25
    83e0:	f1 f4       	brne	.+60     	; 0x841e <fat_open_dir+0x76>
    83e2:	e1 e8       	ldi	r30, 0x81	; 129
    83e4:	f4 e0       	ldi	r31, 0x04	; 4
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    83e6:	9f 01       	movw	r18, r30
    83e8:	2e 5f       	subi	r18, 0xFE	; 254
    83ea:	3f 4f       	sbci	r19, 0xFF	; 255
    83ec:	bd 01       	movw	r22, r26
    83ee:	81 e3       	ldi	r24, 0x31	; 49
    83f0:	eb 01       	movw	r28, r22
    83f2:	09 90       	ld	r0, Y+
    83f4:	be 01       	movw	r22, r28
    83f6:	e9 01       	movw	r28, r18
    83f8:	09 92       	st	Y+, r0
    83fa:	9e 01       	movw	r18, r28
    83fc:	81 50       	subi	r24, 0x01	; 1
    83fe:	c1 f7       	brne	.-16     	; 0x83f0 <fat_open_dir+0x48>
    dd->fs = fs;
    8400:	51 83       	std	Z+1, r21	; 0x01
    8402:	40 83       	st	Z, r20
    dd->entry_cluster = dir_entry->cluster;
    8404:	91 96       	adiw	r26, 0x21	; 33
    8406:	8d 91       	ld	r24, X+
    8408:	9d 91       	ld	r25, X+
    840a:	0d 90       	ld	r0, X+
    840c:	bc 91       	ld	r27, X
    840e:	a0 2d       	mov	r26, r0
    8410:	83 ab       	std	Z+51, r24	; 0x33
    8412:	94 ab       	std	Z+52, r25	; 0x34
    8414:	a5 ab       	std	Z+53, r26	; 0x35
    8416:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    8418:	10 ae       	std	Z+56, r1	; 0x38
    841a:	17 aa       	std	Z+55, r1	; 0x37
    841c:	02 c0       	rjmp	.+4      	; 0x8422 <fat_open_dir+0x7a>

    return dd;
    841e:	e0 e0       	ldi	r30, 0x00	; 0
    8420:	f0 e0       	ldi	r31, 0x00	; 0
}
    8422:	cf 01       	movw	r24, r30
    8424:	df 91       	pop	r29
    8426:	cf 91       	pop	r28
    8428:	08 95       	ret

0000842a <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    842a:	cf 93       	push	r28
    842c:	df 93       	push	r29
    842e:	9c 01       	movw	r18, r24
    8430:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    8432:	00 97       	sbiw	r24, 0x00	; 0
    8434:	41 f0       	breq	.+16     	; 0x8446 <fat_open_file+0x1c>
    8436:	61 15       	cp	r22, r1
    8438:	71 05       	cpc	r23, r1
    843a:	29 f0       	breq	.+10     	; 0x8446 <fat_open_file+0x1c>
    843c:	90 96       	adiw	r26, 0x20	; 32
    843e:	8c 91       	ld	r24, X
    8440:	90 97       	sbiw	r26, 0x20	; 32
    8442:	84 ff       	sbrs	r24, 4
    8444:	33 c0       	rjmp	.+102    	; 0x84ac <fat_open_file+0x82>
    8446:	20 e0       	ldi	r18, 0x00	; 0
    8448:	30 e0       	ldi	r19, 0x00	; 0
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
    844a:	c9 01       	movw	r24, r18
    844c:	df 91       	pop	r29
    844e:	cf 91       	pop	r28
    8450:	08 95       	ret
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    8452:	cb e0       	ldi	r28, 0x0B	; 11
    8454:	d4 e0       	ldi	r29, 0x04	; 4
    8456:	fd 01       	movw	r30, r26
    8458:	81 e3       	ldi	r24, 0x31	; 49
    845a:	01 90       	ld	r0, Z+
    845c:	09 92       	st	Y+, r0
    845e:	81 50       	subi	r24, 0x01	; 1
    8460:	e1 f7       	brne	.-8      	; 0x845a <fat_open_file+0x30>
    fd->fs = fs;
    8462:	30 93 0a 04 	sts	0x040A, r19
    8466:	20 93 09 04 	sts	0x0409, r18
    fd->pos = 0;
    846a:	10 92 3c 04 	sts	0x043C, r1
    846e:	10 92 3d 04 	sts	0x043D, r1
    8472:	10 92 3e 04 	sts	0x043E, r1
    8476:	10 92 3f 04 	sts	0x043F, r1
    847a:	10 92 40 04 	sts	0x0440, r1
    847e:	10 92 41 04 	sts	0x0441, r1
    8482:	10 92 42 04 	sts	0x0442, r1
    8486:	10 92 43 04 	sts	0x0443, r1
    fd->pos_cluster = dir_entry->cluster;
    848a:	91 96       	adiw	r26, 0x21	; 33
    848c:	8d 91       	ld	r24, X+
    848e:	9d 91       	ld	r25, X+
    8490:	0d 90       	ld	r0, X+
    8492:	bc 91       	ld	r27, X
    8494:	a0 2d       	mov	r26, r0
    8496:	80 93 44 04 	sts	0x0444, r24
    849a:	90 93 45 04 	sts	0x0445, r25
    849e:	a0 93 46 04 	sts	0x0446, r26
    84a2:	b0 93 47 04 	sts	0x0447, r27
    84a6:	29 e0       	ldi	r18, 0x09	; 9
    84a8:	34 e0       	ldi	r19, 0x04	; 4
    84aa:	cf cf       	rjmp	.-98     	; 0x844a <fat_open_file+0x20>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    84ac:	80 91 09 04 	lds	r24, 0x0409
    84b0:	90 91 0a 04 	lds	r25, 0x040A
    84b4:	89 2b       	or	r24, r25
    84b6:	39 f6       	brne	.-114    	; 0x8446 <fat_open_file+0x1c>
    84b8:	cc cf       	rjmp	.-104    	; 0x8452 <fat_open_file+0x28>

000084ba <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    84ba:	6f 92       	push	r6
    84bc:	7f 92       	push	r7
    84be:	8f 92       	push	r8
    84c0:	9f 92       	push	r9
    84c2:	af 92       	push	r10
    84c4:	bf 92       	push	r11
    84c6:	cf 92       	push	r12
    84c8:	df 92       	push	r13
    84ca:	ef 92       	push	r14
    84cc:	ff 92       	push	r15
    84ce:	0f 93       	push	r16
    84d0:	1f 93       	push	r17
    84d2:	cf 93       	push	r28
    84d4:	df 93       	push	r29
    84d6:	4c 01       	movw	r8, r24
    84d8:	eb 01       	movw	r28, r22
    84da:	7a 01       	movw	r14, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    84dc:	00 97       	sbiw	r24, 0x00	; 0
    84de:	09 f4       	brne	.+2      	; 0x84e2 <fat_get_dir_entry_of_path+0x28>
    84e0:	67 c0       	rjmp	.+206    	; 0x85b0 <fat_get_dir_entry_of_path+0xf6>
    84e2:	61 15       	cp	r22, r1
    84e4:	71 05       	cpc	r23, r1
    84e6:	09 f4       	brne	.+2      	; 0x84ea <fat_get_dir_entry_of_path+0x30>
    84e8:	63 c0       	rjmp	.+198    	; 0x85b0 <fat_get_dir_entry_of_path+0xf6>
    84ea:	88 81       	ld	r24, Y
    84ec:	88 23       	and	r24, r24
    84ee:	09 f4       	brne	.+2      	; 0x84f2 <fat_get_dir_entry_of_path+0x38>
    84f0:	5f c0       	rjmp	.+190    	; 0x85b0 <fat_get_dir_entry_of_path+0xf6>
    84f2:	41 15       	cp	r20, r1
    84f4:	51 05       	cpc	r21, r1
    84f6:	09 f4       	brne	.+2      	; 0x84fa <fat_get_dir_entry_of_path+0x40>
    84f8:	5b c0       	rjmp	.+182    	; 0x85b0 <fat_get_dir_entry_of_path+0xf6>
        return 0;

    if(path[0] == '/')
    84fa:	8f 32       	cpi	r24, 0x2F	; 47
    84fc:	09 f4       	brne	.+2      	; 0x8500 <fat_get_dir_entry_of_path+0x46>
        ++path;
    84fe:	21 96       	adiw	r28, 0x01	; 1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    8500:	81 e3       	ldi	r24, 0x31	; 49
    8502:	f7 01       	movw	r30, r14
    8504:	11 92       	st	Z+, r1
    8506:	8a 95       	dec	r24
    8508:	e9 f7       	brne	.-6      	; 0x8504 <fat_get_dir_entry_of_path+0x4a>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    850a:	80 e1       	ldi	r24, 0x10	; 16
    850c:	f7 01       	movw	r30, r14
    850e:	80 a3       	std	Z+32, r24	; 0x20
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    8510:	37 01       	movw	r6, r14
    8512:	01 c0       	rjmp	.+2      	; 0x8516 <fat_get_dir_entry_of_path+0x5c>
    8514:	e5 01       	movw	r28, r10
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    8516:	88 81       	ld	r24, Y
    8518:	88 23       	and	r24, r24
    851a:	09 f4       	brne	.+2      	; 0x851e <fat_get_dir_entry_of_path+0x64>
    851c:	4b c0       	rjmp	.+150    	; 0x85b4 <fat_get_dir_entry_of_path+0xfa>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    851e:	c4 01       	movw	r24, r8
    8520:	b7 01       	movw	r22, r14
    8522:	0e 94 d4 41 	call	0x83a8	; 0x83a8 <fat_open_dir>
    8526:	6c 01       	movw	r12, r24
        if(!dd)
    8528:	00 97       	sbiw	r24, 0x00	; 0
    852a:	09 f4       	brne	.+2      	; 0x852e <fat_get_dir_entry_of_path+0x74>
    852c:	41 c0       	rjmp	.+130    	; 0x85b0 <fat_get_dir_entry_of_path+0xf6>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    852e:	ce 01       	movw	r24, r28
    8530:	6f e2       	ldi	r22, 0x2F	; 47
    8532:	70 e0       	ldi	r23, 0x00	; 0
    8534:	0e 94 92 46 	call	0x8d24	; 0x8d24 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    8538:	00 97       	sbiw	r24, 0x00	; 0
    853a:	39 f0       	breq	.+14     	; 0x854a <fat_get_dir_entry_of_path+0x90>
        {
            length_to_sep = sub_path - path;
    853c:	48 2f       	mov	r20, r24
    853e:	4c 1b       	sub	r20, r28
            ++sub_path;
    8540:	5c 01       	movw	r10, r24
    8542:	08 94       	sec
    8544:	a1 1c       	adc	r10, r1
    8546:	b1 1c       	adc	r11, r1
    8548:	2a c0       	rjmp	.+84     	; 0x859e <fat_get_dir_entry_of_path+0xe4>
        }
        else
        {
            length_to_sep = strlen(path);
    854a:	fe 01       	movw	r30, r28
    854c:	01 90       	ld	r0, Z+
    854e:	00 20       	and	r0, r0
    8550:	e9 f7       	brne	.-6      	; 0x854c <fat_get_dir_entry_of_path+0x92>
    8552:	31 97       	sbiw	r30, 0x01	; 1
    8554:	4e 2f       	mov	r20, r30
    8556:	4c 1b       	sub	r20, r28
            sub_path = path + length_to_sep;
    8558:	5e 01       	movw	r10, r28
    855a:	a4 0e       	add	r10, r20
    855c:	b1 1c       	adc	r11, r1
    855e:	1f c0       	rjmp	.+62     	; 0x859e <fat_get_dir_entry_of_path+0xe4>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    8560:	f3 01       	movw	r30, r6
    8562:	01 90       	ld	r0, Z+
    8564:	00 20       	and	r0, r0
    8566:	e9 f7       	brne	.-6      	; 0x8562 <fat_get_dir_entry_of_path+0xa8>
    8568:	31 97       	sbiw	r30, 0x01	; 1
    856a:	e6 19       	sub	r30, r6
    856c:	f7 09       	sbc	r31, r7
    856e:	e0 17       	cp	r30, r16
    8570:	f1 07       	cpc	r31, r17
    8572:	b9 f4       	brne	.+46     	; 0x85a2 <fat_get_dir_entry_of_path+0xe8>
    8574:	ce 01       	movw	r24, r28
    8576:	b3 01       	movw	r22, r6
    8578:	a8 01       	movw	r20, r16
    857a:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <strncmp>
    857e:	00 97       	sbiw	r24, 0x00	; 0
    8580:	81 f4       	brne	.+32     	; 0x85a2 <fat_get_dir_entry_of_path+0xe8>
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    8582:	f6 01       	movw	r30, r12
    8584:	11 82       	std	Z+1, r1	; 0x01
    8586:	10 82       	st	Z, r1
                continue;

            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
    8588:	0c 0f       	add	r16, r28
    858a:	1d 1f       	adc	r17, r29
    858c:	f8 01       	movw	r30, r16
    858e:	80 81       	ld	r24, Z
    8590:	88 23       	and	r24, r24
    8592:	81 f0       	breq	.+32     	; 0x85b4 <fat_get_dir_entry_of_path+0xfa>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    8594:	f7 01       	movw	r30, r14
    8596:	80 a1       	ldd	r24, Z+32	; 0x20
    8598:	84 fd       	sbrc	r24, 4
    859a:	bc cf       	rjmp	.-136    	; 0x8514 <fat_get_dir_entry_of_path+0x5a>
    859c:	09 c0       	rjmp	.+18     	; 0x85b0 <fat_get_dir_entry_of_path+0xf6>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    859e:	04 2f       	mov	r16, r20
    85a0:	10 e0       	ldi	r17, 0x00	; 0
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    85a2:	c6 01       	movw	r24, r12
    85a4:	b7 01       	movw	r22, r14
    85a6:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <fat_read_dir>
    85aa:	88 23       	and	r24, r24
    85ac:	c9 f6       	brne	.-78     	; 0x8560 <fat_get_dir_entry_of_path+0xa6>
    85ae:	12 c0       	rjmp	.+36     	; 0x85d4 <fat_get_dir_entry_of_path+0x11a>
    85b0:	80 e0       	ldi	r24, 0x00	; 0
    85b2:	01 c0       	rjmp	.+2      	; 0x85b6 <fat_get_dir_entry_of_path+0xfc>
    85b4:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    85b6:	df 91       	pop	r29
    85b8:	cf 91       	pop	r28
    85ba:	1f 91       	pop	r17
    85bc:	0f 91       	pop	r16
    85be:	ff 90       	pop	r15
    85c0:	ef 90       	pop	r14
    85c2:	df 90       	pop	r13
    85c4:	cf 90       	pop	r12
    85c6:	bf 90       	pop	r11
    85c8:	af 90       	pop	r10
    85ca:	9f 90       	pop	r9
    85cc:	8f 90       	pop	r8
    85ce:	7f 90       	pop	r7
    85d0:	6f 90       	pop	r6
    85d2:	08 95       	ret
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    85d4:	f6 01       	movw	r30, r12
    85d6:	11 82       	std	Z+1, r1	; 0x01
    85d8:	10 82       	st	Z, r1
    85da:	9d cf       	rjmp	.-198    	; 0x8516 <fat_get_dir_entry_of_path+0x5c>

000085dc <uart_init>:

void uart_init(uint8_t uart_speed)
{
	//Assume 14.7456MHz
	uint16_t new_ubrr = 192; //Default is 9600bps
	if(uart_speed == 0) new_ubrr = 768; //2400
    85dc:	88 23       	and	r24, r24
    85de:	51 f1       	breq	.+84     	; 0x8634 <uart_init+0x58>
	if(uart_speed == 1) new_ubrr = 192; //9600
    85e0:	81 30       	cpi	r24, 0x01	; 1
    85e2:	19 f4       	brne	.+6      	; 0x85ea <uart_init+0xe>
    85e4:	20 ec       	ldi	r18, 0xC0	; 192
    85e6:	30 e0       	ldi	r19, 0x00	; 0
    85e8:	1a c0       	rjmp	.+52     	; 0x861e <uart_init+0x42>
	if(uart_speed == 2) new_ubrr = 32; //57600
    85ea:	82 30       	cpi	r24, 0x02	; 2
    85ec:	19 f4       	brne	.+6      	; 0x85f4 <uart_init+0x18>
    85ee:	20 e2       	ldi	r18, 0x20	; 32
    85f0:	30 e0       	ldi	r19, 0x00	; 0
    85f2:	15 c0       	rjmp	.+42     	; 0x861e <uart_init+0x42>
	if(uart_speed == 3) new_ubrr = 16; //115200
    85f4:	83 30       	cpi	r24, 0x03	; 3
    85f6:	19 f4       	brne	.+6      	; 0x85fe <uart_init+0x22>
    85f8:	20 e1       	ldi	r18, 0x10	; 16
    85fa:	30 e0       	ldi	r19, 0x00	; 0
    85fc:	10 c0       	rjmp	.+32     	; 0x861e <uart_init+0x42>
	//New speeds added 4-7-2010
	//1200bps is so rare, and is not on the ATmega328 datasheet that I skipped it
	//38400bps is also rare, and ubrr of 51 oddly causes errors at 16MHz, so I skipped it as well
	if(uart_speed == 4) new_ubrr = 384; //4800
    85fe:	84 30       	cpi	r24, 0x04	; 4
    8600:	19 f4       	brne	.+6      	; 0x8608 <uart_init+0x2c>
    8602:	20 e8       	ldi	r18, 0x80	; 128
    8604:	31 e0       	ldi	r19, 0x01	; 1
    8606:	0b c0       	rjmp	.+22     	; 0x861e <uart_init+0x42>
    8608:	20 ec       	ldi	r18, 0xC0	; 192
    860a:	30 e0       	ldi	r19, 0x00	; 0
	if(uart_speed == 5) new_ubrr = 96; //19200
    860c:	85 30       	cpi	r24, 0x05	; 5
    860e:	19 f4       	brne	.+6      	; 0x8616 <uart_init+0x3a>
    8610:	20 e6       	ldi	r18, 0x60	; 96
    8612:	30 e0       	ldi	r19, 0x00	; 0
    8614:	04 c0       	rjmp	.+8      	; 0x861e <uart_init+0x42>
	if(uart_speed == 6) new_ubrr = 48; //38400
    8616:	86 30       	cpi	r24, 0x06	; 6
    8618:	11 f4       	brne	.+4      	; 0x861e <uart_init+0x42>
    861a:	20 e3       	ldi	r18, 0x30	; 48
    861c:	30 e0       	ldi	r19, 0x00	; 0

	UCSR0A = (1<<U2X0); //Double the UART transfer rate
    861e:	82 e0       	ldi	r24, 0x02	; 2
    8620:	80 93 c0 00 	sts	0x00C0, r24
	//Slightly more accurate UBRR calculation
	UBRR0L = new_ubrr;
    8624:	20 93 c4 00 	sts	0x00C4, r18
	UBRR0H = new_ubrr >> 8;
    8628:	30 93 c5 00 	sts	0x00C5, r19

#if !USE_SLEEP
    UCSRB = (1 << RXEN) | (1 << TXEN);
#else
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    862c:	88 e9       	ldi	r24, 0x98	; 152
    862e:	80 93 c1 00 	sts	0x00C1, r24
#endif

}
    8632:	08 95       	ret
    8634:	20 e0       	ldi	r18, 0x00	; 0
    8636:	33 e0       	ldi	r19, 0x03	; 3
    8638:	f2 cf       	rjmp	.-28     	; 0x861e <uart_init+0x42>

0000863a <uart_putc>:

void uart_putc(uint8_t c)
{
    863a:	1f 93       	push	r17
    863c:	18 2f       	mov	r17, r24
    if(c == '\n')
    863e:	8a 30       	cpi	r24, 0x0A	; 10
    8640:	19 f4       	brne	.+6      	; 0x8648 <uart_putc+0xe>
        uart_putc('\r');
    8642:	8d e0       	ldi	r24, 0x0D	; 13
    8644:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>

    /* wait until transmit buffer is empty */
    while(!(UCSRA & (1 << UDRE)));
    8648:	80 91 c0 00 	lds	r24, 0x00C0
    864c:	85 ff       	sbrs	r24, 5
    864e:	fc cf       	rjmp	.-8      	; 0x8648 <uart_putc+0xe>

    /* send next byte */
    UDR = c;
    8650:	10 93 c6 00 	sts	0x00C6, r17
}
    8654:	1f 91       	pop	r17
    8656:	08 95       	ret

00008658 <uart_putc_hex>:

void uart_putc_hex(uint8_t b)
{
    8658:	1f 93       	push	r17
    865a:	18 2f       	mov	r17, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
    865c:	82 95       	swap	r24
    865e:	8f 70       	andi	r24, 0x0F	; 15
    8660:	8a 30       	cpi	r24, 0x0A	; 10
    8662:	10 f4       	brcc	.+4      	; 0x8668 <uart_putc_hex+0x10>
        uart_putc((b >> 4) + '0');
    8664:	80 5d       	subi	r24, 0xD0	; 208
    8666:	01 c0       	rjmp	.+2      	; 0x866a <uart_putc_hex+0x12>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
    8668:	89 5a       	subi	r24, 0xA9	; 169
    866a:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
    866e:	81 2f       	mov	r24, r17
    8670:	90 e0       	ldi	r25, 0x00	; 0
    8672:	8f 70       	andi	r24, 0x0F	; 15
    8674:	90 70       	andi	r25, 0x00	; 0
    8676:	21 2f       	mov	r18, r17
    8678:	2f 70       	andi	r18, 0x0F	; 15
    867a:	0a 97       	sbiw	r24, 0x0a	; 10
    867c:	1c f4       	brge	.+6      	; 0x8684 <uart_putc_hex+0x2c>
        uart_putc((b & 0x0f) + '0');
    867e:	82 2f       	mov	r24, r18
    8680:	80 5d       	subi	r24, 0xD0	; 208
    8682:	02 c0       	rjmp	.+4      	; 0x8688 <uart_putc_hex+0x30>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
    8684:	82 2f       	mov	r24, r18
    8686:	89 5a       	subi	r24, 0xA9	; 169
    8688:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
}
    868c:	1f 91       	pop	r17
    868e:	08 95       	ret

00008690 <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
    8690:	1f 93       	push	r17
    8692:	18 2f       	mov	r17, r24
    uart_putc_hex((uint8_t) (w >> 8));
    8694:	89 2f       	mov	r24, r25
    8696:	0e 94 2c 43 	call	0x8658	; 0x8658 <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
    869a:	81 2f       	mov	r24, r17
    869c:	0e 94 2c 43 	call	0x8658	; 0x8658 <uart_putc_hex>
}
    86a0:	1f 91       	pop	r17
    86a2:	08 95       	ret

000086a4 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    86a4:	ef 92       	push	r14
    86a6:	ff 92       	push	r15
    86a8:	0f 93       	push	r16
    86aa:	1f 93       	push	r17
    86ac:	7b 01       	movw	r14, r22
    86ae:	8c 01       	movw	r16, r24
    uart_putw_hex((uint16_t) (dw >> 16));
    86b0:	c8 01       	movw	r24, r16
    86b2:	aa 27       	eor	r26, r26
    86b4:	bb 27       	eor	r27, r27
    86b6:	0e 94 48 43 	call	0x8690	; 0x8690 <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
    86ba:	c7 01       	movw	r24, r14
    86bc:	0e 94 48 43 	call	0x8690	; 0x8690 <uart_putw_hex>
}
    86c0:	1f 91       	pop	r17
    86c2:	0f 91       	pop	r16
    86c4:	ff 90       	pop	r15
    86c6:	ef 90       	pop	r14
    86c8:	08 95       	ret

000086ca <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    86ca:	cf 92       	push	r12
    86cc:	df 92       	push	r13
    86ce:	ff 92       	push	r15
    86d0:	0f 93       	push	r16
    86d2:	1f 93       	push	r17
    86d4:	cf 93       	push	r28
    86d6:	df 93       	push	r29
    86d8:	6c 01       	movw	r12, r24
    86da:	c0 e1       	ldi	r28, 0x10	; 16
    86dc:	d7 e2       	ldi	r29, 0x27	; 39
    86de:	40 e0       	ldi	r20, 0x00	; 0
    86e0:	00 e0       	ldi	r16, 0x00	; 0
    86e2:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
    86e4:	c6 01       	movw	r24, r12
    86e6:	be 01       	movw	r22, r28
    86e8:	0e 94 9d 49 	call	0x933a	; 0x933a <__udivmodhi4>
    86ec:	f6 2e       	mov	r15, r22
        if(b > 0 || started || num == 1)
    86ee:	66 23       	and	r22, r22
    86f0:	29 f4       	brne	.+10     	; 0x86fc <uart_putw_dec+0x32>
    86f2:	44 23       	and	r20, r20
    86f4:	19 f4       	brne	.+6      	; 0x86fc <uart_putw_dec+0x32>
    86f6:	c1 30       	cpi	r28, 0x01	; 1
    86f8:	d1 05       	cpc	r29, r1
    86fa:	29 f4       	brne	.+10     	; 0x8706 <uart_putw_dec+0x3c>
        {
            uart_putc('0' + b);
    86fc:	8f 2d       	mov	r24, r15
    86fe:	80 5d       	subi	r24, 0xD0	; 208
    8700:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    8704:	41 e0       	ldi	r20, 0x01	; 1
            started = 1;
        }
        w -= b * num;

        num /= 10;
    8706:	ce 01       	movw	r24, r28
    8708:	6a e0       	ldi	r22, 0x0A	; 10
    870a:	70 e0       	ldi	r23, 0x00	; 0
    870c:	0e 94 9d 49 	call	0x933a	; 0x933a <__udivmodhi4>
    8710:	0f 5f       	subi	r16, 0xFF	; 255
    8712:	1f 4f       	sbci	r17, 0xFF	; 255
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    8714:	05 30       	cpi	r16, 0x05	; 5
    8716:	11 05       	cpc	r17, r1
    8718:	71 f0       	breq	.+28     	; 0x8736 <uart_putw_dec+0x6c>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;
    871a:	8f 2d       	mov	r24, r15
    871c:	90 e0       	ldi	r25, 0x00	; 0
    871e:	9c 01       	movw	r18, r24
    8720:	2c 9f       	mul	r18, r28
    8722:	c0 01       	movw	r24, r0
    8724:	2d 9f       	mul	r18, r29
    8726:	90 0d       	add	r25, r0
    8728:	3c 9f       	mul	r19, r28
    872a:	90 0d       	add	r25, r0
    872c:	11 24       	eor	r1, r1
    872e:	c8 1a       	sub	r12, r24
    8730:	d9 0a       	sbc	r13, r25
    8732:	eb 01       	movw	r28, r22
    8734:	d7 cf       	rjmp	.-82     	; 0x86e4 <uart_putw_dec+0x1a>

        num /= 10;
    }
}
    8736:	df 91       	pop	r29
    8738:	cf 91       	pop	r28
    873a:	1f 91       	pop	r17
    873c:	0f 91       	pop	r16
    873e:	ff 90       	pop	r15
    8740:	df 90       	pop	r13
    8742:	cf 90       	pop	r12
    8744:	08 95       	ret

00008746 <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    8746:	4f 92       	push	r4
    8748:	5f 92       	push	r5
    874a:	6f 92       	push	r6
    874c:	7f 92       	push	r7
    874e:	8f 92       	push	r8
    8750:	9f 92       	push	r9
    8752:	af 92       	push	r10
    8754:	bf 92       	push	r11
    8756:	cf 92       	push	r12
    8758:	df 92       	push	r13
    875a:	ef 92       	push	r14
    875c:	ff 92       	push	r15
    875e:	0f 93       	push	r16
    8760:	1f 93       	push	r17
    8762:	cf 93       	push	r28
    8764:	df 93       	push	r29
    8766:	5b 01       	movw	r10, r22
    8768:	6c 01       	movw	r12, r24
    876a:	e1 2c       	mov	r14, r1
    876c:	9a ec       	ldi	r25, 0xCA	; 202
    876e:	f9 2e       	mov	r15, r25
    8770:	9a e9       	ldi	r25, 0x9A	; 154
    8772:	09 2f       	mov	r16, r25
    8774:	9b e3       	ldi	r25, 0x3B	; 59
    8776:	19 2f       	mov	r17, r25
    8778:	44 24       	eor	r4, r4
    877a:	c0 e0       	ldi	r28, 0x00	; 0
    877c:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
    877e:	c6 01       	movw	r24, r12
    8780:	b5 01       	movw	r22, r10
    8782:	a8 01       	movw	r20, r16
    8784:	97 01       	movw	r18, r14
    8786:	0e 94 c4 49 	call	0x9388	; 0x9388 <__udivmodsi4>
    878a:	92 2e       	mov	r9, r18
        if(b > 0 || started || num == 1)
    878c:	22 23       	and	r18, r18
    878e:	41 f4       	brne	.+16     	; 0x87a0 <uart_putdw_dec+0x5a>
    8790:	44 20       	and	r4, r4
    8792:	31 f4       	brne	.+12     	; 0x87a0 <uart_putdw_dec+0x5a>
    8794:	81 e0       	ldi	r24, 0x01	; 1
    8796:	e8 16       	cp	r14, r24
    8798:	f1 04       	cpc	r15, r1
    879a:	01 05       	cpc	r16, r1
    879c:	11 05       	cpc	r17, r1
    879e:	31 f4       	brne	.+12     	; 0x87ac <uart_putdw_dec+0x66>
        {
            uart_putc('0' + b);
    87a0:	89 2d       	mov	r24, r9
    87a2:	80 5d       	subi	r24, 0xD0	; 208
    87a4:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    87a8:	44 24       	eor	r4, r4
    87aa:	43 94       	inc	r4
            started = 1;
        }
        dw -= b * num;

        num /= 10;
    87ac:	c8 01       	movw	r24, r16
    87ae:	b7 01       	movw	r22, r14
    87b0:	2a e0       	ldi	r18, 0x0A	; 10
    87b2:	30 e0       	ldi	r19, 0x00	; 0
    87b4:	40 e0       	ldi	r20, 0x00	; 0
    87b6:	50 e0       	ldi	r21, 0x00	; 0
    87b8:	0e 94 c4 49 	call	0x9388	; 0x9388 <__udivmodsi4>
    87bc:	82 2e       	mov	r8, r18
    87be:	73 2e       	mov	r7, r19
    87c0:	64 2e       	mov	r6, r20
    87c2:	55 2e       	mov	r5, r21
    87c4:	21 96       	adiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    87c6:	ca 30       	cpi	r28, 0x0A	; 10
    87c8:	d1 05       	cpc	r29, r1
    87ca:	a9 f0       	breq	.+42     	; 0x87f6 <uart_putdw_dec+0xb0>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;
    87cc:	69 2d       	mov	r22, r9
    87ce:	70 e0       	ldi	r23, 0x00	; 0
    87d0:	80 e0       	ldi	r24, 0x00	; 0
    87d2:	90 e0       	ldi	r25, 0x00	; 0
    87d4:	a8 01       	movw	r20, r16
    87d6:	97 01       	movw	r18, r14
    87d8:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    87dc:	a6 1a       	sub	r10, r22
    87de:	b7 0a       	sbc	r11, r23
    87e0:	c8 0a       	sbc	r12, r24
    87e2:	d9 0a       	sbc	r13, r25
    87e4:	28 2d       	mov	r18, r8
    87e6:	37 2d       	mov	r19, r7
    87e8:	46 2d       	mov	r20, r6
    87ea:	55 2d       	mov	r21, r5
    87ec:	c9 01       	movw	r24, r18
    87ee:	da 01       	movw	r26, r20
    87f0:	7c 01       	movw	r14, r24
    87f2:	8d 01       	movw	r16, r26
    87f4:	c4 cf       	rjmp	.-120    	; 0x877e <uart_putdw_dec+0x38>

        num /= 10;
    }
}
    87f6:	df 91       	pop	r29
    87f8:	cf 91       	pop	r28
    87fa:	1f 91       	pop	r17
    87fc:	0f 91       	pop	r16
    87fe:	ff 90       	pop	r15
    8800:	ef 90       	pop	r14
    8802:	df 90       	pop	r13
    8804:	cf 90       	pop	r12
    8806:	bf 90       	pop	r11
    8808:	af 90       	pop	r10
    880a:	9f 90       	pop	r9
    880c:	8f 90       	pop	r8
    880e:	7f 90       	pop	r7
    8810:	6f 90       	pop	r6
    8812:	5f 90       	pop	r5
    8814:	4f 90       	pop	r4
    8816:	08 95       	ret

00008818 <uart_puts>:

void uart_puts(const char* str)
{
    8818:	cf 93       	push	r28
    881a:	df 93       	push	r29
    881c:	ec 01       	movw	r28, r24
    881e:	03 c0       	rjmp	.+6      	; 0x8826 <uart_puts+0xe>
    while(*str)
        uart_putc(*str++);
    8820:	21 96       	adiw	r28, 0x01	; 1
    8822:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    }
}

void uart_puts(const char* str)
{
    while(*str)
    8826:	88 81       	ld	r24, Y
    8828:	88 23       	and	r24, r24
    882a:	d1 f7       	brne	.-12     	; 0x8820 <uart_puts+0x8>
        uart_putc(*str++);
}
    882c:	df 91       	pop	r29
    882e:	cf 91       	pop	r28
    8830:	08 95       	ret

00008832 <uart_puts_p>:

void uart_puts_p(PGM_P str)
{
    8832:	cf 93       	push	r28
    8834:	df 93       	push	r29
    8836:	ec 01       	movw	r28, r24
    8838:	fe 01       	movw	r30, r28
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
    883a:	21 96       	adiw	r28, 0x01	; 1
    883c:	84 91       	lpm	r24, Z+
        if(!b)
    883e:	88 23       	and	r24, r24
    8840:	19 f0       	breq	.+6      	; 0x8848 <uart_puts_p+0x16>
            break;

        uart_putc(b);
    8842:	0e 94 1d 43 	call	0x863a	; 0x863a <uart_putc>
    8846:	f8 cf       	rjmp	.-16     	; 0x8838 <uart_puts_p+0x6>
    }
}
    8848:	df 91       	pop	r29
    884a:	cf 91       	pop	r28
    884c:	08 95       	ret

0000884e <uart_getc>:
{
    /* wait until receive buffer is full */
#if USE_SLEEP

	//During append file, we are disabling the RX interrupt, so we need to bring it back
	UCSR0B |= (1<<RXCIE0); //Enable receive interrupts
    884e:	80 91 c1 00 	lds	r24, 0x00C1
    8852:	80 68       	ori	r24, 0x80	; 128
    8854:	80 93 c1 00 	sts	0x00C1, r24

  sei();
    8858:	78 94       	sei
	sleep_mode();
    885a:	83 b7       	in	r24, 0x33	; 51
    885c:	81 60       	ori	r24, 0x01	; 1
    885e:	83 bf       	out	0x33, r24	; 51
    8860:	88 95       	sleep
    8862:	83 b7       	in	r24, 0x33	; 51
    8864:	8e 7f       	andi	r24, 0xFE	; 254
    8866:	83 bf       	out	0x33, r24	; 51
	cli();
    8868:	f8 94       	cli
	
	//Now that we've woken up, we assume that the UART ISR has done its job and loaded UDR into the buffer
	//We need to look at the last used spot in the buffer which is read_spot - 1
	char b;
	if(read_spot == 0)
    886a:	80 91 bd 04 	lds	r24, 0x04BD
    886e:	90 91 be 04 	lds	r25, 0x04BE
    8872:	89 2b       	or	r24, r25
    8874:	19 f4       	brne	.+6      	; 0x887c <uart_getc+0x2e>
		b = input_buffer[sizeof(input_buffer) - 1];
    8876:	80 91 c4 08 	lds	r24, 0x08C4
    887a:	07 c0       	rjmp	.+14     	; 0x888a <uart_getc+0x3c>
	else
		b = input_buffer[read_spot - 1];
    887c:	e0 91 bd 04 	lds	r30, 0x04BD
    8880:	f0 91 be 04 	lds	r31, 0x04BE
    8884:	ec 53       	subi	r30, 0x3C	; 60
    8886:	fb 4f       	sbci	r31, 0xFB	; 251
    8888:	80 81       	ld	r24, Z

    if(b == '\r')
    888a:	8d 30       	cpi	r24, 0x0D	; 13
    888c:	09 f4       	brne	.+2      	; 0x8890 <uart_getc+0x42>
    888e:	8a e0       	ldi	r24, 0x0A	; 10
        b = '\n';

    return b;
#endif

}
    8890:	08 95       	ret

00008892 <__muldi3>:
    8892:	a0 e3       	ldi	r26, 0x30	; 48
    8894:	b0 e0       	ldi	r27, 0x00	; 0
    8896:	ef e4       	ldi	r30, 0x4F	; 79
    8898:	f4 e4       	ldi	r31, 0x44	; 68
    889a:	0c 94 e6 49 	jmp	0x93cc	; 0x93cc <__prologue_saves__>
    889e:	a8 e0       	ldi	r26, 0x08	; 8
    88a0:	4e 01       	movw	r8, r28
    88a2:	08 94       	sec
    88a4:	81 1c       	adc	r8, r1
    88a6:	91 1c       	adc	r9, r1
    88a8:	f4 01       	movw	r30, r8
    88aa:	ba 2f       	mov	r27, r26
    88ac:	11 92       	st	Z+, r1
    88ae:	ba 95       	dec	r27
    88b0:	e9 f7       	brne	.-6      	; 0x88ac <__muldi3+0x1a>
    88b2:	29 83       	std	Y+1, r18	; 0x01
    88b4:	3a 83       	std	Y+2, r19	; 0x02
    88b6:	4b 83       	std	Y+3, r20	; 0x03
    88b8:	5c 83       	std	Y+4, r21	; 0x04
    88ba:	6d 83       	std	Y+5, r22	; 0x05
    88bc:	7e 83       	std	Y+6, r23	; 0x06
    88be:	8f 83       	std	Y+7, r24	; 0x07
    88c0:	98 87       	std	Y+8, r25	; 0x08
    88c2:	ce 01       	movw	r24, r28
    88c4:	09 96       	adiw	r24, 0x09	; 9
    88c6:	fc 01       	movw	r30, r24
    88c8:	11 92       	st	Z+, r1
    88ca:	aa 95       	dec	r26
    88cc:	e9 f7       	brne	.-6      	; 0x88c8 <__muldi3+0x36>
    88ce:	a9 86       	std	Y+9, r10	; 0x09
    88d0:	ba 86       	std	Y+10, r11	; 0x0a
    88d2:	cb 86       	std	Y+11, r12	; 0x0b
    88d4:	dc 86       	std	Y+12, r13	; 0x0c
    88d6:	ed 86       	std	Y+13, r14	; 0x0d
    88d8:	fe 86       	std	Y+14, r15	; 0x0e
    88da:	0f 87       	std	Y+15, r16	; 0x0f
    88dc:	18 8b       	std	Y+16, r17	; 0x10
    88de:	29 81       	ldd	r18, Y+1	; 0x01
    88e0:	3a 81       	ldd	r19, Y+2	; 0x02
    88e2:	4b 81       	ldd	r20, Y+3	; 0x03
    88e4:	5c 81       	ldd	r21, Y+4	; 0x04
    88e6:	2d a7       	std	Y+45, r18	; 0x2d
    88e8:	3e a7       	std	Y+46, r19	; 0x2e
    88ea:	4f a7       	std	Y+47, r20	; 0x2f
    88ec:	58 ab       	std	Y+48, r21	; 0x30
    88ee:	79 01       	movw	r14, r18
    88f0:	8a 01       	movw	r16, r20
    88f2:	8f ef       	ldi	r24, 0xFF	; 255
    88f4:	9f ef       	ldi	r25, 0xFF	; 255
    88f6:	a0 e0       	ldi	r26, 0x00	; 0
    88f8:	b0 e0       	ldi	r27, 0x00	; 0
    88fa:	e8 22       	and	r14, r24
    88fc:	f9 22       	and	r15, r25
    88fe:	0a 23       	and	r16, r26
    8900:	1b 23       	and	r17, r27
    8902:	1a 01       	movw	r2, r20
    8904:	44 24       	eor	r4, r4
    8906:	55 24       	eor	r5, r5
    8908:	29 85       	ldd	r18, Y+9	; 0x09
    890a:	3a 85       	ldd	r19, Y+10	; 0x0a
    890c:	4b 85       	ldd	r20, Y+11	; 0x0b
    890e:	5c 85       	ldd	r21, Y+12	; 0x0c
    8910:	29 a7       	std	Y+41, r18	; 0x29
    8912:	3a a7       	std	Y+42, r19	; 0x2a
    8914:	4b a7       	std	Y+43, r20	; 0x2b
    8916:	5c a7       	std	Y+44, r21	; 0x2c
    8918:	59 01       	movw	r10, r18
    891a:	6a 01       	movw	r12, r20
    891c:	a8 22       	and	r10, r24
    891e:	b9 22       	and	r11, r25
    8920:	ca 22       	and	r12, r26
    8922:	db 22       	and	r13, r27
    8924:	3a 01       	movw	r6, r20
    8926:	88 24       	eor	r8, r8
    8928:	99 24       	eor	r9, r9
    892a:	c6 01       	movw	r24, r12
    892c:	b5 01       	movw	r22, r10
    892e:	a8 01       	movw	r20, r16
    8930:	97 01       	movw	r18, r14
    8932:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    8936:	6d a3       	std	Y+37, r22	; 0x25
    8938:	7e a3       	std	Y+38, r23	; 0x26
    893a:	8f a3       	std	Y+39, r24	; 0x27
    893c:	98 a7       	std	Y+40, r25	; 0x28
    893e:	c4 01       	movw	r24, r8
    8940:	b3 01       	movw	r22, r6
    8942:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    8946:	69 a3       	std	Y+33, r22	; 0x21
    8948:	7a a3       	std	Y+34, r23	; 0x22
    894a:	8b a3       	std	Y+35, r24	; 0x23
    894c:	9c a3       	std	Y+36, r25	; 0x24
    894e:	c6 01       	movw	r24, r12
    8950:	b5 01       	movw	r22, r10
    8952:	a2 01       	movw	r20, r4
    8954:	91 01       	movw	r18, r2
    8956:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    895a:	7b 01       	movw	r14, r22
    895c:	8c 01       	movw	r16, r24
    895e:	c4 01       	movw	r24, r8
    8960:	b3 01       	movw	r22, r6
    8962:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    8966:	5b 01       	movw	r10, r22
    8968:	6c 01       	movw	r12, r24
    896a:	89 a1       	ldd	r24, Y+33	; 0x21
    896c:	9a a1       	ldd	r25, Y+34	; 0x22
    896e:	ab a1       	ldd	r26, Y+35	; 0x23
    8970:	bc a1       	ldd	r27, Y+36	; 0x24
    8972:	8e 0d       	add	r24, r14
    8974:	9f 1d       	adc	r25, r15
    8976:	a0 1f       	adc	r26, r16
    8978:	b1 1f       	adc	r27, r17
    897a:	89 a3       	std	Y+33, r24	; 0x21
    897c:	9a a3       	std	Y+34, r25	; 0x22
    897e:	ab a3       	std	Y+35, r26	; 0x23
    8980:	bc a3       	std	Y+36, r27	; 0x24
    8982:	2d a1       	ldd	r18, Y+37	; 0x25
    8984:	3e a1       	ldd	r19, Y+38	; 0x26
    8986:	4f a1       	ldd	r20, Y+39	; 0x27
    8988:	58 a5       	ldd	r21, Y+40	; 0x28
    898a:	ca 01       	movw	r24, r20
    898c:	aa 27       	eor	r26, r26
    898e:	bb 27       	eor	r27, r27
    8990:	29 a1       	ldd	r18, Y+33	; 0x21
    8992:	3a a1       	ldd	r19, Y+34	; 0x22
    8994:	4b a1       	ldd	r20, Y+35	; 0x23
    8996:	5c a1       	ldd	r21, Y+36	; 0x24
    8998:	28 0f       	add	r18, r24
    899a:	39 1f       	adc	r19, r25
    899c:	4a 1f       	adc	r20, r26
    899e:	5b 1f       	adc	r21, r27
    89a0:	29 a3       	std	Y+33, r18	; 0x21
    89a2:	3a a3       	std	Y+34, r19	; 0x22
    89a4:	4b a3       	std	Y+35, r20	; 0x23
    89a6:	5c a3       	std	Y+36, r21	; 0x24
    89a8:	2e 15       	cp	r18, r14
    89aa:	3f 05       	cpc	r19, r15
    89ac:	40 07       	cpc	r20, r16
    89ae:	51 07       	cpc	r21, r17
    89b0:	40 f4       	brcc	.+16     	; 0x89c2 <__muldi3+0x130>
    89b2:	80 e0       	ldi	r24, 0x00	; 0
    89b4:	90 e0       	ldi	r25, 0x00	; 0
    89b6:	a1 e0       	ldi	r26, 0x01	; 1
    89b8:	b0 e0       	ldi	r27, 0x00	; 0
    89ba:	a8 0e       	add	r10, r24
    89bc:	b9 1e       	adc	r11, r25
    89be:	ca 1e       	adc	r12, r26
    89c0:	db 1e       	adc	r13, r27
    89c2:	89 a1       	ldd	r24, Y+33	; 0x21
    89c4:	9a a1       	ldd	r25, Y+34	; 0x22
    89c6:	ab a1       	ldd	r26, Y+35	; 0x23
    89c8:	bc a1       	ldd	r27, Y+36	; 0x24
    89ca:	9d 01       	movw	r18, r26
    89cc:	44 27       	eor	r20, r20
    89ce:	55 27       	eor	r21, r21
    89d0:	2a 0d       	add	r18, r10
    89d2:	3b 1d       	adc	r19, r11
    89d4:	4c 1d       	adc	r20, r12
    89d6:	5d 1d       	adc	r21, r13
    89d8:	2d 8f       	std	Y+29, r18	; 0x1d
    89da:	3e 8f       	std	Y+30, r19	; 0x1e
    89dc:	4f 8f       	std	Y+31, r20	; 0x1f
    89de:	58 a3       	std	Y+32, r21	; 0x20
    89e0:	6c 01       	movw	r12, r24
    89e2:	bb 24       	eor	r11, r11
    89e4:	aa 24       	eor	r10, r10
    89e6:	8d a1       	ldd	r24, Y+37	; 0x25
    89e8:	9e a1       	ldd	r25, Y+38	; 0x26
    89ea:	af a1       	ldd	r26, Y+39	; 0x27
    89ec:	b8 a5       	ldd	r27, Y+40	; 0x28
    89ee:	a0 70       	andi	r26, 0x00	; 0
    89f0:	b0 70       	andi	r27, 0x00	; 0
    89f2:	a8 0e       	add	r10, r24
    89f4:	b9 1e       	adc	r11, r25
    89f6:	ca 1e       	adc	r12, r26
    89f8:	db 1e       	adc	r13, r27
    89fa:	a9 8e       	std	Y+25, r10	; 0x19
    89fc:	ba 8e       	std	Y+26, r11	; 0x1a
    89fe:	cb 8e       	std	Y+27, r12	; 0x1b
    8a00:	dc 8e       	std	Y+28, r13	; 0x1c
    8a02:	9a 8c       	ldd	r9, Y+26	; 0x1a
    8a04:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8a06:	7c 8c       	ldd	r7, Y+28	; 0x1c
    8a08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8a0a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    8a0c:	78 a1       	ldd	r23, Y+32	; 0x20
    8a0e:	fe 01       	movw	r30, r28
    8a10:	71 96       	adiw	r30, 0x11	; 17
    8a12:	88 e0       	ldi	r24, 0x08	; 8
    8a14:	df 01       	movw	r26, r30
    8a16:	1d 92       	st	X+, r1
    8a18:	8a 95       	dec	r24
    8a1a:	e9 f7       	brne	.-6      	; 0x8a16 <__muldi3+0x184>
    8a1c:	2d 8b       	std	Y+21, r18	; 0x15
    8a1e:	9e 8b       	std	Y+22, r25	; 0x16
    8a20:	6f 8b       	std	Y+23, r22	; 0x17
    8a22:	78 8f       	std	Y+24, r23	; 0x18
    8a24:	2d 85       	ldd	r18, Y+13	; 0x0d
    8a26:	3e 85       	ldd	r19, Y+14	; 0x0e
    8a28:	4f 85       	ldd	r20, Y+15	; 0x0f
    8a2a:	58 89       	ldd	r21, Y+16	; 0x10
    8a2c:	6d a5       	ldd	r22, Y+45	; 0x2d
    8a2e:	7e a5       	ldd	r23, Y+46	; 0x2e
    8a30:	8f a5       	ldd	r24, Y+47	; 0x2f
    8a32:	98 a9       	ldd	r25, Y+48	; 0x30
    8a34:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    8a38:	7b 01       	movw	r14, r22
    8a3a:	8c 01       	movw	r16, r24
    8a3c:	2d 81       	ldd	r18, Y+5	; 0x05
    8a3e:	3e 81       	ldd	r19, Y+6	; 0x06
    8a40:	4f 81       	ldd	r20, Y+7	; 0x07
    8a42:	58 85       	ldd	r21, Y+8	; 0x08
    8a44:	69 a5       	ldd	r22, Y+41	; 0x29
    8a46:	7a a5       	ldd	r23, Y+42	; 0x2a
    8a48:	8b a5       	ldd	r24, Y+43	; 0x2b
    8a4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    8a4c:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__mulsi3>
    8a50:	e6 0e       	add	r14, r22
    8a52:	f7 1e       	adc	r15, r23
    8a54:	08 1f       	adc	r16, r24
    8a56:	19 1f       	adc	r17, r25
    8a58:	6d 89       	ldd	r22, Y+21	; 0x15
    8a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    8a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    8a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    8a60:	6e 0d       	add	r22, r14
    8a62:	7f 1d       	adc	r23, r15
    8a64:	80 1f       	adc	r24, r16
    8a66:	91 1f       	adc	r25, r17
    8a68:	6d 8b       	std	Y+21, r22	; 0x15
    8a6a:	7e 8b       	std	Y+22, r23	; 0x16
    8a6c:	8f 8b       	std	Y+23, r24	; 0x17
    8a6e:	98 8f       	std	Y+24, r25	; 0x18
    8a70:	ee 89       	ldd	r30, Y+22	; 0x16
    8a72:	2a 2d       	mov	r18, r10
    8a74:	39 2d       	mov	r19, r9
    8a76:	48 2d       	mov	r20, r8
    8a78:	57 2d       	mov	r21, r7
    8a7a:	7e 2f       	mov	r23, r30
    8a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    8a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    8a80:	e0 96       	adiw	r28, 0x30	; 48
    8a82:	e2 e1       	ldi	r30, 0x12	; 18
    8a84:	0c 94 02 4a 	jmp	0x9404	; 0x9404 <__epilogue_restores__>

00008a88 <__lshrdi3>:
    8a88:	ef 92       	push	r14
    8a8a:	ff 92       	push	r15
    8a8c:	0f 93       	push	r16
    8a8e:	df 93       	push	r29
    8a90:	cf 93       	push	r28
    8a92:	cd b7       	in	r28, 0x3d	; 61
    8a94:	de b7       	in	r29, 0x3e	; 62
    8a96:	60 97       	sbiw	r28, 0x10	; 16
    8a98:	0f b6       	in	r0, 0x3f	; 63
    8a9a:	f8 94       	cli
    8a9c:	de bf       	out	0x3e, r29	; 62
    8a9e:	0f be       	out	0x3f, r0	; 63
    8aa0:	cd bf       	out	0x3d, r28	; 61
    8aa2:	a8 2f       	mov	r26, r24
    8aa4:	00 23       	and	r16, r16
    8aa6:	09 f4       	brne	.+2      	; 0x8aaa <__lshrdi3+0x22>
    8aa8:	61 c0       	rjmp	.+194    	; 0x8b6c <__lshrdi3+0xe4>
    8aaa:	7e 01       	movw	r14, r28
    8aac:	08 94       	sec
    8aae:	e1 1c       	adc	r14, r1
    8ab0:	f1 1c       	adc	r15, r1
    8ab2:	88 e0       	ldi	r24, 0x08	; 8
    8ab4:	f7 01       	movw	r30, r14
    8ab6:	11 92       	st	Z+, r1
    8ab8:	8a 95       	dec	r24
    8aba:	e9 f7       	brne	.-6      	; 0x8ab6 <__lshrdi3+0x2e>
    8abc:	29 83       	std	Y+1, r18	; 0x01
    8abe:	3a 83       	std	Y+2, r19	; 0x02
    8ac0:	4b 83       	std	Y+3, r20	; 0x03
    8ac2:	5c 83       	std	Y+4, r21	; 0x04
    8ac4:	6d 83       	std	Y+5, r22	; 0x05
    8ac6:	7e 83       	std	Y+6, r23	; 0x06
    8ac8:	af 83       	std	Y+7, r26	; 0x07
    8aca:	98 87       	std	Y+8, r25	; 0x08
    8acc:	80 e2       	ldi	r24, 0x20	; 32
    8ace:	80 1b       	sub	r24, r16
    8ad0:	e8 2f       	mov	r30, r24
    8ad2:	ff 27       	eor	r31, r31
    8ad4:	e7 fd       	sbrc	r30, 7
    8ad6:	f0 95       	com	r31
    8ad8:	4d 81       	ldd	r20, Y+5	; 0x05
    8ada:	5e 81       	ldd	r21, Y+6	; 0x06
    8adc:	6f 81       	ldd	r22, Y+7	; 0x07
    8ade:	78 85       	ldd	r23, Y+8	; 0x08
    8ae0:	18 16       	cp	r1, r24
    8ae2:	84 f0       	brlt	.+32     	; 0x8b04 <__lshrdi3+0x7c>
    8ae4:	1d 86       	std	Y+13, r1	; 0x0d
    8ae6:	1e 86       	std	Y+14, r1	; 0x0e
    8ae8:	1f 86       	std	Y+15, r1	; 0x0f
    8aea:	18 8a       	std	Y+16, r1	; 0x10
    8aec:	88 27       	eor	r24, r24
    8aee:	99 27       	eor	r25, r25
    8af0:	8e 1b       	sub	r24, r30
    8af2:	9f 0b       	sbc	r25, r31
    8af4:	04 c0       	rjmp	.+8      	; 0x8afe <__lshrdi3+0x76>
    8af6:	76 95       	lsr	r23
    8af8:	67 95       	ror	r22
    8afa:	57 95       	ror	r21
    8afc:	47 95       	ror	r20
    8afe:	8a 95       	dec	r24
    8b00:	d2 f7       	brpl	.-12     	; 0x8af6 <__lshrdi3+0x6e>
    8b02:	28 c0       	rjmp	.+80     	; 0x8b54 <__lshrdi3+0xcc>
    8b04:	20 2f       	mov	r18, r16
    8b06:	33 27       	eor	r19, r19
    8b08:	27 fd       	sbrc	r18, 7
    8b0a:	30 95       	com	r19
    8b0c:	db 01       	movw	r26, r22
    8b0e:	ca 01       	movw	r24, r20
    8b10:	02 2e       	mov	r0, r18
    8b12:	04 c0       	rjmp	.+8      	; 0x8b1c <__lshrdi3+0x94>
    8b14:	b6 95       	lsr	r27
    8b16:	a7 95       	ror	r26
    8b18:	97 95       	ror	r25
    8b1a:	87 95       	ror	r24
    8b1c:	0a 94       	dec	r0
    8b1e:	d2 f7       	brpl	.-12     	; 0x8b14 <__lshrdi3+0x8c>
    8b20:	8d 87       	std	Y+13, r24	; 0x0d
    8b22:	9e 87       	std	Y+14, r25	; 0x0e
    8b24:	af 87       	std	Y+15, r26	; 0x0f
    8b26:	b8 8b       	std	Y+16, r27	; 0x10
    8b28:	04 c0       	rjmp	.+8      	; 0x8b32 <__lshrdi3+0xaa>
    8b2a:	44 0f       	add	r20, r20
    8b2c:	55 1f       	adc	r21, r21
    8b2e:	66 1f       	adc	r22, r22
    8b30:	77 1f       	adc	r23, r23
    8b32:	ea 95       	dec	r30
    8b34:	d2 f7       	brpl	.-12     	; 0x8b2a <__lshrdi3+0xa2>
    8b36:	89 81       	ldd	r24, Y+1	; 0x01
    8b38:	9a 81       	ldd	r25, Y+2	; 0x02
    8b3a:	ab 81       	ldd	r26, Y+3	; 0x03
    8b3c:	bc 81       	ldd	r27, Y+4	; 0x04
    8b3e:	04 c0       	rjmp	.+8      	; 0x8b48 <__lshrdi3+0xc0>
    8b40:	b6 95       	lsr	r27
    8b42:	a7 95       	ror	r26
    8b44:	97 95       	ror	r25
    8b46:	87 95       	ror	r24
    8b48:	2a 95       	dec	r18
    8b4a:	d2 f7       	brpl	.-12     	; 0x8b40 <__lshrdi3+0xb8>
    8b4c:	48 2b       	or	r20, r24
    8b4e:	59 2b       	or	r21, r25
    8b50:	6a 2b       	or	r22, r26
    8b52:	7b 2b       	or	r23, r27
    8b54:	49 87       	std	Y+9, r20	; 0x09
    8b56:	5a 87       	std	Y+10, r21	; 0x0a
    8b58:	6b 87       	std	Y+11, r22	; 0x0b
    8b5a:	7c 87       	std	Y+12, r23	; 0x0c
    8b5c:	29 85       	ldd	r18, Y+9	; 0x09
    8b5e:	3a 85       	ldd	r19, Y+10	; 0x0a
    8b60:	4b 85       	ldd	r20, Y+11	; 0x0b
    8b62:	5c 85       	ldd	r21, Y+12	; 0x0c
    8b64:	6d 85       	ldd	r22, Y+13	; 0x0d
    8b66:	7e 85       	ldd	r23, Y+14	; 0x0e
    8b68:	af 85       	ldd	r26, Y+15	; 0x0f
    8b6a:	98 89       	ldd	r25, Y+16	; 0x10
    8b6c:	8a 2f       	mov	r24, r26
    8b6e:	60 96       	adiw	r28, 0x10	; 16
    8b70:	0f b6       	in	r0, 0x3f	; 63
    8b72:	f8 94       	cli
    8b74:	de bf       	out	0x3e, r29	; 62
    8b76:	0f be       	out	0x3f, r0	; 63
    8b78:	cd bf       	out	0x3d, r28	; 61
    8b7a:	cf 91       	pop	r28
    8b7c:	df 91       	pop	r29
    8b7e:	0f 91       	pop	r16
    8b80:	ff 90       	pop	r15
    8b82:	ef 90       	pop	r14
    8b84:	08 95       	ret

00008b86 <__ashldi3>:
    8b86:	ef 92       	push	r14
    8b88:	ff 92       	push	r15
    8b8a:	0f 93       	push	r16
    8b8c:	df 93       	push	r29
    8b8e:	cf 93       	push	r28
    8b90:	cd b7       	in	r28, 0x3d	; 61
    8b92:	de b7       	in	r29, 0x3e	; 62
    8b94:	60 97       	sbiw	r28, 0x10	; 16
    8b96:	0f b6       	in	r0, 0x3f	; 63
    8b98:	f8 94       	cli
    8b9a:	de bf       	out	0x3e, r29	; 62
    8b9c:	0f be       	out	0x3f, r0	; 63
    8b9e:	cd bf       	out	0x3d, r28	; 61
    8ba0:	a8 2f       	mov	r26, r24
    8ba2:	00 23       	and	r16, r16
    8ba4:	09 f4       	brne	.+2      	; 0x8ba8 <__ashldi3+0x22>
    8ba6:	61 c0       	rjmp	.+194    	; 0x8c6a <__ashldi3+0xe4>
    8ba8:	7e 01       	movw	r14, r28
    8baa:	08 94       	sec
    8bac:	e1 1c       	adc	r14, r1
    8bae:	f1 1c       	adc	r15, r1
    8bb0:	88 e0       	ldi	r24, 0x08	; 8
    8bb2:	f7 01       	movw	r30, r14
    8bb4:	11 92       	st	Z+, r1
    8bb6:	8a 95       	dec	r24
    8bb8:	e9 f7       	brne	.-6      	; 0x8bb4 <__ashldi3+0x2e>
    8bba:	29 83       	std	Y+1, r18	; 0x01
    8bbc:	3a 83       	std	Y+2, r19	; 0x02
    8bbe:	4b 83       	std	Y+3, r20	; 0x03
    8bc0:	5c 83       	std	Y+4, r21	; 0x04
    8bc2:	6d 83       	std	Y+5, r22	; 0x05
    8bc4:	7e 83       	std	Y+6, r23	; 0x06
    8bc6:	af 83       	std	Y+7, r26	; 0x07
    8bc8:	98 87       	std	Y+8, r25	; 0x08
    8bca:	80 e2       	ldi	r24, 0x20	; 32
    8bcc:	80 1b       	sub	r24, r16
    8bce:	e8 2f       	mov	r30, r24
    8bd0:	ff 27       	eor	r31, r31
    8bd2:	e7 fd       	sbrc	r30, 7
    8bd4:	f0 95       	com	r31
    8bd6:	49 81       	ldd	r20, Y+1	; 0x01
    8bd8:	5a 81       	ldd	r21, Y+2	; 0x02
    8bda:	6b 81       	ldd	r22, Y+3	; 0x03
    8bdc:	7c 81       	ldd	r23, Y+4	; 0x04
    8bde:	18 16       	cp	r1, r24
    8be0:	84 f0       	brlt	.+32     	; 0x8c02 <__ashldi3+0x7c>
    8be2:	19 86       	std	Y+9, r1	; 0x09
    8be4:	1a 86       	std	Y+10, r1	; 0x0a
    8be6:	1b 86       	std	Y+11, r1	; 0x0b
    8be8:	1c 86       	std	Y+12, r1	; 0x0c
    8bea:	88 27       	eor	r24, r24
    8bec:	99 27       	eor	r25, r25
    8bee:	8e 1b       	sub	r24, r30
    8bf0:	9f 0b       	sbc	r25, r31
    8bf2:	04 c0       	rjmp	.+8      	; 0x8bfc <__ashldi3+0x76>
    8bf4:	44 0f       	add	r20, r20
    8bf6:	55 1f       	adc	r21, r21
    8bf8:	66 1f       	adc	r22, r22
    8bfa:	77 1f       	adc	r23, r23
    8bfc:	8a 95       	dec	r24
    8bfe:	d2 f7       	brpl	.-12     	; 0x8bf4 <__ashldi3+0x6e>
    8c00:	28 c0       	rjmp	.+80     	; 0x8c52 <__ashldi3+0xcc>
    8c02:	20 2f       	mov	r18, r16
    8c04:	33 27       	eor	r19, r19
    8c06:	27 fd       	sbrc	r18, 7
    8c08:	30 95       	com	r19
    8c0a:	db 01       	movw	r26, r22
    8c0c:	ca 01       	movw	r24, r20
    8c0e:	02 2e       	mov	r0, r18
    8c10:	04 c0       	rjmp	.+8      	; 0x8c1a <__ashldi3+0x94>
    8c12:	88 0f       	add	r24, r24
    8c14:	99 1f       	adc	r25, r25
    8c16:	aa 1f       	adc	r26, r26
    8c18:	bb 1f       	adc	r27, r27
    8c1a:	0a 94       	dec	r0
    8c1c:	d2 f7       	brpl	.-12     	; 0x8c12 <__ashldi3+0x8c>
    8c1e:	89 87       	std	Y+9, r24	; 0x09
    8c20:	9a 87       	std	Y+10, r25	; 0x0a
    8c22:	ab 87       	std	Y+11, r26	; 0x0b
    8c24:	bc 87       	std	Y+12, r27	; 0x0c
    8c26:	04 c0       	rjmp	.+8      	; 0x8c30 <__ashldi3+0xaa>
    8c28:	76 95       	lsr	r23
    8c2a:	67 95       	ror	r22
    8c2c:	57 95       	ror	r21
    8c2e:	47 95       	ror	r20
    8c30:	ea 95       	dec	r30
    8c32:	d2 f7       	brpl	.-12     	; 0x8c28 <__ashldi3+0xa2>
    8c34:	8d 81       	ldd	r24, Y+5	; 0x05
    8c36:	9e 81       	ldd	r25, Y+6	; 0x06
    8c38:	af 81       	ldd	r26, Y+7	; 0x07
    8c3a:	b8 85       	ldd	r27, Y+8	; 0x08
    8c3c:	04 c0       	rjmp	.+8      	; 0x8c46 <__ashldi3+0xc0>
    8c3e:	88 0f       	add	r24, r24
    8c40:	99 1f       	adc	r25, r25
    8c42:	aa 1f       	adc	r26, r26
    8c44:	bb 1f       	adc	r27, r27
    8c46:	2a 95       	dec	r18
    8c48:	d2 f7       	brpl	.-12     	; 0x8c3e <__ashldi3+0xb8>
    8c4a:	48 2b       	or	r20, r24
    8c4c:	59 2b       	or	r21, r25
    8c4e:	6a 2b       	or	r22, r26
    8c50:	7b 2b       	or	r23, r27
    8c52:	4d 87       	std	Y+13, r20	; 0x0d
    8c54:	5e 87       	std	Y+14, r21	; 0x0e
    8c56:	6f 87       	std	Y+15, r22	; 0x0f
    8c58:	78 8b       	std	Y+16, r23	; 0x10
    8c5a:	29 85       	ldd	r18, Y+9	; 0x09
    8c5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    8c5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    8c60:	5c 85       	ldd	r21, Y+12	; 0x0c
    8c62:	6d 85       	ldd	r22, Y+13	; 0x0d
    8c64:	7e 85       	ldd	r23, Y+14	; 0x0e
    8c66:	af 85       	ldd	r26, Y+15	; 0x0f
    8c68:	98 89       	ldd	r25, Y+16	; 0x10
    8c6a:	8a 2f       	mov	r24, r26
    8c6c:	60 96       	adiw	r28, 0x10	; 16
    8c6e:	0f b6       	in	r0, 0x3f	; 63
    8c70:	f8 94       	cli
    8c72:	de bf       	out	0x3e, r29	; 62
    8c74:	0f be       	out	0x3f, r0	; 63
    8c76:	cd bf       	out	0x3d, r28	; 61
    8c78:	cf 91       	pop	r28
    8c7a:	df 91       	pop	r29
    8c7c:	0f 91       	pop	r16
    8c7e:	ff 90       	pop	r15
    8c80:	ef 90       	pop	r14
    8c82:	08 95       	ret

00008c84 <atoi>:
    8c84:	fc 01       	movw	r30, r24
    8c86:	88 27       	eor	r24, r24
    8c88:	99 27       	eor	r25, r25
    8c8a:	e8 94       	clt
    8c8c:	21 91       	ld	r18, Z+
    8c8e:	20 32       	cpi	r18, 0x20	; 32
    8c90:	e9 f3       	breq	.-6      	; 0x8c8c <atoi+0x8>
    8c92:	29 30       	cpi	r18, 0x09	; 9
    8c94:	10 f0       	brcs	.+4      	; 0x8c9a <atoi+0x16>
    8c96:	2e 30       	cpi	r18, 0x0E	; 14
    8c98:	c8 f3       	brcs	.-14     	; 0x8c8c <atoi+0x8>
    8c9a:	2b 32       	cpi	r18, 0x2B	; 43
    8c9c:	41 f0       	breq	.+16     	; 0x8cae <atoi+0x2a>
    8c9e:	2d 32       	cpi	r18, 0x2D	; 45
    8ca0:	39 f4       	brne	.+14     	; 0x8cb0 <atoi+0x2c>
    8ca2:	68 94       	set
    8ca4:	04 c0       	rjmp	.+8      	; 0x8cae <atoi+0x2a>
    8ca6:	0e 94 d5 46 	call	0x8daa	; 0x8daa <__mulhi_const_10>
    8caa:	82 0f       	add	r24, r18
    8cac:	91 1d       	adc	r25, r1
    8cae:	21 91       	ld	r18, Z+
    8cb0:	20 53       	subi	r18, 0x30	; 48
    8cb2:	2a 30       	cpi	r18, 0x0A	; 10
    8cb4:	c0 f3       	brcs	.-16     	; 0x8ca6 <atoi+0x22>
    8cb6:	1e f4       	brtc	.+6      	; 0x8cbe <atoi+0x3a>
    8cb8:	90 95       	com	r25
    8cba:	81 95       	neg	r24
    8cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    8cbe:	08 95       	ret

00008cc0 <strcmp_P>:
    8cc0:	fb 01       	movw	r30, r22
    8cc2:	dc 01       	movw	r26, r24
    8cc4:	8d 91       	ld	r24, X+
    8cc6:	05 90       	lpm	r0, Z+
    8cc8:	80 19       	sub	r24, r0
    8cca:	01 10       	cpse	r0, r1
    8ccc:	d9 f3       	breq	.-10     	; 0x8cc4 <strcmp_P+0x4>
    8cce:	99 0b       	sbc	r25, r25
    8cd0:	08 95       	ret

00008cd2 <strncmp_P>:
    8cd2:	fb 01       	movw	r30, r22
    8cd4:	dc 01       	movw	r26, r24
    8cd6:	41 50       	subi	r20, 0x01	; 1
    8cd8:	50 40       	sbci	r21, 0x00	; 0
    8cda:	30 f0       	brcs	.+12     	; 0x8ce8 <strncmp_P+0x16>
    8cdc:	8d 91       	ld	r24, X+
    8cde:	05 90       	lpm	r0, Z+
    8ce0:	80 19       	sub	r24, r0
    8ce2:	19 f4       	brne	.+6      	; 0x8cea <strncmp_P+0x18>
    8ce4:	00 20       	and	r0, r0
    8ce6:	b9 f7       	brne	.-18     	; 0x8cd6 <strncmp_P+0x4>
    8ce8:	88 1b       	sub	r24, r24
    8cea:	99 0b       	sbc	r25, r25
    8cec:	08 95       	ret

00008cee <memcpy>:
    8cee:	fb 01       	movw	r30, r22
    8cf0:	dc 01       	movw	r26, r24
    8cf2:	02 c0       	rjmp	.+4      	; 0x8cf8 <memcpy+0xa>
    8cf4:	01 90       	ld	r0, Z+
    8cf6:	0d 92       	st	X+, r0
    8cf8:	41 50       	subi	r20, 0x01	; 1
    8cfa:	50 40       	sbci	r21, 0x00	; 0
    8cfc:	d8 f7       	brcc	.-10     	; 0x8cf4 <memcpy+0x6>
    8cfe:	08 95       	ret

00008d00 <memset>:
    8d00:	dc 01       	movw	r26, r24
    8d02:	01 c0       	rjmp	.+2      	; 0x8d06 <memset+0x6>
    8d04:	6d 93       	st	X+, r22
    8d06:	41 50       	subi	r20, 0x01	; 1
    8d08:	50 40       	sbci	r21, 0x00	; 0
    8d0a:	e0 f7       	brcc	.-8      	; 0x8d04 <memset+0x4>
    8d0c:	08 95       	ret

00008d0e <strcat>:
    8d0e:	fb 01       	movw	r30, r22
    8d10:	dc 01       	movw	r26, r24
    8d12:	0d 90       	ld	r0, X+
    8d14:	00 20       	and	r0, r0
    8d16:	e9 f7       	brne	.-6      	; 0x8d12 <strcat+0x4>
    8d18:	11 97       	sbiw	r26, 0x01	; 1
    8d1a:	01 90       	ld	r0, Z+
    8d1c:	0d 92       	st	X+, r0
    8d1e:	00 20       	and	r0, r0
    8d20:	e1 f7       	brne	.-8      	; 0x8d1a <strcat+0xc>
    8d22:	08 95       	ret

00008d24 <strchr>:
    8d24:	fc 01       	movw	r30, r24
    8d26:	81 91       	ld	r24, Z+
    8d28:	86 17       	cp	r24, r22
    8d2a:	21 f0       	breq	.+8      	; 0x8d34 <strchr+0x10>
    8d2c:	88 23       	and	r24, r24
    8d2e:	d9 f7       	brne	.-10     	; 0x8d26 <strchr+0x2>
    8d30:	99 27       	eor	r25, r25
    8d32:	08 95       	ret
    8d34:	31 97       	sbiw	r30, 0x01	; 1
    8d36:	cf 01       	movw	r24, r30
    8d38:	08 95       	ret

00008d3a <strcmp>:
    8d3a:	fb 01       	movw	r30, r22
    8d3c:	dc 01       	movw	r26, r24
    8d3e:	8d 91       	ld	r24, X+
    8d40:	01 90       	ld	r0, Z+
    8d42:	80 19       	sub	r24, r0
    8d44:	01 10       	cpse	r0, r1
    8d46:	d9 f3       	breq	.-10     	; 0x8d3e <strcmp+0x4>
    8d48:	99 0b       	sbc	r25, r25
    8d4a:	08 95       	ret

00008d4c <strcpy>:
    8d4c:	fb 01       	movw	r30, r22
    8d4e:	dc 01       	movw	r26, r24
    8d50:	01 90       	ld	r0, Z+
    8d52:	0d 92       	st	X+, r0
    8d54:	00 20       	and	r0, r0
    8d56:	e1 f7       	brne	.-8      	; 0x8d50 <strcpy+0x4>
    8d58:	08 95       	ret

00008d5a <strncmp>:
    8d5a:	fb 01       	movw	r30, r22
    8d5c:	dc 01       	movw	r26, r24
    8d5e:	41 50       	subi	r20, 0x01	; 1
    8d60:	50 40       	sbci	r21, 0x00	; 0
    8d62:	30 f0       	brcs	.+12     	; 0x8d70 <strncmp+0x16>
    8d64:	8d 91       	ld	r24, X+
    8d66:	01 90       	ld	r0, Z+
    8d68:	80 19       	sub	r24, r0
    8d6a:	19 f4       	brne	.+6      	; 0x8d72 <strncmp+0x18>
    8d6c:	00 20       	and	r0, r0
    8d6e:	b9 f7       	brne	.-18     	; 0x8d5e <strncmp+0x4>
    8d70:	88 1b       	sub	r24, r24
    8d72:	99 0b       	sbc	r25, r25
    8d74:	08 95       	ret

00008d76 <strncpy>:
    8d76:	fb 01       	movw	r30, r22
    8d78:	dc 01       	movw	r26, r24
    8d7a:	41 50       	subi	r20, 0x01	; 1
    8d7c:	50 40       	sbci	r21, 0x00	; 0
    8d7e:	48 f0       	brcs	.+18     	; 0x8d92 <strncpy+0x1c>
    8d80:	01 90       	ld	r0, Z+
    8d82:	0d 92       	st	X+, r0
    8d84:	00 20       	and	r0, r0
    8d86:	c9 f7       	brne	.-14     	; 0x8d7a <strncpy+0x4>
    8d88:	01 c0       	rjmp	.+2      	; 0x8d8c <strncpy+0x16>
    8d8a:	1d 92       	st	X+, r1
    8d8c:	41 50       	subi	r20, 0x01	; 1
    8d8e:	50 40       	sbci	r21, 0x00	; 0
    8d90:	e0 f7       	brcc	.-8      	; 0x8d8a <strncpy+0x14>
    8d92:	08 95       	ret

00008d94 <strrchr>:
    8d94:	fc 01       	movw	r30, r24
    8d96:	81 e0       	ldi	r24, 0x01	; 1
    8d98:	90 e0       	ldi	r25, 0x00	; 0
    8d9a:	01 90       	ld	r0, Z+
    8d9c:	06 16       	cp	r0, r22
    8d9e:	09 f4       	brne	.+2      	; 0x8da2 <strrchr+0xe>
    8da0:	cf 01       	movw	r24, r30
    8da2:	00 20       	and	r0, r0
    8da4:	d1 f7       	brne	.-12     	; 0x8d9a <strrchr+0x6>
    8da6:	01 97       	sbiw	r24, 0x01	; 1
    8da8:	08 95       	ret

00008daa <__mulhi_const_10>:
    8daa:	7a e0       	ldi	r23, 0x0A	; 10
    8dac:	97 9f       	mul	r25, r23
    8dae:	90 2d       	mov	r25, r0
    8db0:	87 9f       	mul	r24, r23
    8db2:	80 2d       	mov	r24, r0
    8db4:	91 0d       	add	r25, r1
    8db6:	11 24       	eor	r1, r1
    8db8:	08 95       	ret

00008dba <sprintf>:
    8dba:	ae e0       	ldi	r26, 0x0E	; 14
    8dbc:	b0 e0       	ldi	r27, 0x00	; 0
    8dbe:	e3 ee       	ldi	r30, 0xE3	; 227
    8dc0:	f6 e4       	ldi	r31, 0x46	; 70
    8dc2:	0c 94 f4 49 	jmp	0x93e8	; 0x93e8 <__prologue_saves__+0x1c>
    8dc6:	0d 89       	ldd	r16, Y+21	; 0x15
    8dc8:	1e 89       	ldd	r17, Y+22	; 0x16
    8dca:	86 e0       	ldi	r24, 0x06	; 6
    8dcc:	8c 83       	std	Y+4, r24	; 0x04
    8dce:	1a 83       	std	Y+2, r17	; 0x02
    8dd0:	09 83       	std	Y+1, r16	; 0x01
    8dd2:	8f ef       	ldi	r24, 0xFF	; 255
    8dd4:	9f e7       	ldi	r25, 0x7F	; 127
    8dd6:	9e 83       	std	Y+6, r25	; 0x06
    8dd8:	8d 83       	std	Y+5, r24	; 0x05
    8dda:	9e 01       	movw	r18, r28
    8ddc:	27 5e       	subi	r18, 0xE7	; 231
    8dde:	3f 4f       	sbci	r19, 0xFF	; 255
    8de0:	ce 01       	movw	r24, r28
    8de2:	01 96       	adiw	r24, 0x01	; 1
    8de4:	6f 89       	ldd	r22, Y+23	; 0x17
    8de6:	78 8d       	ldd	r23, Y+24	; 0x18
    8de8:	a9 01       	movw	r20, r18
    8dea:	0e 94 01 47 	call	0x8e02	; 0x8e02 <vfprintf>
    8dee:	2f 81       	ldd	r18, Y+7	; 0x07
    8df0:	38 85       	ldd	r19, Y+8	; 0x08
    8df2:	02 0f       	add	r16, r18
    8df4:	13 1f       	adc	r17, r19
    8df6:	f8 01       	movw	r30, r16
    8df8:	10 82       	st	Z, r1
    8dfa:	2e 96       	adiw	r28, 0x0e	; 14
    8dfc:	e4 e0       	ldi	r30, 0x04	; 4
    8dfe:	0c 94 10 4a 	jmp	0x9420	; 0x9420 <__epilogue_restores__+0x1c>

00008e02 <vfprintf>:
    8e02:	ab e0       	ldi	r26, 0x0B	; 11
    8e04:	b0 e0       	ldi	r27, 0x00	; 0
    8e06:	e7 e0       	ldi	r30, 0x07	; 7
    8e08:	f7 e4       	ldi	r31, 0x47	; 71
    8e0a:	0c 94 e6 49 	jmp	0x93cc	; 0x93cc <__prologue_saves__>
    8e0e:	3c 01       	movw	r6, r24
    8e10:	2b 01       	movw	r4, r22
    8e12:	5a 01       	movw	r10, r20
    8e14:	fc 01       	movw	r30, r24
    8e16:	17 82       	std	Z+7, r1	; 0x07
    8e18:	16 82       	std	Z+6, r1	; 0x06
    8e1a:	83 81       	ldd	r24, Z+3	; 0x03
    8e1c:	81 fd       	sbrc	r24, 1
    8e1e:	03 c0       	rjmp	.+6      	; 0x8e26 <vfprintf+0x24>
    8e20:	6f ef       	ldi	r22, 0xFF	; 255
    8e22:	7f ef       	ldi	r23, 0xFF	; 255
    8e24:	c6 c1       	rjmp	.+908    	; 0x91b2 <vfprintf+0x3b0>
    8e26:	9a e0       	ldi	r25, 0x0A	; 10
    8e28:	89 2e       	mov	r8, r25
    8e2a:	1e 01       	movw	r2, r28
    8e2c:	08 94       	sec
    8e2e:	21 1c       	adc	r2, r1
    8e30:	31 1c       	adc	r3, r1
    8e32:	f3 01       	movw	r30, r6
    8e34:	23 81       	ldd	r18, Z+3	; 0x03
    8e36:	f2 01       	movw	r30, r4
    8e38:	23 fd       	sbrc	r18, 3
    8e3a:	85 91       	lpm	r24, Z+
    8e3c:	23 ff       	sbrs	r18, 3
    8e3e:	81 91       	ld	r24, Z+
    8e40:	2f 01       	movw	r4, r30
    8e42:	88 23       	and	r24, r24
    8e44:	09 f4       	brne	.+2      	; 0x8e48 <vfprintf+0x46>
    8e46:	b2 c1       	rjmp	.+868    	; 0x91ac <vfprintf+0x3aa>
    8e48:	85 32       	cpi	r24, 0x25	; 37
    8e4a:	39 f4       	brne	.+14     	; 0x8e5a <vfprintf+0x58>
    8e4c:	23 fd       	sbrc	r18, 3
    8e4e:	85 91       	lpm	r24, Z+
    8e50:	23 ff       	sbrs	r18, 3
    8e52:	81 91       	ld	r24, Z+
    8e54:	2f 01       	movw	r4, r30
    8e56:	85 32       	cpi	r24, 0x25	; 37
    8e58:	29 f4       	brne	.+10     	; 0x8e64 <vfprintf+0x62>
    8e5a:	90 e0       	ldi	r25, 0x00	; 0
    8e5c:	b3 01       	movw	r22, r6
    8e5e:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <fputc>
    8e62:	e7 cf       	rjmp	.-50     	; 0x8e32 <vfprintf+0x30>
    8e64:	98 2f       	mov	r25, r24
    8e66:	ff 24       	eor	r15, r15
    8e68:	ee 24       	eor	r14, r14
    8e6a:	99 24       	eor	r9, r9
    8e6c:	ff e1       	ldi	r31, 0x1F	; 31
    8e6e:	ff 15       	cp	r31, r15
    8e70:	d0 f0       	brcs	.+52     	; 0x8ea6 <vfprintf+0xa4>
    8e72:	9b 32       	cpi	r25, 0x2B	; 43
    8e74:	69 f0       	breq	.+26     	; 0x8e90 <vfprintf+0x8e>
    8e76:	9c 32       	cpi	r25, 0x2C	; 44
    8e78:	28 f4       	brcc	.+10     	; 0x8e84 <vfprintf+0x82>
    8e7a:	90 32       	cpi	r25, 0x20	; 32
    8e7c:	59 f0       	breq	.+22     	; 0x8e94 <vfprintf+0x92>
    8e7e:	93 32       	cpi	r25, 0x23	; 35
    8e80:	91 f4       	brne	.+36     	; 0x8ea6 <vfprintf+0xa4>
    8e82:	0e c0       	rjmp	.+28     	; 0x8ea0 <vfprintf+0x9e>
    8e84:	9d 32       	cpi	r25, 0x2D	; 45
    8e86:	49 f0       	breq	.+18     	; 0x8e9a <vfprintf+0x98>
    8e88:	90 33       	cpi	r25, 0x30	; 48
    8e8a:	69 f4       	brne	.+26     	; 0x8ea6 <vfprintf+0xa4>
    8e8c:	41 e0       	ldi	r20, 0x01	; 1
    8e8e:	24 c0       	rjmp	.+72     	; 0x8ed8 <vfprintf+0xd6>
    8e90:	52 e0       	ldi	r21, 0x02	; 2
    8e92:	f5 2a       	or	r15, r21
    8e94:	84 e0       	ldi	r24, 0x04	; 4
    8e96:	f8 2a       	or	r15, r24
    8e98:	28 c0       	rjmp	.+80     	; 0x8eea <vfprintf+0xe8>
    8e9a:	98 e0       	ldi	r25, 0x08	; 8
    8e9c:	f9 2a       	or	r15, r25
    8e9e:	25 c0       	rjmp	.+74     	; 0x8eea <vfprintf+0xe8>
    8ea0:	e0 e1       	ldi	r30, 0x10	; 16
    8ea2:	fe 2a       	or	r15, r30
    8ea4:	22 c0       	rjmp	.+68     	; 0x8eea <vfprintf+0xe8>
    8ea6:	f7 fc       	sbrc	r15, 7
    8ea8:	29 c0       	rjmp	.+82     	; 0x8efc <vfprintf+0xfa>
    8eaa:	89 2f       	mov	r24, r25
    8eac:	80 53       	subi	r24, 0x30	; 48
    8eae:	8a 30       	cpi	r24, 0x0A	; 10
    8eb0:	70 f4       	brcc	.+28     	; 0x8ece <vfprintf+0xcc>
    8eb2:	f6 fe       	sbrs	r15, 6
    8eb4:	05 c0       	rjmp	.+10     	; 0x8ec0 <vfprintf+0xbe>
    8eb6:	98 9c       	mul	r9, r8
    8eb8:	90 2c       	mov	r9, r0
    8eba:	11 24       	eor	r1, r1
    8ebc:	98 0e       	add	r9, r24
    8ebe:	15 c0       	rjmp	.+42     	; 0x8eea <vfprintf+0xe8>
    8ec0:	e8 9c       	mul	r14, r8
    8ec2:	e0 2c       	mov	r14, r0
    8ec4:	11 24       	eor	r1, r1
    8ec6:	e8 0e       	add	r14, r24
    8ec8:	f0 e2       	ldi	r31, 0x20	; 32
    8eca:	ff 2a       	or	r15, r31
    8ecc:	0e c0       	rjmp	.+28     	; 0x8eea <vfprintf+0xe8>
    8ece:	9e 32       	cpi	r25, 0x2E	; 46
    8ed0:	29 f4       	brne	.+10     	; 0x8edc <vfprintf+0xda>
    8ed2:	f6 fc       	sbrc	r15, 6
    8ed4:	6b c1       	rjmp	.+726    	; 0x91ac <vfprintf+0x3aa>
    8ed6:	40 e4       	ldi	r20, 0x40	; 64
    8ed8:	f4 2a       	or	r15, r20
    8eda:	07 c0       	rjmp	.+14     	; 0x8eea <vfprintf+0xe8>
    8edc:	9c 36       	cpi	r25, 0x6C	; 108
    8ede:	19 f4       	brne	.+6      	; 0x8ee6 <vfprintf+0xe4>
    8ee0:	50 e8       	ldi	r21, 0x80	; 128
    8ee2:	f5 2a       	or	r15, r21
    8ee4:	02 c0       	rjmp	.+4      	; 0x8eea <vfprintf+0xe8>
    8ee6:	98 36       	cpi	r25, 0x68	; 104
    8ee8:	49 f4       	brne	.+18     	; 0x8efc <vfprintf+0xfa>
    8eea:	f2 01       	movw	r30, r4
    8eec:	23 fd       	sbrc	r18, 3
    8eee:	95 91       	lpm	r25, Z+
    8ef0:	23 ff       	sbrs	r18, 3
    8ef2:	91 91       	ld	r25, Z+
    8ef4:	2f 01       	movw	r4, r30
    8ef6:	99 23       	and	r25, r25
    8ef8:	09 f0       	breq	.+2      	; 0x8efc <vfprintf+0xfa>
    8efa:	b8 cf       	rjmp	.-144    	; 0x8e6c <vfprintf+0x6a>
    8efc:	89 2f       	mov	r24, r25
    8efe:	85 54       	subi	r24, 0x45	; 69
    8f00:	83 30       	cpi	r24, 0x03	; 3
    8f02:	18 f0       	brcs	.+6      	; 0x8f0a <vfprintf+0x108>
    8f04:	80 52       	subi	r24, 0x20	; 32
    8f06:	83 30       	cpi	r24, 0x03	; 3
    8f08:	38 f4       	brcc	.+14     	; 0x8f18 <vfprintf+0x116>
    8f0a:	44 e0       	ldi	r20, 0x04	; 4
    8f0c:	50 e0       	ldi	r21, 0x00	; 0
    8f0e:	a4 0e       	add	r10, r20
    8f10:	b5 1e       	adc	r11, r21
    8f12:	5f e3       	ldi	r21, 0x3F	; 63
    8f14:	59 83       	std	Y+1, r21	; 0x01
    8f16:	0f c0       	rjmp	.+30     	; 0x8f36 <vfprintf+0x134>
    8f18:	93 36       	cpi	r25, 0x63	; 99
    8f1a:	31 f0       	breq	.+12     	; 0x8f28 <vfprintf+0x126>
    8f1c:	93 37       	cpi	r25, 0x73	; 115
    8f1e:	79 f0       	breq	.+30     	; 0x8f3e <vfprintf+0x13c>
    8f20:	93 35       	cpi	r25, 0x53	; 83
    8f22:	09 f0       	breq	.+2      	; 0x8f26 <vfprintf+0x124>
    8f24:	56 c0       	rjmp	.+172    	; 0x8fd2 <vfprintf+0x1d0>
    8f26:	20 c0       	rjmp	.+64     	; 0x8f68 <vfprintf+0x166>
    8f28:	f5 01       	movw	r30, r10
    8f2a:	80 81       	ld	r24, Z
    8f2c:	89 83       	std	Y+1, r24	; 0x01
    8f2e:	42 e0       	ldi	r20, 0x02	; 2
    8f30:	50 e0       	ldi	r21, 0x00	; 0
    8f32:	a4 0e       	add	r10, r20
    8f34:	b5 1e       	adc	r11, r21
    8f36:	61 01       	movw	r12, r2
    8f38:	01 e0       	ldi	r16, 0x01	; 1
    8f3a:	10 e0       	ldi	r17, 0x00	; 0
    8f3c:	12 c0       	rjmp	.+36     	; 0x8f62 <vfprintf+0x160>
    8f3e:	f5 01       	movw	r30, r10
    8f40:	c0 80       	ld	r12, Z
    8f42:	d1 80       	ldd	r13, Z+1	; 0x01
    8f44:	f6 fc       	sbrc	r15, 6
    8f46:	03 c0       	rjmp	.+6      	; 0x8f4e <vfprintf+0x14c>
    8f48:	6f ef       	ldi	r22, 0xFF	; 255
    8f4a:	7f ef       	ldi	r23, 0xFF	; 255
    8f4c:	02 c0       	rjmp	.+4      	; 0x8f52 <vfprintf+0x150>
    8f4e:	69 2d       	mov	r22, r9
    8f50:	70 e0       	ldi	r23, 0x00	; 0
    8f52:	42 e0       	ldi	r20, 0x02	; 2
    8f54:	50 e0       	ldi	r21, 0x00	; 0
    8f56:	a4 0e       	add	r10, r20
    8f58:	b5 1e       	adc	r11, r21
    8f5a:	c6 01       	movw	r24, r12
    8f5c:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <strnlen>
    8f60:	8c 01       	movw	r16, r24
    8f62:	5f e7       	ldi	r21, 0x7F	; 127
    8f64:	f5 22       	and	r15, r21
    8f66:	14 c0       	rjmp	.+40     	; 0x8f90 <vfprintf+0x18e>
    8f68:	f5 01       	movw	r30, r10
    8f6a:	c0 80       	ld	r12, Z
    8f6c:	d1 80       	ldd	r13, Z+1	; 0x01
    8f6e:	f6 fc       	sbrc	r15, 6
    8f70:	03 c0       	rjmp	.+6      	; 0x8f78 <vfprintf+0x176>
    8f72:	6f ef       	ldi	r22, 0xFF	; 255
    8f74:	7f ef       	ldi	r23, 0xFF	; 255
    8f76:	02 c0       	rjmp	.+4      	; 0x8f7c <vfprintf+0x17a>
    8f78:	69 2d       	mov	r22, r9
    8f7a:	70 e0       	ldi	r23, 0x00	; 0
    8f7c:	42 e0       	ldi	r20, 0x02	; 2
    8f7e:	50 e0       	ldi	r21, 0x00	; 0
    8f80:	a4 0e       	add	r10, r20
    8f82:	b5 1e       	adc	r11, r21
    8f84:	c6 01       	movw	r24, r12
    8f86:	0e 94 de 48 	call	0x91bc	; 0x91bc <strnlen_P>
    8f8a:	8c 01       	movw	r16, r24
    8f8c:	50 e8       	ldi	r21, 0x80	; 128
    8f8e:	f5 2a       	or	r15, r21
    8f90:	f3 fe       	sbrs	r15, 3
    8f92:	07 c0       	rjmp	.+14     	; 0x8fa2 <vfprintf+0x1a0>
    8f94:	1a c0       	rjmp	.+52     	; 0x8fca <vfprintf+0x1c8>
    8f96:	80 e2       	ldi	r24, 0x20	; 32
    8f98:	90 e0       	ldi	r25, 0x00	; 0
    8f9a:	b3 01       	movw	r22, r6
    8f9c:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <fputc>
    8fa0:	ea 94       	dec	r14
    8fa2:	8e 2d       	mov	r24, r14
    8fa4:	90 e0       	ldi	r25, 0x00	; 0
    8fa6:	08 17       	cp	r16, r24
    8fa8:	19 07       	cpc	r17, r25
    8faa:	a8 f3       	brcs	.-22     	; 0x8f96 <vfprintf+0x194>
    8fac:	0e c0       	rjmp	.+28     	; 0x8fca <vfprintf+0x1c8>
    8fae:	f6 01       	movw	r30, r12
    8fb0:	f7 fc       	sbrc	r15, 7
    8fb2:	85 91       	lpm	r24, Z+
    8fb4:	f7 fe       	sbrs	r15, 7
    8fb6:	81 91       	ld	r24, Z+
    8fb8:	6f 01       	movw	r12, r30
    8fba:	90 e0       	ldi	r25, 0x00	; 0
    8fbc:	b3 01       	movw	r22, r6
    8fbe:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <fputc>
    8fc2:	e1 10       	cpse	r14, r1
    8fc4:	ea 94       	dec	r14
    8fc6:	01 50       	subi	r16, 0x01	; 1
    8fc8:	10 40       	sbci	r17, 0x00	; 0
    8fca:	01 15       	cp	r16, r1
    8fcc:	11 05       	cpc	r17, r1
    8fce:	79 f7       	brne	.-34     	; 0x8fae <vfprintf+0x1ac>
    8fd0:	ea c0       	rjmp	.+468    	; 0x91a6 <vfprintf+0x3a4>
    8fd2:	94 36       	cpi	r25, 0x64	; 100
    8fd4:	11 f0       	breq	.+4      	; 0x8fda <vfprintf+0x1d8>
    8fd6:	99 36       	cpi	r25, 0x69	; 105
    8fd8:	69 f5       	brne	.+90     	; 0x9034 <vfprintf+0x232>
    8fda:	f7 fe       	sbrs	r15, 7
    8fdc:	08 c0       	rjmp	.+16     	; 0x8fee <vfprintf+0x1ec>
    8fde:	f5 01       	movw	r30, r10
    8fe0:	20 81       	ld	r18, Z
    8fe2:	31 81       	ldd	r19, Z+1	; 0x01
    8fe4:	42 81       	ldd	r20, Z+2	; 0x02
    8fe6:	53 81       	ldd	r21, Z+3	; 0x03
    8fe8:	84 e0       	ldi	r24, 0x04	; 4
    8fea:	90 e0       	ldi	r25, 0x00	; 0
    8fec:	0a c0       	rjmp	.+20     	; 0x9002 <vfprintf+0x200>
    8fee:	f5 01       	movw	r30, r10
    8ff0:	80 81       	ld	r24, Z
    8ff2:	91 81       	ldd	r25, Z+1	; 0x01
    8ff4:	9c 01       	movw	r18, r24
    8ff6:	44 27       	eor	r20, r20
    8ff8:	37 fd       	sbrc	r19, 7
    8ffa:	40 95       	com	r20
    8ffc:	54 2f       	mov	r21, r20
    8ffe:	82 e0       	ldi	r24, 0x02	; 2
    9000:	90 e0       	ldi	r25, 0x00	; 0
    9002:	a8 0e       	add	r10, r24
    9004:	b9 1e       	adc	r11, r25
    9006:	9f e6       	ldi	r25, 0x6F	; 111
    9008:	f9 22       	and	r15, r25
    900a:	57 ff       	sbrs	r21, 7
    900c:	09 c0       	rjmp	.+18     	; 0x9020 <vfprintf+0x21e>
    900e:	50 95       	com	r21
    9010:	40 95       	com	r20
    9012:	30 95       	com	r19
    9014:	21 95       	neg	r18
    9016:	3f 4f       	sbci	r19, 0xFF	; 255
    9018:	4f 4f       	sbci	r20, 0xFF	; 255
    901a:	5f 4f       	sbci	r21, 0xFF	; 255
    901c:	e0 e8       	ldi	r30, 0x80	; 128
    901e:	fe 2a       	or	r15, r30
    9020:	ca 01       	movw	r24, r20
    9022:	b9 01       	movw	r22, r18
    9024:	a1 01       	movw	r20, r2
    9026:	2a e0       	ldi	r18, 0x0A	; 10
    9028:	30 e0       	ldi	r19, 0x00	; 0
    902a:	0e 94 20 49 	call	0x9240	; 0x9240 <__ultoa_invert>
    902e:	d8 2e       	mov	r13, r24
    9030:	d2 18       	sub	r13, r2
    9032:	40 c0       	rjmp	.+128    	; 0x90b4 <vfprintf+0x2b2>
    9034:	95 37       	cpi	r25, 0x75	; 117
    9036:	29 f4       	brne	.+10     	; 0x9042 <vfprintf+0x240>
    9038:	1f 2d       	mov	r17, r15
    903a:	1f 7e       	andi	r17, 0xEF	; 239
    903c:	2a e0       	ldi	r18, 0x0A	; 10
    903e:	30 e0       	ldi	r19, 0x00	; 0
    9040:	1d c0       	rjmp	.+58     	; 0x907c <vfprintf+0x27a>
    9042:	1f 2d       	mov	r17, r15
    9044:	19 7f       	andi	r17, 0xF9	; 249
    9046:	9f 36       	cpi	r25, 0x6F	; 111
    9048:	61 f0       	breq	.+24     	; 0x9062 <vfprintf+0x260>
    904a:	90 37       	cpi	r25, 0x70	; 112
    904c:	20 f4       	brcc	.+8      	; 0x9056 <vfprintf+0x254>
    904e:	98 35       	cpi	r25, 0x58	; 88
    9050:	09 f0       	breq	.+2      	; 0x9054 <vfprintf+0x252>
    9052:	ac c0       	rjmp	.+344    	; 0x91ac <vfprintf+0x3aa>
    9054:	0f c0       	rjmp	.+30     	; 0x9074 <vfprintf+0x272>
    9056:	90 37       	cpi	r25, 0x70	; 112
    9058:	39 f0       	breq	.+14     	; 0x9068 <vfprintf+0x266>
    905a:	98 37       	cpi	r25, 0x78	; 120
    905c:	09 f0       	breq	.+2      	; 0x9060 <vfprintf+0x25e>
    905e:	a6 c0       	rjmp	.+332    	; 0x91ac <vfprintf+0x3aa>
    9060:	04 c0       	rjmp	.+8      	; 0x906a <vfprintf+0x268>
    9062:	28 e0       	ldi	r18, 0x08	; 8
    9064:	30 e0       	ldi	r19, 0x00	; 0
    9066:	0a c0       	rjmp	.+20     	; 0x907c <vfprintf+0x27a>
    9068:	10 61       	ori	r17, 0x10	; 16
    906a:	14 fd       	sbrc	r17, 4
    906c:	14 60       	ori	r17, 0x04	; 4
    906e:	20 e1       	ldi	r18, 0x10	; 16
    9070:	30 e0       	ldi	r19, 0x00	; 0
    9072:	04 c0       	rjmp	.+8      	; 0x907c <vfprintf+0x27a>
    9074:	14 fd       	sbrc	r17, 4
    9076:	16 60       	ori	r17, 0x06	; 6
    9078:	20 e1       	ldi	r18, 0x10	; 16
    907a:	32 e0       	ldi	r19, 0x02	; 2
    907c:	17 ff       	sbrs	r17, 7
    907e:	08 c0       	rjmp	.+16     	; 0x9090 <vfprintf+0x28e>
    9080:	f5 01       	movw	r30, r10
    9082:	60 81       	ld	r22, Z
    9084:	71 81       	ldd	r23, Z+1	; 0x01
    9086:	82 81       	ldd	r24, Z+2	; 0x02
    9088:	93 81       	ldd	r25, Z+3	; 0x03
    908a:	44 e0       	ldi	r20, 0x04	; 4
    908c:	50 e0       	ldi	r21, 0x00	; 0
    908e:	08 c0       	rjmp	.+16     	; 0x90a0 <vfprintf+0x29e>
    9090:	f5 01       	movw	r30, r10
    9092:	80 81       	ld	r24, Z
    9094:	91 81       	ldd	r25, Z+1	; 0x01
    9096:	bc 01       	movw	r22, r24
    9098:	80 e0       	ldi	r24, 0x00	; 0
    909a:	90 e0       	ldi	r25, 0x00	; 0
    909c:	42 e0       	ldi	r20, 0x02	; 2
    909e:	50 e0       	ldi	r21, 0x00	; 0
    90a0:	a4 0e       	add	r10, r20
    90a2:	b5 1e       	adc	r11, r21
    90a4:	a1 01       	movw	r20, r2
    90a6:	0e 94 20 49 	call	0x9240	; 0x9240 <__ultoa_invert>
    90aa:	d8 2e       	mov	r13, r24
    90ac:	d2 18       	sub	r13, r2
    90ae:	8f e7       	ldi	r24, 0x7F	; 127
    90b0:	f8 2e       	mov	r15, r24
    90b2:	f1 22       	and	r15, r17
    90b4:	f6 fe       	sbrs	r15, 6
    90b6:	0b c0       	rjmp	.+22     	; 0x90ce <vfprintf+0x2cc>
    90b8:	5e ef       	ldi	r21, 0xFE	; 254
    90ba:	f5 22       	and	r15, r21
    90bc:	d9 14       	cp	r13, r9
    90be:	38 f4       	brcc	.+14     	; 0x90ce <vfprintf+0x2cc>
    90c0:	f4 fe       	sbrs	r15, 4
    90c2:	07 c0       	rjmp	.+14     	; 0x90d2 <vfprintf+0x2d0>
    90c4:	f2 fc       	sbrc	r15, 2
    90c6:	05 c0       	rjmp	.+10     	; 0x90d2 <vfprintf+0x2d0>
    90c8:	8f ee       	ldi	r24, 0xEF	; 239
    90ca:	f8 22       	and	r15, r24
    90cc:	02 c0       	rjmp	.+4      	; 0x90d2 <vfprintf+0x2d0>
    90ce:	1d 2d       	mov	r17, r13
    90d0:	01 c0       	rjmp	.+2      	; 0x90d4 <vfprintf+0x2d2>
    90d2:	19 2d       	mov	r17, r9
    90d4:	f4 fe       	sbrs	r15, 4
    90d6:	0d c0       	rjmp	.+26     	; 0x90f2 <vfprintf+0x2f0>
    90d8:	fe 01       	movw	r30, r28
    90da:	ed 0d       	add	r30, r13
    90dc:	f1 1d       	adc	r31, r1
    90de:	80 81       	ld	r24, Z
    90e0:	80 33       	cpi	r24, 0x30	; 48
    90e2:	19 f4       	brne	.+6      	; 0x90ea <vfprintf+0x2e8>
    90e4:	99 ee       	ldi	r25, 0xE9	; 233
    90e6:	f9 22       	and	r15, r25
    90e8:	08 c0       	rjmp	.+16     	; 0x90fa <vfprintf+0x2f8>
    90ea:	1f 5f       	subi	r17, 0xFF	; 255
    90ec:	f2 fe       	sbrs	r15, 2
    90ee:	05 c0       	rjmp	.+10     	; 0x90fa <vfprintf+0x2f8>
    90f0:	03 c0       	rjmp	.+6      	; 0x90f8 <vfprintf+0x2f6>
    90f2:	8f 2d       	mov	r24, r15
    90f4:	86 78       	andi	r24, 0x86	; 134
    90f6:	09 f0       	breq	.+2      	; 0x90fa <vfprintf+0x2f8>
    90f8:	1f 5f       	subi	r17, 0xFF	; 255
    90fa:	0f 2d       	mov	r16, r15
    90fc:	f3 fc       	sbrc	r15, 3
    90fe:	14 c0       	rjmp	.+40     	; 0x9128 <vfprintf+0x326>
    9100:	f0 fe       	sbrs	r15, 0
    9102:	0f c0       	rjmp	.+30     	; 0x9122 <vfprintf+0x320>
    9104:	1e 15       	cp	r17, r14
    9106:	10 f0       	brcs	.+4      	; 0x910c <vfprintf+0x30a>
    9108:	9d 2c       	mov	r9, r13
    910a:	0b c0       	rjmp	.+22     	; 0x9122 <vfprintf+0x320>
    910c:	9d 2c       	mov	r9, r13
    910e:	9e 0c       	add	r9, r14
    9110:	91 1a       	sub	r9, r17
    9112:	1e 2d       	mov	r17, r14
    9114:	06 c0       	rjmp	.+12     	; 0x9122 <vfprintf+0x320>
    9116:	80 e2       	ldi	r24, 0x20	; 32
    9118:	90 e0       	ldi	r25, 0x00	; 0
    911a:	b3 01       	movw	r22, r6
    911c:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <fputc>
    9120:	1f 5f       	subi	r17, 0xFF	; 255
    9122:	1e 15       	cp	r17, r14
    9124:	c0 f3       	brcs	.-16     	; 0x9116 <vfprintf+0x314>
    9126:	04 c0       	rjmp	.+8      	; 0x9130 <vfprintf+0x32e>
    9128:	1e 15       	cp	r17, r14
    912a:	10 f4       	brcc	.+4      	; 0x9130 <vfprintf+0x32e>
    912c:	e1 1a       	sub	r14, r17
    912e:	01 c0       	rjmp	.+2      	; 0x9132 <vfprintf+0x330>
    9130:	ee 24       	eor	r14, r14
    9132:	04 ff       	sbrs	r16, 4
    9134:	0f c0       	rjmp	.+30     	; 0x9154 <vfprintf+0x352>
    9136:	80 e3       	ldi	r24, 0x30	; 48
    9138:	90 e0       	ldi	r25, 0x00	; 0
    913a:	b3 01       	movw	r22, r6
    913c:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <fputc>
    9140:	02 ff       	sbrs	r16, 2
    9142:	1d c0       	rjmp	.+58     	; 0x917e <vfprintf+0x37c>
    9144:	01 fd       	sbrc	r16, 1
    9146:	03 c0       	rjmp	.+6      	; 0x914e <vfprintf+0x34c>
    9148:	88 e7       	ldi	r24, 0x78	; 120
    914a:	90 e0       	ldi	r25, 0x00	; 0
    914c:	0e c0       	rjmp	.+28     	; 0x916a <vfprintf+0x368>
    914e:	88 e5       	ldi	r24, 0x58	; 88
    9150:	90 e0       	ldi	r25, 0x00	; 0
    9152:	0b c0       	rjmp	.+22     	; 0x916a <vfprintf+0x368>
    9154:	80 2f       	mov	r24, r16
    9156:	86 78       	andi	r24, 0x86	; 134
    9158:	91 f0       	breq	.+36     	; 0x917e <vfprintf+0x37c>
    915a:	01 ff       	sbrs	r16, 1
    915c:	02 c0       	rjmp	.+4      	; 0x9162 <vfprintf+0x360>
    915e:	8b e2       	ldi	r24, 0x2B	; 43
    9160:	01 c0       	rjmp	.+2      	; 0x9164 <vfprintf+0x362>
    9162:	80 e2       	ldi	r24, 0x20	; 32
    9164:	f7 fc       	sbrc	r15, 7
    9166:	8d e2       	ldi	r24, 0x2D	; 45
    9168:	90 e0       	ldi	r25, 0x00	; 0
    916a:	b3 01       	movw	r22, r6
    916c:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <fputc>
    9170:	06 c0       	rjmp	.+12     	; 0x917e <vfprintf+0x37c>
    9172:	80 e3       	ldi	r24, 0x30	; 48
    9174:	90 e0       	ldi	r25, 0x00	; 0
    9176:	b3 01       	movw	r22, r6
    9178:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <fputc>
    917c:	9a 94       	dec	r9
    917e:	d9 14       	cp	r13, r9
    9180:	c0 f3       	brcs	.-16     	; 0x9172 <vfprintf+0x370>
    9182:	da 94       	dec	r13
    9184:	f1 01       	movw	r30, r2
    9186:	ed 0d       	add	r30, r13
    9188:	f1 1d       	adc	r31, r1
    918a:	80 81       	ld	r24, Z
    918c:	90 e0       	ldi	r25, 0x00	; 0
    918e:	b3 01       	movw	r22, r6
    9190:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <fputc>
    9194:	dd 20       	and	r13, r13
    9196:	a9 f7       	brne	.-22     	; 0x9182 <vfprintf+0x380>
    9198:	06 c0       	rjmp	.+12     	; 0x91a6 <vfprintf+0x3a4>
    919a:	80 e2       	ldi	r24, 0x20	; 32
    919c:	90 e0       	ldi	r25, 0x00	; 0
    919e:	b3 01       	movw	r22, r6
    91a0:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <fputc>
    91a4:	ea 94       	dec	r14
    91a6:	ee 20       	and	r14, r14
    91a8:	c1 f7       	brne	.-16     	; 0x919a <vfprintf+0x398>
    91aa:	43 ce       	rjmp	.-890    	; 0x8e32 <vfprintf+0x30>
    91ac:	f3 01       	movw	r30, r6
    91ae:	66 81       	ldd	r22, Z+6	; 0x06
    91b0:	77 81       	ldd	r23, Z+7	; 0x07
    91b2:	cb 01       	movw	r24, r22
    91b4:	2b 96       	adiw	r28, 0x0b	; 11
    91b6:	e2 e1       	ldi	r30, 0x12	; 18
    91b8:	0c 94 02 4a 	jmp	0x9404	; 0x9404 <__epilogue_restores__>

000091bc <strnlen_P>:
    91bc:	fc 01       	movw	r30, r24
    91be:	05 90       	lpm	r0, Z+
    91c0:	61 50       	subi	r22, 0x01	; 1
    91c2:	70 40       	sbci	r23, 0x00	; 0
    91c4:	01 10       	cpse	r0, r1
    91c6:	d8 f7       	brcc	.-10     	; 0x91be <strnlen_P+0x2>
    91c8:	80 95       	com	r24
    91ca:	90 95       	com	r25
    91cc:	8e 0f       	add	r24, r30
    91ce:	9f 1f       	adc	r25, r31
    91d0:	08 95       	ret

000091d2 <strnlen>:
    91d2:	fc 01       	movw	r30, r24
    91d4:	61 50       	subi	r22, 0x01	; 1
    91d6:	70 40       	sbci	r23, 0x00	; 0
    91d8:	01 90       	ld	r0, Z+
    91da:	01 10       	cpse	r0, r1
    91dc:	d8 f7       	brcc	.-10     	; 0x91d4 <strnlen+0x2>
    91de:	80 95       	com	r24
    91e0:	90 95       	com	r25
    91e2:	8e 0f       	add	r24, r30
    91e4:	9f 1f       	adc	r25, r31
    91e6:	08 95       	ret

000091e8 <fputc>:
    91e8:	0f 93       	push	r16
    91ea:	1f 93       	push	r17
    91ec:	cf 93       	push	r28
    91ee:	df 93       	push	r29
    91f0:	8c 01       	movw	r16, r24
    91f2:	eb 01       	movw	r28, r22
    91f4:	8b 81       	ldd	r24, Y+3	; 0x03
    91f6:	81 ff       	sbrs	r24, 1
    91f8:	1b c0       	rjmp	.+54     	; 0x9230 <fputc+0x48>
    91fa:	82 ff       	sbrs	r24, 2
    91fc:	0d c0       	rjmp	.+26     	; 0x9218 <fputc+0x30>
    91fe:	2e 81       	ldd	r18, Y+6	; 0x06
    9200:	3f 81       	ldd	r19, Y+7	; 0x07
    9202:	8c 81       	ldd	r24, Y+4	; 0x04
    9204:	9d 81       	ldd	r25, Y+5	; 0x05
    9206:	28 17       	cp	r18, r24
    9208:	39 07       	cpc	r19, r25
    920a:	64 f4       	brge	.+24     	; 0x9224 <fputc+0x3c>
    920c:	e8 81       	ld	r30, Y
    920e:	f9 81       	ldd	r31, Y+1	; 0x01
    9210:	01 93       	st	Z+, r16
    9212:	f9 83       	std	Y+1, r31	; 0x01
    9214:	e8 83       	st	Y, r30
    9216:	06 c0       	rjmp	.+12     	; 0x9224 <fputc+0x3c>
    9218:	e8 85       	ldd	r30, Y+8	; 0x08
    921a:	f9 85       	ldd	r31, Y+9	; 0x09
    921c:	80 2f       	mov	r24, r16
    921e:	09 95       	icall
    9220:	89 2b       	or	r24, r25
    9222:	31 f4       	brne	.+12     	; 0x9230 <fputc+0x48>
    9224:	8e 81       	ldd	r24, Y+6	; 0x06
    9226:	9f 81       	ldd	r25, Y+7	; 0x07
    9228:	01 96       	adiw	r24, 0x01	; 1
    922a:	9f 83       	std	Y+7, r25	; 0x07
    922c:	8e 83       	std	Y+6, r24	; 0x06
    922e:	02 c0       	rjmp	.+4      	; 0x9234 <fputc+0x4c>
    9230:	0f ef       	ldi	r16, 0xFF	; 255
    9232:	1f ef       	ldi	r17, 0xFF	; 255
    9234:	c8 01       	movw	r24, r16
    9236:	df 91       	pop	r29
    9238:	cf 91       	pop	r28
    923a:	1f 91       	pop	r17
    923c:	0f 91       	pop	r16
    923e:	08 95       	ret

00009240 <__ultoa_invert>:
    9240:	fa 01       	movw	r30, r20
    9242:	aa 27       	eor	r26, r26
    9244:	28 30       	cpi	r18, 0x08	; 8
    9246:	51 f1       	breq	.+84     	; 0x929c <__ultoa_invert+0x5c>
    9248:	20 31       	cpi	r18, 0x10	; 16
    924a:	81 f1       	breq	.+96     	; 0x92ac <__ultoa_invert+0x6c>
    924c:	e8 94       	clt
    924e:	6f 93       	push	r22
    9250:	6e 7f       	andi	r22, 0xFE	; 254
    9252:	6e 5f       	subi	r22, 0xFE	; 254
    9254:	7f 4f       	sbci	r23, 0xFF	; 255
    9256:	8f 4f       	sbci	r24, 0xFF	; 255
    9258:	9f 4f       	sbci	r25, 0xFF	; 255
    925a:	af 4f       	sbci	r26, 0xFF	; 255
    925c:	b1 e0       	ldi	r27, 0x01	; 1
    925e:	3e d0       	rcall	.+124    	; 0x92dc <__ultoa_invert+0x9c>
    9260:	b4 e0       	ldi	r27, 0x04	; 4
    9262:	3c d0       	rcall	.+120    	; 0x92dc <__ultoa_invert+0x9c>
    9264:	67 0f       	add	r22, r23
    9266:	78 1f       	adc	r23, r24
    9268:	89 1f       	adc	r24, r25
    926a:	9a 1f       	adc	r25, r26
    926c:	a1 1d       	adc	r26, r1
    926e:	68 0f       	add	r22, r24
    9270:	79 1f       	adc	r23, r25
    9272:	8a 1f       	adc	r24, r26
    9274:	91 1d       	adc	r25, r1
    9276:	a1 1d       	adc	r26, r1
    9278:	6a 0f       	add	r22, r26
    927a:	71 1d       	adc	r23, r1
    927c:	81 1d       	adc	r24, r1
    927e:	91 1d       	adc	r25, r1
    9280:	a1 1d       	adc	r26, r1
    9282:	20 d0       	rcall	.+64     	; 0x92c4 <__ultoa_invert+0x84>
    9284:	09 f4       	brne	.+2      	; 0x9288 <__ultoa_invert+0x48>
    9286:	68 94       	set
    9288:	3f 91       	pop	r19
    928a:	2a e0       	ldi	r18, 0x0A	; 10
    928c:	26 9f       	mul	r18, r22
    928e:	11 24       	eor	r1, r1
    9290:	30 19       	sub	r19, r0
    9292:	30 5d       	subi	r19, 0xD0	; 208
    9294:	31 93       	st	Z+, r19
    9296:	de f6       	brtc	.-74     	; 0x924e <__ultoa_invert+0xe>
    9298:	cf 01       	movw	r24, r30
    929a:	08 95       	ret
    929c:	46 2f       	mov	r20, r22
    929e:	47 70       	andi	r20, 0x07	; 7
    92a0:	40 5d       	subi	r20, 0xD0	; 208
    92a2:	41 93       	st	Z+, r20
    92a4:	b3 e0       	ldi	r27, 0x03	; 3
    92a6:	0f d0       	rcall	.+30     	; 0x92c6 <__ultoa_invert+0x86>
    92a8:	c9 f7       	brne	.-14     	; 0x929c <__ultoa_invert+0x5c>
    92aa:	f6 cf       	rjmp	.-20     	; 0x9298 <__ultoa_invert+0x58>
    92ac:	46 2f       	mov	r20, r22
    92ae:	4f 70       	andi	r20, 0x0F	; 15
    92b0:	40 5d       	subi	r20, 0xD0	; 208
    92b2:	4a 33       	cpi	r20, 0x3A	; 58
    92b4:	18 f0       	brcs	.+6      	; 0x92bc <__ultoa_invert+0x7c>
    92b6:	49 5d       	subi	r20, 0xD9	; 217
    92b8:	31 fd       	sbrc	r19, 1
    92ba:	40 52       	subi	r20, 0x20	; 32
    92bc:	41 93       	st	Z+, r20
    92be:	02 d0       	rcall	.+4      	; 0x92c4 <__ultoa_invert+0x84>
    92c0:	a9 f7       	brne	.-22     	; 0x92ac <__ultoa_invert+0x6c>
    92c2:	ea cf       	rjmp	.-44     	; 0x9298 <__ultoa_invert+0x58>
    92c4:	b4 e0       	ldi	r27, 0x04	; 4
    92c6:	a6 95       	lsr	r26
    92c8:	97 95       	ror	r25
    92ca:	87 95       	ror	r24
    92cc:	77 95       	ror	r23
    92ce:	67 95       	ror	r22
    92d0:	ba 95       	dec	r27
    92d2:	c9 f7       	brne	.-14     	; 0x92c6 <__ultoa_invert+0x86>
    92d4:	00 97       	sbiw	r24, 0x00	; 0
    92d6:	61 05       	cpc	r22, r1
    92d8:	71 05       	cpc	r23, r1
    92da:	08 95       	ret
    92dc:	9b 01       	movw	r18, r22
    92de:	ac 01       	movw	r20, r24
    92e0:	0a 2e       	mov	r0, r26
    92e2:	06 94       	lsr	r0
    92e4:	57 95       	ror	r21
    92e6:	47 95       	ror	r20
    92e8:	37 95       	ror	r19
    92ea:	27 95       	ror	r18
    92ec:	ba 95       	dec	r27
    92ee:	c9 f7       	brne	.-14     	; 0x92e2 <__ultoa_invert+0xa2>
    92f0:	62 0f       	add	r22, r18
    92f2:	73 1f       	adc	r23, r19
    92f4:	84 1f       	adc	r24, r20
    92f6:	95 1f       	adc	r25, r21
    92f8:	a0 1d       	adc	r26, r0
    92fa:	08 95       	ret

000092fc <__mulsi3>:
    92fc:	62 9f       	mul	r22, r18
    92fe:	d0 01       	movw	r26, r0
    9300:	73 9f       	mul	r23, r19
    9302:	f0 01       	movw	r30, r0
    9304:	82 9f       	mul	r24, r18
    9306:	e0 0d       	add	r30, r0
    9308:	f1 1d       	adc	r31, r1
    930a:	64 9f       	mul	r22, r20
    930c:	e0 0d       	add	r30, r0
    930e:	f1 1d       	adc	r31, r1
    9310:	92 9f       	mul	r25, r18
    9312:	f0 0d       	add	r31, r0
    9314:	83 9f       	mul	r24, r19
    9316:	f0 0d       	add	r31, r0
    9318:	74 9f       	mul	r23, r20
    931a:	f0 0d       	add	r31, r0
    931c:	65 9f       	mul	r22, r21
    931e:	f0 0d       	add	r31, r0
    9320:	99 27       	eor	r25, r25
    9322:	72 9f       	mul	r23, r18
    9324:	b0 0d       	add	r27, r0
    9326:	e1 1d       	adc	r30, r1
    9328:	f9 1f       	adc	r31, r25
    932a:	63 9f       	mul	r22, r19
    932c:	b0 0d       	add	r27, r0
    932e:	e1 1d       	adc	r30, r1
    9330:	f9 1f       	adc	r31, r25
    9332:	bd 01       	movw	r22, r26
    9334:	cf 01       	movw	r24, r30
    9336:	11 24       	eor	r1, r1
    9338:	08 95       	ret

0000933a <__udivmodhi4>:
    933a:	aa 1b       	sub	r26, r26
    933c:	bb 1b       	sub	r27, r27
    933e:	51 e1       	ldi	r21, 0x11	; 17
    9340:	07 c0       	rjmp	.+14     	; 0x9350 <__udivmodhi4_ep>

00009342 <__udivmodhi4_loop>:
    9342:	aa 1f       	adc	r26, r26
    9344:	bb 1f       	adc	r27, r27
    9346:	a6 17       	cp	r26, r22
    9348:	b7 07       	cpc	r27, r23
    934a:	10 f0       	brcs	.+4      	; 0x9350 <__udivmodhi4_ep>
    934c:	a6 1b       	sub	r26, r22
    934e:	b7 0b       	sbc	r27, r23

00009350 <__udivmodhi4_ep>:
    9350:	88 1f       	adc	r24, r24
    9352:	99 1f       	adc	r25, r25
    9354:	5a 95       	dec	r21
    9356:	a9 f7       	brne	.-22     	; 0x9342 <__udivmodhi4_loop>
    9358:	80 95       	com	r24
    935a:	90 95       	com	r25
    935c:	bc 01       	movw	r22, r24
    935e:	cd 01       	movw	r24, r26
    9360:	08 95       	ret

00009362 <__divmodhi4>:
    9362:	97 fb       	bst	r25, 7
    9364:	09 2e       	mov	r0, r25
    9366:	07 26       	eor	r0, r23
    9368:	0a d0       	rcall	.+20     	; 0x937e <__divmodhi4_neg1>
    936a:	77 fd       	sbrc	r23, 7
    936c:	04 d0       	rcall	.+8      	; 0x9376 <__divmodhi4_neg2>
    936e:	e5 df       	rcall	.-54     	; 0x933a <__udivmodhi4>
    9370:	06 d0       	rcall	.+12     	; 0x937e <__divmodhi4_neg1>
    9372:	00 20       	and	r0, r0
    9374:	1a f4       	brpl	.+6      	; 0x937c <__divmodhi4_exit>

00009376 <__divmodhi4_neg2>:
    9376:	70 95       	com	r23
    9378:	61 95       	neg	r22
    937a:	7f 4f       	sbci	r23, 0xFF	; 255

0000937c <__divmodhi4_exit>:
    937c:	08 95       	ret

0000937e <__divmodhi4_neg1>:
    937e:	f6 f7       	brtc	.-4      	; 0x937c <__divmodhi4_exit>
    9380:	90 95       	com	r25
    9382:	81 95       	neg	r24
    9384:	9f 4f       	sbci	r25, 0xFF	; 255
    9386:	08 95       	ret

00009388 <__udivmodsi4>:
    9388:	a1 e2       	ldi	r26, 0x21	; 33
    938a:	1a 2e       	mov	r1, r26
    938c:	aa 1b       	sub	r26, r26
    938e:	bb 1b       	sub	r27, r27
    9390:	fd 01       	movw	r30, r26
    9392:	0d c0       	rjmp	.+26     	; 0x93ae <__udivmodsi4_ep>

00009394 <__udivmodsi4_loop>:
    9394:	aa 1f       	adc	r26, r26
    9396:	bb 1f       	adc	r27, r27
    9398:	ee 1f       	adc	r30, r30
    939a:	ff 1f       	adc	r31, r31
    939c:	a2 17       	cp	r26, r18
    939e:	b3 07       	cpc	r27, r19
    93a0:	e4 07       	cpc	r30, r20
    93a2:	f5 07       	cpc	r31, r21
    93a4:	20 f0       	brcs	.+8      	; 0x93ae <__udivmodsi4_ep>
    93a6:	a2 1b       	sub	r26, r18
    93a8:	b3 0b       	sbc	r27, r19
    93aa:	e4 0b       	sbc	r30, r20
    93ac:	f5 0b       	sbc	r31, r21

000093ae <__udivmodsi4_ep>:
    93ae:	66 1f       	adc	r22, r22
    93b0:	77 1f       	adc	r23, r23
    93b2:	88 1f       	adc	r24, r24
    93b4:	99 1f       	adc	r25, r25
    93b6:	1a 94       	dec	r1
    93b8:	69 f7       	brne	.-38     	; 0x9394 <__udivmodsi4_loop>
    93ba:	60 95       	com	r22
    93bc:	70 95       	com	r23
    93be:	80 95       	com	r24
    93c0:	90 95       	com	r25
    93c2:	9b 01       	movw	r18, r22
    93c4:	ac 01       	movw	r20, r24
    93c6:	bd 01       	movw	r22, r26
    93c8:	cf 01       	movw	r24, r30
    93ca:	08 95       	ret

000093cc <__prologue_saves__>:
    93cc:	2f 92       	push	r2
    93ce:	3f 92       	push	r3
    93d0:	4f 92       	push	r4
    93d2:	5f 92       	push	r5
    93d4:	6f 92       	push	r6
    93d6:	7f 92       	push	r7
    93d8:	8f 92       	push	r8
    93da:	9f 92       	push	r9
    93dc:	af 92       	push	r10
    93de:	bf 92       	push	r11
    93e0:	cf 92       	push	r12
    93e2:	df 92       	push	r13
    93e4:	ef 92       	push	r14
    93e6:	ff 92       	push	r15
    93e8:	0f 93       	push	r16
    93ea:	1f 93       	push	r17
    93ec:	cf 93       	push	r28
    93ee:	df 93       	push	r29
    93f0:	cd b7       	in	r28, 0x3d	; 61
    93f2:	de b7       	in	r29, 0x3e	; 62
    93f4:	ca 1b       	sub	r28, r26
    93f6:	db 0b       	sbc	r29, r27
    93f8:	0f b6       	in	r0, 0x3f	; 63
    93fa:	f8 94       	cli
    93fc:	de bf       	out	0x3e, r29	; 62
    93fe:	0f be       	out	0x3f, r0	; 63
    9400:	cd bf       	out	0x3d, r28	; 61
    9402:	09 94       	ijmp

00009404 <__epilogue_restores__>:
    9404:	2a 88       	ldd	r2, Y+18	; 0x12
    9406:	39 88       	ldd	r3, Y+17	; 0x11
    9408:	48 88       	ldd	r4, Y+16	; 0x10
    940a:	5f 84       	ldd	r5, Y+15	; 0x0f
    940c:	6e 84       	ldd	r6, Y+14	; 0x0e
    940e:	7d 84       	ldd	r7, Y+13	; 0x0d
    9410:	8c 84       	ldd	r8, Y+12	; 0x0c
    9412:	9b 84       	ldd	r9, Y+11	; 0x0b
    9414:	aa 84       	ldd	r10, Y+10	; 0x0a
    9416:	b9 84       	ldd	r11, Y+9	; 0x09
    9418:	c8 84       	ldd	r12, Y+8	; 0x08
    941a:	df 80       	ldd	r13, Y+7	; 0x07
    941c:	ee 80       	ldd	r14, Y+6	; 0x06
    941e:	fd 80       	ldd	r15, Y+5	; 0x05
    9420:	0c 81       	ldd	r16, Y+4	; 0x04
    9422:	1b 81       	ldd	r17, Y+3	; 0x03
    9424:	aa 81       	ldd	r26, Y+2	; 0x02
    9426:	b9 81       	ldd	r27, Y+1	; 0x01
    9428:	ce 0f       	add	r28, r30
    942a:	d1 1d       	adc	r29, r1
    942c:	0f b6       	in	r0, 0x3f	; 63
    942e:	f8 94       	cli
    9430:	de bf       	out	0x3e, r29	; 62
    9432:	0f be       	out	0x3f, r0	; 63
    9434:	cd bf       	out	0x3d, r28	; 61
    9436:	ed 01       	movw	r28, r26
    9438:	08 95       	ret

0000943a <_exit>:
    943a:	f8 94       	cli

0000943c <__stop_program>:
    943c:	ff cf       	rjmp	.-2      	; 0x943c <__stop_program>
