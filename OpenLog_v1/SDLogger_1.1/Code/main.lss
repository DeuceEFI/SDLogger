
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  000096e4  00009778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000096e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b2d  008001bc  008001bc  00009834  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00009834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005f5  00000000  00000000  000098d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005335  00000000  00000000  00009ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a54  00000000  00000000  0000f1fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000041df  00000000  00000000  0000fc52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000580  00000000  00000000  00013e34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ff7  00000000  00000000  000143b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004a88  00000000  00000000  000153ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00019e33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__ctors_end>
       4:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
       8:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
       c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      10:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      14:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      18:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      1c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      20:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      24:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      28:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      2c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      30:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      34:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      38:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      3c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      40:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      44:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      48:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      4c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      50:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__vector_20>
      54:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      58:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      5c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      60:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      64:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      68:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      6c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      70:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      74:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>
      78:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__bad_interrupt>

0000007c <__c.3125>:
      7c:	29 3a 20 00                                         ): .

00000080 <__c.3123>:
      80:	74 6f 6f 20 6d 61 6e 79 20 61 72 67 75 6d 65 6e     too many argumen
      90:	74 73 28 00                                         ts(.

00000094 <__c.3050>:
      94:	45 78 69 74 69 6e 67 0a 00                          Exiting..

0000009d <__c.3048>:
      9d:	78 00                                               x.

0000009f <__c.3046>:
      9f:	0a 00                                               ..

000000a1 <__c.3044>:
      a1:	0a 4e 75 6d 62 65 72 20 6f 66 20 65 73 63 61 70     .Number of escap
      b1:	65 20 63 68 61 72 61 63 74 65 72 73 20 6e 65 65     e characters nee
      c1:	64 65 64 3a 20 00                                   ded: .

000000c7 <__c.3039>:
      c7:	45 6e 74 65 72 20 6e 75 6d 62 65 72 20 6f 66 20     Enter number of 
      d7:	65 73 63 61 70 65 20 63 68 61 72 61 63 74 65 72     escape character
      e7:	73 20 74 6f 20 6c 6f 6f 6b 20 66 6f 72 3a 20 00     s to look for: .

000000f7 <__c.3036>:
      f7:	36 00                                               6.

000000f9 <__c.3034>:
      f9:	0a 00                                               ..

000000fb <__c.3032>:
      fb:	0a 4e 65 77 20 65 73 63 61 70 65 20 63 68 61 72     .New escape char
     10b:	61 63 74 65 72 3a 20 00                             acter: .

00000113 <__c.3030>:
     113:	45 6e 74 65 72 20 61 20 6e 65 77 20 65 73 63 61     Enter a new esca
     123:	70 65 20 63 68 61 72 61 63 74 65 72 3a 20 00        pe character: .

00000132 <__c.3028>:
     132:	35 00                                               5.

00000134 <__c.3026>:
     134:	4e 65 77 20 66 69 6c 65 20 6e 75 6d 62 65 72 20     New file number 
     144:	72 65 73 65 74 20 74 6f 20 7a 65 72 6f 0a 00        reset to zero..

00000153 <__c.3024>:
     153:	34 00                                               4.

00000155 <__c.3022>:
     155:	43 6f 6d 6d 61 6e 64 20 70 72 6f 6d 70 74 0a 00     Command prompt..

00000165 <__c.3020>:
     165:	33 00                                               3.

00000167 <__c.3018>:
     167:	41 70 70 65 6e 64 20 66 69 6c 65 20 6c 6f 67 67     Append file logg
     177:	69 6e 67 0a 00                                      ing..

0000017c <__c.3016>:
     17c:	32 00                                               2.

0000017e <__c.3014>:
     17e:	4e 65 77 20 66 69 6c 65 20 6c 6f 67 67 69 6e 67     New file logging
     18e:	0a 00                                               ..

00000190 <__c.3012>:
     190:	31 00                                               1.

00000192 <__c.3008>:
     192:	78 29 20 45 78 69 74 0a 00                          x) Exit..

0000019b <__c.3006>:
     19b:	36 29 20 4e 75 6d 62 65 72 20 6f 66 20 65 73 63     6) Number of esc
     1ab:	61 70 65 20 63 68 61 72 61 63 74 65 72 73 0a 00     ape characters..

000001bb <__c.3004>:
     1bb:	35 29 20 4e 65 77 20 65 73 63 61 70 65 20 63 68     5) New escape ch
     1cb:	61 72 61 63 74 65 72 0a 00                          aracter..

000001d4 <__c.3002>:
     1d4:	34 29 20 52 65 73 65 74 20 6e 65 77 20 66 69 6c     4) Reset new fil
     1e4:	65 20 6e 75 6d 62 65 72 0a 00                       e number..

000001ee <__c.3000>:
     1ee:	33 29 20 43 6f 6d 6d 61 6e 64 20 70 72 6f 6d 70     3) Command promp
     1fe:	74 0a 00                                            t..

00000201 <__c.2998>:
     201:	32 29 20 41 70 70 65 6e 64 20 66 69 6c 65 20 6c     2) Append file l
     211:	6f 67 67 69 6e 67 0a 00                             ogging..

00000219 <__c.2996>:
     219:	31 29 20 4e 65 77 20 66 69 6c 65 20 6c 6f 67 67     1) New file logg
     229:	69 6e 67 0a 00                                      ing..

0000022e <__c.2994>:
     22e:	43 68 61 6e 67 65 20 74 6f 3a 0a 00                 Change to:..

0000023a <__c.2992>:
     23a:	0a 00                                               ..

0000023c <__c.2990>:
     23c:	20 78 20 00                                          x .

00000240 <__c.2988>:
     240:	43 75 72 72 65 6e 74 20 65 73 63 61 70 65 20 63     Current escape c
     250:	68 61 72 61 63 74 65 72 20 61 6e 64 20 61 6d 6f     haracter and amo
     260:	75 6e 74 3a 20 00                                   unt: .

00000266 <__c.2986>:
     266:	0a 00                                               ..

00000268 <__c.2984>:
     268:	43 6f 6d 6d 61 6e 64 00                             Command.

00000270 <__c.2982>:
     270:	41 70 70 65 6e 64 20 66 69 6c 65 00                 Append file.

0000027c <__c.2980>:
     27c:	4e 65 77 20 66 69 6c 65 00                          New file.

00000285 <__c.2978>:
     285:	43 75 72 72 65 6e 74 20 62 6f 6f 74 20 6d 6f 64     Current boot mod
     295:	65 3a 20 00                                         e: .

00000299 <__c.2976>:
     299:	0a 53 79 73 74 65 6d 20 43 6f 6e 66 69 67 75 72     .System Configur
     2a9:	61 74 69 6f 6e 0a 00                                ation..

000002b0 <__c.2957>:
     2b0:	0a 45 78 69 74 69 6e 67 0a 00                       .Exiting..

000002ba <__c.2955>:
     2ba:	78 00                                               x.

000002bc <__c.2953>:
     2bc:	0a 47 6f 69 6e 67 20 74 6f 20 32 33 30 34 30 30     .Going to 230400
     2cc:	62 70 73 2e 2e 2e 0a 00                             bps.....

000002d4 <__c.2951>:
     2d4:	38 00                                               8.

000002d6 <__c.2949>:
     2d6:	0a 47 6f 69 6e 67 20 74 6f 20 31 31 35 32 30 30     .Going to 115200
     2e6:	62 70 73 2e 2e 2e 0a 00                             bps.....

000002ee <__c.2947>:
     2ee:	37 00                                               7.

000002f0 <__c.2945>:
     2f0:	0a 47 6f 69 6e 67 20 74 6f 20 35 37 36 30 30 62     .Going to 57600b
     300:	70 73 2e 2e 2e 0a 00                                ps.....

00000307 <__c.2943>:
     307:	36 00                                               6.

00000309 <__c.2941>:
     309:	0a 47 6f 69 6e 67 20 74 6f 20 33 38 34 30 30 62     .Going to 38400b
     319:	70 73 2e 2e 2e 0a 00                                ps.....

00000320 <__c.2939>:
     320:	35 00                                               5.

00000322 <__c.2937>:
     322:	0a 47 6f 69 6e 67 20 74 6f 20 31 39 32 30 30 62     .Going to 19200b
     332:	70 73 2e 2e 2e 0a 00                                ps.....

00000339 <__c.2935>:
     339:	34 00                                               4.

0000033b <__c.2933>:
     33b:	0a 47 6f 69 6e 67 20 74 6f 20 39 36 30 30 62 70     .Going to 9600bp
     34b:	73 2e 2e 2e 0a 00                                   s.....

00000351 <__c.2931>:
     351:	33 00                                               3.

00000353 <__c.2929>:
     353:	0a 47 6f 69 6e 67 20 74 6f 20 34 38 30 30 62 70     .Going to 4800bp
     363:	73 2e 2e 2e 0a 00                                   s.....

00000369 <__c.2927>:
     369:	32 00                                               2.

0000036b <__c.2925>:
     36b:	0a 47 6f 69 6e 67 20 74 6f 20 32 34 30 30 62 70     .Going to 2400bp
     37b:	73 2e 2e 2e 0a 00                                   s.....

00000381 <__c.2923>:
     381:	31 00                                               1.

00000383 <__c.2919>:
     383:	78 29 20 45 78 69 74 0a 00                          x) Exit..

0000038c <__c.2917>:
     38c:	38 29 20 32 33 30 34 30 30 20 62 70 73 0a 00        8) 230400 bps..

0000039b <__c.2915>:
     39b:	37 29 20 31 31 35 32 30 30 20 62 70 73 0a 00        7) 115200 bps..

000003aa <__c.2913>:
     3aa:	36 29 20 35 37 36 30 30 20 62 70 73 0a 00           6) 57600 bps..

000003b8 <__c.2911>:
     3b8:	35 29 20 33 38 34 30 30 20 62 70 73 0a 00           5) 38400 bps..

000003c6 <__c.2909>:
     3c6:	34 29 20 31 39 32 30 30 20 62 70 73 0a 00           4) 19200 bps..

000003d4 <__c.2907>:
     3d4:	33 29 20 39 36 30 30 20 62 70 73 0a 00              3) 9600 bps..

000003e1 <__c.2905>:
     3e1:	32 29 20 34 38 30 30 20 62 70 73 0a 00              2) 4800 bps..

000003ee <__c.2903>:
     3ee:	31 29 20 32 34 30 30 20 62 70 73 0a 00              1) 2400 bps..

000003fb <__c.2901>:
     3fb:	43 68 61 6e 67 65 20 74 6f 3a 0a 00                 Change to:..

00000407 <__c.2899>:
     407:	30 30 20 62 70 73 0a 00                             00 bps..

0000040f <__c.2897>:
     40f:	32 33 30 34 00                                      2304.

00000414 <__c.2895>:
     414:	31 31 35 32 00                                      1152.

00000419 <__c.2893>:
     419:	35 37 36 00                                         576.

0000041d <__c.2891>:
     41d:	33 38 34 00                                         384.

00000421 <__c.2889>:
     421:	31 39 32 00                                         192.

00000425 <__c.2887>:
     425:	39 36 00                                            96.

00000428 <__c.2885>:
     428:	32 34 00                                            24.

0000042b <__c.2883>:
     42b:	34 38 00                                            48.

0000042e <__c.2881>:
     42e:	43 75 72 72 65 6e 74 3a 20 00                       Current: .

00000438 <__c.2879>:
     438:	0a 42 61 75 64 20 43 6f 6e 66 69 67 75 72 61 74     .Baud Configurat
     448:	69 6f 6e 3a 0a 00                                   ion:..

0000044e <__c.2872>:
     44e:	62 61 75 64 09 09 09 3a 20 4d 65 6e 75 20 74 6f     baud...: Menu to
     45e:	20 63 6f 6e 66 69 67 75 72 65 20 62 61 75 64 20      configure baud 
     46e:	72 61 74 65 0a 00                                   rate..

00000474 <__c.2870>:
     474:	73 65 74 09 09 09 3a 20 4d 65 6e 75 20 74 6f 20     set...: Menu to 
     484:	63 6f 6e 66 69 67 75 72 65 20 73 79 73 74 65 6d     configure system
     494:	20 62 6f 6f 74 20 6d 6f 64 65 0a 00                  boot mode..

000004a0 <__c.2868>:
     4a0:	0a 4d 65 6e 75 73 3a 0a 00                          .Menus:..

000004a9 <__c.2866>:
     4a9:	73 79 6e 63 09 09 09 3a 20 45 6e 73 75 72 65 73     sync...: Ensures
     4b9:	20 61 6c 6c 20 62 75 66 66 65 72 65 64 20 64 61      all buffered da
     4c9:	74 61 20 69 73 20 77 72 69 74 74 65 6e 20 74 6f     ta is written to
     4d9:	20 74 68 65 20 63 61 72 64 0a 00                     the card..

000004e4 <__c.2864>:
     4e4:	69 6e 69 74 09 09 09 3a 20 52 65 69 6e 69 74 69     init...: Reiniti
     4f4:	61 6c 69 7a 65 73 20 61 6e 64 20 72 65 6f 70 65     alizes and reope
     504:	6e 73 20 74 68 65 20 6d 65 6d 6f 72 79 20 63 61     ns the memory ca
     514:	72 64 0a 00                                         rd..

00000518 <__c.2862>:
     518:	64 69 73 6b 09 09 09 3a 20 53 68 6f 77 73 20 63     disk...: Shows c
     528:	61 72 64 20 6d 61 6e 75 66 61 63 74 75 72 65 72     ard manufacturer
     538:	2c 20 73 74 61 74 75 73 2c 20 66 69 6c 65 73 79     , status, filesy
     548:	73 74 65 6d 20 63 61 70 61 63 69 74 79 20 61 6e     stem capacity an
     558:	64 20 66 72 65 65 20 73 74 6f 72 61 67 65 20 73     d free storage s
     568:	70 61 63 65 0a 00                                   pace..

0000056e <__c.2860>:
     56e:	73 69 7a 65 20 3c 66 69 6c 65 3e 09 09 3a 20 57     size <file>..: W
     57e:	72 69 74 65 20 73 69 7a 65 20 6f 66 20 66 69 6c     rite size of fil
     58e:	65 20 74 6f 20 74 65 72 6d 69 6e 61 6c 0a 00        e to terminal..

0000059d <__c.2858>:
     59d:	72 65 61 64 20 3c 66 69 6c 65 3e 20 3c 73 74 61     read <file> <sta
     5ad:	72 74 3e 20 3c 6c 65 6e 67 74 68 3e 09 09 3a 20     rt> <length>..: 
     5bd:	57 72 69 74 65 73 20 41 53 43 49 49 20 3c 6c 65     Writes ASCII <le
     5cd:	6e 67 74 68 3e 20 70 61 72 74 73 20 6f 66 20 3c     ngth> parts of <
     5dd:	66 69 6c 65 3e 20 74 6f 20 74 68 65 20 74 65 72     file> to the ter
     5ed:	6d 69 6e 61 6c 20 73 74 61 72 74 69 6e 67 20 61     minal starting a
     5fd:	74 20 3c 73 74 61 72 74 3e 2e 20 4f 6d 6d 69 74     t <start>. Ommit
     60d:	20 3c 73 74 61 72 74 3e 20 61 6e 64 20 3c 6c 65      <start> and <le
     61d:	6e 67 74 68 3e 20 74 6f 20 72 65 61 64 20 77 68     ngth> to read wh
     62d:	6f 6c 65 20 66 69 6c 65 0a 00                       ole file..

00000637 <__c.2856>:
     637:	63 61 74 20 3c 66 69 6c 65 3e 09 09 3a 20 57 72     cat <file>..: Wr
     647:	69 74 65 73 20 61 20 68 65 78 64 75 6d 70 20 6f     ites a hexdump o
     657:	66 20 3c 66 69 6c 65 3e 20 74 6f 20 74 68 65 20     f <file> to the 
     667:	74 65 72 6d 69 6e 61 6c 0a 00                       terminal..

00000671 <__c.2854>:
     671:	6c 73 09 09 09 3a 20 53 68 6f 77 73 20 74 68 65     ls...: Shows the
     681:	20 63 6f 6e 74 65 6e 74 20 6f 66 20 74 68 65 20      content of the 
     691:	63 75 72 72 65 6e 74 20 64 69 72 65 63 74 6f 72     current director
     6a1:	79 2e 20 55 73 65 20 77 69 6c 64 63 61 72 64 20     y. Use wildcard 
     6b1:	74 6f 20 64 6f 20 61 20 77 69 6c 64 63 61 72 64     to do a wildcard
     6c1:	20 6c 69 73 74 69 6e 67 20 6f 66 20 66 69 6c 65      listing of file
     6d1:	73 20 69 6e 20 63 75 72 72 65 6e 74 20 64 69 72     s in current dir
     6e1:	65 63 74 6f 72 79 0a 00                             ectory..

000006e9 <__c.2852>:
     6e9:	63 64 20 2e 2e 09 09 3a 20 43 68 61 6e 67 65 73     cd ....: Changes
     6f9:	20 74 6f 20 6c 6f 77 65 72 20 64 69 72 65 63 74      to lower direct
     709:	6f 72 79 20 69 6e 20 74 72 65 65 0a 00              ory in tree..

00000716 <__c.2850>:
     716:	63 64 20 3c 64 69 72 65 63 74 6f 72 79 3e 09 09     cd <directory>..
     726:	3a 20 43 68 61 6e 67 65 73 20 63 75 72 72 65 6e     : Changes curren
     736:	74 20 77 6f 72 6b 69 6e 67 20 64 69 72 65 63 74     t working direct
     746:	6f 72 79 20 74 6f 20 3c 64 69 72 65 63 74 6f 72     ory to <director
     756:	79 3e 0a 00                                         y>..

0000075a <__c.2848>:
     75a:	6d 64 20 3c 64 69 72 65 63 74 6f 72 79 3e 09 3a     md <directory>.:
     76a:	20 43 72 65 61 74 65 73 20 61 20 64 69 72 65 63      Creates a direc
     77a:	74 6f 72 79 20 63 61 6c 6c 65 64 20 3c 64 69 72     tory called <dir
     78a:	65 63 74 6f 72 79 3e 0a 00                          ectory>..

00000793 <__c.2846>:
     793:	72 6d 20 3c 66 69 6c 65 3e 09 09 3a 20 44 65 6c     rm <file>..: Del
     7a3:	65 74 65 73 20 3c 66 69 6c 65 3e 2e 20 55 73 65     etes <file>. Use
     7b3:	20 77 69 6c 64 63 61 72 64 20 74 6f 20 64 6f 20      wildcard to do 
     7c3:	61 20 77 69 6c 64 63 61 72 64 20 72 65 6d 6f 76     a wildcard remov
     7d3:	61 6c 20 6f 66 20 66 69 6c 65 73 0a 00              al of files..

000007e0 <__c.2844>:
     7e0:	77 72 69 74 65 20 3c 66 69 6c 65 3e 20 3c 6f 66     write <file> <of
     7f0:	66 73 65 74 3e 09 3a 20 57 72 69 74 65 73 20 74     fset>.: Writes t
     800:	65 78 74 20 74 6f 20 3c 66 69 6c 65 3e 2c 20 73     ext to <file>, s
     810:	74 61 72 74 69 6e 67 20 66 72 6f 6d 20 3c 6f 66     tarting from <of
     820:	66 73 65 74 3e 2e 20 54 68 65 20 74 65 78 74 20     fset>. The text 
     830:	69 73 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65     is read from the
     840:	20 55 41 52 54 2c 20 6c 69 6e 65 20 62 79 20 6c      UART, line by l
     850:	69 6e 65 2e 20 46 69 6e 69 73 68 20 77 69 74 68     ine. Finish with
     860:	20 61 6e 20 65 6d 70 74 79 20 6c 69 6e 65 0a 00      an empty line..

00000870 <__c.2842>:
     870:	61 70 70 65 6e 64 20 3c 66 69 6c 65 3e 09 09 3a     append <file>..:
     880:	20 41 70 70 65 6e 64 73 20 74 65 78 74 20 74 6f      Appends text to
     890:	20 65 6e 64 20 6f 66 20 3c 66 69 6c 65 3e 2e 20      end of <file>. 
     8a0:	54 68 65 20 74 65 78 74 20 69 73 20 72 65 61 64     The text is read
     8b0:	20 66 72 6f 6d 20 74 68 65 20 55 41 52 54 20 69      from the UART i
     8c0:	6e 20 61 20 73 74 72 65 61 6d 20 61 6e 64 20 69     n a stream and i
     8d0:	73 20 6e 6f 74 20 65 63 68 6f 65 64 2e 20 46 69     s not echoed. Fi
     8e0:	6e 69 73 68 20 62 79 20 73 65 6e 64 69 6e 67 20     nish by sending 
     8f0:	43 74 72 6c 2b 7a 20 28 41 53 43 49 49 20 32 36     Ctrl+z (ASCII 26
     900:	29 0a 00                                            )..

00000903 <__c.2840>:
     903:	6e 65 77 20 3c 66 69 6c 65 3e 09 09 3a 20 43 72     new <file>..: Cr
     913:	65 61 74 65 73 20 3c 66 69 6c 65 3e 0a 00           eates <file>..

00000921 <__c.2838>:
     921:	41 76 61 69 6c 61 62 6c 65 20 63 6f 6d 6d 61 6e     Available comman
     931:	64 73 3a 0a 00                                      ds:..

00000936 <__c.2836>:
     936:	0a 53 44 4c 6f 67 67 65 72 20 76 31 2e 31 0a 00     .SDLogger v1.1..

00000946 <__c.2501>:
     946:	7e 00                                               ~.

00000948 <__c.2499>:
     948:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     958:	20 66 69 6c 65 0a 00                                 file..

0000095f <__c.2497>:
     95f:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     96f:	20 66 69 6c 65 0a 00                                 file..

00000976 <__c.2495>:
     976:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     986:	20 66 69 6c 65 0a 00                                 file..

0000098d <__c.2493>:
     98d:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     99d:	20 66 69 6c 65 0a 00                                 file..

000009a4 <__c.2490>:
     9a4:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     9b4:	20 66 69 6c 65 0a 00                                 file..

000009bb <__c.2488>:
     9bb:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     9cb:	20 66 69 6c 65 0a 00                                 file..

000009d2 <__c.2486>:
     9d2:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     9e2:	20 66 69 6c 65 0a 00                                 file..

000009e9 <__c.2484>:
     9e9:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     9f9:	20 66 69 6c 65 0a 00                                 file..

00000a00 <__c.2472>:
     a00:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     a10:	20 66 69 6c 65 0a 00                                 file..

00000a17 <__c.2470>:
     a17:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     a27:	20 66 69 6c 65 0a 00                                 file..

00000a2e <__c.2468>:
     a2e:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     a3e:	20 66 69 6c 65 0a 00                                 file..

00000a45 <__c.2466>:
     a45:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     a55:	20 66 69 6c 65 0a 00                                 file..

00000a5c <__c.2458>:
     a5c:	21 65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f     !error seeking o
     a6c:	6e 20 00                                            n .

00000a6f <__c.2455>:
     a6f:	21 65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00     !error opening .

00000a7f <__c.2354>:
     a7f:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 3a     unknown command:
     a8f:	20 00                                                .

00000a91 <__c.2352>:
     a91:	65 72 72 6f 72 20 73 79 6e 63 69 6e 67 20 64 69     error syncing di
     aa1:	73 6b 0a 00                                         sk..

00000aa5 <__c.2350>:
     aa5:	73 79 6e 63 00                                      sync.

00000aaa <__c.2348>:
     aaa:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 64     error creating d
     aba:	69 72 65 63 74 6f 72 79 3a 20 00                    irectory: .

00000ac5 <__c.2345>:
     ac5:	6d 64 00                                            md.

00000ac8 <__c.2343>:
     ac8:	61 70 70 65 6e 64 00                                append.

00000acf <__c.2340>:
     acf:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     adf:	20 66 69 6c 65 0a 00                                 file..

00000ae6 <__c.2336>:
     ae6:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     af6:	20 00                                                .

00000af8 <__c.2333>:
     af8:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000b07 <__c.2329>:
     b07:	77 72 69 74 65 00                                   write.

00000b0d <__c.2327>:
     b0d:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     b1d:	69 6c 65 3a 20 00                                   ile: .

00000b23 <__c.2324>:
     b23:	6e 65 77 00                                         new.

00000b27 <__c.2319>:
     b27:	65 72 72 6f 72 20 64 65 6c 65 74 69 6e 67 20 66     error deleting f
     b37:	69 6c 65 3a 20 00                                   ile: .

00000b3d <__c.2316>:
     b3d:	72 6d 00                                            rm.

00000b40 <__c.2313>:
     b40:	73 69 7a 65 00                                      size.

00000b45 <__c.2311>:
     b45:	65 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 69     error reading di
     b55:	73 6b 20 69 6e 66 6f 0a 00                          sk info..

00000b5e <__c.2309>:
     b5e:	64 69 73 6b 00                                      disk.

00000b63 <__c.2302>:
     b63:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     b73:	20 00                                                .

00000b75 <__c.2299>:
     b75:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000b84 <__c.2296>:
     b84:	72 65 61 64 00                                      read.

00000b89 <__c.2284>:
     b89:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000b98 <__c.2281>:
     b98:	63 61 74 00                                         cat.

00000b9c <__c.2271>:
     b9c:	6c 73 00                                            ls.

00000b9f <__c.2269>:
     b9f:	64 69 72 65 63 74 6f 72 79 20 6e 6f 74 20 66 6f     directory not fo
     baf:	75 6e 64 3a 20 00                                   und: .

00000bb5 <__c.2265>:
     bb5:	63 64 00                                            cd.

00000bb8 <__c.2263>:
     bb8:	73 65 74 00                                         set.

00000bbc <__c.2261>:
     bbc:	62 61 75 64 00                                      baud.

00000bc1 <__c.2259>:
     bc1:	68 65 6c 70 00                                      help.

00000bc6 <__c.2257>:
     bc6:	3f 00                                               ?.

00000bc8 <__c.2255>:
     bc8:	46 69 6c 65 20 73 79 73 74 65 6d 20 69 6e 69 74     File system init
     bd8:	69 61 6c 69 7a 65 64 0a 00                          ialized..

00000be1 <__c.2253>:
     be1:	43 6c 6f 73 69 6e 67 20 64 6f 77 6e 20 66 69 6c     Closing down fil
     bf1:	65 20 73 79 73 74 65 6d 0a 00                       e system..

00000bfb <__c.2251>:
     bfb:	69 6e 69 74 00                                      init.

00000c00 <__c.2807>:
     c00:	66 72 65 65 3a 20 20 20 00                          free:   .

00000c09 <__c.2805>:
     c09:	66 6f 72 6d 61 74 3a 20 00                          format: .

00000c12 <__c.2803>:
     c12:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

00000c1b <__c.2801>:
     c1b:	63 6f 70 79 3a 20 20 20 00                          copy:   .

00000c24 <__c.2799>:
     c24:	4d 42 0a 00                                         MB..

00000c28 <__c.2797>:
     c28:	73 69 7a 65 3a 20 20 20 00                          size:   .

00000c31 <__c.2795>:
     c31:	64 61 74 65 3a 20 20 20 00                          date:   .

00000c3a <__c.2793>:
     c3a:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

00000c45 <__c.2791>:
     c45:	72 65 76 3a 20 20 20 20 00                          rev:    .

00000c4e <__c.2789>:
     c4e:	70 72 6f 64 3a 20 20 20 00                          prod:   .

00000c57 <__c.2787>:
     c57:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

00000c60 <__c.2785>:
     c60:	6d 61 6e 75 66 3a 20 20 30 78 00                    manuf:  0x.

00000c6b <__c.2231>:
     c6b:	21 54 6f 6f 20 6d 61 6e 79 20 6c 6f 67 73 3a 32     !Too many logs:2
     c7b:	21 00                                               !.

00000c7d <__c.2227>:
     c7d:	21 54 6f 6f 20 6d 61 6e 79 20 6c 6f 67 73 3a 31     !Too many logs:1
     c8d:	21 00                                               !.

00000c8f <__c.2215>:
     c8f:	45 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 53     Error creating S
     c9f:	45 51 4c 4f 47 0a 00                                EQLOG..

00000ca6 <__c.2212>:
     ca6:	43 72 65 61 74 69 6e 67 20 53 45 51 4c 4f 47 0a     Creating SEQLOG.
	...

00000cb7 <__c.2085>:
     cb7:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 63 6f     error opening co
     cc7:	6e 66 69 67 20 66 69 6c 65 00                       nfig file.

00000cd1 <__c.2052>:
     cd1:	32 00                                               2.

00000cd3 <__c.2050>:
     cd3:	31 00 00                                            1..

00000cd6 <__ctors_end>:
     cd6:	11 24       	eor	r1, r1
     cd8:	1f be       	out	0x3f, r1	; 63
     cda:	cf ef       	ldi	r28, 0xFF	; 255
     cdc:	d0 e1       	ldi	r29, 0x10	; 16
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	cd bf       	out	0x3d, r28	; 61

00000ce2 <__do_copy_data>:
     ce2:	11 e0       	ldi	r17, 0x01	; 1
     ce4:	a0 e0       	ldi	r26, 0x00	; 0
     ce6:	b1 e0       	ldi	r27, 0x01	; 1
     ce8:	e4 ee       	ldi	r30, 0xE4	; 228
     cea:	f6 e9       	ldi	r31, 0x96	; 150
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <.do_copy_data_start>

00000cee <.do_copy_data_loop>:
     cee:	05 90       	lpm	r0, Z+
     cf0:	0d 92       	st	X+, r0

00000cf2 <.do_copy_data_start>:
     cf2:	ac 3b       	cpi	r26, 0xBC	; 188
     cf4:	b1 07       	cpc	r27, r17
     cf6:	d9 f7       	brne	.-10     	; 0xcee <.do_copy_data_loop>

00000cf8 <__do_clear_bss>:
     cf8:	1c e0       	ldi	r17, 0x0C	; 12
     cfa:	ac eb       	ldi	r26, 0xBC	; 188
     cfc:	b1 e0       	ldi	r27, 0x01	; 1
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <.do_clear_bss_start>

00000d00 <.do_clear_bss_loop>:
     d00:	1d 92       	st	X+, r1

00000d02 <.do_clear_bss_start>:
     d02:	a9 3e       	cpi	r26, 0xE9	; 233
     d04:	b1 07       	cpc	r27, r17
     d06:	e1 f7       	brne	.-8      	; 0xd00 <.do_clear_bss_loop>
     d08:	0e 94 02 18 	call	0x3004	; 0x3004 <main>
     d0c:	0c 94 70 4b 	jmp	0x96e0	; 0x96e0 <_exit>

00000d10 <__bad_interrupt>:
     d10:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d14 <__vector_20>:
char setting_max_escape_character; //Number of escape chars before break logging, default is 3

//Circular buffer UART RX interrupt
//Is only used during append
ISR(USART0_RX_vect)
{
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	2f 93       	push	r18
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
	input_buffer[read_spot] = UDR0;
     d28:	e0 91 c5 04 	lds	r30, 0x04C5
     d2c:	f0 91 c6 04 	lds	r31, 0x04C6
     d30:	80 91 c6 00 	lds	r24, 0x00C6
     d34:	e3 53       	subi	r30, 0x33	; 51
     d36:	fb 4f       	sbci	r31, 0xFB	; 251
     d38:	80 83       	st	Z, r24
	read_spot++;
     d3a:	80 91 c5 04 	lds	r24, 0x04C5
     d3e:	90 91 c6 04 	lds	r25, 0x04C6
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	90 93 c6 04 	sts	0x04C6, r25
     d48:	80 93 c5 04 	sts	0x04C5, r24
	STAT1_PORT ^= (1<<STAT1); //Toggle the STAT1 LED each time we receive a character
     d4c:	85 b1       	in	r24, 0x05	; 5
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	89 27       	eor	r24, r25
     d52:	85 b9       	out	0x05, r24	; 5
	if(read_spot == BUFF_LEN) read_spot = 0;
     d54:	80 91 c5 04 	lds	r24, 0x04C5
     d58:	90 91 c6 04 	lds	r25, 0x04C6
     d5c:	80 50       	subi	r24, 0x00	; 0
     d5e:	98 40       	sbci	r25, 0x08	; 8
     d60:	21 f4       	brne	.+8      	; 0xd6a <__vector_20+0x56>
     d62:	10 92 c6 04 	sts	0x04C6, r1
     d66:	10 92 c5 04 	sts	0x04C5, r1
}
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	9f 91       	pop	r25
     d70:	8f 91       	pop	r24
     d72:	2f 91       	pop	r18
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <set_default_settings>:
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     d7e:	f9 99       	sbic	0x1f, 1	; 31
     d80:	fe cf       	rjmp	.-4      	; 0xd7e <set_default_settings>
	EEARH = uiAddress >> 8; //Set up address and data registers
     d82:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     d88:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     d8a:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     d8c:	f9 9a       	sbi	0x1f, 1	; 31
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     d8e:	f9 99       	sbic	0x1f, 1	; 31
     d90:	fe cf       	rjmp	.-4      	; 0xd8e <set_default_settings+0x10>
	EEARH = uiAddress >> 8; //Set up address and data registers
     d92:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     d98:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     d9a:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     d9c:	f9 9a       	sbi	0x1f, 1	; 31
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     d9e:	f9 99       	sbic	0x1f, 1	; 31
     da0:	fe cf       	rjmp	.-4      	; 0xd9e <set_default_settings+0x20>
	EEARH = uiAddress >> 8; //Set up address and data registers
     da2:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     da4:	85 e0       	ldi	r24, 0x05	; 5
     da6:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     da8:	8a e1       	ldi	r24, 0x1A	; 26
     daa:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     dac:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     dae:	f9 9a       	sbi	0x1f, 1	; 31
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     db0:	f9 99       	sbic	0x1f, 1	; 31
     db2:	fe cf       	rjmp	.-4      	; 0xdb0 <set_default_settings+0x32>
	EEARH = uiAddress >> 8; //Set up address and data registers
     db4:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     db6:	86 e0       	ldi	r24, 0x06	; 6
     db8:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     dbe:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     dc0:	f9 9a       	sbi	0x1f, 1	; 31
	//Reset number of escape characters to 3
	EEPROM_write(LOCATION_MAX_ESCAPE_CHAR, 3);

	//These settings are not recorded to the config file
	//We can't do it here because we are not sure the FAT system is init'd
}
     dc2:	08 95       	ret

00000dc4 <read_system_settings>:
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     dc4:	f9 99       	sbic	0x1f, 1	; 31
     dc6:	fe cf       	rjmp	.-4      	; 0xdc4 <read_system_settings>
	EEARH = uiAddress >> 8; //Set up address and data registers
     dc8:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	91 bd       	out	0x21, r25	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
     dce:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
     dd0:	80 b5       	in	r24, 0x20	; 32
//If anything looks weird, reset setting to default value
void read_system_settings(void)
{
	//Read what the current UART speed is from EEPROM memory
	//Default is 9600
	setting_uart_speed = EEPROM_read(LOCATION_BAUD_SETTING);
     dd2:	80 93 ca 04 	sts	0x04CA, r24
	if(setting_uart_speed > 10) 
     dd6:	8b 30       	cpi	r24, 0x0B	; 11
     dd8:	50 f0       	brcs	.+20     	; 0xdee <read_system_settings+0x2a>
	{
		setting_uart_speed = BAUD_9600; //Reset UART to 9600 if there is no speed stored
     dda:	90 93 ca 04 	sts	0x04CA, r25
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     dde:	f9 99       	sbic	0x1f, 1	; 31
     de0:	fe cf       	rjmp	.-4      	; 0xdde <read_system_settings+0x1a>
	EEARH = uiAddress >> 8; //Set up address and data registers
     de2:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     de8:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     dea:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     dec:	f9 9a       	sbi	0x1f, 1	; 31
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     dee:	f9 99       	sbic	0x1f, 1	; 31
     df0:	fe cf       	rjmp	.-4      	; 0xdee <read_system_settings+0x2a>
	EEARH = uiAddress >> 8; //Set up address and data registers
     df2:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
     df8:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
     dfa:	80 b5       	in	r24, 0x20	; 32
		EEPROM_write(LOCATION_BAUD_SETTING, setting_uart_speed);
	}

	//Determine the system mode we should be in
	//Default is NEWLOG mode
	setting_system_mode = EEPROM_read(LOCATION_SYSTEM_SETTING);
     dfc:	80 93 c4 04 	sts	0x04C4, r24
	if(setting_system_mode > 5) 
     e00:	86 30       	cpi	r24, 0x06	; 6
     e02:	50 f0       	brcs	.+20     	; 0xe18 <read_system_settings+0x54>
	{
		setting_system_mode = MODE_NEWLOG; //By default, unit will turn on and go to new file logging
     e04:	10 92 c4 04 	sts	0x04C4, r1
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     e08:	f9 99       	sbic	0x1f, 1	; 31
     e0a:	fe cf       	rjmp	.-4      	; 0xe08 <read_system_settings+0x44>
	EEARH = uiAddress >> 8; //Set up address and data registers
     e0c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     e12:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     e14:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     e16:	f9 9a       	sbi	0x1f, 1	; 31
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     e18:	f9 99       	sbic	0x1f, 1	; 31
     e1a:	fe cf       	rjmp	.-4      	; 0xe18 <read_system_settings+0x54>
	EEARH = uiAddress >> 8; //Set up address and data registers
     e1c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     e1e:	85 e0       	ldi	r24, 0x05	; 5
     e20:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
     e22:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
     e24:	80 b5       	in	r24, 0x20	; 32
		EEPROM_write(LOCATION_SYSTEM_SETTING, setting_system_mode);
	}

	//Read the escape_character
	//ASCII(26) is ctrl+z
	setting_escape_character = EEPROM_read(LOCATION_ESCAPE_CHAR);
     e26:	80 93 cf 0c 	sts	0x0CCF, r24
	if(setting_escape_character == 0 || setting_escape_character == 255) 
     e2a:	81 50       	subi	r24, 0x01	; 1
     e2c:	8e 3f       	cpi	r24, 0xFE	; 254
     e2e:	60 f0       	brcs	.+24     	; 0xe48 <read_system_settings+0x84>
	{
		setting_escape_character = 26; //Reset escape character to ctrl+z
     e30:	8a e1       	ldi	r24, 0x1A	; 26
     e32:	80 93 cf 0c 	sts	0x0CCF, r24
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     e36:	f9 99       	sbic	0x1f, 1	; 31
     e38:	fe cf       	rjmp	.-4      	; 0xe36 <read_system_settings+0x72>
	EEARH = uiAddress >> 8; //Set up address and data registers
     e3a:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     e3c:	85 e0       	ldi	r24, 0x05	; 5
     e3e:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     e40:	8a e1       	ldi	r24, 0x1A	; 26
     e42:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     e44:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     e46:	f9 9a       	sbi	0x1f, 1	; 31
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     e48:	f9 99       	sbic	0x1f, 1	; 31
     e4a:	fe cf       	rjmp	.-4      	; 0xe48 <read_system_settings+0x84>
	EEARH = uiAddress >> 8; //Set up address and data registers
     e4c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     e4e:	86 e0       	ldi	r24, 0x06	; 6
     e50:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
     e52:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
     e54:	80 b5       	in	r24, 0x20	; 32
		EEPROM_write(LOCATION_ESCAPE_CHAR, setting_escape_character);
	}

	//Read the number of escape_characters to look for
	//Default is 3
	setting_max_escape_character = EEPROM_read(LOCATION_MAX_ESCAPE_CHAR);
     e56:	80 93 c7 04 	sts	0x04C7, r24
	if(setting_max_escape_character == 0 || setting_max_escape_character == 255) 
     e5a:	81 50       	subi	r24, 0x01	; 1
     e5c:	8e 3f       	cpi	r24, 0xFE	; 254
     e5e:	60 f0       	brcs	.+24     	; 0xe78 <read_system_settings+0xb4>
	{
		setting_max_escape_character = 3; //Reset number of escape characters to 3
     e60:	83 e0       	ldi	r24, 0x03	; 3
     e62:	80 93 c7 04 	sts	0x04C7, r24
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     e66:	f9 99       	sbic	0x1f, 1	; 31
     e68:	fe cf       	rjmp	.-4      	; 0xe66 <read_system_settings+0xa2>
	EEARH = uiAddress >> 8; //Set up address and data registers
     e6a:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     e74:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     e76:	f9 9a       	sbi	0x1f, 1	; 31
     e78:	08 95       	ret

00000e7a <EEPROM_write>:
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     e7a:	f9 99       	sbic	0x1f, 1	; 31
     e7c:	fe cf       	rjmp	.-4      	; 0xe7a <EEPROM_write>
	EEARH = uiAddress >> 8; //Set up address and data registers
     e7e:	92 bd       	out	0x22, r25	; 34
	EEARL = uiAddress; //Set up address and data registers
     e80:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     e82:	60 bd       	out	0x20, r22	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
     e84:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
     e86:	f9 9a       	sbi	0x1f, 1	; 31
}
     e88:	08 95       	ret

00000e8a <EEPROM_read>:

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
     e8a:	f9 99       	sbic	0x1f, 1	; 31
     e8c:	fe cf       	rjmp	.-4      	; 0xe8a <EEPROM_read>
	EEARH = uiAddress >> 8; //Set up address and data registers
     e8e:	92 bd       	out	0x22, r25	; 34
	EEARL = uiAddress; //Set up address and data registers
     e90:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
     e92:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
     e94:	80 b5       	in	r24, 0x20	; 32
}
     e96:	08 95       	ret

00000e98 <delay_us>:
//Uses internal timer do a fairly accurate 1us
//Because we are using 16MHz and a prescalar of 8 on Timer0, we have to double x
void delay_us(uint16_t x)
{
	//External 16MHz resonator hack.
	x *= 2;	
     e98:	9c 01       	movw	r18, r24
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
	
	while(x > 256)
	{
		TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer0
     e9e:	91 e0       	ldi	r25, 0x01	; 1
		TCNT0 = 20; //Preload Timer0 for 236 clicks. Should be 1us per click
     ea0:	84 e1       	ldi	r24, 0x14	; 20
     ea2:	06 c0       	rjmp	.+12     	; 0xeb0 <delay_us+0x18>
	//External 16MHz resonator hack.
	x *= 2;	
	
	while(x > 256)
	{
		TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer0
     ea4:	95 bb       	out	0x15, r25	; 21
		TCNT0 = 20; //Preload Timer0 for 236 clicks. Should be 1us per click
     ea6:	86 bd       	out	0x26, r24	; 38
		while( (TIFR0 & (1<<TOV0)) == 0);
     ea8:	a8 9b       	sbis	0x15, 0	; 21
     eaa:	fe cf       	rjmp	.-4      	; 0xea8 <delay_us+0x10>
		
		x -= 256;
     eac:	20 50       	subi	r18, 0x00	; 0
     eae:	31 40       	sbci	r19, 0x01	; 1
void delay_us(uint16_t x)
{
	//External 16MHz resonator hack.
	x *= 2;	
	
	while(x > 256)
     eb0:	41 e0       	ldi	r20, 0x01	; 1
     eb2:	21 30       	cpi	r18, 0x01	; 1
     eb4:	34 07       	cpc	r19, r20
     eb6:	b0 f7       	brcc	.-20     	; 0xea4 <delay_us+0xc>
		while( (TIFR0 & (1<<TOV0)) == 0);
		
		x -= 256;
	}

	TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 256 - x; //256 - 125 = 131 : Preload Timer0 for x clicks. Should be 1us per click
     ebc:	82 2f       	mov	r24, r18
     ebe:	81 95       	neg	r24
     ec0:	86 bd       	out	0x26, r24	; 38
	while( (TIFR0 & (1<<TOV0)) == 0);
     ec2:	a8 9b       	sbis	0x15, 0	; 21
     ec4:	fe cf       	rjmp	.-4      	; 0xec2 <delay_us+0x2a>
}
     ec6:	08 95       	ret

00000ec8 <delay_ms>:

//General short delays
void delay_ms(uint16_t x)
{
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	ec 01       	movw	r28, r24
     ece:	05 c0       	rjmp	.+10     	; 0xeda <delay_ms+0x12>
	for ( ; x > 0 ; x--)
		delay_us(1000);
     ed0:	88 ee       	ldi	r24, 0xE8	; 232
     ed2:	93 e0       	ldi	r25, 0x03	; 3
     ed4:	0e 94 4c 07 	call	0xe98	; 0xe98 <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
	for ( ; x > 0 ; x--)
     ed8:	21 97       	sbiw	r28, 0x01	; 1
     eda:	20 97       	sbiw	r28, 0x00	; 0
     edc:	c9 f7       	brne	.-14     	; 0xed0 <delay_ms+0x8>
		delay_us(1000);
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <blink_error>:
}


//Blinks the status LEDs to indicate a type of error
void blink_error(uint8_t ERROR_TYPE)
{
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	c0 e0       	ldi	r28, 0x00	; 0
     eee:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		for(int x = 0 ; x < ERROR_TYPE ; x++)
     ef0:	08 2f       	mov	r16, r24
     ef2:	10 e0       	ldi	r17, 0x00	; 0
     ef4:	0b c0       	rjmp	.+22     	; 0xf0c <blink_error+0x28>
		{
			sbi(STAT1_PORT, STAT1);
     ef6:	28 9a       	sbi	0x05, 0	; 5
			delay_ms(100);
     ef8:	84 e6       	ldi	r24, 0x64	; 100
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 64 07 	call	0xec8	; 0xec8 <delay_ms>
			cbi(STAT1_PORT, STAT1);
     f00:	28 98       	cbi	0x05, 0	; 5
			delay_ms(100);
     f02:	84 e6       	ldi	r24, 0x64	; 100
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 64 07 	call	0xec8	; 0xec8 <delay_ms>
//Blinks the status LEDs to indicate a type of error
void blink_error(uint8_t ERROR_TYPE)
{
	while(1)
	{
		for(int x = 0 ; x < ERROR_TYPE ; x++)
     f0a:	21 96       	adiw	r28, 0x01	; 1
     f0c:	c0 17       	cp	r28, r16
     f0e:	d1 07       	cpc	r29, r17
     f10:	94 f3       	brlt	.-28     	; 0xef6 <blink_error+0x12>
			delay_ms(100);
			cbi(STAT1_PORT, STAT1);
			delay_ms(100);
		}
		
		delay_ms(2000);
     f12:	80 ed       	ldi	r24, 0xD0	; 208
     f14:	97 e0       	ldi	r25, 0x07	; 7
     f16:	0e 94 64 07 	call	0xec8	; 0xec8 <delay_ms>
     f1a:	c0 e0       	ldi	r28, 0x00	; 0
     f1c:	d0 e0       	ldi	r29, 0x00	; 0
     f1e:	f6 cf       	rjmp	.-20     	; 0xf0c <blink_error+0x28>

00000f20 <check_emergency_reset>:

//Check to see if we need an emergency UART reset
//Scan the RX pin for 2 seconds
//If it's low the entire time, then return 1
char check_emergency_reset(void)
{
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
	DDRD &= ~(1<<0); //Turn the RX pin into an input
     f26:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= (1<<0); //Push a 1 onto RX pin to enable internal pull-up
     f28:	58 9a       	sbi	0x0b, 0	; 11

	//Quick pin check
	if( (PIND & (1<<0)) == 1) return 0;
     f2a:	48 99       	sbic	0x09, 0	; 9
     f2c:	1c c0       	rjmp	.+56     	; 0xf66 <check_emergency_reset+0x46>

	//Wait 2 seconds, blinking LEDs while we wait
	sbi(STAT2_PORT, STAT2); //Set the STAT2 LED
     f2e:	29 9a       	sbi	0x05, 1	; 5
     f30:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i = 0 ; i < 40 ; i++)
	{
		delay_ms(25);
		STAT1_PORT ^= (1<<STAT1); //Blink the stat LEDs
     f32:	ff 24       	eor	r15, r15
     f34:	f3 94       	inc	r15

		if( (PIND & (1<<0)) == 1) return 0;

		delay_ms(25);
		STAT2_PORT ^= (1<<STAT2); //Blink the stat LEDs
     f36:	02 e0       	ldi	r16, 0x02	; 2

	//Wait 2 seconds, blinking LEDs while we wait
	sbi(STAT2_PORT, STAT2); //Set the STAT2 LED
	for(uint8_t i = 0 ; i < 40 ; i++)
	{
		delay_ms(25);
     f38:	89 e1       	ldi	r24, 0x19	; 25
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 64 07 	call	0xec8	; 0xec8 <delay_ms>
		STAT1_PORT ^= (1<<STAT1); //Blink the stat LEDs
     f40:	85 b1       	in	r24, 0x05	; 5
     f42:	8f 25       	eor	r24, r15
     f44:	85 b9       	out	0x05, r24	; 5

		if( (PIND & (1<<0)) == 1) return 0;
     f46:	48 99       	sbic	0x09, 0	; 9
     f48:	0e c0       	rjmp	.+28     	; 0xf66 <check_emergency_reset+0x46>

		delay_ms(25);
     f4a:	89 e1       	ldi	r24, 0x19	; 25
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 64 07 	call	0xec8	; 0xec8 <delay_ms>
		STAT2_PORT ^= (1<<STAT2); //Blink the stat LEDs
     f52:	85 b1       	in	r24, 0x05	; 5
     f54:	80 27       	eor	r24, r16
     f56:	85 b9       	out	0x05, r24	; 5

		if( (PIND & (1<<0)) == 1) return 0;
     f58:	48 99       	sbic	0x09, 0	; 9
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <check_emergency_reset+0x46>
	//Quick pin check
	if( (PIND & (1<<0)) == 1) return 0;

	//Wait 2 seconds, blinking LEDs while we wait
	sbi(STAT2_PORT, STAT2); //Set the STAT2 LED
	for(uint8_t i = 0 ; i < 40 ; i++)
     f5c:	1f 5f       	subi	r17, 0xFF	; 255
     f5e:	18 32       	cpi	r17, 0x28	; 40
     f60:	59 f7       	brne	.-42     	; 0xf38 <check_emergency_reset+0x18>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <check_emergency_reset+0x48>
     f66:	80 e0       	ldi	r24, 0x00	; 0
		if( (PIND & (1<<0)) == 1) return 0;
	}		

	//If we make it here, then RX pin stayed low the whole time
	return 1;
}
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	08 95       	ret

00000f70 <count_cmd_args>:
//These functions were added for wild card delete and search
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
     f70:	ec eb       	ldi	r30, 0xBC	; 188
     f72:	f1 e0       	ldi	r31, 0x01	; 1
     f74:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	89 2b       	or	r24, r25
     f7c:	19 f0       	breq	.+6      	; 0xf84 <count_cmd_args+0x14>
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	81 11       	cpse	r24, r1
			count++;
     f82:	2f 5f       	subi	r18, 0xFF	; 255
     f84:	33 96       	adiw	r30, 0x03	; 3
//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	e8 3c       	cpi	r30, 0xC8	; 200
     f8a:	f8 07       	cpc	r31, r24
     f8c:	a1 f7       	brne	.-24     	; 0xf76 <count_cmd_args+0x6>
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
			count++;

	return count;
}
     f8e:	82 2f       	mov	r24, r18
     f90:	08 95       	ret

00000f92 <add_cmd_arg>:
	return 0;
}

//Safe adding of command line arguments
void add_cmd_arg(char* buffer, uint8_t buffer_length)
{
     f92:	ac 01       	movw	r20, r24
     f94:	ec eb       	ldi	r30, 0xBC	; 188
     f96:	f1 e0       	ldi	r31, 0x01	; 1
     f98:	20 e0       	ldi	r18, 0x00	; 0
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	89 2b       	or	r24, r25
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <add_cmd_arg+0x16>
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	81 11       	cpse	r24, r1
			count++;
     fa6:	2f 5f       	subi	r18, 0xFF	; 255
     fa8:	33 96       	adiw	r30, 0x03	; 3
//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	e8 3c       	cpi	r30, 0xC8	; 200
     fae:	f8 07       	cpc	r31, r24
     fb0:	a1 f7       	brne	.-24     	; 0xf9a <add_cmd_arg+0x8>

//Safe adding of command line arguments
void add_cmd_arg(char* buffer, uint8_t buffer_length)
{
	uint8_t count = count_cmd_args();
	if (count < MAX_COUNT_COMMAND_LINE_ARGS)
     fb2:	24 30       	cpi	r18, 0x04	; 4
     fb4:	60 f4       	brcc	.+24     	; 0xfce <add_cmd_arg+0x3c>
	{
		cmd_arg[count].arg = buffer;
     fb6:	82 2f       	mov	r24, r18
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	fc 01       	movw	r30, r24
     fbc:	ee 0f       	add	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	e8 0f       	add	r30, r24
     fc2:	f9 1f       	adc	r31, r25
     fc4:	e4 54       	subi	r30, 0x44	; 68
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	51 83       	std	Z+1, r21	; 0x01
     fca:	40 83       	st	Z, r20
		cmd_arg[count].arg_length = buffer_length;
     fcc:	62 83       	std	Z+2, r22	; 0x02
     fce:	08 95       	ret

00000fd0 <is_number>:
}

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
     fd0:	ac 01       	movw	r20, r24
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < buffer_length; i++)
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	0d c0       	rjmp	.+26     	; 0xff4 <is_number+0x24>
		if (!isdigit(buffer[i]))
     fda:	fa 01       	movw	r30, r20
     fdc:	e2 0f       	add	r30, r18
     fde:	f3 1f       	adc	r31, r19
     fe0:	80 81       	ld	r24, Z
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	c0 97       	sbiw	r24, 0x30	; 48
     fe6:	0a 97       	sbiw	r24, 0x0a	; 10
     fe8:	18 f0       	brcs	.+6      	; 0xff0 <is_number+0x20>
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	05 c0       	rjmp	.+10     	; 0xffa <is_number+0x2a>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
     ff0:	2f 5f       	subi	r18, 0xFF	; 255
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	26 17       	cp	r18, r22
     ff6:	37 07       	cpc	r19, r23
     ff8:	84 f3       	brlt	.-32     	; 0xfda <is_number+0xa>
		if (!isdigit(buffer[i]))
			return 0;

	return buffer;
}
     ffa:	ca 01       	movw	r24, r20
     ffc:	08 95       	ret

00000ffe <wildcmp>:

//Wildcard string compare.
//Written by Jack Handy - jakkhandy@hotmail.com
//http://www.codeproject.com/KB/string/wildcmp.aspx
uint8_t wildcmp(const char* wild, const char* string)
{
     ffe:	fc 01       	movw	r30, r24
    1000:	db 01       	movw	r26, r22
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <wildcmp+0x16>
	const char *cp = 0;
	const char *mp = 0;

	while (*string && (*wild != '*'))
	{
		if ((*wild != *string) && (*wild != '?'))
    1004:	89 17       	cp	r24, r25
    1006:	21 f0       	breq	.+8      	; 0x1010 <wildcmp+0x12>
    1008:	8f 33       	cpi	r24, 0x3F	; 63
    100a:	11 f0       	breq	.+4      	; 0x1010 <wildcmp+0x12>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	08 95       	ret
		return 0;

		wild++;
    1010:	31 96       	adiw	r30, 0x01	; 1
		string++;
    1012:	11 96       	adiw	r26, 0x01	; 1
{

	const char *cp = 0;
	const char *mp = 0;

	while (*string && (*wild != '*'))
    1014:	9c 91       	ld	r25, X
    1016:	99 23       	and	r25, r25
    1018:	f1 f0       	breq	.+60     	; 0x1056 <wildcmp+0x58>
    101a:	80 81       	ld	r24, Z
    101c:	8a 32       	cpi	r24, 0x2A	; 42
    101e:	91 f7       	brne	.-28     	; 0x1004 <wildcmp+0x6>
    1020:	1a c0       	rjmp	.+52     	; 0x1056 <wildcmp+0x58>
		string++;
	}

	while (*string)
	{
		if (*wild == '*')
    1022:	80 81       	ld	r24, Z
    1024:	8a 32       	cpi	r24, 0x2A	; 42
    1026:	59 f4       	brne	.+22     	; 0x103e <wildcmp+0x40>
		{
			if (!(*(++wild)))
    1028:	31 96       	adiw	r30, 0x01	; 1
    102a:	80 81       	ld	r24, Z
    102c:	88 23       	and	r24, r24
    102e:	11 f4       	brne	.+4      	; 0x1034 <wildcmp+0x36>
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	08 95       	ret
				return 1;

			mp = wild;
			cp = string+1;
    1034:	9d 01       	movw	r18, r26
    1036:	2f 5f       	subi	r18, 0xFF	; 255
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	af 01       	movw	r20, r30
    103c:	10 c0       	rjmp	.+32     	; 0x105e <wildcmp+0x60>
		}
		else if ((*wild == *string) || (*wild== '?'))
    103e:	89 17       	cp	r24, r25
    1040:	11 f0       	breq	.+4      	; 0x1046 <wildcmp+0x48>
    1042:	8f 33       	cpi	r24, 0x3F	; 63
    1044:	19 f4       	brne	.+6      	; 0x104c <wildcmp+0x4e>
		{
			wild++;
    1046:	31 96       	adiw	r30, 0x01	; 1
			string++;
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	09 c0       	rjmp	.+18     	; 0x105e <wildcmp+0x60>
		}
		else
		{
			wild = mp;
			string = cp++;
    104c:	fa 01       	movw	r30, r20
    104e:	d9 01       	movw	r26, r18
    1050:	2f 5f       	subi	r18, 0xFF	; 255
    1052:	3f 4f       	sbci	r19, 0xFF	; 255
    1054:	04 c0       	rjmp	.+8      	; 0x105e <wildcmp+0x60>
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0

		wild++;
		string++;
	}

	while (*string)
    105e:	9c 91       	ld	r25, X
    1060:	99 23       	and	r25, r25
    1062:	f9 f6       	brne	.-66     	; 0x1022 <wildcmp+0x24>
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <wildcmp+0x6a>
			string = cp++;
		}
	}

	while (*wild == '*')
		wild++;
    1066:	31 96       	adiw	r30, 0x01	; 1
			wild = mp;
			string = cp++;
		}
	}

	while (*wild == '*')
    1068:	90 81       	ld	r25, Z
    106a:	9a 32       	cpi	r25, 0x2A	; 42
    106c:	e1 f3       	breq	.-8      	; 0x1066 <wildcmp+0x68>
		wild++;
  return !(*wild);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	99 23       	and	r25, r25
    1072:	09 f4       	brne	.+2      	; 0x1076 <wildcmp+0x78>
    1074:	81 e0       	ldi	r24, 0x01	; 1
}
    1076:	08 95       	ret

00001078 <print_menu>:
    return 1;
}

void print_menu(void)
{
	uart_puts_p(PSTR("\nSDLogger v1.1\n"));
    1078:	86 e3       	ldi	r24, 0x36	; 54
    107a:	99 e0       	ldi	r25, 0x09	; 9
    107c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("Available commands:\n"));
    1080:	81 e2       	ldi	r24, 0x21	; 33
    1082:	99 e0       	ldi	r25, 0x09	; 9
    1084:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("new <file>\t\t: Creates <file>\n"));
    1088:	83 e0       	ldi	r24, 0x03	; 3
    108a:	99 e0       	ldi	r25, 0x09	; 9
    108c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("append <file>\t\t: Appends text to end of <file>. The text is read from the UART in a stream and is not echoed. Finish by sending Ctrl+z (ASCII 26)\n"));
    1090:	80 e7       	ldi	r24, 0x70	; 112
    1092:	98 e0       	ldi	r25, 0x08	; 8
    1094:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("write <file> <offset>\t: Writes text to <file>, starting from <offset>. The text is read from the UART, line by line. Finish with an empty line\n"));
    1098:	80 ee       	ldi	r24, 0xE0	; 224
    109a:	97 e0       	ldi	r25, 0x07	; 7
    109c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("rm <file>\t\t: Deletes <file>. Use wildcard to do a wildcard removal of files\n"));
    10a0:	83 e9       	ldi	r24, 0x93	; 147
    10a2:	97 e0       	ldi	r25, 0x07	; 7
    10a4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("md <directory>\t: Creates a directory called <directory>\n"));
    10a8:	8a e5       	ldi	r24, 0x5A	; 90
    10aa:	97 e0       	ldi	r25, 0x07	; 7
    10ac:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("cd <directory>\t\t: Changes current working directory to <directory>\n"));
    10b0:	86 e1       	ldi	r24, 0x16	; 22
    10b2:	97 e0       	ldi	r25, 0x07	; 7
    10b4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("cd ..\t\t: Changes to lower directory in tree\n"));
    10b8:	89 ee       	ldi	r24, 0xE9	; 233
    10ba:	96 e0       	ldi	r25, 0x06	; 6
    10bc:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("ls\t\t\t: Shows the content of the current directory. Use wildcard to do a wildcard listing of files in current directory\n"));
    10c0:	81 e7       	ldi	r24, 0x71	; 113
    10c2:	96 e0       	ldi	r25, 0x06	; 6
    10c4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("cat <file>\t\t: Writes a hexdump of <file> to the terminal\n"));
    10c8:	87 e3       	ldi	r24, 0x37	; 55
    10ca:	96 e0       	ldi	r25, 0x06	; 6
    10cc:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("read <file> <start> <length>\t\t: Writes ASCII <length> parts of <file> to the terminal starting at <start>. Ommit <start> and <length> to read whole file\n"));
    10d0:	8d e9       	ldi	r24, 0x9D	; 157
    10d2:	95 e0       	ldi	r25, 0x05	; 5
    10d4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("size <file>\t\t: Write size of file to terminal\n"));
    10d8:	8e e6       	ldi	r24, 0x6E	; 110
    10da:	95 e0       	ldi	r25, 0x05	; 5
    10dc:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("disk\t\t\t: Shows card manufacturer, status, filesystem capacity and free storage space\n"));
    10e0:	88 e1       	ldi	r24, 0x18	; 24
    10e2:	95 e0       	ldi	r25, 0x05	; 5
    10e4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("init\t\t\t: Reinitializes and reopens the memory card\n"));
    10e8:	84 ee       	ldi	r24, 0xE4	; 228
    10ea:	94 e0       	ldi	r25, 0x04	; 4
    10ec:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("sync\t\t\t: Ensures all buffered data is written to the card\n"));
    10f0:	89 ea       	ldi	r24, 0xA9	; 169
    10f2:	94 e0       	ldi	r25, 0x04	; 4
    10f4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>

	uart_puts_p(PSTR("\nMenus:\n"));
    10f8:	80 ea       	ldi	r24, 0xA0	; 160
    10fa:	94 e0       	ldi	r25, 0x04	; 4
    10fc:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("set\t\t\t: Menu to configure system boot mode\n"));
    1100:	84 e7       	ldi	r24, 0x74	; 116
    1102:	94 e0       	ldi	r25, 0x04	; 4
    1104:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	uart_puts_p(PSTR("baud\t\t\t: Menu to configure baud rate\n"));
    1108:	8e e4       	ldi	r24, 0x4E	; 78
    110a:	94 e0       	ldi	r25, 0x04	; 4
    110c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}
    1110:	08 95       	ret

00001112 <too_many_arguments_error>:

//Call this function to ensure the number of parameters do not
//exceed limit. The main purpose of this function is to avoid
//entering file names containing spaces.
uint8_t too_many_arguments_error(uint8_t limit, char* command)
{
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	28 2f       	mov	r18, r24
    111a:	eb 01       	movw	r28, r22
    111c:	ec eb       	ldi	r30, 0xBC	; 188
    111e:	f1 e0       	ldi	r31, 0x01	; 1
    1120:	10 e0       	ldi	r17, 0x00	; 0
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	89 2b       	or	r24, r25
    1128:	19 f0       	breq	.+6      	; 0x1130 <too_many_arguments_error+0x1e>
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	81 11       	cpse	r24, r1
			count++;
    112e:	1f 5f       	subi	r17, 0xFF	; 255
    1130:	33 96       	adiw	r30, 0x03	; 3
//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	e8 3c       	cpi	r30, 0xC8	; 200
    1136:	f8 07       	cpc	r31, r24
    1138:	a1 f7       	brne	.-24     	; 0x1122 <too_many_arguments_error+0x10>
//exceed limit. The main purpose of this function is to avoid
//entering file names containing spaces.
uint8_t too_many_arguments_error(uint8_t limit, char* command)
{
	uint8_t count;
	if ((count = count_cmd_args()) > limit)
    113a:	21 17       	cp	r18, r17
    113c:	10 f0       	brcs	.+4      	; 0x1142 <too_many_arguments_error+0x30>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	13 c0       	rjmp	.+38     	; 0x1168 <too_many_arguments_error+0x56>
	{
		uart_puts_p(PSTR("too many arguments("));
    1142:	80 e8       	ldi	r24, 0x80	; 128
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_putw_dec(count);
    114a:	81 2f       	mov	r24, r17
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 b8 44 	call	0x8970	; 0x8970 <uart_putw_dec>
		uart_puts_p(PSTR("): "));
    1152:	8c e7       	ldi	r24, 0x7C	; 124
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts(command);
    115a:	ce 01       	movw	r24, r28
    115c:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
		uart_putc('\n');
    1160:	8a e0       	ldi	r24, 0x0A	; 10
    1162:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    1166:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}

	return 0;
}
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	08 95       	ret

00001170 <split_cmd_line_args>:
//	arg[0] -> read
//	arg[1] -> <filename>
//	arg[2] -> <start>
//	arg[3] -> <end>
uint8_t split_cmd_line_args(char* buffer, uint8_t buffer_length)
{
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ec 01       	movw	r28, r24
	uint8_t arg_index_start = 0;
	uint8_t arg_index_end = 1;

	//Reset command line arguments
	memset(cmd_arg, 0, sizeof(cmd_arg));
    1176:	8c e0       	ldi	r24, 0x0C	; 12
    1178:	ec eb       	ldi	r30, 0xBC	; 188
    117a:	f1 e0       	ldi	r31, 0x01	; 1
    117c:	df 01       	movw	r26, r30
    117e:	1d 92       	st	X+, r1
    1180:	8a 95       	dec	r24
    1182:	e9 f7       	brne	.-6      	; 0x117e <split_cmd_line_args+0xe>
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	41 e0       	ldi	r20, 0x01	; 1
	{
		//Search for ASCII 32 (Space)
		if ((buffer[arg_index_end] == ' ') || (arg_index_end + 1 == buffer_length))
		{
			//Fix for last character
			if (arg_index_end + 1 == buffer_length)
    1188:	a6 2f       	mov	r26, r22
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	39 c0       	rjmp	.+114    	; 0x1200 <split_cmd_line_args+0x90>

	//Split the command line arguments
	while (arg_index_end < buffer_length)
	{
		//Search for ASCII 32 (Space)
		if ((buffer[arg_index_end] == ' ') || (arg_index_end + 1 == buffer_length))
    118e:	24 2f       	mov	r18, r20
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	fe 01       	movw	r30, r28
    1194:	e2 0f       	add	r30, r18
    1196:	f3 1f       	adc	r31, r19
    1198:	80 81       	ld	r24, Z
    119a:	80 32       	cpi	r24, 0x20	; 32
    119c:	29 f0       	breq	.+10     	; 0x11a8 <split_cmd_line_args+0x38>
    119e:	2f 5f       	subi	r18, 0xFF	; 255
    11a0:	3f 4f       	sbci	r19, 0xFF	; 255
    11a2:	2a 17       	cp	r18, r26
    11a4:	3b 07       	cpc	r19, r27
    11a6:	59 f5       	brne	.+86     	; 0x11fe <split_cmd_line_args+0x8e>
		{
			//Fix for last character
			if (arg_index_end + 1 == buffer_length)
    11a8:	84 2f       	mov	r24, r20
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	8a 17       	cp	r24, r26
    11b0:	9b 07       	cpc	r25, r27
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <split_cmd_line_args+0x46>
    11b4:	46 2f       	mov	r20, r22
    11b6:	ec eb       	ldi	r30, 0xBC	; 188
    11b8:	f1 e0       	ldi	r31, 0x01	; 1
    11ba:	20 e0       	ldi	r18, 0x00	; 0
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
    11bc:	80 81       	ld	r24, Z
    11be:	91 81       	ldd	r25, Z+1	; 0x01
    11c0:	89 2b       	or	r24, r25
    11c2:	19 f0       	breq	.+6      	; 0x11ca <split_cmd_line_args+0x5a>
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	81 11       	cpse	r24, r1
			count++;
    11c8:	2f 5f       	subi	r18, 0xFF	; 255
    11ca:	33 96       	adiw	r30, 0x03	; 3
//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	e8 3c       	cpi	r30, 0xC8	; 200
    11d0:	f8 07       	cpc	r31, r24
    11d2:	a1 f7       	brne	.-24     	; 0x11bc <split_cmd_line_args+0x4c>

//Safe adding of command line arguments
void add_cmd_arg(char* buffer, uint8_t buffer_length)
{
	uint8_t count = count_cmd_args();
	if (count < MAX_COUNT_COMMAND_LINE_ARGS)
    11d4:	24 30       	cpi	r18, 0x04	; 4
    11d6:	88 f4       	brcc	.+34     	; 0x11fa <split_cmd_line_args+0x8a>
	{
		cmd_arg[count].arg = buffer;
    11d8:	82 2f       	mov	r24, r18
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	fc 01       	movw	r30, r24
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	e8 0f       	add	r30, r24
    11e4:	f9 1f       	adc	r31, r25
    11e6:	e4 54       	subi	r30, 0x44	; 68
    11e8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ea:	ce 01       	movw	r24, r28
    11ec:	85 0f       	add	r24, r21
    11ee:	91 1d       	adc	r25, r1
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24
		cmd_arg[count].arg_length = buffer_length;
    11f4:	84 2f       	mov	r24, r20
    11f6:	85 1b       	sub	r24, r21
    11f8:	82 83       	std	Z+2, r24	; 0x02
			if (arg_index_end + 1 == buffer_length)
				arg_index_end = buffer_length;

			//Add this command line argument to the list
			add_cmd_arg(&(buffer[arg_index_start]), (arg_index_end - arg_index_start));
			arg_index_start = ++arg_index_end;
    11fa:	4f 5f       	subi	r20, 0xFF	; 255
    11fc:	54 2f       	mov	r21, r20
		}

		arg_index_end++;
    11fe:	4f 5f       	subi	r20, 0xFF	; 255

	//Reset command line arguments
	memset(cmd_arg, 0, sizeof(cmd_arg));

	//Split the command line arguments
	while (arg_index_end < buffer_length)
    1200:	46 17       	cp	r20, r22
    1202:	28 f2       	brcs	.-118    	; 0x118e <split_cmd_line_args+0x1e>
    1204:	ec eb       	ldi	r30, 0xBC	; 188
    1206:	f1 e0       	ldi	r31, 0x01	; 1
    1208:	20 e0       	ldi	r18, 0x00	; 0
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
		if((cmd_arg[i].arg != 0) && (cmd_arg[i].arg_length > 0))
    120a:	80 81       	ld	r24, Z
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	89 2b       	or	r24, r25
    1210:	19 f0       	breq	.+6      	; 0x1218 <split_cmd_line_args+0xa8>
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	81 11       	cpse	r24, r1
			count++;
    1216:	2f 5f       	subi	r18, 0xFF	; 255
    1218:	33 96       	adiw	r30, 0x03	; 3
//Returns the number of command line arguments
uint8_t count_cmd_args(void)
{
	uint8_t count = 0;
	uint8_t i = 0;
	for(; i < MAX_COUNT_COMMAND_LINE_ARGS; i++)
    121a:	a1 e0       	ldi	r26, 0x01	; 1
    121c:	e8 3c       	cpi	r30, 0xC8	; 200
    121e:	fa 07       	cpc	r31, r26
    1220:	a1 f7       	brne	.-24     	; 0x120a <split_cmd_line_args+0x9a>
		arg_index_end++;
	}

	//Return the number of available command line arguments
	return count_cmd_args();
}
    1222:	82 2f       	mov	r24, r18
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <get_cmd_arg>:
	return count;
}

//Safe index handling of command line arguments
char* get_cmd_arg(uint8_t index)
{
    122a:	98 2f       	mov	r25, r24
	memset(general_buffer, 0, sizeof(general_buffer));
    122c:	89 e1       	ldi	r24, 0x19	; 25
    122e:	e0 ed       	ldi	r30, 0xD0	; 208
    1230:	fc e0       	ldi	r31, 0x0C	; 12
    1232:	df 01       	movw	r26, r30
    1234:	1d 92       	st	X+, r1
    1236:	8a 95       	dec	r24
    1238:	e9 f7       	brne	.-6      	; 0x1234 <get_cmd_arg+0xa>
	if (index < MAX_COUNT_COMMAND_LINE_ARGS)
    123a:	94 30       	cpi	r25, 0x04	; 4
    123c:	e8 f4       	brcc	.+58     	; 0x1278 <get_cmd_arg+0x4e>
		if ((cmd_arg[index].arg != 0) && (cmd_arg[index].arg_length > 0))
    123e:	89 2f       	mov	r24, r25
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	fc 01       	movw	r30, r24
    1244:	ee 0f       	add	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	e8 0f       	add	r30, r24
    124a:	f9 1f       	adc	r31, r25
    124c:	e4 54       	subi	r30, 0x44	; 68
    124e:	fe 4f       	sbci	r31, 0xFE	; 254
    1250:	60 81       	ld	r22, Z
    1252:	71 81       	ldd	r23, Z+1	; 0x01
    1254:	61 15       	cp	r22, r1
    1256:	71 05       	cpc	r23, r1
    1258:	79 f0       	breq	.+30     	; 0x1278 <get_cmd_arg+0x4e>
    125a:	42 81       	ldd	r20, Z+2	; 0x02
    125c:	44 23       	and	r20, r20
    125e:	61 f0       	breq	.+24     	; 0x1278 <get_cmd_arg+0x4e>
			return strncpy(general_buffer, cmd_arg[index].arg, MIN(sizeof(general_buffer), cmd_arg[index].arg_length));
    1260:	4a 31       	cpi	r20, 0x1A	; 26
    1262:	18 f0       	brcs	.+6      	; 0x126a <get_cmd_arg+0x40>
    1264:	49 e1       	ldi	r20, 0x19	; 25
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	01 c0       	rjmp	.+2      	; 0x126c <get_cmd_arg+0x42>
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	80 ed       	ldi	r24, 0xD0	; 208
    126e:	9c e0       	ldi	r25, 0x0C	; 12
    1270:	0e 94 0e 48 	call	0x901c	; 0x901c <strncpy>
    1274:	9c 01       	movw	r18, r24
    1276:	02 c0       	rjmp	.+4      	; 0x127c <get_cmd_arg+0x52>
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
    127c:	c9 01       	movw	r24, r18
    127e:	08 95       	ret

00001280 <read_line>:
	
}

//Reads a line until the \n enter character is found
uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    1280:	bf 92       	push	r11
    1282:	cf 92       	push	r12
    1284:	df 92       	push	r13
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	ec 01       	movw	r28, r24
    1294:	b6 2e       	mov	r11, r22
    memset(buffer, 0, buffer_length);
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	4b 2d       	mov	r20, r11
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <memset>
    12a2:	00 e0       	ldi	r16, 0x00	; 0

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    12a4:	cb 2c       	mov	r12, r11
    12a6:	dd 24       	eor	r13, r13
    12a8:	08 94       	sec
    12aa:	c1 08       	sbc	r12, r1
    12ac:	d1 08       	sbc	r13, r1
    12ae:	23 c0       	rjmp	.+70     	; 0x12f6 <read_line+0x76>
    {
        uint8_t c = uart_getc();
    12b0:	0e 94 7a 45 	call	0x8af4	; 0x8af4 <uart_getc>
    12b4:	18 2f       	mov	r17, r24

        if(c == 0x08 || c == 0x7f)
    12b6:	88 30       	cpi	r24, 0x08	; 8
    12b8:	11 f0       	breq	.+4      	; 0x12be <read_line+0x3e>
    12ba:	8f 37       	cpi	r24, 0x7F	; 127
    12bc:	89 f4       	brne	.+34     	; 0x12e0 <read_line+0x60>
        {
            if(read_length < 1)
    12be:	00 23       	and	r16, r16
    12c0:	d1 f0       	breq	.+52     	; 0x12f6 <read_line+0x76>
                continue;

            --read_length;
    12c2:	01 50       	subi	r16, 0x01	; 1
            buffer[read_length] = '\0';
    12c4:	fe 01       	movw	r30, r28
    12c6:	e0 0f       	add	r30, r16
    12c8:	f1 1d       	adc	r31, r1
    12ca:	10 82       	st	Z, r1

            uart_putc(0x08);
    12cc:	88 e0       	ldi	r24, 0x08	; 8
    12ce:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
            uart_putc(' ');
    12d2:	80 e2       	ldi	r24, 0x20	; 32
    12d4:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
            uart_putc(0x08);
    12d8:	88 e0       	ldi	r24, 0x08	; 8
    12da:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    12de:	0b c0       	rjmp	.+22     	; 0x12f6 <read_line+0x76>

            continue;
        }

        uart_putc(c);
    12e0:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    12e4:	fe 01       	movw	r30, r28
    12e6:	ee 0d       	add	r30, r14
    12e8:	ff 1d       	adc	r31, r15

        if(c == '\n')
    12ea:	1a 30       	cpi	r17, 0x0A	; 10
    12ec:	11 f4       	brne	.+4      	; 0x12f2 <read_line+0x72>
        {
            buffer[read_length] = '\0';
    12ee:	10 82       	st	Z, r1
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <read_line+0x80>
            break;
        }
        else
        {
            buffer[read_length] = c;
    12f2:	10 83       	st	Z, r17
            ++read_length;
    12f4:	0f 5f       	subi	r16, 0xFF	; 255
uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    memset(buffer, 0, buffer_length);

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    12f6:	e0 2e       	mov	r14, r16
    12f8:	ff 24       	eor	r15, r15
    12fa:	ec 14       	cp	r14, r12
    12fc:	fd 04       	cpc	r15, r13
    12fe:	c4 f2       	brlt	.-80     	; 0x12b0 <read_line+0x30>
            ++read_length;
        }
    }

	//Split the command line into arguments
	split_cmd_line_args(buffer, buffer_length);
    1300:	ce 01       	movw	r24, r28
    1302:	6b 2d       	mov	r22, r11
    1304:	0e 94 b8 08 	call	0x1170	; 0x1170 <split_cmd_line_args>

    return read_length;
}
    1308:	80 2f       	mov	r24, r16
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	df 90       	pop	r13
    1318:	cf 90       	pop	r12
    131a:	bf 90       	pop	r11
    131c:	08 95       	ret

0000131e <read_buffer>:
}


//Reads a larger buffer of characters until the ctrl+z (ascii 26) character is received
uint8_t read_buffer(char* buffer, uint8_t buffer_length)
{
    131e:	cf 92       	push	r12
    1320:	df 92       	push	r13
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	ec 01       	movw	r28, r24
    1330:	16 2f       	mov	r17, r22
    memset(buffer, 0, buffer_length);
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	41 2f       	mov	r20, r17
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <memset>
    133e:	00 e0       	ldi	r16, 0x00	; 0

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    1340:	c1 2e       	mov	r12, r17
    1342:	dd 24       	eor	r13, r13
    1344:	08 94       	sec
    1346:	c1 08       	sbc	r12, r1
    1348:	d1 08       	sbc	r13, r1
    134a:	23 c0       	rjmp	.+70     	; 0x1392 <read_buffer+0x74>
    {
        uint8_t c = uart_getc();
    134c:	0e 94 7a 45 	call	0x8af4	; 0x8af4 <uart_getc>
    1350:	18 2f       	mov	r17, r24

        if(c == 0x08 || c == 0x7f)
    1352:	88 30       	cpi	r24, 0x08	; 8
    1354:	11 f0       	breq	.+4      	; 0x135a <read_buffer+0x3c>
    1356:	8f 37       	cpi	r24, 0x7F	; 127
    1358:	89 f4       	brne	.+34     	; 0x137c <read_buffer+0x5e>
        {
            if(read_length < 1)
    135a:	00 23       	and	r16, r16
    135c:	d1 f0       	breq	.+52     	; 0x1392 <read_buffer+0x74>
                continue;

            --read_length;
    135e:	01 50       	subi	r16, 0x01	; 1
            buffer[read_length] = '\0';
    1360:	fe 01       	movw	r30, r28
    1362:	e0 0f       	add	r30, r16
    1364:	f1 1d       	adc	r31, r1
    1366:	10 82       	st	Z, r1

            uart_putc(0x08);
    1368:	88 e0       	ldi	r24, 0x08	; 8
    136a:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
            uart_putc(' ');
    136e:	80 e2       	ldi	r24, 0x20	; 32
    1370:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
            uart_putc(0x08);
    1374:	88 e0       	ldi	r24, 0x08	; 8
    1376:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    137a:	0b c0       	rjmp	.+22     	; 0x1392 <read_buffer+0x74>

            continue;
        }

        uart_putc(c);
    137c:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    1380:	fe 01       	movw	r30, r28
    1382:	ee 0d       	add	r30, r14
    1384:	ff 1d       	adc	r31, r15

        //if(c == '\n')
        if(c == 26)
    1386:	1a 31       	cpi	r17, 0x1A	; 26
    1388:	11 f4       	brne	.+4      	; 0x138e <read_buffer+0x70>
        {
            buffer[read_length] = '\0';
    138a:	10 82       	st	Z, r1
    138c:	07 c0       	rjmp	.+14     	; 0x139c <read_buffer+0x7e>
            break;
        }
        else
        {
            buffer[read_length] = c;
    138e:	10 83       	st	Z, r17
            ++read_length;
    1390:	0f 5f       	subi	r16, 0xFF	; 255
uint8_t read_buffer(char* buffer, uint8_t buffer_length)
{
    memset(buffer, 0, buffer_length);

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    1392:	e0 2e       	mov	r14, r16
    1394:	ff 24       	eor	r15, r15
    1396:	ec 14       	cp	r14, r12
    1398:	fd 04       	cpc	r15, r13
    139a:	c4 f2       	brlt	.-80     	; 0x134c <read_buffer+0x2e>
            ++read_length;
        }
    }

    return read_length;
}
    139c:	80 2f       	mov	r24, r16
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	08 95       	ret

000013b0 <init_media>:
}


//Inits the SD interface, opens file system, opens root dir, and checks card info if wanted
void init_media(void)
{
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	e1 97       	sbiw	r28, 0x31	; 49
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
	/* setup sd card slot */
	if(!sd_raw_init())
    13c8:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <sd_raw_init>
    13cc:	88 23       	and	r24, r24
    13ce:	19 f4       	brne	.+6      	; 0x13d6 <init_media+0x26>
	{
#if DEBUG
		uart_puts_p(PSTR("MMC/SD initialization failed\n"));
#endif
		blink_error(ERROR_SD_INIT);
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	0e 94 72 07 	call	0xee4	; 0xee4 <blink_error>
		//continue;
	}

	//Make sure all file handles are cleared
	fat_clear_handles();
    13d6:	0e 94 77 2e 	call	0x5cee	; 0x5cee <fat_clear_handles>

	/* open first partition */
	partition = partition_open(sd_raw_read,
    13da:	86 ec       	ldi	r24, 0xC6	; 198
    13dc:	9c e1       	ldi	r25, 0x1C	; 28
    13de:	65 e7       	ldi	r22, 0x75	; 117
    13e0:	7e e1       	ldi	r23, 0x1E	; 30
    13e2:	44 ec       	ldi	r20, 0xC4	; 196
    13e4:	5a e1       	ldi	r21, 0x1A	; 26
    13e6:	2e e7       	ldi	r18, 0x7E	; 126
    13e8:	30 e2       	ldi	r19, 0x20	; 32
    13ea:	00 e0       	ldi	r16, 0x00	; 0
    13ec:	0e 94 1d 18 	call	0x303a	; 0x303a <partition_open>
    13f0:	90 93 cc 04 	sts	0x04CC, r25
    13f4:	80 93 cb 04 	sts	0x04CB, r24
								0,
#endif
								0
								);

	if(!partition)
    13f8:	89 2b       	or	r24, r25
    13fa:	79 f4       	brne	.+30     	; 0x141a <init_media+0x6a>
	{
		/* If the partition did not open, assume the storage device
		 * is a "superfloppy", i.e. has no MBR.
		 */
		partition = partition_open(sd_raw_read,
    13fc:	86 ec       	ldi	r24, 0xC6	; 198
    13fe:	9c e1       	ldi	r25, 0x1C	; 28
    1400:	65 e7       	ldi	r22, 0x75	; 117
    1402:	7e e1       	ldi	r23, 0x1E	; 30
    1404:	44 ec       	ldi	r20, 0xC4	; 196
    1406:	5a e1       	ldi	r21, 0x1A	; 26
    1408:	2e e7       	ldi	r18, 0x7E	; 126
    140a:	30 e2       	ldi	r19, 0x20	; 32
    140c:	0f ef       	ldi	r16, 0xFF	; 255
    140e:	0e 94 1d 18 	call	0x303a	; 0x303a <partition_open>
    1412:	90 93 cc 04 	sts	0x04CC, r25
    1416:	80 93 cb 04 	sts	0x04CB, r24
			//continue;
		}
	}

	/* open file system */
	fs = fat_open(partition);
    141a:	80 91 cb 04 	lds	r24, 0x04CB
    141e:	90 91 cc 04 	lds	r25, 0x04CC
    1422:	0e 94 04 31 	call	0x6208	; 0x6208 <fat_open>
    1426:	90 93 c3 04 	sts	0x04C3, r25
    142a:	80 93 c2 04 	sts	0x04C2, r24
		//continue;
	}

	/* open root directory */
	struct fat_dir_entry_struct directory;
	fat_get_dir_entry_of_path(fs, "/", &directory);
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	71 e0       	ldi	r23, 0x01	; 1
    1432:	8e 01       	movw	r16, r28
    1434:	0f 5f       	subi	r16, 0xFF	; 255
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	a8 01       	movw	r20, r16
    143a:	0e 94 ab 43 	call	0x8756	; 0x8756 <fat_get_dir_entry_of_path>

	dd = fat_open_dir(fs, &directory);
    143e:	80 91 c2 04 	lds	r24, 0x04C2
    1442:	90 91 c3 04 	lds	r25, 0x04C3
    1446:	b8 01       	movw	r22, r16
    1448:	0e 94 22 43 	call	0x8644	; 0x8644 <fat_open_dir>
    144c:	90 93 ce 0c 	sts	0x0CCE, r25
    1450:	80 93 cd 0c 	sts	0x0CCD, r24

#if DEBUG
	uart_puts_p(PSTR("Media Init Complete!\n"));
#endif
	
}
    1454:	e1 96       	adiw	r28, 0x31	; 49
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <find_file_in_dir>:

    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry, uint8_t use_wild_card)
{
    146a:	cf 92       	push	r12
    146c:	df 92       	push	r13
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	6b 01       	movw	r12, r22
    147a:	ea 01       	movw	r28, r20
    147c:	f2 2e       	mov	r15, r18
    147e:	13 2f       	mov	r17, r19
    1480:	15 c0       	rjmp	.+42     	; 0x14ac <find_file_in_dir+0x42>
    while(fat_read_dir(dd, dir_entry))
    1482:	8f 2d       	mov	r24, r15
    1484:	91 2f       	mov	r25, r17
    1486:	be 01       	movw	r22, r28
    1488:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <strcmp>
    {
        if((strcmp(dir_entry->long_name, name) == 0) || ((use_wild_card == 1) && (wildcmp(name, dir_entry->long_name) == 1)))
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	49 f0       	breq	.+18     	; 0x14a2 <find_file_in_dir+0x38>
    1490:	01 30       	cpi	r16, 0x01	; 1
    1492:	61 f4       	brne	.+24     	; 0x14ac <find_file_in_dir+0x42>
    1494:	ce 01       	movw	r24, r28
    1496:	6f 2d       	mov	r22, r15
    1498:	71 2f       	mov	r23, r17
    149a:	0e 94 ff 07 	call	0xffe	; 0xffe <wildcmp>
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	29 f4       	brne	.+10     	; 0x14ac <find_file_in_dir+0x42>
        {
            fat_reset_dir(dd);
    14a2:	c6 01       	movw	r24, r12
    14a4:	0e 94 c1 2a 	call	0x5582	; 0x5582 <fat_reset_dir>
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <find_file_in_dir+0x50>
    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry, uint8_t use_wild_card)
{
    while(fat_read_dir(dd, dir_entry))
    14ac:	c6 01       	movw	r24, r12
    14ae:	6f 2d       	mov	r22, r15
    14b0:	71 2f       	mov	r23, r17
    14b2:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <fat_read_dir>
    14b6:	88 23       	and	r24, r24
    14b8:	21 f7       	brne	.-56     	; 0x1482 <find_file_in_dir+0x18>
            return 1;
        }
    }

    return 0;
}
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	08 95       	ret

000014ca <open_file_in_dir>:

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    14ca:	cf 92       	push	r12
    14cc:	df 92       	push	r13
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	e1 97       	sbiw	r28, 0x31	; 49
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	7c 01       	movw	r14, r24
	struct fat_dir_entry_struct file_entry;
	//Do not use wildcards here
	if(!find_file_in_dir(fs, dd, name, &file_entry, 0))
    14ea:	6e 01       	movw	r12, r28
    14ec:	08 94       	sec
    14ee:	c1 1c       	adc	r12, r1
    14f0:	d1 1c       	adc	r13, r1
    14f2:	96 01       	movw	r18, r12
    14f4:	00 e0       	ldi	r16, 0x00	; 0
    14f6:	0e 94 35 0a 	call	0x146a	; 0x146a <find_file_in_dir>
    14fa:	88 23       	and	r24, r24
    14fc:	19 f4       	brne	.+6      	; 0x1504 <open_file_in_dir+0x3a>
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	05 c0       	rjmp	.+10     	; 0x150e <open_file_in_dir+0x44>
		return 0;

	return fat_open_file(fs, &file_entry);
    1504:	c7 01       	movw	r24, r14
    1506:	b6 01       	movw	r22, r12
    1508:	0e 94 63 43 	call	0x86c6	; 0x86c6 <fat_open_file>
    150c:	9c 01       	movw	r18, r24
}
    150e:	c9 01       	movw	r24, r18
    1510:	e1 96       	adiw	r28, 0x31	; 49
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	08 95       	ret

0000152c <append_file>:
//data even at 115200bps
//Does not exit until Ctrl+z (ASCII 26) is received
//Returns 0 on error
//Returns 1 on success
uint8_t append_file(char* file_name)
{
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	00 d0       	rcall	.+0      	; 0x153c <append_file+0x10>
    153c:	00 d0       	rcall	.+0      	; 0x153e <append_file+0x12>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	8c 01       	movw	r16, r24
	unsigned spot;
	unsigned sp;
  
	//search file in current directory and open it 
	struct fat_file_struct* fd = open_file_in_dir(fs, dd, file_name);
    1544:	60 91 cd 0c 	lds	r22, 0x0CCD
    1548:	70 91 ce 0c 	lds	r23, 0x0CCE
    154c:	80 91 c2 04 	lds	r24, 0x04C2
    1550:	90 91 c3 04 	lds	r25, 0x04C3
    1554:	a8 01       	movw	r20, r16
    1556:	0e 94 65 0a 	call	0x14ca	; 0x14ca <open_file_in_dir>
    155a:	7c 01       	movw	r14, r24
	if(!fd)
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	59 f4       	brne	.+22     	; 0x1576 <append_file+0x4a>
	{
		uart_puts_p(PSTR("!error opening "));
    1560:	8f e6       	ldi	r24, 0x6F	; 111
    1562:	9a e0       	ldi	r25, 0x0A	; 10
    1564:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts(file_name);
    1568:	c8 01       	movw	r24, r16
    156a:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
		uart_putc('\n');
    156e:	8a e0       	ldi	r24, 0x0A	; 10
    1570:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    1574:	19 c0       	rjmp	.+50     	; 0x15a8 <append_file+0x7c>
	}

#if DEBUG
	uart_puts_p(PSTR("File open\n"));
#endif
	int32_t offset = 0;
    1576:	19 82       	std	Y+1, r1	; 0x01
    1578:	1a 82       	std	Y+2, r1	; 0x02
    157a:	1b 82       	std	Y+3, r1	; 0x03
    157c:	1c 82       	std	Y+4, r1	; 0x04
	//Seeks the end of the file : offset = EOF location
	if(!fat_seek_file(fd, &offset, FAT_SEEK_END))
    157e:	be 01       	movw	r22, r28
    1580:	6f 5f       	subi	r22, 0xFF	; 255
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	42 e0       	ldi	r20, 0x02	; 2
    1586:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <fat_seek_file>
    158a:	88 23       	and	r24, r24
    158c:	79 f4       	brne	.+30     	; 0x15ac <append_file+0x80>
	{
		uart_puts_p(PSTR("!error seeking on "));
    158e:	8c e5       	ldi	r24, 0x5C	; 92
    1590:	9a e0       	ldi	r25, 0x0A	; 10
    1592:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts(file_name);
    1596:	c8 01       	movw	r24, r16
    1598:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
		uart_putc('\n');
    159c:	8a e0       	ldi	r24, 0x0A	; 10
    159e:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>

		fat_close_file(fd);
    15a2:	c7 01       	movw	r24, r14
    15a4:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <fat_close_file>
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	2f c2       	rjmp	.+1118   	; 0x1a0a <append_file+0x4de>

#if DEBUG
	uart_puts_p(PSTR("Recording\n"));
#endif
	//give a different prompt to indicate no echoing
	uart_putc('<');
    15ac:	8c e3       	ldi	r24, 0x3C	; 60
    15ae:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>

	sbi(STAT1_PORT, STAT1); //Turn on indicator LED
    15b2:	28 9a       	sbi	0x05, 0	; 5

	char escape_chars_received = 0;
	
	read_spot = 0;
    15b4:	10 92 c6 04 	sts	0x04C6, r1
    15b8:	10 92 c5 04 	sts	0x04C5, r1
	checked_spot = 0;
    15bc:	10 92 c9 04 	sts	0x04C9, r1
    15c0:	10 92 c8 04 	sts	0x04C8, r1
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0

	//Clear circular buffer
	for(uint16_t i = 0 ; i < BUFF_LEN ; i++)
		input_buffer[i] = 0;
    15c8:	fc 01       	movw	r30, r24
    15ca:	e3 53       	subi	r30, 0x33	; 51
    15cc:	fb 4f       	sbci	r31, 0xFB	; 251
    15ce:	10 82       	st	Z, r1
	
	read_spot = 0;
	checked_spot = 0;

	//Clear circular buffer
	for(uint16_t i = 0 ; i < BUFF_LEN ; i++)
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	28 e0       	ldi	r18, 0x08	; 8
    15d4:	80 30       	cpi	r24, 0x00	; 0
    15d6:	92 07       	cpc	r25, r18
    15d8:	b9 f7       	brne	.-18     	; 0x15c8 <append_file+0x9c>
		input_buffer[i] = 0;
		
	//Start UART buffered interrupts
	UCSR0B |= (1<<RXCIE0); //Enable receive interrupts
    15da:	80 91 c1 00 	lds	r24, 0x00C1
    15de:	80 68       	ori	r24, 0x80	; 128
    15e0:	80 93 c1 00 	sts	0x00C1, r24
	sei(); //Enable interrupts
    15e4:	78 94       	sei
    15e6:	dd 24       	eor	r13, r13
    15e8:	00 e0       	ldi	r16, 0x00	; 0
    15ea:	10 e0       	ldi	r17, 0x00	; 0
    15ec:	f3 c0       	rjmp	.+486    	; 0x17d4 <append_file+0x2a8>
	{
		uint16_t timeout_counter = 0;

		while(checked_spot == read_spot) 
		{ 
			if( ++timeout_counter > 5000 ) 
    15ee:	0f 5f       	subi	r16, 0xFF	; 255
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	83 e1       	ldi	r24, 0x13	; 19
    15f4:	09 38       	cpi	r16, 0x89	; 137
    15f6:	18 07       	cpc	r17, r24
    15f8:	08 f4       	brcc	.+2      	; 0x15fc <append_file+0xd0>
    15fa:	e8 c0       	rjmp	.+464    	; 0x17cc <append_file+0x2a0>
			{
				timeout_counter = 0;

				if(checked_spot != 0 && checked_spot != (BUFF_LEN/4) && 
    15fc:	80 91 c8 04 	lds	r24, 0x04C8
    1600:	90 91 c9 04 	lds	r25, 0x04C9
    1604:	89 2b       	or	r24, r25
    1606:	09 f4       	brne	.+2      	; 0x160a <append_file+0xde>
    1608:	c9 c0       	rjmp	.+402    	; 0x179c <append_file+0x270>
    160a:	80 91 c8 04 	lds	r24, 0x04C8
    160e:	90 91 c9 04 	lds	r25, 0x04C9
    1612:	80 50       	subi	r24, 0x00	; 0
    1614:	92 40       	sbci	r25, 0x02	; 2
    1616:	09 f4       	brne	.+2      	; 0x161a <append_file+0xee>
    1618:	c1 c0       	rjmp	.+386    	; 0x179c <append_file+0x270>
    161a:	80 91 c8 04 	lds	r24, 0x04C8
    161e:	90 91 c9 04 	lds	r25, 0x04C9
    1622:	80 50       	subi	r24, 0x00	; 0
    1624:	94 40       	sbci	r25, 0x04	; 4
    1626:	09 f4       	brne	.+2      	; 0x162a <append_file+0xfe>
    1628:	b9 c0       	rjmp	.+370    	; 0x179c <append_file+0x270>
    162a:	80 91 c8 04 	lds	r24, 0x04C8
    162e:	90 91 c9 04 	lds	r25, 0x04C9
    1632:	80 50       	subi	r24, 0x00	; 0
    1634:	96 40       	sbci	r25, 0x06	; 6
    1636:	09 f4       	brne	.+2      	; 0x163a <append_file+0x10e>
    1638:	b1 c0       	rjmp	.+354    	; 0x179c <append_file+0x270>
           checked_spot != (2*BUFF_LEN/4) && checked_spot != (3*BUFF_LEN/4)) // stuff in buff
				{
					if(checked_spot < (BUFF_LEN/4))
    163a:	80 91 c8 04 	lds	r24, 0x04C8
    163e:	90 91 c9 04 	lds	r25, 0x04C9
    1642:	80 50       	subi	r24, 0x00	; 0
    1644:	92 40       	sbci	r25, 0x02	; 2
    1646:	b8 f4       	brcc	.+46     	; 0x1676 <append_file+0x14a>
					{
						//Record first quater of the buffer
						if(fat_write_file(fd, (uint8_t*) input_buffer, checked_spot) != checked_spot)
    1648:	40 91 c8 04 	lds	r20, 0x04C8
    164c:	50 91 c9 04 	lds	r21, 0x04C9
    1650:	c7 01       	movw	r24, r14
    1652:	6d ec       	ldi	r22, 0xCD	; 205
    1654:	74 e0       	ldi	r23, 0x04	; 4
    1656:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    165a:	20 91 c8 04 	lds	r18, 0x04C8
    165e:	30 91 c9 04 	lds	r19, 0x04C9
    1662:	82 17       	cp	r24, r18
    1664:	93 07       	cpc	r25, r19
    1666:	21 f0       	breq	.+8      	; 0x1670 <append_file+0x144>
							uart_puts_p(PSTR("error writing to file\n"));
    1668:	85 e4       	ldi	r24, 0x45	; 69
    166a:	9a e0       	ldi	r25, 0x0A	; 10
    166c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	5e c0       	rjmp	.+188    	; 0x1732 <append_file+0x206>
            spot = 0;
					}
          else if(checked_spot < (2*BUFF_LEN/4))
    1676:	80 91 c8 04 	lds	r24, 0x04C8
    167a:	90 91 c9 04 	lds	r25, 0x04C9
    167e:	80 50       	subi	r24, 0x00	; 0
    1680:	94 40       	sbci	r25, 0x04	; 4
    1682:	d8 f4       	brcc	.+54     	; 0x16ba <append_file+0x18e>
					{
						//Record second quater of the buffer
						if(fat_write_file(fd, (uint8_t*) input_buffer + (BUFF_LEN/4), checked_spot - (BUFF_LEN/4)) != (checked_spot - (BUFF_LEN/4)) )
    1684:	40 91 c8 04 	lds	r20, 0x04C8
    1688:	50 91 c9 04 	lds	r21, 0x04C9
    168c:	40 50       	subi	r20, 0x00	; 0
    168e:	52 40       	sbci	r21, 0x02	; 2
    1690:	c7 01       	movw	r24, r14
    1692:	6d ec       	ldi	r22, 0xCD	; 205
    1694:	76 e0       	ldi	r23, 0x06	; 6
    1696:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    169a:	20 91 c8 04 	lds	r18, 0x04C8
    169e:	30 91 c9 04 	lds	r19, 0x04C9
    16a2:	20 50       	subi	r18, 0x00	; 0
    16a4:	32 40       	sbci	r19, 0x02	; 2
    16a6:	82 17       	cp	r24, r18
    16a8:	93 07       	cpc	r25, r19
    16aa:	21 f0       	breq	.+8      	; 0x16b4 <append_file+0x188>
							uart_puts_p(PSTR("error writing to file\n"));
    16ac:	8e e2       	ldi	r24, 0x2E	; 46
    16ae:	9a e0       	ldi	r25, 0x0A	; 10
    16b0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	52 e0       	ldi	r21, 0x02	; 2
    16b8:	3c c0       	rjmp	.+120    	; 0x1732 <append_file+0x206>
            spot = BUFF_LEN/4;
					}
          else if(checked_spot < (3*BUFF_LEN/4))
    16ba:	80 91 c8 04 	lds	r24, 0x04C8
    16be:	90 91 c9 04 	lds	r25, 0x04C9
    16c2:	80 50       	subi	r24, 0x00	; 0
    16c4:	96 40       	sbci	r25, 0x06	; 6
    16c6:	d8 f4       	brcc	.+54     	; 0x16fe <append_file+0x1d2>
					{
						//Record third quater of the buffer
						if(fat_write_file(fd, (uint8_t*) input_buffer + (2*BUFF_LEN/4), checked_spot - (2*BUFF_LEN/4)) != (checked_spot - (2*BUFF_LEN/4)) )
    16c8:	40 91 c8 04 	lds	r20, 0x04C8
    16cc:	50 91 c9 04 	lds	r21, 0x04C9
    16d0:	40 50       	subi	r20, 0x00	; 0
    16d2:	54 40       	sbci	r21, 0x04	; 4
    16d4:	c7 01       	movw	r24, r14
    16d6:	6d ec       	ldi	r22, 0xCD	; 205
    16d8:	78 e0       	ldi	r23, 0x08	; 8
    16da:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    16de:	20 91 c8 04 	lds	r18, 0x04C8
    16e2:	30 91 c9 04 	lds	r19, 0x04C9
    16e6:	20 50       	subi	r18, 0x00	; 0
    16e8:	34 40       	sbci	r19, 0x04	; 4
    16ea:	82 17       	cp	r24, r18
    16ec:	93 07       	cpc	r25, r19
    16ee:	21 f0       	breq	.+8      	; 0x16f8 <append_file+0x1cc>
							uart_puts_p(PSTR("error writing to file\n"));
    16f0:	87 e1       	ldi	r24, 0x17	; 23
    16f2:	9a e0       	ldi	r25, 0x0A	; 10
    16f4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	54 e0       	ldi	r21, 0x04	; 4
    16fc:	1a c0       	rjmp	.+52     	; 0x1732 <append_file+0x206>
            spot = 2*BUFF_LEN/4;
					}
					else
					{
						//Record fourth quater of the buffer
						if(fat_write_file(fd, (uint8_t*) input_buffer + (3*BUFF_LEN/4), checked_spot - (3*BUFF_LEN/4)) != (checked_spot - (3*BUFF_LEN/4)) )
    16fe:	40 91 c8 04 	lds	r20, 0x04C8
    1702:	50 91 c9 04 	lds	r21, 0x04C9
    1706:	40 50       	subi	r20, 0x00	; 0
    1708:	56 40       	sbci	r21, 0x06	; 6
    170a:	c7 01       	movw	r24, r14
    170c:	6d ec       	ldi	r22, 0xCD	; 205
    170e:	7a e0       	ldi	r23, 0x0A	; 10
    1710:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    1714:	20 91 c8 04 	lds	r18, 0x04C8
    1718:	30 91 c9 04 	lds	r19, 0x04C9
    171c:	20 50       	subi	r18, 0x00	; 0
    171e:	36 40       	sbci	r19, 0x06	; 6
    1720:	82 17       	cp	r24, r18
    1722:	93 07       	cpc	r25, r19
    1724:	21 f0       	breq	.+8      	; 0x172e <append_file+0x202>
							uart_puts_p(PSTR("error writing to file\n"));
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	9a e0       	ldi	r25, 0x0A	; 10
    172a:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	56 e0       	ldi	r21, 0x06	; 6
            spot = 3*BUFF_LEN/4;
					}
					sp = spot; // start of new buffer
					
					// read_spot may have moved, copy
					cli();
    1732:	f8 94       	cli
    1734:	ba 01       	movw	r22, r20
    1736:	1e c0       	rjmp	.+60     	; 0x1774 <append_file+0x248>
					
					while(checked_spot != read_spot) 
					{
						input_buffer[spot++] = input_buffer[checked_spot++];
    1738:	80 91 c8 04 	lds	r24, 0x04C8
    173c:	90 91 c9 04 	lds	r25, 0x04C9
    1740:	fc 01       	movw	r30, r24
    1742:	e3 53       	subi	r30, 0x33	; 51
    1744:	fb 4f       	sbci	r31, 0xFB	; 251
    1746:	20 81       	ld	r18, Z
    1748:	fb 01       	movw	r30, r22
    174a:	e3 53       	subi	r30, 0x33	; 51
    174c:	fb 4f       	sbci	r31, 0xFB	; 251
    174e:	20 83       	st	Z, r18
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	90 93 c9 04 	sts	0x04C9, r25
    1756:	80 93 c8 04 	sts	0x04C8, r24
						if( checked_spot >= BUFF_LEN )
    175a:	80 91 c8 04 	lds	r24, 0x04C8
    175e:	90 91 c9 04 	lds	r25, 0x04C9
    1762:	80 50       	subi	r24, 0x00	; 0
    1764:	98 40       	sbci	r25, 0x08	; 8
    1766:	20 f0       	brcs	.+8      	; 0x1770 <append_file+0x244>
							checked_spot = 0;
    1768:	10 92 c9 04 	sts	0x04C9, r1
    176c:	10 92 c8 04 	sts	0x04C8, r1
					// read_spot may have moved, copy
					cli();
					
					while(checked_spot != read_spot) 
					{
						input_buffer[spot++] = input_buffer[checked_spot++];
    1770:	6f 5f       	subi	r22, 0xFF	; 255
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
					sp = spot; // start of new buffer
					
					// read_spot may have moved, copy
					cli();
					
					while(checked_spot != read_spot) 
    1774:	20 91 c8 04 	lds	r18, 0x04C8
    1778:	30 91 c9 04 	lds	r19, 0x04C9
    177c:	80 91 c5 04 	lds	r24, 0x04C5
    1780:	90 91 c6 04 	lds	r25, 0x04C6
    1784:	28 17       	cp	r18, r24
    1786:	39 07       	cpc	r19, r25
    1788:	b9 f6       	brne	.-82     	; 0x1738 <append_file+0x20c>
						input_buffer[spot++] = input_buffer[checked_spot++];
						if( checked_spot >= BUFF_LEN )
							checked_spot = 0;
					}
					
					read_spot = spot; // set insertion to end of copy
    178a:	70 93 c6 04 	sts	0x04C6, r23
    178e:	60 93 c5 04 	sts	0x04C5, r22
					checked_spot = sp; // reset checked to beginning of copy
    1792:	50 93 c9 04 	sts	0x04C9, r21
    1796:	40 93 c8 04 	sts	0x04C8, r20
					
					sei();
    179a:	78 94       	sei
				}
				
				sd_raw_sync(); //Sync all newly written data to card
    179c:	0e 94 9b 1c 	call	0x3936	; 0x3936 <sd_raw_sync>
    17a0:	08 c0       	rjmp	.+16     	; 0x17b2 <append_file+0x286>

				//Hang out while we wait for the interrupt to occur and advance read_spot
				while(checked_spot == read_spot)
				{
					STAT1_PORT &= ~(1<<STAT1); //Turn off LED to save more power
    17a2:	28 98       	cbi	0x05, 0	; 5

					sleep_mode(); //Put CPU to sleep, UART ISR wakes us up
    17a4:	83 b7       	in	r24, 0x33	; 51
    17a6:	81 60       	ori	r24, 0x01	; 1
    17a8:	83 bf       	out	0x33, r24	; 51
    17aa:	88 95       	sleep
    17ac:	83 b7       	in	r24, 0x33	; 51
    17ae:	8e 7f       	andi	r24, 0xFE	; 254
    17b0:	83 bf       	out	0x33, r24	; 51
				}
				
				sd_raw_sync(); //Sync all newly written data to card

				//Hang out while we wait for the interrupt to occur and advance read_spot
				while(checked_spot == read_spot)
    17b2:	20 91 c8 04 	lds	r18, 0x04C8
    17b6:	30 91 c9 04 	lds	r19, 0x04C9
    17ba:	80 91 c5 04 	lds	r24, 0x04C5
    17be:	90 91 c6 04 	lds	r25, 0x04C6
    17c2:	28 17       	cp	r18, r24
    17c4:	39 07       	cpc	r19, r25
    17c6:	69 f3       	breq	.-38     	; 0x17a2 <append_file+0x276>
    17c8:	00 e0       	ldi	r16, 0x00	; 0
    17ca:	10 e0       	ldi	r17, 0x00	; 0
					sleep_mode(); //Put CPU to sleep, UART ISR wakes us up
					//delay_ms(1); 
				}
			}

			delay_ms(1); //Hang out while we wait for the interrupt to occur and advance read_spot
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 64 07 	call	0xec8	; 0xec8 <delay_ms>

	while(1)
	{
		uint16_t timeout_counter = 0;

		while(checked_spot == read_spot) 
    17d4:	20 91 c8 04 	lds	r18, 0x04C8
    17d8:	30 91 c9 04 	lds	r19, 0x04C9
    17dc:	80 91 c5 04 	lds	r24, 0x04C5
    17e0:	90 91 c6 04 	lds	r25, 0x04C6
    17e4:	28 17       	cp	r18, r24
    17e6:	39 07       	cpc	r19, r25
    17e8:	09 f4       	brne	.+2      	; 0x17ec <append_file+0x2c0>
    17ea:	01 cf       	rjmp	.-510    	; 0x15ee <append_file+0xc2>
			}

			delay_ms(1); //Hang out while we wait for the interrupt to occur and advance read_spot
		}

		if(input_buffer[checked_spot] == setting_escape_character) //Scan for escape character
    17ec:	e0 91 c8 04 	lds	r30, 0x04C8
    17f0:	f0 91 c9 04 	lds	r31, 0x04C9
    17f4:	e3 53       	subi	r30, 0x33	; 51
    17f6:	fb 4f       	sbci	r31, 0xFB	; 251
    17f8:	90 81       	ld	r25, Z
    17fa:	80 91 cf 0c 	lds	r24, 0x0CCF
    17fe:	98 17       	cp	r25, r24
    1800:	61 f4       	brne	.+24     	; 0x181a <append_file+0x2ee>
		{
			escape_chars_received++;
    1802:	d3 94       	inc	r13
			
			if(escape_chars_received == setting_max_escape_character)
    1804:	80 91 c7 04 	lds	r24, 0x04C7
    1808:	d8 16       	cp	r13, r24
    180a:	41 f4       	brne	.+16     	; 0x181c <append_file+0x2f0>
			{
				//Disable interrupt and we're done!
				cli();
    180c:	f8 94       	cli
				UCSR0B &= ~(1<<RXCIE0); //Clear receive interrupt enable
    180e:	80 91 c1 00 	lds	r24, 0x00C1
    1812:	8f 77       	andi	r24, 0x7F	; 127
    1814:	80 93 c1 00 	sts	0x00C1, r24
    1818:	61 c0       	rjmp	.+194    	; 0x18dc <append_file+0x3b0>
				
				break;
    181a:	dd 24       	eor	r13, r13
			}
		}
		else
			escape_chars_received = 0;
		
		checked_spot++;
    181c:	80 91 c8 04 	lds	r24, 0x04C8
    1820:	90 91 c9 04 	lds	r25, 0x04C9
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	90 93 c9 04 	sts	0x04C9, r25
    182a:	80 93 c8 04 	sts	0x04C8, r24

		if(checked_spot == (BUFF_LEN/4)) //We've finished checking the first quater of the buffer
    182e:	80 91 c8 04 	lds	r24, 0x04C8
    1832:	90 91 c9 04 	lds	r25, 0x04C9
    1836:	80 50       	subi	r24, 0x00	; 0
    1838:	92 40       	sbci	r25, 0x02	; 2
    183a:	69 f4       	brne	.+26     	; 0x1856 <append_file+0x32a>
		{
			//Record first quater of the buffer
			if(fat_write_file(fd, (uint8_t*) input_buffer, (BUFF_LEN/4) ) != (BUFF_LEN/4) )
    183c:	c7 01       	movw	r24, r14
    183e:	6d ec       	ldi	r22, 0xCD	; 205
    1840:	74 e0       	ldi	r23, 0x04	; 4
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	52 e0       	ldi	r21, 0x02	; 2
    1846:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    184a:	80 50       	subi	r24, 0x00	; 0
    184c:	92 40       	sbci	r25, 0x02	; 2
    184e:	19 f0       	breq	.+6      	; 0x1856 <append_file+0x32a>
			{
				uart_puts_p(PSTR("error writing to file\n"));
    1850:	89 ee       	ldi	r24, 0xE9	; 233
    1852:	99 e0       	ldi	r25, 0x09	; 9
    1854:	41 c0       	rjmp	.+130    	; 0x18d8 <append_file+0x3ac>
				break;
			}
		}

		if(checked_spot == 2*BUFF_LEN/4) //We've finished checking the second quater of the buffer
    1856:	80 91 c8 04 	lds	r24, 0x04C8
    185a:	90 91 c9 04 	lds	r25, 0x04C9
    185e:	80 50       	subi	r24, 0x00	; 0
    1860:	94 40       	sbci	r25, 0x04	; 4
    1862:	69 f4       	brne	.+26     	; 0x187e <append_file+0x352>
		{
			//Record second quater of the buffer
			if(fat_write_file(fd, (uint8_t*) input_buffer + (BUFF_LEN/4), (BUFF_LEN/4) ) != (BUFF_LEN/4) )
    1864:	c7 01       	movw	r24, r14
    1866:	6d ec       	ldi	r22, 0xCD	; 205
    1868:	76 e0       	ldi	r23, 0x06	; 6
    186a:	40 e0       	ldi	r20, 0x00	; 0
    186c:	52 e0       	ldi	r21, 0x02	; 2
    186e:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    1872:	80 50       	subi	r24, 0x00	; 0
    1874:	92 40       	sbci	r25, 0x02	; 2
    1876:	19 f0       	breq	.+6      	; 0x187e <append_file+0x352>
			{
				uart_puts_p(PSTR("error writing to file\n"));
    1878:	82 ed       	ldi	r24, 0xD2	; 210
    187a:	99 e0       	ldi	r25, 0x09	; 9
    187c:	2d c0       	rjmp	.+90     	; 0x18d8 <append_file+0x3ac>
				break;
			}
		}

		if(checked_spot == 3*BUFF_LEN/4) //We've finished checking the third quater of the buffer
    187e:	80 91 c8 04 	lds	r24, 0x04C8
    1882:	90 91 c9 04 	lds	r25, 0x04C9
    1886:	80 50       	subi	r24, 0x00	; 0
    1888:	96 40       	sbci	r25, 0x06	; 6
    188a:	69 f4       	brne	.+26     	; 0x18a6 <append_file+0x37a>
		{
			//Record third quater of the buffer
			if(fat_write_file(fd, (uint8_t*) input_buffer + (2*BUFF_LEN/4), (BUFF_LEN/4) ) != (BUFF_LEN/4) )
    188c:	c7 01       	movw	r24, r14
    188e:	6d ec       	ldi	r22, 0xCD	; 205
    1890:	78 e0       	ldi	r23, 0x08	; 8
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	52 e0       	ldi	r21, 0x02	; 2
    1896:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    189a:	80 50       	subi	r24, 0x00	; 0
    189c:	92 40       	sbci	r25, 0x02	; 2
    189e:	19 f0       	breq	.+6      	; 0x18a6 <append_file+0x37a>
			{
				uart_puts_p(PSTR("error writing to file\n"));
    18a0:	8b eb       	ldi	r24, 0xBB	; 187
    18a2:	99 e0       	ldi	r25, 0x09	; 9
    18a4:	19 c0       	rjmp	.+50     	; 0x18d8 <append_file+0x3ac>
				break;
			}
		}

		if(checked_spot == BUFF_LEN) //We've finished checking the fourth quater of the buffer
    18a6:	80 91 c8 04 	lds	r24, 0x04C8
    18aa:	90 91 c9 04 	lds	r25, 0x04C9
    18ae:	80 50       	subi	r24, 0x00	; 0
    18b0:	98 40       	sbci	r25, 0x08	; 8
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <append_file+0x38a>
    18b4:	99 ce       	rjmp	.-718    	; 0x15e8 <append_file+0xbc>
		{
			checked_spot = 0;
    18b6:	10 92 c9 04 	sts	0x04C9, r1
    18ba:	10 92 c8 04 	sts	0x04C8, r1
			
			//Record fourth quater of the buffer
			if(fat_write_file(fd, (uint8_t*) input_buffer + (3*BUFF_LEN/4), (BUFF_LEN/4) ) != (BUFF_LEN/4) )
    18be:	c7 01       	movw	r24, r14
    18c0:	6d ec       	ldi	r22, 0xCD	; 205
    18c2:	7a e0       	ldi	r23, 0x0A	; 10
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	52 e0       	ldi	r21, 0x02	; 2
    18c8:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    18cc:	80 50       	subi	r24, 0x00	; 0
    18ce:	92 40       	sbci	r25, 0x02	; 2
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <append_file+0x3a8>
    18d2:	8a ce       	rjmp	.-748    	; 0x15e8 <append_file+0xbc>
			{
				uart_puts_p(PSTR("error writing to file\n"));
    18d4:	84 ea       	ldi	r24, 0xA4	; 164
    18d6:	99 e0       	ldi	r25, 0x09	; 9
    18d8:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		}
	}

	//Upon receiving the escape character, we may still have stuff left in the buffer
	//Record the last of the buffer to memory
	if(checked_spot == 0 || checked_spot == (BUFF_LEN/4) || checked_spot == (2*BUFF_LEN/4) || checked_spot == (3*BUFF_LEN/4))
    18dc:	80 91 c8 04 	lds	r24, 0x04C8
    18e0:	90 91 c9 04 	lds	r25, 0x04C9
    18e4:	89 2b       	or	r24, r25
    18e6:	09 f4       	brne	.+2      	; 0x18ea <append_file+0x3be>
    18e8:	87 c0       	rjmp	.+270    	; 0x19f8 <append_file+0x4cc>
    18ea:	80 91 c8 04 	lds	r24, 0x04C8
    18ee:	90 91 c9 04 	lds	r25, 0x04C9
    18f2:	80 50       	subi	r24, 0x00	; 0
    18f4:	92 40       	sbci	r25, 0x02	; 2
    18f6:	09 f4       	brne	.+2      	; 0x18fa <append_file+0x3ce>
    18f8:	7f c0       	rjmp	.+254    	; 0x19f8 <append_file+0x4cc>
    18fa:	80 91 c8 04 	lds	r24, 0x04C8
    18fe:	90 91 c9 04 	lds	r25, 0x04C9
    1902:	80 50       	subi	r24, 0x00	; 0
    1904:	94 40       	sbci	r25, 0x04	; 4
    1906:	09 f4       	brne	.+2      	; 0x190a <append_file+0x3de>
    1908:	77 c0       	rjmp	.+238    	; 0x19f8 <append_file+0x4cc>
    190a:	80 91 c8 04 	lds	r24, 0x04C8
    190e:	90 91 c9 04 	lds	r25, 0x04C9
    1912:	80 50       	subi	r24, 0x00	; 0
    1914:	96 40       	sbci	r25, 0x06	; 6
    1916:	09 f4       	brne	.+2      	; 0x191a <append_file+0x3ee>
    1918:	6f c0       	rjmp	.+222    	; 0x19f8 <append_file+0x4cc>
	{
		//Do nothing, we already recorded the buffers right before catching the escape character
	}
  else if(checked_spot < (BUFF_LEN/4))
    191a:	80 91 c8 04 	lds	r24, 0x04C8
    191e:	90 91 c9 04 	lds	r25, 0x04C9
    1922:	80 50       	subi	r24, 0x00	; 0
    1924:	92 40       	sbci	r25, 0x02	; 2
    1926:	a0 f4       	brcc	.+40     	; 0x1950 <append_file+0x424>
  {
    //Record first quater of the buffer
    if(fat_write_file(fd, (uint8_t*) input_buffer, checked_spot) != checked_spot)
    1928:	40 91 c8 04 	lds	r20, 0x04C8
    192c:	50 91 c9 04 	lds	r21, 0x04C9
    1930:	c7 01       	movw	r24, r14
    1932:	6d ec       	ldi	r22, 0xCD	; 205
    1934:	74 e0       	ldi	r23, 0x04	; 4
    1936:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    193a:	20 91 c8 04 	lds	r18, 0x04C8
    193e:	30 91 c9 04 	lds	r19, 0x04C9
    1942:	82 17       	cp	r24, r18
    1944:	93 07       	cpc	r25, r19
    1946:	09 f4       	brne	.+2      	; 0x194a <append_file+0x41e>
    1948:	57 c0       	rjmp	.+174    	; 0x19f8 <append_file+0x4cc>
      uart_puts_p(PSTR("error writing to file\n"));
    194a:	8d e8       	ldi	r24, 0x8D	; 141
    194c:	99 e0       	ldi	r25, 0x09	; 9
    194e:	52 c0       	rjmp	.+164    	; 0x19f4 <append_file+0x4c8>
  }
  else if(checked_spot < (2*BUFF_LEN/4))
    1950:	80 91 c8 04 	lds	r24, 0x04C8
    1954:	90 91 c9 04 	lds	r25, 0x04C9
    1958:	80 50       	subi	r24, 0x00	; 0
    195a:	94 40       	sbci	r25, 0x04	; 4
    195c:	b8 f4       	brcc	.+46     	; 0x198c <append_file+0x460>
  {
    //Record second quater of the buffer
    if(fat_write_file(fd, (uint8_t*) input_buffer + (BUFF_LEN/4), checked_spot - (BUFF_LEN/4)) != (checked_spot - (BUFF_LEN/4)) )
    195e:	40 91 c8 04 	lds	r20, 0x04C8
    1962:	50 91 c9 04 	lds	r21, 0x04C9
    1966:	40 50       	subi	r20, 0x00	; 0
    1968:	52 40       	sbci	r21, 0x02	; 2
    196a:	c7 01       	movw	r24, r14
    196c:	6d ec       	ldi	r22, 0xCD	; 205
    196e:	76 e0       	ldi	r23, 0x06	; 6
    1970:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    1974:	20 91 c8 04 	lds	r18, 0x04C8
    1978:	30 91 c9 04 	lds	r19, 0x04C9
    197c:	20 50       	subi	r18, 0x00	; 0
    197e:	32 40       	sbci	r19, 0x02	; 2
    1980:	82 17       	cp	r24, r18
    1982:	93 07       	cpc	r25, r19
    1984:	c9 f1       	breq	.+114    	; 0x19f8 <append_file+0x4cc>
      uart_puts_p(PSTR("error writing to file\n"));
    1986:	86 e7       	ldi	r24, 0x76	; 118
    1988:	99 e0       	ldi	r25, 0x09	; 9
    198a:	34 c0       	rjmp	.+104    	; 0x19f4 <append_file+0x4c8>
  }
  else if(checked_spot < (3*BUFF_LEN/4))
    198c:	80 91 c8 04 	lds	r24, 0x04C8
    1990:	90 91 c9 04 	lds	r25, 0x04C9
    1994:	80 50       	subi	r24, 0x00	; 0
    1996:	96 40       	sbci	r25, 0x06	; 6
    1998:	b8 f4       	brcc	.+46     	; 0x19c8 <append_file+0x49c>
  {
    //Record third quater of the buffer
    if(fat_write_file(fd, (uint8_t*) input_buffer + (2*BUFF_LEN/4), checked_spot - (2*BUFF_LEN/4)) != (checked_spot - (2*BUFF_LEN/4)) )
    199a:	40 91 c8 04 	lds	r20, 0x04C8
    199e:	50 91 c9 04 	lds	r21, 0x04C9
    19a2:	40 50       	subi	r20, 0x00	; 0
    19a4:	54 40       	sbci	r21, 0x04	; 4
    19a6:	c7 01       	movw	r24, r14
    19a8:	6d ec       	ldi	r22, 0xCD	; 205
    19aa:	78 e0       	ldi	r23, 0x08	; 8
    19ac:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    19b0:	20 91 c8 04 	lds	r18, 0x04C8
    19b4:	30 91 c9 04 	lds	r19, 0x04C9
    19b8:	20 50       	subi	r18, 0x00	; 0
    19ba:	34 40       	sbci	r19, 0x04	; 4
    19bc:	82 17       	cp	r24, r18
    19be:	93 07       	cpc	r25, r19
    19c0:	d9 f0       	breq	.+54     	; 0x19f8 <append_file+0x4cc>
      uart_puts_p(PSTR("error writing to file\n"));
    19c2:	8f e5       	ldi	r24, 0x5F	; 95
    19c4:	99 e0       	ldi	r25, 0x09	; 9
    19c6:	16 c0       	rjmp	.+44     	; 0x19f4 <append_file+0x4c8>
  }
  else
  {
    //Record fourth quater of the buffer
    if(fat_write_file(fd, (uint8_t*) input_buffer + (3*BUFF_LEN/4), checked_spot - (3*BUFF_LEN/4)) != (checked_spot - (3*BUFF_LEN/4)) )
    19c8:	40 91 c8 04 	lds	r20, 0x04C8
    19cc:	50 91 c9 04 	lds	r21, 0x04C9
    19d0:	40 50       	subi	r20, 0x00	; 0
    19d2:	56 40       	sbci	r21, 0x06	; 6
    19d4:	c7 01       	movw	r24, r14
    19d6:	6d ec       	ldi	r22, 0xCD	; 205
    19d8:	7a e0       	ldi	r23, 0x0A	; 10
    19da:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    19de:	20 91 c8 04 	lds	r18, 0x04C8
    19e2:	30 91 c9 04 	lds	r19, 0x04C9
    19e6:	20 50       	subi	r18, 0x00	; 0
    19e8:	36 40       	sbci	r19, 0x06	; 6
    19ea:	82 17       	cp	r24, r18
    19ec:	93 07       	cpc	r25, r19
    19ee:	21 f0       	breq	.+8      	; 0x19f8 <append_file+0x4cc>
      uart_puts_p(PSTR("error writing to file\n"));
    19f0:	88 e4       	ldi	r24, 0x48	; 72
    19f2:	99 e0       	ldi	r25, 0x09	; 9
    19f4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
  }

	fat_close_file(fd);
    19f8:	c7 01       	movw	r24, r14
    19fa:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <fat_close_file>

	cbi(STAT1_PORT, STAT1); //Turn off indicator LED
    19fe:	28 98       	cbi	0x05, 0	; 5

#if DEBUG
	uart_puts_p(PSTR("Done!\n"));
#endif
	uart_puts_p(PSTR("~")); //Indicate a successful record
    1a00:	86 e4       	ldi	r24, 0x46	; 70
    1a02:	99 e0       	ldi	r25, 0x09	; 9
    1a04:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    1a08:	81 e0       	ldi	r24, 0x01	; 1
	
	return(1); //Success!
}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	08 95       	ret

00001a22 <newlog>:
//Log to a new file everytime the system boots
//Checks the spots in EEPROM for the next available LOG# file name
//Updates EEPROM and then appends to the new log file.
//Limited to 65535 files but this should not always be the case.
void newlog(void)
{
    1a22:	9f 92       	push	r9
    1a24:	af 92       	push	r10
    1a26:	bf 92       	push	r11
    1a28:	cf 92       	push	r12
    1a2a:	df 92       	push	r13
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	e1 97       	sbiw	r28, 0x31	; 49
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1a48:	f9 99       	sbic	0x1f, 1	; 31
    1a4a:	fe cf       	rjmp	.-4      	; 0x1a48 <newlog+0x26>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1a4c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1a52:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1a54:	30 b5       	in	r19, 0x20	; 32
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1a56:	f9 99       	sbic	0x1f, 1	; 31
    1a58:	fe cf       	rjmp	.-4      	; 0x1a56 <newlog+0x34>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1a5a:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1a5c:	84 e0       	ldi	r24, 0x04	; 4
    1a5e:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1a60:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1a62:	20 b5       	in	r18, 0x20	; 32
	new_file_number = new_file_number << 8;
	new_file_number |= lsb;
	
	//If both EEPROM spots are 255 (0xFF), that means they are un-initialized (first time OpenLog has been turned on)
	//Let's init them both to 0
	if((lsb == 255) && (msb == 255))
    1a64:	3f 3f       	cpi	r19, 0xFF	; 255
    1a66:	a9 f4       	brne	.+42     	; 0x1a92 <newlog+0x70>
    1a68:	2f 3f       	cpi	r18, 0xFF	; 255
    1a6a:	99 f4       	brne	.+38     	; 0x1a92 <newlog+0x70>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1a6c:	f9 99       	sbic	0x1f, 1	; 31
    1a6e:	fe cf       	rjmp	.-4      	; 0x1a6c <newlog+0x4a>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1a70:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1a72:	83 e0       	ldi	r24, 0x03	; 3
    1a74:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1a76:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1a78:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1a7a:	f9 9a       	sbi	0x1f, 1	; 31
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1a7c:	f9 99       	sbic	0x1f, 1	; 31
    1a7e:	fe cf       	rjmp	.-4      	; 0x1a7c <newlog+0x5a>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1a80:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1a82:	84 e0       	ldi	r24, 0x04	; 4
    1a84:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1a86:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1a88:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1a8a:	f9 9a       	sbi	0x1f, 1	; 31
    1a8c:	cc 24       	eor	r12, r12
    1a8e:	dd 24       	eor	r13, r13
    1a90:	0e c0       	rjmp	.+28     	; 0x1aae <newlog+0x8c>
	//Combine two 8-bit EEPROM spots into one 16-bit number
	lsb = EEPROM_read(LOCATION_FILE_NUMBER_LSB);
	msb = EEPROM_read(LOCATION_FILE_NUMBER_MSB);

	new_file_number = msb;
	new_file_number = new_file_number << 8;
    1a92:	92 2f       	mov	r25, r18
    1a94:	80 e0       	ldi	r24, 0x00	; 0
	new_file_number |= lsb;
    1a96:	c3 2e       	mov	r12, r19
    1a98:	dd 24       	eor	r13, r13
    1a9a:	c8 2a       	or	r12, r24
    1a9c:	d9 2a       	or	r13, r25
	}

	//The above code looks like it will forever loop if we ever create 65535 logs
	//Let's quit if we ever get to 65534
	//65534 logs is quite possible if you have a system with lots of power on/off cycles
	if(new_file_number == 65534)
    1a9e:	8e ef       	ldi	r24, 0xFE	; 254
    1aa0:	c8 16       	cp	r12, r24
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	d8 06       	cpc	r13, r24
    1aa6:	19 f4       	brne	.+6      	; 0x1aae <newlog+0x8c>
	{
		//Gracefully drop out to command prompt with some error
		uart_puts_p(PSTR("!Too many logs:1!"));
    1aa8:	8d e7       	ldi	r24, 0x7D	; 125
    1aaa:	9c e0       	ldi	r25, 0x0C	; 12
    1aac:	4c c0       	rjmp	.+152    	; 0x1b46 <newlog+0x124>
	}
	
	//If we made it this far, everything looks good - let's create the new LOG and write to it

	char* new_file_name = general_buffer;
	sprintf(new_file_name, "LOG%05u.txt", new_file_number);
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <newlog+0x8e>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <newlog+0x90>
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <newlog+0x92>
    1ab4:	ed b7       	in	r30, 0x3d	; 61
    1ab6:	fe b7       	in	r31, 0x3e	; 62
    1ab8:	31 96       	adiw	r30, 0x01	; 1
    1aba:	00 ed       	ldi	r16, 0xD0	; 208
    1abc:	1c e0       	ldi	r17, 0x0C	; 12
    1abe:	ad b7       	in	r26, 0x3d	; 61
    1ac0:	be b7       	in	r27, 0x3e	; 62
    1ac2:	12 96       	adiw	r26, 0x02	; 2
    1ac4:	1c 93       	st	X, r17
    1ac6:	0e 93       	st	-X, r16
    1ac8:	11 97       	sbiw	r26, 0x01	; 1
    1aca:	52 e0       	ldi	r21, 0x02	; 2
    1acc:	e5 2e       	mov	r14, r21
    1ace:	51 e0       	ldi	r21, 0x01	; 1
    1ad0:	f5 2e       	mov	r15, r21
    1ad2:	f3 82       	std	Z+3, r15	; 0x03
    1ad4:	e2 82       	std	Z+2, r14	; 0x02
    1ad6:	d5 82       	std	Z+5, r13	; 0x05
    1ad8:	c4 82       	std	Z+4, r12	; 0x04
    1ada:	0e 94 30 48 	call	0x9060	; 0x9060 <sprintf>
    1ade:	8d b7       	in	r24, 0x3d	; 61
    1ae0:	9e b7       	in	r25, 0x3e	; 62
    1ae2:	06 96       	adiw	r24, 0x06	; 6
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	9e bf       	out	0x3e, r25	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	8d bf       	out	0x3d, r24	; 61

	struct fat_dir_entry_struct file_entry;
	while(!fat_create_file(dd, new_file_name, &file_entry))
    1aee:	90 2e       	mov	r9, r16
    1af0:	01 2f       	mov	r16, r17
    1af2:	5e 01       	movw	r10, r28
    1af4:	08 94       	sec
    1af6:	a1 1c       	adc	r10, r1
    1af8:	b1 1c       	adc	r11, r1
	{
		//Increment the file number because this file name is already taken
		new_file_number++;
		sprintf(new_file_name, "LOG%05u.txt", new_file_number);
    1afa:	1e 2d       	mov	r17, r14
    1afc:	ef 2c       	mov	r14, r15
    1afe:	26 c0       	rjmp	.+76     	; 0x1b4c <newlog+0x12a>

	struct fat_dir_entry_struct file_entry;
	while(!fat_create_file(dd, new_file_name, &file_entry))
	{
		//Increment the file number because this file name is already taken
		new_file_number++;
    1b00:	69 01       	movw	r12, r18
		sprintf(new_file_name, "LOG%05u.txt", new_file_number);
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <newlog+0xe2>
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <newlog+0xe4>
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <newlog+0xe6>
    1b08:	ed b7       	in	r30, 0x3d	; 61
    1b0a:	fe b7       	in	r31, 0x3e	; 62
    1b0c:	31 96       	adiw	r30, 0x01	; 1
    1b0e:	ad b7       	in	r26, 0x3d	; 61
    1b10:	be b7       	in	r27, 0x3e	; 62
    1b12:	11 96       	adiw	r26, 0x01	; 1
    1b14:	9c 92       	st	X, r9
    1b16:	11 97       	sbiw	r26, 0x01	; 1
    1b18:	12 96       	adiw	r26, 0x02	; 2
    1b1a:	0c 93       	st	X, r16
    1b1c:	12 83       	std	Z+2, r17	; 0x02
    1b1e:	e3 82       	std	Z+3, r14	; 0x03
    1b20:	35 83       	std	Z+5, r19	; 0x05
    1b22:	24 83       	std	Z+4, r18	; 0x04
    1b24:	0e 94 30 48 	call	0x9060	; 0x9060 <sprintf>
		//Shoot! There's still a chance that we can have too many logs here
		//For example, if all the way up to LOG65533 was already on card, 
		//then reset the EEPROM log number, 65533 would be skipped, 65534 would be created
		//and the above 65534 test would be skipped
		
		if(new_file_number > 65533)
    1b28:	8d b7       	in	r24, 0x3d	; 61
    1b2a:	9e b7       	in	r25, 0x3e	; 62
    1b2c:	06 96       	adiw	r24, 0x06	; 6
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	9e bf       	out	0x3e, r25	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	8d bf       	out	0x3d, r24	; 61
    1b38:	9e ef       	ldi	r25, 0xFE	; 254
    1b3a:	c9 16       	cp	r12, r25
    1b3c:	9f ef       	ldi	r25, 0xFF	; 255
    1b3e:	d9 06       	cpc	r13, r25
    1b40:	28 f0       	brcs	.+10     	; 0x1b4c <newlog+0x12a>
		{
			//Gracefully drop out to command prompt with some error
			uart_puts_p(PSTR("!Too many logs:2!"));
    1b42:	8b e6       	ldi	r24, 0x6B	; 107
    1b44:	9c e0       	ldi	r25, 0x0C	; 12
    1b46:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    1b4a:	2c c0       	rjmp	.+88     	; 0x1ba4 <newlog+0x182>

	char* new_file_name = general_buffer;
	sprintf(new_file_name, "LOG%05u.txt", new_file_number);

	struct fat_dir_entry_struct file_entry;
	while(!fat_create_file(dd, new_file_name, &file_entry))
    1b4c:	80 91 cd 0c 	lds	r24, 0x0CCD
    1b50:	90 91 ce 0c 	lds	r25, 0x0CCE
    1b54:	60 ed       	ldi	r22, 0xD0	; 208
    1b56:	7c e0       	ldi	r23, 0x0C	; 12
    1b58:	a5 01       	movw	r20, r10
    1b5a:	0e 94 25 3c 	call	0x784a	; 0x784a <fat_create_file>
    1b5e:	96 01       	movw	r18, r12
    1b60:	2f 5f       	subi	r18, 0xFF	; 255
    1b62:	3f 4f       	sbci	r19, 0xFF	; 255
    1b64:	88 23       	and	r24, r24
    1b66:	61 f2       	breq	.-104    	; 0x1b00 <newlog+0xde>

	//Record new_file number to EEPROM but do not waste too many
	//write cycles to the EEPROM as it will wear out. Only write if
	//needed
	lsb = (uint8_t)(new_file_number & 0x00FF);
	msb = (uint8_t)((new_file_number & 0xFF00) >> 8);
    1b68:	93 2f       	mov	r25, r19
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1b6a:	f9 99       	sbic	0x1f, 1	; 31
    1b6c:	fe cf       	rjmp	.-4      	; 0x1b6a <newlog+0x148>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1b6e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1b70:	83 e0       	ldi	r24, 0x03	; 3
    1b72:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1b74:	20 bd       	out	0x20, r18	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1b76:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1b78:	f9 9a       	sbi	0x1f, 1	; 31
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1b7a:	f9 99       	sbic	0x1f, 1	; 31
    1b7c:	fe cf       	rjmp	.-4      	; 0x1b7a <newlog+0x158>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1b7e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1b80:	84 e0       	ldi	r24, 0x04	; 4
    1b82:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1b84:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1b86:	80 b5       	in	r24, 0x20	; 32
	lsb = (uint8_t)(new_file_number & 0x00FF);
	msb = (uint8_t)((new_file_number & 0xFF00) >> 8);

	EEPROM_write(LOCATION_FILE_NUMBER_LSB, lsb); // LSB

	if (EEPROM_read(LOCATION_FILE_NUMBER_MSB) != msb)
    1b88:	89 17       	cp	r24, r25
    1b8a:	41 f0       	breq	.+16     	; 0x1b9c <newlog+0x17a>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1b8c:	f9 99       	sbic	0x1f, 1	; 31
    1b8e:	fe cf       	rjmp	.-4      	; 0x1b8c <newlog+0x16a>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1b90:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1b92:	84 e0       	ldi	r24, 0x04	; 4
    1b94:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1b96:	90 bd       	out	0x20, r25	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    1b98:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    1b9a:	f9 9a       	sbi	0x1f, 1	; 31
	uart_puts(new_file_name);
	uart_puts_p(PSTR("\n"));
#endif

	//Begin writing to file
	append_file(new_file_name);
    1b9c:	80 ed       	ldi	r24, 0xD0	; 208
    1b9e:	9c e0       	ldi	r25, 0x0C	; 12
    1ba0:	0e 94 96 0a 	call	0x152c	; 0x152c <append_file>
}
    1ba4:	e1 96       	adiw	r28, 0x31	; 49
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	df 90       	pop	r13
    1bbe:	cf 90       	pop	r12
    1bc0:	bf 90       	pop	r11
    1bc2:	af 90       	pop	r10
    1bc4:	9f 90       	pop	r9
    1bc6:	08 95       	ret

00001bc8 <seqlog>:
//If not, create it
//If yes, append to it
//Return 0 on error
//Return anything else on sucess
void seqlog(void)
{
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	ee 97       	sbiw	r28, 0x3e	; 62
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
	char seq_file_name[13];
	sprintf(seq_file_name, "SEQLOG.txt");
    1be4:	8e 01       	movw	r16, r28
    1be6:	0f 5f       	subi	r16, 0xFF	; 255
    1be8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bea:	c8 01       	movw	r24, r16
    1bec:	6e e0       	ldi	r22, 0x0E	; 14
    1bee:	71 e0       	ldi	r23, 0x01	; 1
    1bf0:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <strcpy>

	struct fat_file_struct* fd = open_file_in_dir(fs, dd, seq_file_name);
    1bf4:	60 91 cd 0c 	lds	r22, 0x0CCD
    1bf8:	70 91 ce 0c 	lds	r23, 0x0CCE
    1bfc:	80 91 c2 04 	lds	r24, 0x04C2
    1c00:	90 91 c3 04 	lds	r25, 0x04C3
    1c04:	a8 01       	movw	r20, r16
    1c06:	0e 94 65 0a 	call	0x14ca	; 0x14ca <open_file_in_dir>
    1c0a:	7c 01       	movw	r14, r24
	if(!fd)
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	a9 f4       	brne	.+42     	; 0x1c3a <seqlog+0x72>
	{
		uart_puts_p(PSTR("Creating SEQLOG\n"));
    1c10:	86 ea       	ldi	r24, 0xA6	; 166
    1c12:	9c e0       	ldi	r25, 0x0C	; 12
    1c14:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>

		struct fat_dir_entry_struct file_entry;
		if(!fat_create_file(dd, seq_file_name, &file_entry))
    1c18:	80 91 cd 0c 	lds	r24, 0x0CCD
    1c1c:	90 91 ce 0c 	lds	r25, 0x0CCE
    1c20:	b8 01       	movw	r22, r16
    1c22:	ae 01       	movw	r20, r28
    1c24:	42 5f       	subi	r20, 0xF2	; 242
    1c26:	5f 4f       	sbci	r21, 0xFF	; 255
    1c28:	0e 94 25 3c 	call	0x784a	; 0x784a <fat_create_file>
    1c2c:	88 23       	and	r24, r24
    1c2e:	29 f4       	brne	.+10     	; 0x1c3a <seqlog+0x72>
		{
			uart_puts_p(PSTR("Error creating SEQLOG\n"));
    1c30:	8f e8       	ldi	r24, 0x8F	; 143
    1c32:	9c e0       	ldi	r25, 0x0C	; 12
    1c34:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    1c38:	07 c0       	rjmp	.+14     	; 0x1c48 <seqlog+0x80>
			return;
		}
	}

	fat_close_file(fd); //Close the file so we can re-open it in append_file
    1c3a:	c7 01       	movw	r24, r14
    1c3c:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <fat_close_file>

	append_file(seq_file_name);
    1c40:	ce 01       	movw	r24, r28
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	0e 94 96 0a 	call	0x152c	; 0x152c <append_file>
}
    1c48:	ee 96       	adiw	r28, 0x3e	; 62
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
    1c5c:	ff 90       	pop	r15
    1c5e:	ef 90       	pop	r14
    1c60:	08 95       	ret

00001c62 <record_config_file>:
}

//Records the current EEPROM settings to the config file
//If a config file exists, it is trashed and a new one is created
void record_config_file(void)
{
    1c62:	7f 92       	push	r7
    1c64:	8f 92       	push	r8
    1c66:	9f 92       	push	r9
    1c68:	af 92       	push	r10
    1c6a:	bf 92       	push	r11
    1c6c:	cf 92       	push	r12
    1c6e:	df 92       	push	r13
    1c70:	ef 92       	push	r14
    1c72:	ff 92       	push	r15
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	c1 55       	subi	r28, 0x51	; 81
    1c82:	d0 40       	sbci	r29, 0x00	; 0
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
	struct fat_dir_entry_struct file_entry;

	char config_file_name[13];
	sprintf(config_file_name, CFG_FILENAME); //This is the name of the config file. 'config.sys' is probably a bad idea.
    1c8e:	8e 01       	movw	r16, r28
    1c90:	0c 5f       	subi	r16, 0xFC	; 252
    1c92:	1f 4f       	sbci	r17, 0xFF	; 255
    1c94:	c8 01       	movw	r24, r16
    1c96:	69 e1       	ldi	r22, 0x19	; 25
    1c98:	71 e0       	ldi	r23, 0x01	; 1
    1c9a:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <strcpy>

	//If there is currently a config file, trash it
	if(find_file_in_dir(fs, dd, config_file_name, &file_entry, 0))
    1c9e:	60 91 cd 0c 	lds	r22, 0x0CCD
    1ca2:	70 91 ce 0c 	lds	r23, 0x0CCE
    1ca6:	e1 e2       	ldi	r30, 0x21	; 33
    1ca8:	ee 2e       	mov	r14, r30
    1caa:	f1 2c       	mov	r15, r1
    1cac:	ec 0e       	add	r14, r28
    1cae:	fd 1e       	adc	r15, r29
    1cb0:	80 91 c2 04 	lds	r24, 0x04C2
    1cb4:	90 91 c3 04 	lds	r25, 0x04C3
    1cb8:	a8 01       	movw	r20, r16
    1cba:	97 01       	movw	r18, r14
    1cbc:	00 e0       	ldi	r16, 0x00	; 0
    1cbe:	0e 94 35 0a 	call	0x146a	; 0x146a <find_file_in_dir>
    1cc2:	88 23       	and	r24, r24
    1cc4:	39 f0       	breq	.+14     	; 0x1cd4 <record_config_file+0x72>
	{
		#if DEBUG
			uart_puts("\n\nDeleting config\n");
		#endif
		
		fat_delete_file(fs, &file_entry);
    1cc6:	80 91 c2 04 	lds	r24, 0x04C2
    1cca:	90 91 c3 04 	lds	r25, 0x04C3
    1cce:	b7 01       	movw	r22, r14
    1cd0:	0e 94 be 2b 	call	0x577c	; 0x577c <fat_delete_file>
	}

	//Create config file
	if(fat_create_file(dd, config_file_name, &file_entry) == 0)
    1cd4:	8e 01       	movw	r16, r28
    1cd6:	0c 5f       	subi	r16, 0xFC	; 252
    1cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cda:	80 91 cd 0c 	lds	r24, 0x0CCD
    1cde:	90 91 ce 0c 	lds	r25, 0x0CCE
    1ce2:	b8 01       	movw	r22, r16
    1ce4:	ae 01       	movw	r20, r28
    1ce6:	4f 5d       	subi	r20, 0xDF	; 223
    1ce8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cea:	0e 94 25 3c 	call	0x784a	; 0x784a <fat_create_file>
    1cee:	88 23       	and	r24, r24
    1cf0:	19 f4       	brne	.+6      	; 0x1cf8 <record_config_file+0x96>
	{
		uart_puts("Failed to create config file");
    1cf2:	84 e2       	ldi	r24, 0x24	; 36
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	10 c0       	rjmp	.+32     	; 0x1d18 <record_config_file+0xb6>
	}
	else
	{
		//Config was successfully created, so let's fill it with default settings

		struct fat_file_struct* fd = open_file_in_dir(fs, dd, config_file_name);
    1cf8:	60 91 cd 0c 	lds	r22, 0x0CCD
    1cfc:	70 91 ce 0c 	lds	r23, 0x0CCE
    1d00:	80 91 c2 04 	lds	r24, 0x04C2
    1d04:	90 91 c3 04 	lds	r25, 0x04C3
    1d08:	a8 01       	movw	r20, r16
    1d0a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <open_file_in_dir>
    1d0e:	5c 01       	movw	r10, r24
		if(!fd)
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	29 f4       	brne	.+10     	; 0x1d1e <record_config_file+0xbc>
		{
			uart_puts("!error opening config file\n");
    1d14:	81 e4       	ldi	r24, 0x41	; 65
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
    1d1c:	ee c0       	rjmp	.+476    	; 0x1efa <record_config_file+0x298>
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1d1e:	f9 99       	sbic	0x1f, 1	; 31
    1d20:	fe cf       	rjmp	.-4      	; 0x1d1e <record_config_file+0xbc>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1d22:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1d28:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1d2a:	90 b5       	in	r25, 0x20	; 32
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1d2c:	f9 99       	sbic	0x1f, 1	; 31
    1d2e:	fe cf       	rjmp	.-4      	; 0x1d2c <record_config_file+0xca>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1d30:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1d36:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1d38:	70 b4       	in	r7, 0x20	; 32
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1d3a:	f9 99       	sbic	0x1f, 1	; 31
    1d3c:	fe cf       	rjmp	.-4      	; 0x1d3a <record_config_file+0xd8>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1d3e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1d40:	85 e0       	ldi	r24, 0x05	; 5
    1d42:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1d44:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1d46:	90 b4       	in	r9, 0x20	; 32
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1d48:	f9 99       	sbic	0x1f, 1	; 31
    1d4a:	fe cf       	rjmp	.-4      	; 0x1d48 <record_config_file+0xe6>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1d4c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1d4e:	86 e0       	ldi	r24, 0x06	; 6
    1d50:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1d52:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1d54:	80 b4       	in	r8, 0x20	; 32
		char current_system_baud = EEPROM_read(LOCATION_BAUD_SETTING);
		char current_system_mode = EEPROM_read(LOCATION_SYSTEM_SETTING);
		char current_system_escape = EEPROM_read(LOCATION_ESCAPE_CHAR);
		char current_system_max_escape = EEPROM_read(LOCATION_MAX_ESCAPE_CHAR);
		
		if(current_system_baud == BAUD_2400) strcpy(settings_string,"2400");
    1d56:	99 23       	and	r25, r25
    1d58:	29 f4       	brne	.+10     	; 0x1d64 <record_config_file+0x102>
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	41 96       	adiw	r24, 0x11	; 17
    1d5e:	6d e5       	ldi	r22, 0x5D	; 93
    1d60:	71 e0       	ldi	r23, 0x01	; 1
    1d62:	30 c0       	rjmp	.+96     	; 0x1dc4 <record_config_file+0x162>
		if(current_system_baud == BAUD_4800) strcpy(settings_string,"4800");
    1d64:	94 30       	cpi	r25, 0x04	; 4
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <record_config_file+0x110>
    1d68:	ce 01       	movw	r24, r28
    1d6a:	41 96       	adiw	r24, 0x11	; 17
    1d6c:	62 e6       	ldi	r22, 0x62	; 98
    1d6e:	71 e0       	ldi	r23, 0x01	; 1
    1d70:	29 c0       	rjmp	.+82     	; 0x1dc4 <record_config_file+0x162>
		if(current_system_baud == BAUD_9600) strcpy(settings_string,"9600");
    1d72:	91 30       	cpi	r25, 0x01	; 1
    1d74:	29 f4       	brne	.+10     	; 0x1d80 <record_config_file+0x11e>
    1d76:	ce 01       	movw	r24, r28
    1d78:	41 96       	adiw	r24, 0x11	; 17
    1d7a:	67 e6       	ldi	r22, 0x67	; 103
    1d7c:	71 e0       	ldi	r23, 0x01	; 1
    1d7e:	22 c0       	rjmp	.+68     	; 0x1dc4 <record_config_file+0x162>
		if(current_system_baud == BAUD_19200) strcpy(settings_string,"19200");
    1d80:	95 30       	cpi	r25, 0x05	; 5
    1d82:	29 f4       	brne	.+10     	; 0x1d8e <record_config_file+0x12c>
    1d84:	ce 01       	movw	r24, r28
    1d86:	41 96       	adiw	r24, 0x11	; 17
    1d88:	6c e6       	ldi	r22, 0x6C	; 108
    1d8a:	71 e0       	ldi	r23, 0x01	; 1
    1d8c:	1b c0       	rjmp	.+54     	; 0x1dc4 <record_config_file+0x162>
		if(current_system_baud == BAUD_38400) strcpy(settings_string,"38400");
    1d8e:	96 30       	cpi	r25, 0x06	; 6
    1d90:	29 f4       	brne	.+10     	; 0x1d9c <record_config_file+0x13a>
    1d92:	ce 01       	movw	r24, r28
    1d94:	41 96       	adiw	r24, 0x11	; 17
    1d96:	62 e7       	ldi	r22, 0x72	; 114
    1d98:	71 e0       	ldi	r23, 0x01	; 1
    1d9a:	14 c0       	rjmp	.+40     	; 0x1dc4 <record_config_file+0x162>
		if(current_system_baud == BAUD_57600) strcpy(settings_string,"57600");
    1d9c:	92 30       	cpi	r25, 0x02	; 2
    1d9e:	29 f4       	brne	.+10     	; 0x1daa <record_config_file+0x148>
    1da0:	ce 01       	movw	r24, r28
    1da2:	41 96       	adiw	r24, 0x11	; 17
    1da4:	68 e7       	ldi	r22, 0x78	; 120
    1da6:	71 e0       	ldi	r23, 0x01	; 1
    1da8:	0d c0       	rjmp	.+26     	; 0x1dc4 <record_config_file+0x162>
		if(current_system_baud == BAUD_115200) strcpy(settings_string,"115200");
    1daa:	93 30       	cpi	r25, 0x03	; 3
    1dac:	29 f4       	brne	.+10     	; 0x1db8 <record_config_file+0x156>
    1dae:	ce 01       	movw	r24, r28
    1db0:	41 96       	adiw	r24, 0x11	; 17
    1db2:	6e e7       	ldi	r22, 0x7E	; 126
    1db4:	71 e0       	ldi	r23, 0x01	; 1
    1db6:	06 c0       	rjmp	.+12     	; 0x1dc4 <record_config_file+0x162>
		if(current_system_baud == BAUD_230400) strcpy(settings_string,"230400");
    1db8:	97 30       	cpi	r25, 0x07	; 7
    1dba:	31 f4       	brne	.+12     	; 0x1dc8 <record_config_file+0x166>
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	41 96       	adiw	r24, 0x11	; 17
    1dc0:	65 e8       	ldi	r22, 0x85	; 133
    1dc2:	71 e0       	ldi	r23, 0x01	; 1
    1dc4:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <strcpy>
		
		strcat(settings_string, ",");
    1dc8:	8e 01       	movw	r16, r28
    1dca:	0f 5e       	subi	r16, 0xEF	; 239
    1dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dce:	c8 01       	movw	r24, r16
    1dd0:	6c e8       	ldi	r22, 0x8C	; 140
    1dd2:	71 e0       	ldi	r23, 0x01	; 1
    1dd4:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <strcat>
		
		//Convert escape character to an ASCII visible string
		sprintf(temp, "%d", current_system_escape);
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <record_config_file+0x178>
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <record_config_file+0x17a>
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <record_config_file+0x17c>
    1dde:	ed b7       	in	r30, 0x3d	; 61
    1de0:	fe b7       	in	r31, 0x3e	; 62
    1de2:	31 96       	adiw	r30, 0x01	; 1
    1de4:	7e 01       	movw	r14, r28
    1de6:	08 94       	sec
    1de8:	e1 1c       	adc	r14, r1
    1dea:	f1 1c       	adc	r15, r1
    1dec:	ad b7       	in	r26, 0x3d	; 61
    1dee:	be b7       	in	r27, 0x3e	; 62
    1df0:	12 96       	adiw	r26, 0x02	; 2
    1df2:	fc 92       	st	X, r15
    1df4:	ee 92       	st	-X, r14
    1df6:	11 97       	sbiw	r26, 0x01	; 1
    1df8:	6e e8       	ldi	r22, 0x8E	; 142
    1dfa:	c6 2e       	mov	r12, r22
    1dfc:	61 e0       	ldi	r22, 0x01	; 1
    1dfe:	d6 2e       	mov	r13, r22
    1e00:	d3 82       	std	Z+3, r13	; 0x03
    1e02:	c2 82       	std	Z+2, r12	; 0x02
    1e04:	94 82       	std	Z+4, r9	; 0x04
    1e06:	15 82       	std	Z+5, r1	; 0x05
    1e08:	0e 94 30 48 	call	0x9060	; 0x9060 <sprintf>
		strcat(settings_string, temp); //Add this string to the system string
    1e0c:	8d b7       	in	r24, 0x3d	; 61
    1e0e:	9e b7       	in	r25, 0x3e	; 62
    1e10:	06 96       	adiw	r24, 0x06	; 6
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	9e bf       	out	0x3e, r25	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	8d bf       	out	0x3d, r24	; 61
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	b7 01       	movw	r22, r14
    1e20:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <strcat>

		strcat(settings_string, ",");
    1e24:	c8 01       	movw	r24, r16
    1e26:	6c e8       	ldi	r22, 0x8C	; 140
    1e28:	71 e0       	ldi	r23, 0x01	; 1
    1e2a:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <strcat>

		//Convert max escape character to an ASCII visible string
		sprintf(temp, "%d", current_system_max_escape);
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <record_config_file+0x1ce>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <record_config_file+0x1d0>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <record_config_file+0x1d2>
    1e34:	ed b7       	in	r30, 0x3d	; 61
    1e36:	fe b7       	in	r31, 0x3e	; 62
    1e38:	31 96       	adiw	r30, 0x01	; 1
    1e3a:	ad b7       	in	r26, 0x3d	; 61
    1e3c:	be b7       	in	r27, 0x3e	; 62
    1e3e:	12 96       	adiw	r26, 0x02	; 2
    1e40:	fc 92       	st	X, r15
    1e42:	ee 92       	st	-X, r14
    1e44:	11 97       	sbiw	r26, 0x01	; 1
    1e46:	d3 82       	std	Z+3, r13	; 0x03
    1e48:	c2 82       	std	Z+2, r12	; 0x02
    1e4a:	84 82       	std	Z+4, r8	; 0x04
    1e4c:	15 82       	std	Z+5, r1	; 0x05
    1e4e:	0e 94 30 48 	call	0x9060	; 0x9060 <sprintf>
		strcat(settings_string, temp); //Add this string to the system string
    1e52:	8d b7       	in	r24, 0x3d	; 61
    1e54:	9e b7       	in	r25, 0x3e	; 62
    1e56:	06 96       	adiw	r24, 0x06	; 6
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	9e bf       	out	0x3e, r25	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	8d bf       	out	0x3d, r24	; 61
    1e62:	c8 01       	movw	r24, r16
    1e64:	b7 01       	movw	r22, r14
    1e66:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <strcat>

		strcat(settings_string, ",");
    1e6a:	c8 01       	movw	r24, r16
    1e6c:	6c e8       	ldi	r22, 0x8C	; 140
    1e6e:	71 e0       	ldi	r23, 0x01	; 1
    1e70:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <strcat>

		//Convert system mode to a ASCII visible character
		sprintf(temp, "%d", current_system_mode);
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <record_config_file+0x214>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <record_config_file+0x216>
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <record_config_file+0x218>
    1e7a:	ed b7       	in	r30, 0x3d	; 61
    1e7c:	fe b7       	in	r31, 0x3e	; 62
    1e7e:	31 96       	adiw	r30, 0x01	; 1
    1e80:	ad b7       	in	r26, 0x3d	; 61
    1e82:	be b7       	in	r27, 0x3e	; 62
    1e84:	12 96       	adiw	r26, 0x02	; 2
    1e86:	fc 92       	st	X, r15
    1e88:	ee 92       	st	-X, r14
    1e8a:	11 97       	sbiw	r26, 0x01	; 1
    1e8c:	d3 82       	std	Z+3, r13	; 0x03
    1e8e:	c2 82       	std	Z+2, r12	; 0x02
    1e90:	74 82       	std	Z+4, r7	; 0x04
    1e92:	15 82       	std	Z+5, r1	; 0x05
    1e94:	0e 94 30 48 	call	0x9060	; 0x9060 <sprintf>
		strcat(settings_string, temp); //Add this string to the system string
    1e98:	8d b7       	in	r24, 0x3d	; 61
    1e9a:	9e b7       	in	r25, 0x3e	; 62
    1e9c:	06 96       	adiw	r24, 0x06	; 6
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	9e bf       	out	0x3e, r25	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	8d bf       	out	0x3d, r24	; 61
    1ea8:	c8 01       	movw	r24, r16
    1eaa:	b7 01       	movw	r22, r14
    1eac:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <strcat>

		strcat(settings_string, "\0");

		//Record current system settings to the config file
		//strcpy( (char*)input_buffer, "9600,26,3,0\0");
		strcpy( (char*)input_buffer, settings_string);
    1eb0:	8d ec       	ldi	r24, 0xCD	; 205
    1eb2:	94 e0       	ldi	r25, 0x04	; 4
    1eb4:	b8 01       	movw	r22, r16
    1eb6:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <strcpy>
		#if DEBUG
			uart_puts_p(PSTR("\nSetting string: "));
			uart_puts(settings_string);
		#endif

		if( fat_write_file(fd, (uint8_t*)input_buffer, strlen(settings_string) ) != strlen(settings_string) )
    1eba:	f8 01       	movw	r30, r16
    1ebc:	01 90       	ld	r0, Z+
    1ebe:	00 20       	and	r0, r0
    1ec0:	e9 f7       	brne	.-6      	; 0x1ebc <record_config_file+0x25a>
    1ec2:	31 97       	sbiw	r30, 0x01	; 1
    1ec4:	e0 1b       	sub	r30, r16
    1ec6:	f1 0b       	sbc	r31, r17
    1ec8:	c5 01       	movw	r24, r10
    1eca:	6d ec       	ldi	r22, 0xCD	; 205
    1ecc:	74 e0       	ldi	r23, 0x04	; 4
    1ece:	af 01       	movw	r20, r30
    1ed0:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	01 90       	ld	r0, Z+
    1ed8:	00 20       	and	r0, r0
    1eda:	e9 f7       	brne	.-6      	; 0x1ed6 <record_config_file+0x274>
    1edc:	31 97       	sbiw	r30, 0x01	; 1
    1ede:	e0 1b       	sub	r30, r16
    1ee0:	f1 0b       	sbc	r31, r17
    1ee2:	8e 17       	cp	r24, r30
    1ee4:	9f 07       	cpc	r25, r31
    1ee6:	21 f0       	breq	.+8      	; 0x1ef0 <record_config_file+0x28e>
			uart_puts("error writing to config\n");
    1ee8:	81 e9       	ldi	r24, 0x91	; 145
    1eea:	91 e0       	ldi	r25, 0x01	; 1
    1eec:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>

		fat_close_file(fd);
    1ef0:	c5 01       	movw	r24, r10
    1ef2:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <fat_close_file>

		sd_raw_sync(); //Sync all newly written data to card
    1ef6:	0e 94 9b 1c 	call	0x3936	; 0x3936 <sd_raw_sync>
		
		//Now the new config file has the current system settings, nothing else to do!
	}
}
    1efa:	cf 5a       	subi	r28, 0xAF	; 175
    1efc:	df 4f       	sbci	r29, 0xFF	; 255
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	9f 90       	pop	r9
    1f1e:	8f 90       	pop	r8
    1f20:	7f 90       	pop	r7
    1f22:	08 95       	ret

00001f24 <system_menu>:
//1) Turn on unit, unit will create new file, and just start logging
//2) Turn on, append to known file, and just start logging
//3) Turn on, sit at command prompt
//4) Resets the newlog file number to zero
void system_menu(void)
{
    1f24:	ff 92       	push	r15
    1f26:	0f 93       	push	r16
    1f28:	1f 93       	push	r17
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	00 d0       	rcall	.+0      	; 0x1f30 <system_menu+0xc>
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <system_menu+0xe>
    1f32:	0f 92       	push	r0
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    1f38:	f9 99       	sbic	0x1f, 1	; 31
    1f3a:	fe cf       	rjmp	.-4      	; 0x1f38 <system_menu+0x14>
	EEARH = uiAddress >> 8; //Set up address and data registers
    1f3c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    1f42:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    1f44:	f0 b4       	in	r15, 0x20	; 32
		uart_putc('>');

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    1f46:	8e 01       	movw	r16, r28
    1f48:	0f 5f       	subi	r16, 0xFF	; 255
    1f4a:	1f 4f       	sbci	r17, 0xFF	; 255

	uint8_t system_mode = EEPROM_read(LOCATION_SYSTEM_SETTING);

	while(1)
	{
		uart_puts_p(PSTR("\nSystem Configuration\n"));
    1f4c:	89 e9       	ldi	r24, 0x99	; 153
    1f4e:	92 e0       	ldi	r25, 0x02	; 2
    1f50:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>

		uart_puts_p(PSTR("Current boot mode: "));
    1f54:	85 e8       	ldi	r24, 0x85	; 133
    1f56:	92 e0       	ldi	r25, 0x02	; 2
    1f58:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		if(system_mode == MODE_NEWLOG) uart_puts_p(PSTR("New file"));
    1f5c:	ff 20       	and	r15, r15
    1f5e:	19 f4       	brne	.+6      	; 0x1f66 <system_menu+0x42>
    1f60:	8c e7       	ldi	r24, 0x7C	; 124
    1f62:	92 e0       	ldi	r25, 0x02	; 2
    1f64:	0b c0       	rjmp	.+22     	; 0x1f7c <system_menu+0x58>
		if(system_mode == MODE_SEQLOG) uart_puts_p(PSTR("Append file"));
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	f8 16       	cp	r15, r24
    1f6a:	19 f4       	brne	.+6      	; 0x1f72 <system_menu+0x4e>
    1f6c:	80 e7       	ldi	r24, 0x70	; 112
    1f6e:	92 e0       	ldi	r25, 0x02	; 2
    1f70:	05 c0       	rjmp	.+10     	; 0x1f7c <system_menu+0x58>
		if(system_mode == MODE_COMMAND) uart_puts_p(PSTR("Command"));
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	f8 16       	cp	r15, r24
    1f76:	21 f4       	brne	.+8      	; 0x1f80 <system_menu+0x5c>
    1f78:	88 e6       	ldi	r24, 0x68	; 104
    1f7a:	92 e0       	ldi	r25, 0x02	; 2
    1f7c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("\n"));
    1f80:	86 e6       	ldi	r24, 0x66	; 102
    1f82:	92 e0       	ldi	r25, 0x02	; 2
    1f84:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>

		uart_puts_p(PSTR("Current escape character and amount: "));
    1f88:	80 e4       	ldi	r24, 0x40	; 64
    1f8a:	92 e0       	ldi	r25, 0x02	; 2
    1f8c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_putdw_dec(setting_escape_character);
    1f90:	60 91 cf 0c 	lds	r22, 0x0CCF
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 f6 44 	call	0x89ec	; 0x89ec <uart_putdw_dec>
		uart_puts_p(PSTR(" x "));
    1f9e:	8c e3       	ldi	r24, 0x3C	; 60
    1fa0:	92 e0       	ldi	r25, 0x02	; 2
    1fa2:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_putdw_dec(setting_max_escape_character);
    1fa6:	60 91 c7 04 	lds	r22, 0x04C7
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 f6 44 	call	0x89ec	; 0x89ec <uart_putdw_dec>
		uart_puts_p(PSTR("\n"));
    1fb4:	8a e3       	ldi	r24, 0x3A	; 58
    1fb6:	92 e0       	ldi	r25, 0x02	; 2
    1fb8:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		
		uart_puts_p(PSTR("Change to:\n"));
    1fbc:	8e e2       	ldi	r24, 0x2E	; 46
    1fbe:	92 e0       	ldi	r25, 0x02	; 2
    1fc0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("1) New file logging\n"));
    1fc4:	89 e1       	ldi	r24, 0x19	; 25
    1fc6:	92 e0       	ldi	r25, 0x02	; 2
    1fc8:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("2) Append file logging\n"));
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	92 e0       	ldi	r25, 0x02	; 2
    1fd0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("3) Command prompt\n"));
    1fd4:	8e ee       	ldi	r24, 0xEE	; 238
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("4) Reset new file number\n"));
    1fdc:	84 ed       	ldi	r24, 0xD4	; 212
    1fde:	91 e0       	ldi	r25, 0x01	; 1
    1fe0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("5) New escape character\n"));
    1fe4:	8b eb       	ldi	r24, 0xBB	; 187
    1fe6:	91 e0       	ldi	r25, 0x01	; 1
    1fe8:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("6) Number of escape characters\n"));
    1fec:	8b e9       	ldi	r24, 0x9B	; 155
    1fee:	91 e0       	ldi	r25, 0x01	; 1
    1ff0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("x) Exit\n"));
    1ff4:	82 e9       	ldi	r24, 0x92	; 146
    1ff6:	91 e0       	ldi	r25, 0x01	; 1
    1ff8:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>

		//print prompt
		uart_putc('>');
    1ffc:	8e e3       	ldi	r24, 0x3E	; 62
    1ffe:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    2002:	c8 01       	movw	r24, r16
    2004:	65 e0       	ldi	r22, 0x05	; 5
    2006:	0e 94 40 09 	call	0x1280	; 0x1280 <read_line>
    200a:	88 23       	and	r24, r24
    200c:	09 f4       	brne	.+2      	; 0x2010 <system_menu+0xec>
    200e:	9e cf       	rjmp	.-196    	; 0x1f4c <system_menu+0x28>
			continue;

		//execute command
		if(strcmp_P(command, PSTR("1")) == 0)
    2010:	c8 01       	movw	r24, r16
    2012:	60 e9       	ldi	r22, 0x90	; 144
    2014:	71 e0       	ldi	r23, 0x01	; 1
    2016:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    201a:	89 2b       	or	r24, r25
    201c:	59 f4       	brne	.+22     	; 0x2034 <system_menu+0x110>
		{
			uart_puts_p(PSTR("New file logging\n"));
    201e:	8e e7       	ldi	r24, 0x7E	; 126
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2026:	f9 99       	sbic	0x1f, 1	; 31
    2028:	fe cf       	rjmp	.-4      	; 0x2026 <system_menu+0x102>
	EEARH = uiAddress >> 8; //Set up address and data registers
    202a:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2030:	10 bc       	out	0x20, r1	; 32
    2032:	12 c0       	rjmp	.+36     	; 0x2058 <system_menu+0x134>
			uart_puts_p(PSTR("New file logging\n"));
			EEPROM_write(LOCATION_SYSTEM_SETTING, MODE_NEWLOG);
			record_config_file(); //Put this new setting into the config file
			return;
		}
		if(strcmp_P(command, PSTR("2")) == 0)
    2034:	c8 01       	movw	r24, r16
    2036:	6c e7       	ldi	r22, 0x7C	; 124
    2038:	71 e0       	ldi	r23, 0x01	; 1
    203a:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    203e:	89 2b       	or	r24, r25
    2040:	81 f4       	brne	.+32     	; 0x2062 <system_menu+0x13e>
		{
			uart_puts_p(PSTR("Append file logging\n"));
    2042:	87 e6       	ldi	r24, 0x67	; 103
    2044:	91 e0       	ldi	r25, 0x01	; 1
    2046:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    204a:	f9 99       	sbic	0x1f, 1	; 31
    204c:	fe cf       	rjmp	.-4      	; 0x204a <system_menu+0x126>
	EEARH = uiAddress >> 8; //Set up address and data registers
    204e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    2058:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    205a:	f9 9a       	sbi	0x1f, 1	; 31
		}
		if(strcmp_P(command, PSTR("2")) == 0)
		{
			uart_puts_p(PSTR("Append file logging\n"));
			EEPROM_write(LOCATION_SYSTEM_SETTING, MODE_SEQLOG);
			record_config_file(); //Put this new setting into the config file
    205c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <record_config_file>
    2060:	8c c0       	rjmp	.+280    	; 0x217a <system_menu+0x256>
			return;
		}
		if(strcmp_P(command, PSTR("3")) == 0)
    2062:	c8 01       	movw	r24, r16
    2064:	65 e6       	ldi	r22, 0x65	; 101
    2066:	71 e0       	ldi	r23, 0x01	; 1
    2068:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    206c:	89 2b       	or	r24, r25
    206e:	51 f4       	brne	.+20     	; 0x2084 <system_menu+0x160>
		{
			uart_puts_p(PSTR("Command prompt\n"));
    2070:	85 e5       	ldi	r24, 0x55	; 85
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2078:	f9 99       	sbic	0x1f, 1	; 31
    207a:	fe cf       	rjmp	.-4      	; 0x2078 <system_menu+0x154>
	EEARH = uiAddress >> 8; //Set up address and data registers
    207c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    207e:	82 e0       	ldi	r24, 0x02	; 2
    2080:	81 bd       	out	0x21, r24	; 33
    2082:	e9 cf       	rjmp	.-46     	; 0x2056 <system_menu+0x132>
			uart_puts_p(PSTR("Command prompt\n"));
			EEPROM_write(LOCATION_SYSTEM_SETTING, MODE_COMMAND);
			record_config_file(); //Put this new setting into the config file
			return;
		}
		if(strcmp_P(command, PSTR("4")) == 0)
    2084:	c8 01       	movw	r24, r16
    2086:	63 e5       	ldi	r22, 0x53	; 83
    2088:	71 e0       	ldi	r23, 0x01	; 1
    208a:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    208e:	89 2b       	or	r24, r25
    2090:	a9 f4       	brne	.+42     	; 0x20bc <system_menu+0x198>
		{
			uart_puts_p(PSTR("New file number reset to zero\n"));
    2092:	84 e3       	ldi	r24, 0x34	; 52
    2094:	91 e0       	ldi	r25, 0x01	; 1
    2096:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    209a:	f9 99       	sbic	0x1f, 1	; 31
    209c:	fe cf       	rjmp	.-4      	; 0x209a <system_menu+0x176>
	EEARH = uiAddress >> 8; //Set up address and data registers
    209e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    20a4:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    20a6:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    20a8:	f9 9a       	sbi	0x1f, 1	; 31
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    20aa:	f9 99       	sbic	0x1f, 1	; 31
    20ac:	fe cf       	rjmp	.-4      	; 0x20aa <system_menu+0x186>
	EEARH = uiAddress >> 8; //Set up address and data registers
    20ae:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    20b0:	84 e0       	ldi	r24, 0x04	; 4
    20b2:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    20b4:	10 bc       	out	0x20, r1	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    20b6:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    20b8:	f9 9a       	sbi	0x1f, 1	; 31
    20ba:	5f c0       	rjmp	.+190    	; 0x217a <system_menu+0x256>
			//65533 log testing
			//EEPROM_write(LOCATION_FILE_NUMBER_LSB, 0xFD);
			//EEPROM_write(LOCATION_FILE_NUMBER_MSB, 0xFF);
			return;
		}
		if(strcmp_P(command, PSTR("5")) == 0)
    20bc:	c8 01       	movw	r24, r16
    20be:	62 e3       	ldi	r22, 0x32	; 50
    20c0:	71 e0       	ldi	r23, 0x01	; 1
    20c2:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    20c6:	89 2b       	or	r24, r25
    20c8:	09 f5       	brne	.+66     	; 0x210c <system_menu+0x1e8>
		{
			uart_puts_p(PSTR("Enter a new escape character: "));
    20ca:	83 e1       	ldi	r24, 0x13	; 19
    20cc:	91 e0       	ldi	r25, 0x01	; 1
    20ce:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
			setting_escape_character = uart_getc();
    20d2:	0e 94 7a 45 	call	0x8af4	; 0x8af4 <uart_getc>
    20d6:	98 2f       	mov	r25, r24
    20d8:	80 93 cf 0c 	sts	0x0CCF, r24
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    20dc:	f9 99       	sbic	0x1f, 1	; 31
    20de:	fe cf       	rjmp	.-4      	; 0x20dc <system_menu+0x1b8>
	EEARH = uiAddress >> 8; //Set up address and data registers
    20e0:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    20e2:	85 e0       	ldi	r24, 0x05	; 5
    20e4:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    20e6:	90 bd       	out	0x20, r25	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    20e8:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    20ea:	f9 9a       	sbi	0x1f, 1	; 31
		if(strcmp_P(command, PSTR("5")) == 0)
		{
			uart_puts_p(PSTR("Enter a new escape character: "));
			setting_escape_character = uart_getc();
			EEPROM_write(LOCATION_ESCAPE_CHAR, setting_escape_character);
			record_config_file(); //Put this new setting into the config file
    20ec:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <record_config_file>

			uart_puts_p(PSTR("\nNew escape character: "));
    20f0:	8b ef       	ldi	r24, 0xFB	; 251
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
			uart_putdw_dec(setting_escape_character);
    20f8:	60 91 cf 0c 	lds	r22, 0x0CCF
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 f6 44 	call	0x89ec	; 0x89ec <uart_putdw_dec>
			uart_puts_p(PSTR("\n"));
    2106:	89 ef       	ldi	r24, 0xF9	; 249
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	35 c0       	rjmp	.+106    	; 0x2176 <system_menu+0x252>
			return;
		}
		if(strcmp_P(command, PSTR("6")) == 0)
    210c:	c8 01       	movw	r24, r16
    210e:	67 ef       	ldi	r22, 0xF7	; 247
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    2116:	89 2b       	or	r24, r25
    2118:	21 f5       	brne	.+72     	; 0x2162 <system_menu+0x23e>
		{
			char choice = 255;
			while(choice > 9)
			{
				uart_puts_p(PSTR("Enter number of escape characters to look for: "));
    211a:	87 ec       	ldi	r24, 0xC7	; 199
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
				choice = uart_getc() - '0';
    2122:	0e 94 7a 45 	call	0x8af4	; 0x8af4 <uart_getc>
    2126:	98 2f       	mov	r25, r24
    2128:	90 53       	subi	r25, 0x30	; 48
			return;
		}
		if(strcmp_P(command, PSTR("6")) == 0)
		{
			char choice = 255;
			while(choice > 9)
    212a:	9a 30       	cpi	r25, 0x0A	; 10
    212c:	b0 f7       	brcc	.-20     	; 0x211a <system_menu+0x1f6>
			{
				uart_puts_p(PSTR("Enter number of escape characters to look for: "));
				choice = uart_getc() - '0';
			}
			
			setting_max_escape_character = choice;
    212e:	90 93 c7 04 	sts	0x04C7, r25
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2132:	f9 99       	sbic	0x1f, 1	; 31
    2134:	fe cf       	rjmp	.-4      	; 0x2132 <system_menu+0x20e>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2136:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2138:	86 e0       	ldi	r24, 0x06	; 6
    213a:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    213c:	90 bd       	out	0x20, r25	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    213e:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    2140:	f9 9a       	sbi	0x1f, 1	; 31
				choice = uart_getc() - '0';
			}
			
			setting_max_escape_character = choice;
			EEPROM_write(LOCATION_MAX_ESCAPE_CHAR, setting_max_escape_character);
			record_config_file(); //Put this new setting into the config file
    2142:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <record_config_file>

			uart_puts_p(PSTR("\nNumber of escape characters needed: "));
    2146:	81 ea       	ldi	r24, 0xA1	; 161
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
			uart_putdw_dec(setting_max_escape_character);
    214e:	60 91 c7 04 	lds	r22, 0x04C7
    2152:	70 e0       	ldi	r23, 0x00	; 0
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0e 94 f6 44 	call	0x89ec	; 0x89ec <uart_putdw_dec>
			uart_puts_p(PSTR("\n"));
    215c:	8f e9       	ldi	r24, 0x9F	; 159
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0a c0       	rjmp	.+20     	; 0x2176 <system_menu+0x252>
			return;
		}
		if(strcmp_P(command, PSTR("x")) == 0)
    2162:	c8 01       	movw	r24, r16
    2164:	6d e9       	ldi	r22, 0x9D	; 157
    2166:	70 e0       	ldi	r23, 0x00	; 0
    2168:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    216c:	89 2b       	or	r24, r25
    216e:	09 f0       	breq	.+2      	; 0x2172 <system_menu+0x24e>
    2170:	ed ce       	rjmp	.-550    	; 0x1f4c <system_menu+0x28>
		{
			//Do nothing, just exit
			uart_puts_p(PSTR("Exiting\n"));
    2172:	84 e9       	ldi	r24, 0x94	; 148
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
			return;
		}
	}
}
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	1f 91       	pop	r17
    218a:	0f 91       	pop	r16
    218c:	ff 90       	pop	r15
    218e:	08 95       	ret

00002190 <baud_menu>:
	uart_puts_p(PSTR("baud\t\t\t: Menu to configure baud rate\n"));
}

//Configure what baud rate to communicate at
void baud_menu(void)
{
    2190:	ff 92       	push	r15
    2192:	0f 93       	push	r16
    2194:	1f 93       	push	r17
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <baud_menu+0xc>
    219c:	00 d0       	rcall	.+0      	; 0x219e <baud_menu+0xe>
    219e:	0f 92       	push	r0
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
}

unsigned char EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    21a4:	f9 99       	sbic	0x1f, 1	; 31
    21a6:	fe cf       	rjmp	.-4      	; 0x21a4 <baud_menu+0x14>
	EEARH = uiAddress >> 8; //Set up address and data registers
    21a8:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); //Start eeprom read by writing EERE
    21ae:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR; //Return data from data register
    21b0:	f0 b4       	in	r15, 0x20	; 32
		uart_putc('>');

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    21b2:	8e 01       	movw	r16, r28
    21b4:	0f 5f       	subi	r16, 0xFF	; 255
    21b6:	1f 4f       	sbci	r17, 0xFF	; 255

	uint8_t uart_speed = EEPROM_read(LOCATION_BAUD_SETTING);
	
	while(1)
	{
		uart_puts_p(PSTR("\nBaud Configuration:\n"));
    21b8:	88 e3       	ldi	r24, 0x38	; 56
    21ba:	94 e0       	ldi	r25, 0x04	; 4
    21bc:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	
		uart_puts_p(PSTR("Current: "));
    21c0:	8e e2       	ldi	r24, 0x2E	; 46
    21c2:	94 e0       	ldi	r25, 0x04	; 4
    21c4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		if(uart_speed == BAUD_4800) uart_puts_p(PSTR("48"));
    21c8:	84 e0       	ldi	r24, 0x04	; 4
    21ca:	f8 16       	cp	r15, r24
    21cc:	19 f4       	brne	.+6      	; 0x21d4 <baud_menu+0x44>
    21ce:	8b e2       	ldi	r24, 0x2B	; 43
    21d0:	94 e0       	ldi	r25, 0x04	; 4
    21d2:	28 c0       	rjmp	.+80     	; 0x2224 <baud_menu+0x94>
		if(uart_speed == BAUD_2400) uart_puts_p(PSTR("24"));
    21d4:	ff 20       	and	r15, r15
    21d6:	19 f4       	brne	.+6      	; 0x21de <baud_menu+0x4e>
    21d8:	88 e2       	ldi	r24, 0x28	; 40
    21da:	94 e0       	ldi	r25, 0x04	; 4
    21dc:	23 c0       	rjmp	.+70     	; 0x2224 <baud_menu+0x94>
		if(uart_speed == BAUD_9600) uart_puts_p(PSTR("96"));
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	f8 16       	cp	r15, r24
    21e2:	19 f4       	brne	.+6      	; 0x21ea <baud_menu+0x5a>
    21e4:	85 e2       	ldi	r24, 0x25	; 37
    21e6:	94 e0       	ldi	r25, 0x04	; 4
    21e8:	1d c0       	rjmp	.+58     	; 0x2224 <baud_menu+0x94>
		if(uart_speed == BAUD_19200) uart_puts_p(PSTR("192"));
    21ea:	85 e0       	ldi	r24, 0x05	; 5
    21ec:	f8 16       	cp	r15, r24
    21ee:	19 f4       	brne	.+6      	; 0x21f6 <baud_menu+0x66>
    21f0:	81 e2       	ldi	r24, 0x21	; 33
    21f2:	94 e0       	ldi	r25, 0x04	; 4
    21f4:	17 c0       	rjmp	.+46     	; 0x2224 <baud_menu+0x94>
		if(uart_speed == BAUD_38400) uart_puts_p(PSTR("384"));
    21f6:	86 e0       	ldi	r24, 0x06	; 6
    21f8:	f8 16       	cp	r15, r24
    21fa:	19 f4       	brne	.+6      	; 0x2202 <baud_menu+0x72>
    21fc:	8d e1       	ldi	r24, 0x1D	; 29
    21fe:	94 e0       	ldi	r25, 0x04	; 4
    2200:	11 c0       	rjmp	.+34     	; 0x2224 <baud_menu+0x94>
		if(uart_speed == BAUD_57600) uart_puts_p(PSTR("576"));
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	f8 16       	cp	r15, r24
    2206:	19 f4       	brne	.+6      	; 0x220e <baud_menu+0x7e>
    2208:	89 e1       	ldi	r24, 0x19	; 25
    220a:	94 e0       	ldi	r25, 0x04	; 4
    220c:	0b c0       	rjmp	.+22     	; 0x2224 <baud_menu+0x94>
		if(uart_speed == BAUD_115200) uart_puts_p(PSTR("1152"));
    220e:	83 e0       	ldi	r24, 0x03	; 3
    2210:	f8 16       	cp	r15, r24
    2212:	19 f4       	brne	.+6      	; 0x221a <baud_menu+0x8a>
    2214:	84 e1       	ldi	r24, 0x14	; 20
    2216:	94 e0       	ldi	r25, 0x04	; 4
    2218:	05 c0       	rjmp	.+10     	; 0x2224 <baud_menu+0x94>
		if(uart_speed == BAUD_230400) uart_puts_p(PSTR("2304"));
    221a:	87 e0       	ldi	r24, 0x07	; 7
    221c:	f8 16       	cp	r15, r24
    221e:	21 f4       	brne	.+8      	; 0x2228 <baud_menu+0x98>
    2220:	8f e0       	ldi	r24, 0x0F	; 15
    2222:	94 e0       	ldi	r25, 0x04	; 4
    2224:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("00 bps\n"));
    2228:	87 e0       	ldi	r24, 0x07	; 7
    222a:	94 e0       	ldi	r25, 0x04	; 4
    222c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	
		uart_puts_p(PSTR("Change to:\n"));
    2230:	8b ef       	ldi	r24, 0xFB	; 251
    2232:	93 e0       	ldi	r25, 0x03	; 3
    2234:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("1) 2400 bps\n"));
    2238:	8e ee       	ldi	r24, 0xEE	; 238
    223a:	93 e0       	ldi	r25, 0x03	; 3
    223c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("2) 4800 bps\n"));
    2240:	81 ee       	ldi	r24, 0xE1	; 225
    2242:	93 e0       	ldi	r25, 0x03	; 3
    2244:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("3) 9600 bps\n"));
    2248:	84 ed       	ldi	r24, 0xD4	; 212
    224a:	93 e0       	ldi	r25, 0x03	; 3
    224c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("4) 19200 bps\n"));
    2250:	86 ec       	ldi	r24, 0xC6	; 198
    2252:	93 e0       	ldi	r25, 0x03	; 3
    2254:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("5) 38400 bps\n"));
    2258:	88 eb       	ldi	r24, 0xB8	; 184
    225a:	93 e0       	ldi	r25, 0x03	; 3
    225c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("6) 57600 bps\n"));
    2260:	8a ea       	ldi	r24, 0xAA	; 170
    2262:	93 e0       	ldi	r25, 0x03	; 3
    2264:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("7) 115200 bps\n"));
    2268:	8b e9       	ldi	r24, 0x9B	; 155
    226a:	93 e0       	ldi	r25, 0x03	; 3
    226c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("8) 230400 bps\n"));
    2270:	8c e8       	ldi	r24, 0x8C	; 140
    2272:	93 e0       	ldi	r25, 0x03	; 3
    2274:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
		uart_puts_p(PSTR("x) Exit\n"));
    2278:	83 e8       	ldi	r24, 0x83	; 131
    227a:	93 e0       	ldi	r25, 0x03	; 3
    227c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>

		//print prompt
		uart_putc('>');
    2280:	8e e3       	ldi	r24, 0x3E	; 62
    2282:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>

		//read command
		char* command = buffer;

		if(read_line(command, sizeof(buffer)) < 1)
    2286:	c8 01       	movw	r24, r16
    2288:	65 e0       	ldi	r22, 0x05	; 5
    228a:	0e 94 40 09 	call	0x1280	; 0x1280 <read_line>
    228e:	88 23       	and	r24, r24
    2290:	09 f4       	brne	.+2      	; 0x2294 <baud_menu+0x104>
    2292:	92 cf       	rjmp	.-220    	; 0x21b8 <baud_menu+0x28>
			continue;

		//execute command
		if(strcmp_P(command, PSTR("1")) == 0)
    2294:	c8 01       	movw	r24, r16
    2296:	61 e8       	ldi	r22, 0x81	; 129
    2298:	73 e0       	ldi	r23, 0x03	; 3
    229a:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    229e:	89 2b       	or	r24, r25
    22a0:	59 f4       	brne	.+22     	; 0x22b8 <baud_menu+0x128>
		{
			uart_puts_p(PSTR("\nGoing to 2400bps...\n"));
    22a2:	8b e6       	ldi	r24, 0x6B	; 107
    22a4:	93 e0       	ldi	r25, 0x03	; 3
    22a6:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    22aa:	f9 99       	sbic	0x1f, 1	; 31
    22ac:	fe cf       	rjmp	.-4      	; 0x22aa <baud_menu+0x11a>
	EEARH = uiAddress >> 8; //Set up address and data registers
    22ae:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    22b4:	10 bc       	out	0x20, r1	; 32
    22b6:	7d c0       	rjmp	.+250    	; 0x23b2 <baud_menu+0x222>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_2400);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("2")) == 0)
    22b8:	c8 01       	movw	r24, r16
    22ba:	69 e6       	ldi	r22, 0x69	; 105
    22bc:	73 e0       	ldi	r23, 0x03	; 3
    22be:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    22c2:	89 2b       	or	r24, r25
    22c4:	59 f4       	brne	.+22     	; 0x22dc <baud_menu+0x14c>
		{
			uart_puts_p(PSTR("\nGoing to 4800bps...\n"));
    22c6:	83 e5       	ldi	r24, 0x53	; 83
    22c8:	93 e0       	ldi	r25, 0x03	; 3
    22ca:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    22ce:	f9 99       	sbic	0x1f, 1	; 31
    22d0:	fe cf       	rjmp	.-4      	; 0x22ce <baud_menu+0x13e>
	EEARH = uiAddress >> 8; //Set up address and data registers
    22d2:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    22d8:	84 e0       	ldi	r24, 0x04	; 4
    22da:	6a c0       	rjmp	.+212    	; 0x23b0 <baud_menu+0x220>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_4800);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("3")) == 0)
    22dc:	c8 01       	movw	r24, r16
    22de:	61 e5       	ldi	r22, 0x51	; 81
    22e0:	73 e0       	ldi	r23, 0x03	; 3
    22e2:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    22e6:	89 2b       	or	r24, r25
    22e8:	51 f4       	brne	.+20     	; 0x22fe <baud_menu+0x16e>
		{
			uart_puts_p(PSTR("\nGoing to 9600bps...\n"));
    22ea:	8b e3       	ldi	r24, 0x3B	; 59
    22ec:	93 e0       	ldi	r25, 0x03	; 3
    22ee:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    22f2:	f9 99       	sbic	0x1f, 1	; 31
    22f4:	fe cf       	rjmp	.-4      	; 0x22f2 <baud_menu+0x162>
	EEARH = uiAddress >> 8; //Set up address and data registers
    22f6:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	81 bd       	out	0x21, r24	; 33
    22fc:	59 c0       	rjmp	.+178    	; 0x23b0 <baud_menu+0x220>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_9600);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("4")) == 0)
    22fe:	c8 01       	movw	r24, r16
    2300:	69 e3       	ldi	r22, 0x39	; 57
    2302:	73 e0       	ldi	r23, 0x03	; 3
    2304:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    2308:	89 2b       	or	r24, r25
    230a:	59 f4       	brne	.+22     	; 0x2322 <baud_menu+0x192>
		{
			uart_puts_p(PSTR("\nGoing to 19200bps...\n"));
    230c:	82 e2       	ldi	r24, 0x22	; 34
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2314:	f9 99       	sbic	0x1f, 1	; 31
    2316:	fe cf       	rjmp	.-4      	; 0x2314 <baud_menu+0x184>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2318:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    231e:	85 e0       	ldi	r24, 0x05	; 5
    2320:	47 c0       	rjmp	.+142    	; 0x23b0 <baud_menu+0x220>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_19200);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("5")) == 0)
    2322:	c8 01       	movw	r24, r16
    2324:	60 e2       	ldi	r22, 0x20	; 32
    2326:	73 e0       	ldi	r23, 0x03	; 3
    2328:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    232c:	89 2b       	or	r24, r25
    232e:	59 f4       	brne	.+22     	; 0x2346 <baud_menu+0x1b6>
		{
			uart_puts_p(PSTR("\nGoing to 38400bps...\n"));
    2330:	89 e0       	ldi	r24, 0x09	; 9
    2332:	93 e0       	ldi	r25, 0x03	; 3
    2334:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2338:	f9 99       	sbic	0x1f, 1	; 31
    233a:	fe cf       	rjmp	.-4      	; 0x2338 <baud_menu+0x1a8>
	EEARH = uiAddress >> 8; //Set up address and data registers
    233c:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2342:	86 e0       	ldi	r24, 0x06	; 6
    2344:	35 c0       	rjmp	.+106    	; 0x23b0 <baud_menu+0x220>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_38400);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("6")) == 0)
    2346:	c8 01       	movw	r24, r16
    2348:	67 e0       	ldi	r22, 0x07	; 7
    234a:	73 e0       	ldi	r23, 0x03	; 3
    234c:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    2350:	89 2b       	or	r24, r25
    2352:	59 f4       	brne	.+22     	; 0x236a <baud_menu+0x1da>
		{
			uart_puts_p(PSTR("\nGoing to 57600bps...\n"));
    2354:	80 ef       	ldi	r24, 0xF0	; 240
    2356:	92 e0       	ldi	r25, 0x02	; 2
    2358:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    235c:	f9 99       	sbic	0x1f, 1	; 31
    235e:	fe cf       	rjmp	.-4      	; 0x235c <baud_menu+0x1cc>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2360:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2366:	82 e0       	ldi	r24, 0x02	; 2
    2368:	23 c0       	rjmp	.+70     	; 0x23b0 <baud_menu+0x220>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_57600);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("7")) == 0)
    236a:	c8 01       	movw	r24, r16
    236c:	6e ee       	ldi	r22, 0xEE	; 238
    236e:	72 e0       	ldi	r23, 0x02	; 2
    2370:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    2374:	89 2b       	or	r24, r25
    2376:	59 f4       	brne	.+22     	; 0x238e <baud_menu+0x1fe>
		{
			uart_puts_p(PSTR("\nGoing to 115200bps...\n"));
    2378:	86 ed       	ldi	r24, 0xD6	; 214
    237a:	92 e0       	ldi	r25, 0x02	; 2
    237c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2380:	f9 99       	sbic	0x1f, 1	; 31
    2382:	fe cf       	rjmp	.-4      	; 0x2380 <baud_menu+0x1f0>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2384:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    238a:	83 e0       	ldi	r24, 0x03	; 3
    238c:	11 c0       	rjmp	.+34     	; 0x23b0 <baud_menu+0x220>
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_115200);
			record_config_file(); //Put this new setting into the config file
			blink_error(ERROR_NEW_BAUD);
			return;
		}
		if(strcmp_P(command, PSTR("8")) == 0)
    238e:	c8 01       	movw	r24, r16
    2390:	64 ed       	ldi	r22, 0xD4	; 212
    2392:	72 e0       	ldi	r23, 0x02	; 2
    2394:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    2398:	89 2b       	or	r24, r25
    239a:	99 f4       	brne	.+38     	; 0x23c2 <baud_menu+0x232>
		{
			uart_puts_p(PSTR("\nGoing to 230400bps...\n"));
    239c:	8c eb       	ldi	r24, 0xBC	; 188
    239e:	92 e0       	ldi	r25, 0x02	; 2
    23a0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    23a4:	f9 99       	sbic	0x1f, 1	; 31
    23a6:	fe cf       	rjmp	.-4      	; 0x23a4 <baud_menu+0x214>
	EEARH = uiAddress >> 8; //Set up address and data registers
    23a8:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    23ae:	87 e0       	ldi	r24, 0x07	; 7
    23b0:	80 bd       	out	0x20, r24	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    23b2:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    23b4:	f9 9a       	sbi	0x1f, 1	; 31
		{
			uart_puts_p(PSTR("\nGoing to 230400bps...\n"));

			//Set baud rate to 230400
			EEPROM_write(LOCATION_BAUD_SETTING, BAUD_230400);
			record_config_file(); //Put this new setting into the config file
    23b6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <record_config_file>
			blink_error(ERROR_NEW_BAUD);
    23ba:	85 e0       	ldi	r24, 0x05	; 5
    23bc:	0e 94 72 07 	call	0xee4	; 0xee4 <blink_error>
    23c0:	0c c0       	rjmp	.+24     	; 0x23da <baud_menu+0x24a>
			return;
		}
		if(strcmp_P(command, PSTR("x")) == 0)
    23c2:	c8 01       	movw	r24, r16
    23c4:	6a eb       	ldi	r22, 0xBA	; 186
    23c6:	72 e0       	ldi	r23, 0x02	; 2
    23c8:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    23cc:	89 2b       	or	r24, r25
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <baud_menu+0x242>
    23d0:	f3 ce       	rjmp	.-538    	; 0x21b8 <baud_menu+0x28>
		{
			uart_puts_p(PSTR("\nExiting\n"));
    23d2:	80 eb       	ldi	r24, 0xB0	; 176
    23d4:	92 e0       	ldi	r25, 0x02	; 2
    23d6:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
			//Do nothing, just exit
			return;
		}
	}
}
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	ff 90       	pop	r15
    23ee:	08 95       	ret

000023f0 <command_shell>:
}
#endif


void command_shell(void)
{
    23f0:	2f 92       	push	r2
    23f2:	3f 92       	push	r3
    23f4:	4f 92       	push	r4
    23f6:	5f 92       	push	r5
    23f8:	6f 92       	push	r6
    23fa:	7f 92       	push	r7
    23fc:	8f 92       	push	r8
    23fe:	9f 92       	push	r9
    2400:	af 92       	push	r10
    2402:	bf 92       	push	r11
    2404:	cf 92       	push	r12
    2406:	df 92       	push	r13
    2408:	ef 92       	push	r14
    240a:	ff 92       	push	r15
    240c:	0f 93       	push	r16
    240e:	1f 93       	push	r17
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	c3 57       	subi	r28, 0x73	; 115
    241a:	d0 40       	sbci	r29, 0x00	; 0
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
		//print prompt
		uart_putc('>');

		//read command
		char* command = buffer;
		if(read_line(command, sizeof(buffer)) < 1)
    2426:	1e e0       	ldi	r17, 0x0E	; 14
    2428:	41 2e       	mov	r4, r17
    242a:	51 2c       	mov	r5, r1
    242c:	4c 0e       	add	r4, r28
    242e:	5d 1e       	adc	r5, r29
			command_arg = get_cmd_arg(1);
			if(command_arg == 0)
				continue;

			struct fat_dir_entry_struct dir_entry;
			if(!fat_create_dir(dd, command_arg, &dir_entry))
    2430:	b3 e4       	ldi	r27, 0x43	; 67
    2432:	6b 2e       	mov	r6, r27
    2434:	71 2c       	mov	r7, r1
    2436:	6c 0e       	add	r6, r28
    2438:	7d 1e       	adc	r7, r29

			/* print file contents */
			uint8_t buffer[8];
			uint32_t offset = 0;
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
    243a:	a6 e0       	ldi	r26, 0x06	; 6
    243c:	2a 2e       	mov	r2, r26
    243e:	31 2c       	mov	r3, r1
    2440:	2c 0e       	add	r2, r28
    2442:	3d 1e       	adc	r3, r29
	uint8_t tmp_var;

	while(1)
	{
		//print prompt
		uart_putc('>');
    2444:	8e e3       	ldi	r24, 0x3E	; 62
    2446:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>

		//read command
		char* command = buffer;
		if(read_line(command, sizeof(buffer)) < 1)
    244a:	c2 01       	movw	r24, r4
    244c:	68 e1       	ldi	r22, 0x18	; 24
    244e:	0e 94 40 09 	call	0x1280	; 0x1280 <read_line>
    2452:	88 23       	and	r24, r24
    2454:	b9 f3       	breq	.-18     	; 0x2444 <command_shell+0x54>
			continue;

		//Argument 1: The actual command
		char* command_arg = get_cmd_arg(0);
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    245c:	8c 01       	movw	r16, r24

		//execute command
		if(strcmp_P(command_arg, PSTR("init")) == 0)
    245e:	6b ef       	ldi	r22, 0xFB	; 251
    2460:	7b e0       	ldi	r23, 0x0B	; 11
    2462:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    2466:	89 2b       	or	r24, r25
    2468:	a9 f4       	brne	.+42     	; 0x2494 <command_shell+0xa4>
		{
			uart_puts_p(PSTR("Closing down file system\n"));
    246a:	81 ee       	ldi	r24, 0xE1	; 225
    246c:	9b e0       	ldi	r25, 0x0B	; 11
    246e:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>

			/* close file system */
			fat_close(fs);
    2472:	80 91 c2 04 	lds	r24, 0x04C2
    2476:	90 91 c3 04 	lds	r25, 0x04C3
    247a:	0e 94 45 21 	call	0x428a	; 0x428a <fat_close>

			/* close partition */
			partition_close(partition);
    247e:	80 91 cb 04 	lds	r24, 0x04CB
    2482:	90 91 cc 04 	lds	r25, 0x04CC
    2486:	0e 94 15 18 	call	0x302a	; 0x302a <partition_close>

			//Setup SPI, init SD card, etc
			init_media();
    248a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <init_media>

			uart_puts_p(PSTR("File system initialized\n"));
    248e:	88 ec       	ldi	r24, 0xC8	; 200
    2490:	9b e0       	ldi	r25, 0x0B	; 11
    2492:	24 c4       	rjmp	.+2120   	; 0x2cdc <command_shell+0x8ec>
		}
		else if(strcmp_P(command_arg, PSTR("?")) == 0)
    2494:	c8 01       	movw	r24, r16
    2496:	66 ec       	ldi	r22, 0xC6	; 198
    2498:	7b e0       	ldi	r23, 0x0B	; 11
    249a:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    249e:	89 2b       	or	r24, r25
    24a0:	39 f0       	breq	.+14     	; 0x24b0 <command_shell+0xc0>
		{
			//Print available commands
			print_menu();
		}
		else if(strcmp_P(command_arg, PSTR("help")) == 0)
    24a2:	c8 01       	movw	r24, r16
    24a4:	61 ec       	ldi	r22, 0xC1	; 193
    24a6:	7b e0       	ldi	r23, 0x0B	; 11
    24a8:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    24ac:	89 2b       	or	r24, r25
    24ae:	19 f4       	brne	.+6      	; 0x24b6 <command_shell+0xc6>
		{
			//Print available commands
			print_menu();
    24b0:	0e 94 3c 08 	call	0x1078	; 0x1078 <print_menu>
    24b4:	c7 cf       	rjmp	.-114    	; 0x2444 <command_shell+0x54>
		}
		else if(strcmp_P(command_arg, PSTR("baud")) == 0)
    24b6:	c8 01       	movw	r24, r16
    24b8:	6c eb       	ldi	r22, 0xBC	; 188
    24ba:	7b e0       	ldi	r23, 0x0B	; 11
    24bc:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    24c0:	89 2b       	or	r24, r25
    24c2:	19 f4       	brne	.+6      	; 0x24ca <command_shell+0xda>
		{
			//Go into baud select menu
			baud_menu();
    24c4:	0e 94 c8 10 	call	0x2190	; 0x2190 <baud_menu>
    24c8:	bd cf       	rjmp	.-134    	; 0x2444 <command_shell+0x54>
		}
		else if(strcmp_P(command_arg, PSTR("set")) == 0)
    24ca:	c8 01       	movw	r24, r16
    24cc:	68 eb       	ldi	r22, 0xB8	; 184
    24ce:	7b e0       	ldi	r23, 0x0B	; 11
    24d0:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    24d4:	89 2b       	or	r24, r25
    24d6:	19 f4       	brne	.+6      	; 0x24de <command_shell+0xee>
		{
			//Go into system setting menu
			system_menu();
    24d8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <system_menu>
    24dc:	b3 cf       	rjmp	.-154    	; 0x2444 <command_shell+0x54>
		{
			//Go into system setting menu
			create_lots_of_files();
		}
		#endif
		else if(strncmp_P(command_arg, PSTR("cd"), 2) == 0)
    24de:	c8 01       	movw	r24, r16
    24e0:	65 eb       	ldi	r22, 0xB5	; 181
    24e2:	7b e0       	ldi	r23, 0x0B	; 11
    24e4:	42 e0       	ldi	r20, 0x02	; 2
    24e6:	50 e0       	ldi	r21, 0x00	; 0
    24e8:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <strncmp_P>
    24ec:	89 2b       	or	r24, r25
    24ee:	c1 f5       	brne	.+112    	; 0x2560 <command_shell+0x170>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    24f0:	82 e0       	ldi	r24, 0x02	; 2
    24f2:	b2 01       	movw	r22, r4
    24f4:	0e 94 89 08 	call	0x1112	; 0x1112 <too_many_arguments_error>
    24f8:	88 23       	and	r24, r24
    24fa:	09 f0       	breq	.+2      	; 0x24fe <command_shell+0x10e>
    24fc:	a3 cf       	rjmp	.-186    	; 0x2444 <command_shell+0x54>
				continue;

			//Argument 2: Directory name
			command_arg = get_cmd_arg(1);
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    2504:	7c 01       	movw	r14, r24
			if(command_arg == 0)
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	09 f4       	brne	.+2      	; 0x250c <command_shell+0x11c>
    250a:	9c cf       	rjmp	.-200    	; 0x2444 <command_shell+0x54>
				continue;

			//change directory, do not use wildcards
			struct fat_dir_entry_struct subdir_entry;
			if(find_file_in_dir(fs, dd, command_arg, &subdir_entry, 0))
    250c:	60 91 cd 0c 	lds	r22, 0x0CCD
    2510:	70 91 ce 0c 	lds	r23, 0x0CCE
    2514:	80 91 c2 04 	lds	r24, 0x04C2
    2518:	90 91 c3 04 	lds	r25, 0x04C3
    251c:	a7 01       	movw	r20, r14
    251e:	93 01       	movw	r18, r6
    2520:	00 e0       	ldi	r16, 0x00	; 0
    2522:	0e 94 35 0a 	call	0x146a	; 0x146a <find_file_in_dir>
    2526:	88 23       	and	r24, r24
    2528:	a9 f0       	breq	.+42     	; 0x2554 <command_shell+0x164>
			{
				struct fat_dir_struct* dd_new = fat_open_dir(fs, &subdir_entry);
    252a:	80 91 c2 04 	lds	r24, 0x04C2
    252e:	90 91 c3 04 	lds	r25, 0x04C3
    2532:	b3 01       	movw	r22, r6
    2534:	0e 94 22 43 	call	0x8644	; 0x8644 <fat_open_dir>
    2538:	8c 01       	movw	r16, r24
				if(dd_new)
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	59 f0       	breq	.+22     	; 0x2554 <command_shell+0x164>
				{
					fat_close_dir(dd);
    253e:	80 91 cd 0c 	lds	r24, 0x0CCD
    2542:	90 91 ce 0c 	lds	r25, 0x0CCE
    2546:	0e 94 bb 2a 	call	0x5576	; 0x5576 <fat_close_dir>
					dd = dd_new;
    254a:	10 93 ce 0c 	sts	0x0CCE, r17
    254e:	00 93 cd 0c 	sts	0x0CCD, r16
    2552:	78 cf       	rjmp	.-272    	; 0x2444 <command_shell+0x54>
					continue;
				}
			}

			uart_puts_p(PSTR("directory not found: "));
    2554:	8f e9       	ldi	r24, 0x9F	; 159
    2556:	9b e0       	ldi	r25, 0x0B	; 11
    2558:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
			uart_puts(command_arg);
    255c:	c7 01       	movw	r24, r14
    255e:	c6 c3       	rjmp	.+1932   	; 0x2cec <command_shell+0x8fc>
			uart_putc('\n');
		}
		else if(strcmp_P(command_arg, PSTR("ls")) == 0)
    2560:	c8 01       	movw	r24, r16
    2562:	6c e9       	ldi	r22, 0x9C	; 156
    2564:	7b e0       	ldi	r23, 0x0B	; 11
    2566:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    256a:	89 2b       	or	r24, r25
    256c:	09 f0       	breq	.+2      	; 0x2570 <command_shell+0x180>
    256e:	44 c0       	rjmp	.+136    	; 0x25f8 <command_shell+0x208>
		{
			//Argument 2: wild card search
			command_arg = get_cmd_arg(1);
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    2576:	7c 01       	movw	r14, r24

				//If no arguments list all files, otherwise we only list the files
				//being matched by the wildcard search
				if (tmp_var)
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
    2578:	f4 e2       	ldi	r31, 0x24	; 36
    257a:	df 2e       	mov	r13, r31
    257c:	33 c0       	rjmp	.+102    	; 0x25e4 <command_shell+0x1f4>
			struct fat_dir_entry_struct dir_entry;
			while(fat_read_dir(dd, &dir_entry))
			{
				//Check if we are to do a wild card search
				tmp_var = (command_arg == 0);
				if(command_arg != 0)
    257e:	e1 14       	cp	r14, r1
    2580:	f1 04       	cpc	r15, r1
    2582:	31 f0       	breq	.+12     	; 0x2590 <command_shell+0x1a0>
					if (wildcmp(command_arg, dir_entry.long_name))
    2584:	c7 01       	movw	r24, r14
    2586:	b3 01       	movw	r22, r6
    2588:	0e 94 ff 07 	call	0xffe	; 0xffe <wildcmp>
    258c:	88 23       	and	r24, r24
    258e:	51 f1       	breq	.+84     	; 0x25e4 <command_shell+0x1f4>

				//If no arguments list all files, otherwise we only list the files
				//being matched by the wildcard search
				if (tmp_var)
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
    2590:	d3 01       	movw	r26, r6
    2592:	0d 90       	ld	r0, X+
    2594:	00 20       	and	r0, r0
    2596:	e9 f7       	brne	.-6      	; 0x2592 <command_shell+0x1a2>
    2598:	8d 01       	movw	r16, r26
    259a:	01 50       	subi	r16, 0x01	; 1
    259c:	10 40       	sbci	r17, 0x00	; 0
    259e:	06 19       	sub	r16, r6
    25a0:	17 09       	sbc	r17, r7

					uart_puts(dir_entry.long_name);
    25a2:	c3 01       	movw	r24, r6
    25a4:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
					uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
    25a8:	f3 01       	movw	r30, r6
    25aa:	80 a1       	ldd	r24, Z+32	; 0x20
    25ac:	84 fd       	sbrc	r24, 4
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <command_shell+0x1c4>
    25b0:	80 e2       	ldi	r24, 0x20	; 32
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <command_shell+0x1c6>
    25b4:	8f e2       	ldi	r24, 0x2F	; 47

				//If no arguments list all files, otherwise we only list the files
				//being matched by the wildcard search
				if (tmp_var)
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
    25b6:	1d 2d       	mov	r17, r13
    25b8:	10 1b       	sub	r17, r16

					uart_puts(dir_entry.long_name);
					uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
    25ba:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <command_shell+0x1d8>
					while(spaces--)
						uart_putc(' ');
    25c0:	80 e2       	ldi	r24, 0x20	; 32
    25c2:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    25c6:	11 50       	subi	r17, 0x01	; 1
				{
					uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;

					uart_puts(dir_entry.long_name);
					uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
					while(spaces--)
    25c8:	11 23       	and	r17, r17
    25ca:	d1 f7       	brne	.-12     	; 0x25c0 <command_shell+0x1d0>
						uart_putc(' ');
					uart_putdw_dec(dir_entry.file_size);
    25cc:	d3 01       	movw	r26, r6
    25ce:	95 96       	adiw	r26, 0x25	; 37
    25d0:	6d 91       	ld	r22, X+
    25d2:	7d 91       	ld	r23, X+
    25d4:	8d 91       	ld	r24, X+
    25d6:	9c 91       	ld	r25, X
    25d8:	98 97       	sbiw	r26, 0x28	; 40
    25da:	0e 94 f6 44 	call	0x89ec	; 0x89ec <uart_putdw_dec>
					uart_putc('\n');
    25de:	8a e0       	ldi	r24, 0x0A	; 10
    25e0:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
			//Argument 2: wild card search
			command_arg = get_cmd_arg(1);

			/* print directory listing */
			struct fat_dir_entry_struct dir_entry;
			while(fat_read_dir(dd, &dir_entry))
    25e4:	80 91 cd 0c 	lds	r24, 0x0CCD
    25e8:	90 91 ce 0c 	lds	r25, 0x0CCE
    25ec:	b3 01       	movw	r22, r6
    25ee:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <fat_read_dir>
    25f2:	88 23       	and	r24, r24
    25f4:	21 f6       	brne	.-120    	; 0x257e <command_shell+0x18e>
    25f6:	26 cf       	rjmp	.-436    	; 0x2444 <command_shell+0x54>
					uart_putdw_dec(dir_entry.file_size);
					uart_putc('\n');
				}
			}
		}
		else if(strncmp_P(command_arg, PSTR("cat"), 3) == 0)
    25f8:	c8 01       	movw	r24, r16
    25fa:	68 e9       	ldi	r22, 0x98	; 152
    25fc:	7b e0       	ldi	r23, 0x0B	; 11
    25fe:	43 e0       	ldi	r20, 0x03	; 3
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <strncmp_P>
    2606:	89 2b       	or	r24, r25
    2608:	09 f0       	breq	.+2      	; 0x260c <command_shell+0x21c>
    260a:	4d c0       	rjmp	.+154    	; 0x26a6 <command_shell+0x2b6>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	b2 01       	movw	r22, r4
    2610:	0e 94 89 08 	call	0x1112	; 0x1112 <too_many_arguments_error>
    2614:	88 23       	and	r24, r24
    2616:	09 f0       	breq	.+2      	; 0x261a <command_shell+0x22a>
    2618:	15 cf       	rjmp	.-470    	; 0x2444 <command_shell+0x54>
				continue;

			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    2620:	8c 01       	movw	r16, r24
			if(command_arg == 0)
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	09 f4       	brne	.+2      	; 0x2628 <command_shell+0x238>
    2626:	0e cf       	rjmp	.-484    	; 0x2444 <command_shell+0x54>
				continue;

			/* search file in current directory and open it */
			struct fat_file_struct* fd = open_file_in_dir(fs, dd, command_arg);
    2628:	60 91 cd 0c 	lds	r22, 0x0CCD
    262c:	70 91 ce 0c 	lds	r23, 0x0CCE
    2630:	80 91 c2 04 	lds	r24, 0x04C2
    2634:	90 91 c3 04 	lds	r25, 0x04C3
    2638:	a8 01       	movw	r20, r16
    263a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <open_file_in_dir>
    263e:	5c 01       	movw	r10, r24
			if(!fd)
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	21 f0       	breq	.+8      	; 0x264c <command_shell+0x25c>
    2644:	cc 24       	eor	r12, r12
    2646:	dd 24       	eor	r13, r13
    2648:	76 01       	movw	r14, r12
    264a:	22 c0       	rjmp	.+68     	; 0x2690 <command_shell+0x2a0>
			{
				uart_puts_p(PSTR("error opening "));
    264c:	89 e8       	ldi	r24, 0x89	; 137
    264e:	9b e0       	ldi	r25, 0x0B	; 11
    2650:	4a c3       	rjmp	.+1684   	; 0x2ce6 <command_shell+0x8f6>
			uint8_t buffer[8];
			uint32_t offset = 0;
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
			{
				uart_putdw_hex(offset);
    2652:	c7 01       	movw	r24, r14
    2654:	b6 01       	movw	r22, r12
    2656:	0e 94 a5 44 	call	0x894a	; 0x894a <uart_putdw_hex>
				uart_putc(':');
    265a:	8a e3       	ldi	r24, 0x3A	; 58
    265c:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    2660:	81 01       	movw	r16, r2
				for(uint8_t i = 0; i < len; ++i)
				{
					uart_putc(' ');
    2662:	80 e2       	ldi	r24, 0x20	; 32
    2664:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
					uart_putc_hex(buffer[i]);
    2668:	f8 01       	movw	r30, r16
    266a:	81 91       	ld	r24, Z+
    266c:	8f 01       	movw	r16, r30
    266e:	0e 94 7f 44 	call	0x88fe	; 0x88fe <uart_putc_hex>
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
			{
				uart_putdw_hex(offset);
				uart_putc(':');
				for(uint8_t i = 0; i < len; ++i)
    2672:	80 2f       	mov	r24, r16
    2674:	82 19       	sub	r24, r2
    2676:	89 15       	cp	r24, r9
    2678:	a0 f3       	brcs	.-24     	; 0x2662 <command_shell+0x272>
				{
					uart_putc(' ');
					uart_putc_hex(buffer[i]);
				}
				uart_putc('\n');
    267a:	8a e0       	ldi	r24, 0x0A	; 10
    267c:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
				offset += 8;
    2680:	88 e0       	ldi	r24, 0x08	; 8
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a0 e0       	ldi	r26, 0x00	; 0
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	c8 0e       	add	r12, r24
    268a:	d9 1e       	adc	r13, r25
    268c:	ea 1e       	adc	r14, r26
    268e:	fb 1e       	adc	r15, r27

			/* print file contents */
			uint8_t buffer[8];
			uint32_t offset = 0;
			uint8_t len;
			while((len = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
    2690:	c5 01       	movw	r24, r10
    2692:	b1 01       	movw	r22, r2
    2694:	48 e0       	ldi	r20, 0x08	; 8
    2696:	50 e0       	ldi	r21, 0x00	; 0
    2698:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <fat_read_file>
    269c:	98 2e       	mov	r9, r24
    269e:	88 23       	and	r24, r24
    26a0:	c1 f6       	brne	.-80     	; 0x2652 <command_shell+0x262>
				}
				uart_putc('\n');
				offset += 8;
			}

			fat_close_file(fd);
    26a2:	c5 01       	movw	r24, r10
    26a4:	7d c0       	rjmp	.+250    	; 0x27a0 <command_shell+0x3b0>
		}
		else if(strncmp_P(command_arg, PSTR("read"), 4) == 0)
    26a6:	c8 01       	movw	r24, r16
    26a8:	64 e8       	ldi	r22, 0x84	; 132
    26aa:	7b e0       	ldi	r23, 0x0B	; 11
    26ac:	44 e0       	ldi	r20, 0x04	; 4
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <strncmp_P>
    26b4:	89 2b       	or	r24, r25
    26b6:	09 f0       	breq	.+2      	; 0x26ba <command_shell+0x2ca>
    26b8:	e2 c0       	rjmp	.+452    	; 0x287e <command_shell+0x48e>
		{
			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    26c0:	8c 01       	movw	r16, r24
			if(command_arg == 0)
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <command_shell+0x2d8>
    26c6:	be ce       	rjmp	.-644    	; 0x2444 <command_shell+0x54>
				continue;

			/* search file in current directory and open it */
			struct fat_file_struct* fd = open_file_in_dir(fs, dd, command_arg);
    26c8:	60 91 cd 0c 	lds	r22, 0x0CCD
    26cc:	70 91 ce 0c 	lds	r23, 0x0CCE
    26d0:	80 91 c2 04 	lds	r24, 0x04C2
    26d4:	90 91 c3 04 	lds	r25, 0x04C3
    26d8:	a8 01       	movw	r20, r16
    26da:	0e 94 65 0a 	call	0x14ca	; 0x14ca <open_file_in_dir>
    26de:	4c 01       	movw	r8, r24
			if(!fd)
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	19 f4       	brne	.+6      	; 0x26ea <command_shell+0x2fa>
			{
				uart_puts_p(PSTR("error opening "));
    26e4:	85 e7       	ldi	r24, 0x75	; 117
    26e6:	9b e0       	ldi	r25, 0x0B	; 11
    26e8:	fe c2       	rjmp	.+1532   	; 0x2ce6 <command_shell+0x8f6>
				uart_putc('\n');
				continue;
			}

			//Argument 3: File seek position
			if ((command_arg = get_cmd_arg(2)) != 0)
    26ea:	82 e0       	ldi	r24, 0x02	; 2
    26ec:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    26f0:	ac 01       	movw	r20, r24
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <command_shell+0x308>
    26f6:	57 c0       	rjmp	.+174    	; 0x27a6 <command_shell+0x3b6>
			{
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
    26f8:	fc 01       	movw	r30, r24
    26fa:	01 90       	ld	r0, Z+
    26fc:	00 20       	and	r0, r0
    26fe:	e9 f7       	brne	.-6      	; 0x26fa <command_shell+0x30a>
    2700:	31 97       	sbiw	r30, 0x01	; 1
    2702:	e8 1b       	sub	r30, r24
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    2708:	6e 2f       	mov	r22, r30
    270a:	70 e0       	ldi	r23, 0x00	; 0
    270c:	0b c0       	rjmp	.+22     	; 0x2724 <command_shell+0x334>
		if (!isdigit(buffer[i]))
    270e:	fa 01       	movw	r30, r20
    2710:	e2 0f       	add	r30, r18
    2712:	f3 1f       	adc	r31, r19
    2714:	80 81       	ld	r24, Z
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	c0 97       	sbiw	r24, 0x30	; 48
    271a:	0a 97       	sbiw	r24, 0x0a	; 10
    271c:	08 f0       	brcs	.+2      	; 0x2720 <command_shell+0x330>
    271e:	43 c0       	rjmp	.+134    	; 0x27a6 <command_shell+0x3b6>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    2720:	2f 5f       	subi	r18, 0xFF	; 255
    2722:	3f 4f       	sbci	r19, 0xFF	; 255
    2724:	26 17       	cp	r18, r22
    2726:	37 07       	cpc	r19, r23
    2728:	94 f3       	brlt	.-28     	; 0x270e <command_shell+0x31e>
    272a:	8a 01       	movw	r16, r20
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	17 c0       	rjmp	.+46     	; 0x2764 <command_shell+0x374>

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
        l = l * 10 + (*str++ - '0');
    2736:	ca 01       	movw	r24, r20
    2738:	b9 01       	movw	r22, r18
    273a:	2a e0       	ldi	r18, 0x0A	; 10
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    2746:	9b 01       	movw	r18, r22
    2748:	ac 01       	movw	r20, r24
    274a:	8f 2d       	mov	r24, r15
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	c0 97       	sbiw	r24, 0x30	; 48
    2750:	aa 27       	eor	r26, r26
    2752:	97 fd       	sbrc	r25, 7
    2754:	a0 95       	com	r26
    2756:	ba 2f       	mov	r27, r26
    2758:	28 0f       	add	r18, r24
    275a:	39 1f       	adc	r19, r25
    275c:	4a 1f       	adc	r20, r26
    275e:	5b 1f       	adc	r21, r27
    2760:	0f 5f       	subi	r16, 0xFF	; 255
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    2764:	d8 01       	movw	r26, r16
    2766:	fc 90       	ld	r15, X
    2768:	8f 2d       	mov	r24, r15
    276a:	80 53       	subi	r24, 0x30	; 48
    276c:	8a 30       	cpi	r24, 0x0A	; 10
    276e:	18 f3       	brcs	.-58     	; 0x2736 <command_shell+0x346>
			//Argument 3: File seek position
			if ((command_arg = get_cmd_arg(2)) != 0)
			{
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
				{
					int32_t offset = strtolong(command_arg);
    2770:	2a 83       	std	Y+2, r18	; 0x02
    2772:	3b 83       	std	Y+3, r19	; 0x03
    2774:	4c 83       	std	Y+4, r20	; 0x04
    2776:	5d 83       	std	Y+5, r21	; 0x05
					if(!fat_seek_file(fd, &offset, FAT_SEEK_SET))
    2778:	c4 01       	movw	r24, r8
    277a:	be 01       	movw	r22, r28
    277c:	6e 5f       	subi	r22, 0xFE	; 254
    277e:	7f 4f       	sbci	r23, 0xFF	; 255
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <fat_seek_file>
    2786:	88 23       	and	r24, r24
    2788:	71 f4       	brne	.+28     	; 0x27a6 <command_shell+0x3b6>
					{
						uart_puts_p(PSTR("error seeking on "));
    278a:	83 e6       	ldi	r24, 0x63	; 99
    278c:	9b e0       	ldi	r25, 0x0B	; 11
    278e:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
						uart_puts(command);
    2792:	c2 01       	movw	r24, r4
    2794:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
						uart_putc('\n');
    2798:	8a e0       	ldi	r24, 0x0A	; 10
    279a:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>

						fat_close_file(fd);
    279e:	c4 01       	movw	r24, r8
    27a0:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <fat_close_file>
    27a4:	4f ce       	rjmp	.-866    	; 0x2444 <command_shell+0x54>
				}
			}

			//Argument 4: How much data (number of characters) to read from file
			uint32_t chunk_to_read = (uint32_t)-1;
			if ((command_arg = get_cmd_arg(3)) != 0)
    27a6:	83 e0       	ldi	r24, 0x03	; 3
    27a8:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    27ac:	ac 01       	movw	r20, r24
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	e1 f1       	breq	.+120    	; 0x282a <command_shell+0x43a>
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
    27b2:	fc 01       	movw	r30, r24
    27b4:	01 90       	ld	r0, Z+
    27b6:	00 20       	and	r0, r0
    27b8:	e9 f7       	brne	.-6      	; 0x27b4 <command_shell+0x3c4>
    27ba:	31 97       	sbiw	r30, 0x01	; 1
    27bc:	e8 1b       	sub	r30, r24
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    27c2:	6e 2f       	mov	r22, r30
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	0a c0       	rjmp	.+20     	; 0x27dc <command_shell+0x3ec>
		if (!isdigit(buffer[i]))
    27c8:	fa 01       	movw	r30, r20
    27ca:	e2 0f       	add	r30, r18
    27cc:	f3 1f       	adc	r31, r19
    27ce:	80 81       	ld	r24, Z
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	c0 97       	sbiw	r24, 0x30	; 48
    27d4:	0a 97       	sbiw	r24, 0x0a	; 10
    27d6:	48 f5       	brcc	.+82     	; 0x282a <command_shell+0x43a>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    27d8:	2f 5f       	subi	r18, 0xFF	; 255
    27da:	3f 4f       	sbci	r19, 0xFF	; 255
    27dc:	26 17       	cp	r18, r22
    27de:	37 07       	cpc	r19, r23
    27e0:	9c f3       	brlt	.-26     	; 0x27c8 <command_shell+0x3d8>
    27e2:	6a 01       	movw	r12, r20
    27e4:	ee 24       	eor	r14, r14
    27e6:	ff 24       	eor	r15, r15
    27e8:	87 01       	movw	r16, r14
    27ea:	18 c0       	rjmp	.+48     	; 0x281c <command_shell+0x42c>

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
        l = l * 10 + (*str++ - '0');
    27ec:	c8 01       	movw	r24, r16
    27ee:	b7 01       	movw	r22, r14
    27f0:	2a e0       	ldi	r18, 0x0A	; 10
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e0       	ldi	r20, 0x00	; 0
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    27fc:	7b 01       	movw	r14, r22
    27fe:	8c 01       	movw	r16, r24
    2800:	8b 2d       	mov	r24, r11
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	c0 97       	sbiw	r24, 0x30	; 48
    2806:	aa 27       	eor	r26, r26
    2808:	97 fd       	sbrc	r25, 7
    280a:	a0 95       	com	r26
    280c:	ba 2f       	mov	r27, r26
    280e:	e8 0e       	add	r14, r24
    2810:	f9 1e       	adc	r15, r25
    2812:	0a 1f       	adc	r16, r26
    2814:	1b 1f       	adc	r17, r27
    2816:	08 94       	sec
    2818:	c1 1c       	adc	r12, r1
    281a:	d1 1c       	adc	r13, r1
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    281c:	f6 01       	movw	r30, r12
    281e:	b0 80       	ld	r11, Z
    2820:	8b 2d       	mov	r24, r11
    2822:	80 53       	subi	r24, 0x30	; 48
    2824:	8a 30       	cpi	r24, 0x0A	; 10
    2826:	10 f3       	brcs	.-60     	; 0x27ec <command_shell+0x3fc>
    2828:	18 c0       	rjmp	.+48     	; 0x285a <command_shell+0x46a>
    282a:	ee 24       	eor	r14, r14
    282c:	ea 94       	dec	r14
    282e:	fe 2c       	mov	r15, r14
    2830:	87 01       	movw	r16, r14
    2832:	13 c0       	rjmp	.+38     	; 0x285a <command_shell+0x46a>

			/* print file contents */
			uint8_t buffer;
			while((fat_read_file(fd, &buffer, 1) > 0) && (chunk_to_read > 0))
			{
				if( buffer >= ' ' && buffer < 127 )
    2834:	99 81       	ldd	r25, Y+1	; 0x01
    2836:	89 2f       	mov	r24, r25
    2838:	80 52       	subi	r24, 0x20	; 32
    283a:	8f 35       	cpi	r24, 0x5F	; 95
    283c:	10 f4       	brcc	.+4      	; 0x2842 <command_shell+0x452>
					uart_putc(buffer);
    283e:	89 2f       	mov	r24, r25
    2840:	05 c0       	rjmp	.+10     	; 0x284c <command_shell+0x45c>
				else if (buffer == '\n' )
    2842:	9a 30       	cpi	r25, 0x0A	; 10
    2844:	11 f4       	brne	.+4      	; 0x284a <command_shell+0x45a>
					uart_putc(buffer);
    2846:	8a e0       	ldi	r24, 0x0A	; 10
    2848:	01 c0       	rjmp	.+2      	; 0x284c <command_shell+0x45c>
				else
					uart_putc('.');
    284a:	8e e2       	ldi	r24, 0x2E	; 46
    284c:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>

				chunk_to_read--;
    2850:	08 94       	sec
    2852:	e1 08       	sbc	r14, r1
    2854:	f1 08       	sbc	r15, r1
    2856:	01 09       	sbc	r16, r1
    2858:	11 09       	sbc	r17, r1
				if ((command_arg = is_number(command_arg, strlen(command_arg))) != 0)
					chunk_to_read = strtolong(command_arg);

			/* print file contents */
			uint8_t buffer;
			while((fat_read_file(fd, &buffer, 1) > 0) && (chunk_to_read > 0))
    285a:	c4 01       	movw	r24, r8
    285c:	be 01       	movw	r22, r28
    285e:	6f 5f       	subi	r22, 0xFF	; 255
    2860:	7f 4f       	sbci	r23, 0xFF	; 255
    2862:	41 e0       	ldi	r20, 0x01	; 1
    2864:	50 e0       	ldi	r21, 0x00	; 0
    2866:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <fat_read_file>
    286a:	18 16       	cp	r1, r24
    286c:	19 06       	cpc	r1, r25
    286e:	0c f0       	brlt	.+2      	; 0x2872 <command_shell+0x482>
    2870:	93 cf       	rjmp	.-218    	; 0x2798 <command_shell+0x3a8>
    2872:	e1 14       	cp	r14, r1
    2874:	f1 04       	cpc	r15, r1
    2876:	01 05       	cpc	r16, r1
    2878:	11 05       	cpc	r17, r1
    287a:	e1 f6       	brne	.-72     	; 0x2834 <command_shell+0x444>
    287c:	8d cf       	rjmp	.-230    	; 0x2798 <command_shell+0x3a8>
				chunk_to_read--;
			}
			uart_putc('\n');
			fat_close_file(fd);
		}
		else if(strcmp_P(command_arg, PSTR("disk")) == 0)
    287e:	c8 01       	movw	r24, r16
    2880:	6e e5       	ldi	r22, 0x5E	; 94
    2882:	7b e0       	ldi	r23, 0x0B	; 11
    2884:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    2888:	89 2b       	or	r24, r25
    288a:	09 f0       	breq	.+2      	; 0x288e <command_shell+0x49e>
    288c:	b4 c0       	rjmp	.+360    	; 0x29f6 <command_shell+0x606>
		{
			if(!print_disk_info(fs))
    288e:	e0 90 c2 04 	lds	r14, 0x04C2
    2892:	f0 90 c3 04 	lds	r15, 0x04C3
	return fat_open_file(fs, &file_entry);
}

uint8_t print_disk_info(const struct fat_fs_struct* fs)
{
    if(!fs)
    2896:	e1 14       	cp	r14, r1
    2898:	f1 04       	cpc	r15, r1
    289a:	09 f4       	brne	.+2      	; 0x289e <command_shell+0x4ae>
    289c:	a9 c0       	rjmp	.+338    	; 0x29f0 <command_shell+0x600>
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
    289e:	ce 01       	movw	r24, r28
    28a0:	86 96       	adiw	r24, 0x26	; 38
    28a2:	0e 94 72 19 	call	0x32e4	; 0x32e4 <sd_raw_get_info>
    28a6:	88 23       	and	r24, r24
    28a8:	09 f4       	brne	.+2      	; 0x28ac <command_shell+0x4bc>
    28aa:	a2 c0       	rjmp	.+324    	; 0x29f0 <command_shell+0x600>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
    28ac:	80 e6       	ldi	r24, 0x60	; 96
    28ae:	9c e0       	ldi	r25, 0x0C	; 12
    28b0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    28b4:	8e a1       	ldd	r24, Y+38	; 0x26
    28b6:	0e 94 7f 44 	call	0x88fe	; 0x88fe <uart_putc_hex>
    28ba:	8a e0       	ldi	r24, 0x0A	; 10
    28bc:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
    28c0:	87 e5       	ldi	r24, 0x57	; 87
    28c2:	9c e0       	ldi	r25, 0x0C	; 12
    28c4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    28c8:	ce 01       	movw	r24, r28
    28ca:	87 96       	adiw	r24, 0x27	; 39
    28cc:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
    28d0:	8a e0       	ldi	r24, 0x0A	; 10
    28d2:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
    28d6:	8e e4       	ldi	r24, 0x4E	; 78
    28d8:	9c e0       	ldi	r25, 0x0C	; 12
    28da:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    28de:	ce 01       	movw	r24, r28
    28e0:	8a 96       	adiw	r24, 0x2a	; 42
    28e2:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
    28e6:	8a e0       	ldi	r24, 0x0A	; 10
    28e8:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
    28ec:	85 e4       	ldi	r24, 0x45	; 69
    28ee:	9c e0       	ldi	r25, 0x0C	; 12
    28f0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    28f4:	88 a9       	ldd	r24, Y+48	; 0x30
    28f6:	0e 94 7f 44 	call	0x88fe	; 0x88fe <uart_putc_hex>
    28fa:	8a e0       	ldi	r24, 0x0A	; 10
    28fc:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
    2900:	8a e3       	ldi	r24, 0x3A	; 58
    2902:	9c e0       	ldi	r25, 0x0C	; 12
    2904:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    2908:	69 a9       	ldd	r22, Y+49	; 0x31
    290a:	7a a9       	ldd	r23, Y+50	; 0x32
    290c:	8b a9       	ldd	r24, Y+51	; 0x33
    290e:	9c a9       	ldd	r25, Y+52	; 0x34
    2910:	0e 94 a5 44 	call	0x894a	; 0x894a <uart_putdw_hex>
    2914:	8a e0       	ldi	r24, 0x0A	; 10
    2916:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
    291a:	81 e3       	ldi	r24, 0x31	; 49
    291c:	9c e0       	ldi	r25, 0x0C	; 12
    291e:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    2922:	8e a9       	ldd	r24, Y+54	; 0x36
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	0e 94 b8 44 	call	0x8970	; 0x8970 <uart_putw_dec>
    292a:	8f e2       	ldi	r24, 0x2F	; 47
    292c:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
    2930:	8d a9       	ldd	r24, Y+53	; 0x35
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0e 94 b8 44 	call	0x8970	; 0x8970 <uart_putw_dec>
    2938:	8a e0       	ldi	r24, 0x0A	; 10
    293a:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
    293e:	88 e2       	ldi	r24, 0x28	; 40
    2940:	9c e0       	ldi	r25, 0x0C	; 12
    2942:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    2946:	2f a9       	ldd	r18, Y+55	; 0x37
    2948:	38 ad       	ldd	r19, Y+56	; 0x38
    294a:	49 ad       	ldd	r20, Y+57	; 0x39
    294c:	5a ad       	ldd	r21, Y+58	; 0x3a
    294e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2950:	7c ad       	ldd	r23, Y+60	; 0x3c
    2952:	8d ad       	ldd	r24, Y+61	; 0x3d
    2954:	9e ad       	ldd	r25, Y+62	; 0x3e
    2956:	04 e1       	ldi	r16, 0x14	; 20
    2958:	0e 94 97 46 	call	0x8d2e	; 0x8d2e <__lshrdi3>
    295c:	b9 01       	movw	r22, r18
    295e:	ca 01       	movw	r24, r20
    2960:	0e 94 f6 44 	call	0x89ec	; 0x89ec <uart_putdw_dec>
    2964:	84 e2       	ldi	r24, 0x24	; 36
    2966:	9c e0       	ldi	r25, 0x0C	; 12
    2968:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
    296c:	8b e1       	ldi	r24, 0x1B	; 27
    296e:	9c e0       	ldi	r25, 0x0C	; 12
    2970:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    2974:	8f ad       	ldd	r24, Y+63	; 0x3f
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 94 b8 44 	call	0x8970	; 0x8970 <uart_putw_dec>
    297c:	8a e0       	ldi	r24, 0x0A	; 10
    297e:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
    2982:	82 e1       	ldi	r24, 0x12	; 18
    2984:	9c e0       	ldi	r25, 0x0C	; 12
    2986:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    298a:	22 96       	adiw	r28, 0x02	; 2
    298c:	8f ad       	ldd	r24, Y+63	; 0x3f
    298e:	22 97       	sbiw	r28, 0x02	; 2
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0e 94 b8 44 	call	0x8970	; 0x8970 <uart_putw_dec>
    2996:	8f e2       	ldi	r24, 0x2F	; 47
    2998:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
    299c:	21 96       	adiw	r28, 0x01	; 1
    299e:	8f ad       	ldd	r24, Y+63	; 0x3f
    29a0:	21 97       	sbiw	r28, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	0e 94 b8 44 	call	0x8970	; 0x8970 <uart_putw_dec>
    29a8:	8a e0       	ldi	r24, 0x0A	; 10
    29aa:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    29ae:	89 e0       	ldi	r24, 0x09	; 9
    29b0:	9c e0       	ldi	r25, 0x0C	; 12
    29b2:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    29b6:	23 96       	adiw	r28, 0x03	; 3
    29b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    29ba:	23 97       	sbiw	r28, 0x03	; 3
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	0e 94 b8 44 	call	0x8970	; 0x8970 <uart_putw_dec>
    29c2:	8a e0       	ldi	r24, 0x0A	; 10
    29c4:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	9c e0       	ldi	r25, 0x0C	; 12
    29cc:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    29d0:	c7 01       	movw	r24, r14
    29d2:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <fat_get_fs_free>
    29d6:	b9 01       	movw	r22, r18
    29d8:	ca 01       	movw	r24, r20
    29da:	0e 94 f6 44 	call	0x89ec	; 0x89ec <uart_putdw_dec>
    29de:	8f e2       	ldi	r24, 0x2F	; 47
    29e0:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
    29e4:	c7 01       	movw	r24, r14
    29e6:	0e 94 93 2c 	call	0x5926	; 0x5926 <fat_get_fs_size>
    29ea:	b9 01       	movw	r22, r18
    29ec:	ca 01       	movw	r24, r20
    29ee:	2f c0       	rjmp	.+94     	; 0x2a4e <command_shell+0x65e>
			fat_close_file(fd);
		}
		else if(strcmp_P(command_arg, PSTR("disk")) == 0)
		{
			if(!print_disk_info(fs))
				uart_puts_p(PSTR("error reading disk info\n"));
    29f0:	85 e4       	ldi	r24, 0x45	; 69
    29f2:	9b e0       	ldi	r25, 0x0B	; 11
    29f4:	73 c1       	rjmp	.+742    	; 0x2cdc <command_shell+0x8ec>
		}
		else if(strncmp_P(command_arg, PSTR("size"), 4) == 0)
    29f6:	c8 01       	movw	r24, r16
    29f8:	60 e4       	ldi	r22, 0x40	; 64
    29fa:	7b e0       	ldi	r23, 0x0B	; 11
    29fc:	44 e0       	ldi	r20, 0x04	; 4
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <strncmp_P>
    2a04:	89 2b       	or	r24, r25
    2a06:	59 f5       	brne	.+86     	; 0x2a5e <command_shell+0x66e>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	b2 01       	movw	r22, r4
    2a0c:	0e 94 89 08 	call	0x1112	; 0x1112 <too_many_arguments_error>
    2a10:	88 23       	and	r24, r24
    2a12:	09 f0       	breq	.+2      	; 0x2a16 <command_shell+0x626>
    2a14:	17 cd       	rjmp	.-1490   	; 0x2444 <command_shell+0x54>
				continue;

			//Argument 2: File name - no wildcard search
			command_arg = get_cmd_arg(1);
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    2a1c:	ac 01       	movw	r20, r24
			if(command_arg == 0)
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <command_shell+0x634>
    2a22:	10 cd       	rjmp	.-1504   	; 0x2444 <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct file_entry;
			if(find_file_in_dir(fs, dd, command_arg, &file_entry, 0))
    2a24:	60 91 cd 0c 	lds	r22, 0x0CCD
    2a28:	70 91 ce 0c 	lds	r23, 0x0CCE
    2a2c:	80 91 c2 04 	lds	r24, 0x04C2
    2a30:	90 91 c3 04 	lds	r25, 0x04C3
    2a34:	93 01       	movw	r18, r6
    2a36:	00 e0       	ldi	r16, 0x00	; 0
    2a38:	0e 94 35 0a 	call	0x146a	; 0x146a <find_file_in_dir>
    2a3c:	88 23       	and	r24, r24
    2a3e:	51 f0       	breq	.+20     	; 0x2a54 <command_shell+0x664>
			{
				uart_putdw_dec(file_entry.file_size);
    2a40:	d3 01       	movw	r26, r6
    2a42:	95 96       	adiw	r26, 0x25	; 37
    2a44:	6d 91       	ld	r22, X+
    2a46:	7d 91       	ld	r23, X+
    2a48:	8d 91       	ld	r24, X+
    2a4a:	9c 91       	ld	r25, X
    2a4c:	98 97       	sbiw	r26, 0x28	; 40
    2a4e:	0e 94 f6 44 	call	0x89ec	; 0x89ec <uart_putdw_dec>
    2a52:	4e c1       	rjmp	.+668    	; 0x2cf0 <command_shell+0x900>
				uart_putc('\n');
			}
            else
				uart_puts("-1\n");
    2a54:	8a ea       	ldi	r24, 0xAA	; 170
    2a56:	91 e0       	ldi	r25, 0x01	; 1
    2a58:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
    2a5c:	f3 cc       	rjmp	.-1562   	; 0x2444 <command_shell+0x54>
		}
#if FAT_WRITE_SUPPORT
		else if(strncmp_P(command_arg, PSTR("rm"), 2) == 0)
    2a5e:	c8 01       	movw	r24, r16
    2a60:	6d e3       	ldi	r22, 0x3D	; 61
    2a62:	7b e0       	ldi	r23, 0x0B	; 11
    2a64:	42 e0       	ldi	r20, 0x02	; 2
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <strncmp_P>
    2a6c:	89 2b       	or	r24, r25
    2a6e:	89 f5       	brne	.+98     	; 0x2ad2 <command_shell+0x6e2>
		{
			//Expecting max 3 arguments
			if (too_many_arguments_error(3, command))
    2a70:	83 e0       	ldi	r24, 0x03	; 3
    2a72:	b2 01       	movw	r22, r4
    2a74:	0e 94 89 08 	call	0x1112	; 0x1112 <too_many_arguments_error>
    2a78:	88 23       	and	r24, r24
    2a7a:	09 f0       	breq	.+2      	; 0x2a7e <command_shell+0x68e>
    2a7c:	e3 cc       	rjmp	.-1594   	; 0x2444 <command_shell+0x54>
				continue;

			//Argument 2: File name or wildcard removal
			command_arg = get_cmd_arg(1);
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    2a84:	7c 01       	movw	r14, r24
			if(command_arg == 0)
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	a1 f4       	brne	.+40     	; 0x2ab2 <command_shell+0x6c2>
    2a8a:	dc cc       	rjmp	.-1608   	; 0x2444 <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct file_entry;
			while(find_file_in_dir(fs, dd, command_arg, &file_entry, 1))
			{
				if(!fat_delete_file(fs, &file_entry))
    2a8c:	80 91 c2 04 	lds	r24, 0x04C2
    2a90:	90 91 c3 04 	lds	r25, 0x04C3
    2a94:	b3 01       	movw	r22, r6
    2a96:	0e 94 be 2b 	call	0x577c	; 0x577c <fat_delete_file>
    2a9a:	88 23       	and	r24, r24
    2a9c:	51 f4       	brne	.+20     	; 0x2ab2 <command_shell+0x6c2>
				{
					//Some kind of error, but continue anyway
					uart_puts_p(PSTR("error deleting file: "));
    2a9e:	87 e2       	ldi	r24, 0x27	; 39
    2aa0:	9b e0       	ldi	r25, 0x0B	; 11
    2aa2:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
					uart_puts(command);
    2aa6:	c2 01       	movw	r24, r4
    2aa8:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
					uart_putc('\n');
    2aac:	8a e0       	ldi	r24, 0x0A	; 10
    2aae:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
			command_arg = get_cmd_arg(1);
			if(command_arg == 0)
				continue;

			struct fat_dir_entry_struct file_entry;
			while(find_file_in_dir(fs, dd, command_arg, &file_entry, 1))
    2ab2:	60 91 cd 0c 	lds	r22, 0x0CCD
    2ab6:	70 91 ce 0c 	lds	r23, 0x0CCE
    2aba:	80 91 c2 04 	lds	r24, 0x04C2
    2abe:	90 91 c3 04 	lds	r25, 0x04C3
    2ac2:	a7 01       	movw	r20, r14
    2ac4:	93 01       	movw	r18, r6
    2ac6:	01 e0       	ldi	r16, 0x01	; 1
    2ac8:	0e 94 35 0a 	call	0x146a	; 0x146a <find_file_in_dir>
    2acc:	88 23       	and	r24, r24
    2ace:	f1 f6       	brne	.-68     	; 0x2a8c <command_shell+0x69c>
    2ad0:	b9 cc       	rjmp	.-1678   	; 0x2444 <command_shell+0x54>
					uart_putc('\n');
				}
			}

		}
		else if(strncmp_P(command_arg, PSTR("new"), 3) == 0)
    2ad2:	c8 01       	movw	r24, r16
    2ad4:	63 e2       	ldi	r22, 0x23	; 35
    2ad6:	7b e0       	ldi	r23, 0x0B	; 11
    2ad8:	43 e0       	ldi	r20, 0x03	; 3
    2ada:	50 e0       	ldi	r21, 0x00	; 0
    2adc:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <strncmp_P>
    2ae0:	89 2b       	or	r24, r25
    2ae2:	f1 f4       	brne	.+60     	; 0x2b20 <command_shell+0x730>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    2ae4:	82 e0       	ldi	r24, 0x02	; 2
    2ae6:	b2 01       	movw	r22, r4
    2ae8:	0e 94 89 08 	call	0x1112	; 0x1112 <too_many_arguments_error>
    2aec:	88 23       	and	r24, r24
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <command_shell+0x702>
    2af0:	a9 cc       	rjmp	.-1710   	; 0x2444 <command_shell+0x54>
				continue;

			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    2af8:	bc 01       	movw	r22, r24
			if(command_arg == 0)
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	09 f4       	brne	.+2      	; 0x2b00 <command_shell+0x710>
    2afe:	a2 cc       	rjmp	.-1724   	; 0x2444 <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct file_entry;
			if(!fat_create_file(dd, command_arg, &file_entry))
    2b00:	80 91 cd 0c 	lds	r24, 0x0CCD
    2b04:	90 91 ce 0c 	lds	r25, 0x0CCE
    2b08:	a3 01       	movw	r20, r6
    2b0a:	0e 94 25 3c 	call	0x784a	; 0x784a <fat_create_file>
    2b0e:	88 23       	and	r24, r24
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <command_shell+0x724>
    2b12:	98 cc       	rjmp	.-1744   	; 0x2444 <command_shell+0x54>
			{
				uart_puts_p(PSTR("error creating file: "));
    2b14:	8d e0       	ldi	r24, 0x0D	; 13
    2b16:	9b e0       	ldi	r25, 0x0B	; 11
    2b18:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
				uart_puts(command);
    2b1c:	c2 01       	movw	r24, r4
    2b1e:	e6 c0       	rjmp	.+460    	; 0x2cec <command_shell+0x8fc>
				uart_putc('\n');
			}
		}
		else if(strncmp_P(command_arg, PSTR("write"), 5) == 0)
    2b20:	c8 01       	movw	r24, r16
    2b22:	67 e0       	ldi	r22, 0x07	; 7
    2b24:	7b e0       	ldi	r23, 0x0B	; 11
    2b26:	45 e0       	ldi	r20, 0x05	; 5
    2b28:	50 e0       	ldi	r21, 0x00	; 0
    2b2a:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <strncmp_P>
    2b2e:	89 2b       	or	r24, r25
    2b30:	09 f0       	breq	.+2      	; 0x2b34 <command_shell+0x744>
    2b32:	8f c0       	rjmp	.+286    	; 0x2c52 <command_shell+0x862>
		{
			//Argument 2: File name
			command_arg = get_cmd_arg(1);
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    2b3a:	5c 01       	movw	r10, r24
			if(command_arg == 0)
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <command_shell+0x752>
    2b40:	81 cc       	rjmp	.-1790   	; 0x2444 <command_shell+0x54>
				continue;

			//Argument 3: Offset value - do not continue if the value is not correct
			char* offset_buffer;
			if ((offset_buffer = get_cmd_arg(2)) != 0)
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    2b48:	8c 01       	movw	r16, r24
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	c9 f0       	breq	.+50     	; 0x2b80 <command_shell+0x790>
				if ((offset_buffer = is_number(offset_buffer, strlen(offset_buffer))) == 0)
    2b4e:	fc 01       	movw	r30, r24
    2b50:	01 90       	ld	r0, Z+
    2b52:	00 20       	and	r0, r0
    2b54:	e9 f7       	brne	.-6      	; 0x2b50 <command_shell+0x760>
    2b56:	31 97       	sbiw	r30, 0x01	; 1
    2b58:	e8 1b       	sub	r30, r24
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    2b5e:	4e 2f       	mov	r20, r30
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	0b c0       	rjmp	.+22     	; 0x2b7a <command_shell+0x78a>
		if (!isdigit(buffer[i]))
    2b64:	f8 01       	movw	r30, r16
    2b66:	e2 0f       	add	r30, r18
    2b68:	f3 1f       	adc	r31, r19
    2b6a:	80 81       	ld	r24, Z
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	c0 97       	sbiw	r24, 0x30	; 48
    2b70:	0a 97       	sbiw	r24, 0x0a	; 10
    2b72:	08 f0       	brcs	.+2      	; 0x2b76 <command_shell+0x786>
    2b74:	67 cc       	rjmp	.-1842   	; 0x2444 <command_shell+0x54>

//Returns char* pointer to buffer if buffer is a valid number or
//0(null) if not.
char* is_number(char* buffer, uint8_t buffer_length)
{
	for (int i = 0; i < buffer_length; i++)
    2b76:	2f 5f       	subi	r18, 0xFF	; 255
    2b78:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7a:	24 17       	cp	r18, r20
    2b7c:	35 07       	cpc	r19, r21
    2b7e:	94 f3       	brlt	.-28     	; 0x2b64 <command_shell+0x774>
				if ((offset_buffer = is_number(offset_buffer, strlen(offset_buffer))) == 0)
					continue;


			/* search file in current directory and open it */
			struct fat_file_struct* fd = open_file_in_dir(fs, dd, command_arg);
    2b80:	60 91 cd 0c 	lds	r22, 0x0CCD
    2b84:	70 91 ce 0c 	lds	r23, 0x0CCE
    2b88:	80 91 c2 04 	lds	r24, 0x04C2
    2b8c:	90 91 c3 04 	lds	r25, 0x04C3
    2b90:	a5 01       	movw	r20, r10
    2b92:	0e 94 65 0a 	call	0x14ca	; 0x14ca <open_file_in_dir>
    2b96:	7c 01       	movw	r14, r24
			if(!fd)
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	29 f0       	breq	.+10     	; 0x2ba6 <command_shell+0x7b6>
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e0       	ldi	r20, 0x00	; 0
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	1d c0       	rjmp	.+58     	; 0x2be0 <command_shell+0x7f0>
			{
				uart_puts_p(PSTR("error opening "));
    2ba6:	88 ef       	ldi	r24, 0xF8	; 248
    2ba8:	9a e0       	ldi	r25, 0x0A	; 10
    2baa:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
				uart_puts(command_arg);
    2bae:	c5 01       	movw	r24, r10
    2bb0:	9d c0       	rjmp	.+314    	; 0x2cec <command_shell+0x8fc>

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
        l = l * 10 + (*str++ - '0');
    2bb2:	ca 01       	movw	r24, r20
    2bb4:	b9 01       	movw	r22, r18
    2bb6:	2a e0       	ldi	r18, 0x0A	; 10
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	50 e0       	ldi	r21, 0x00	; 0
    2bbe:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    2bc2:	9b 01       	movw	r18, r22
    2bc4:	ac 01       	movw	r20, r24
    2bc6:	8d 2d       	mov	r24, r13
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	c0 97       	sbiw	r24, 0x30	; 48
    2bcc:	aa 27       	eor	r26, r26
    2bce:	97 fd       	sbrc	r25, 7
    2bd0:	a0 95       	com	r26
    2bd2:	ba 2f       	mov	r27, r26
    2bd4:	28 0f       	add	r18, r24
    2bd6:	39 1f       	adc	r19, r25
    2bd8:	4a 1f       	adc	r20, r26
    2bda:	5b 1f       	adc	r21, r27
    2bdc:	0f 5f       	subi	r16, 0xFF	; 255
    2bde:	1f 4f       	sbci	r17, 0xFF	; 255
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    2be0:	f8 01       	movw	r30, r16
    2be2:	d0 80       	ld	r13, Z
    2be4:	8d 2d       	mov	r24, r13
    2be6:	80 53       	subi	r24, 0x30	; 48
    2be8:	8a 30       	cpi	r24, 0x0A	; 10
    2bea:	18 f3       	brcs	.-58     	; 0x2bb2 <command_shell+0x7c2>
				uart_putc('\n');
				continue;
			}

			//Seek file position
			int32_t offset = strtolong(offset_buffer);
    2bec:	2a 83       	std	Y+2, r18	; 0x02
    2bee:	3b 83       	std	Y+3, r19	; 0x03
    2bf0:	4c 83       	std	Y+4, r20	; 0x04
    2bf2:	5d 83       	std	Y+5, r21	; 0x05
			if(!fat_seek_file(fd, &offset, FAT_SEEK_SET))
    2bf4:	c7 01       	movw	r24, r14
    2bf6:	be 01       	movw	r22, r28
    2bf8:	6e 5f       	subi	r22, 0xFE	; 254
    2bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <fat_seek_file>
    2c02:	88 23       	and	r24, r24
    2c04:	59 f4       	brne	.+22     	; 0x2c1c <command_shell+0x82c>
			{
				uart_puts_p(PSTR("error seeking on "));
    2c06:	86 ee       	ldi	r24, 0xE6	; 230
    2c08:	9a e0       	ldi	r25, 0x0A	; 10
    2c0a:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
				uart_puts(command_arg);
    2c0e:	c5 01       	movw	r24, r10
    2c10:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
				uart_putc('\n');
    2c14:	8a e0       	ldi	r24, 0x0A	; 10
    2c16:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    2c1a:	19 c0       	rjmp	.+50     	; 0x2c4e <command_shell+0x85e>
			/* read text from the shell and write it to the file */
			uint8_t data_len;
			while(1)
			{
				/* give a different prompt */
				uart_putc('<');
    2c1c:	8c e3       	ldi	r24, 0x3C	; 60
    2c1e:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
				//uart_putc(' ');

				/* read one line of text */
				data_len = read_line(buffer, sizeof(buffer));
    2c22:	c2 01       	movw	r24, r4
    2c24:	68 e1       	ldi	r22, 0x18	; 24
    2c26:	0e 94 40 09 	call	0x1280	; 0x1280 <read_line>
    2c2a:	18 2f       	mov	r17, r24
				if(!data_len)
    2c2c:	88 23       	and	r24, r24
    2c2e:	79 f0       	breq	.+30     	; 0x2c4e <command_shell+0x85e>
					break;

				/* write text to file */
				if(fat_write_file(fd, (uint8_t*) buffer, data_len) != data_len)
    2c30:	c7 01       	movw	r24, r14
    2c32:	b2 01       	movw	r22, r4
    2c34:	41 2f       	mov	r20, r17
    2c36:	50 e0       	ldi	r21, 0x00	; 0
    2c38:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <fat_write_file>
    2c3c:	21 2f       	mov	r18, r17
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	82 17       	cp	r24, r18
    2c42:	93 07       	cpc	r25, r19
    2c44:	59 f3       	breq	.-42     	; 0x2c1c <command_shell+0x82c>
				{
					uart_puts_p(PSTR("error writing to file\n"));
    2c46:	8f ec       	ldi	r24, 0xCF	; 207
    2c48:	9a e0       	ldi	r25, 0x0A	; 10
    2c4a:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
					break;
				}
			}

			fat_close_file(fd);
    2c4e:	c7 01       	movw	r24, r14
    2c50:	a7 cd       	rjmp	.-1202   	; 0x27a0 <command_shell+0x3b0>
		}

		else if(strncmp_P(command_arg, PSTR("append"), 6) == 0)
    2c52:	c8 01       	movw	r24, r16
    2c54:	68 ec       	ldi	r22, 0xC8	; 200
    2c56:	7a e0       	ldi	r23, 0x0A	; 10
    2c58:	46 e0       	ldi	r20, 0x06	; 6
    2c5a:	50 e0       	ldi	r21, 0x00	; 0
    2c5c:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <strncmp_P>
    2c60:	89 2b       	or	r24, r25
    2c62:	81 f4       	brne	.+32     	; 0x2c84 <command_shell+0x894>
		{
			//Expecting only 2 arguments
			if (too_many_arguments_error(2, command))
    2c64:	82 e0       	ldi	r24, 0x02	; 2
    2c66:	b2 01       	movw	r22, r4
    2c68:	0e 94 89 08 	call	0x1112	; 0x1112 <too_many_arguments_error>
    2c6c:	88 23       	and	r24, r24
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <command_shell+0x882>
    2c70:	e9 cb       	rjmp	.-2094   	; 0x2444 <command_shell+0x54>
				continue;

			//Argument 2: File name
			//Find the end of a current file and begins writing to it
			//Ends only when the user inputs Ctrl+z (ASCII 26)
			command_arg = get_cmd_arg(1);
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
			if(command_arg == 0)
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <command_shell+0x88e>
    2c7c:	e3 cb       	rjmp	.-2106   	; 0x2444 <command_shell+0x54>
				continue;
				
			append_file(command_arg); //Uses circular buffer to capture full stream of text and append to file
    2c7e:	0e 94 96 0a 	call	0x152c	; 0x152c <append_file>
    2c82:	e0 cb       	rjmp	.-2112   	; 0x2444 <command_shell+0x54>
		}
		else if(strncmp_P(command_arg, PSTR("md"), 2) == 0)
    2c84:	c8 01       	movw	r24, r16
    2c86:	65 ec       	ldi	r22, 0xC5	; 197
    2c88:	7a e0       	ldi	r23, 0x0A	; 10
    2c8a:	42 e0       	ldi	r20, 0x02	; 2
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <strncmp_P>
    2c92:	89 2b       	or	r24, r25
    2c94:	a9 f4       	brne	.+42     	; 0x2cc0 <command_shell+0x8d0>
		{
			//Argument 2: Directory name
			command_arg = get_cmd_arg(1);
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	0e 94 15 09 	call	0x122a	; 0x122a <get_cmd_arg>
    2c9c:	8c 01       	movw	r16, r24
			if(command_arg == 0)
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <command_shell+0x8b4>
    2ca2:	d0 cb       	rjmp	.-2144   	; 0x2444 <command_shell+0x54>
				continue;

			struct fat_dir_entry_struct dir_entry;
			if(!fat_create_dir(dd, command_arg, &dir_entry))
    2ca4:	80 91 cd 0c 	lds	r24, 0x0CCD
    2ca8:	90 91 ce 0c 	lds	r25, 0x0CCE
    2cac:	b8 01       	movw	r22, r16
    2cae:	a3 01       	movw	r20, r6
    2cb0:	0e 94 3c 3a 	call	0x7478	; 0x7478 <fat_create_dir>
    2cb4:	88 23       	and	r24, r24
    2cb6:	09 f0       	breq	.+2      	; 0x2cba <command_shell+0x8ca>
    2cb8:	c5 cb       	rjmp	.-2166   	; 0x2444 <command_shell+0x54>
			{
				uart_puts_p(PSTR("error creating directory: "));
    2cba:	8a ea       	ldi	r24, 0xAA	; 170
    2cbc:	9a e0       	ldi	r25, 0x0A	; 10
    2cbe:	13 c0       	rjmp	.+38     	; 0x2ce6 <command_shell+0x8f6>
				uart_putc('\n');
			}
		}
#endif
#if SD_RAW_WRITE_BUFFERING
		else if(strcmp_P(command_arg, PSTR("sync")) == 0)
    2cc0:	c8 01       	movw	r24, r16
    2cc2:	65 ea       	ldi	r22, 0xA5	; 165
    2cc4:	7a e0       	ldi	r23, 0x0A	; 10
    2cc6:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <strcmp_P>
    2cca:	89 2b       	or	r24, r25
    2ccc:	51 f4       	brne	.+20     	; 0x2ce2 <command_shell+0x8f2>
		{
			if(!sd_raw_sync())
    2cce:	0e 94 9b 1c 	call	0x3936	; 0x3936 <sd_raw_sync>
    2cd2:	88 23       	and	r24, r24
    2cd4:	09 f0       	breq	.+2      	; 0x2cd8 <command_shell+0x8e8>
    2cd6:	b6 cb       	rjmp	.-2196   	; 0x2444 <command_shell+0x54>
				uart_puts_p(PSTR("error syncing disk\n"));
    2cd8:	81 e9       	ldi	r24, 0x91	; 145
    2cda:	9a e0       	ldi	r25, 0x0A	; 10
    2cdc:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    2ce0:	b1 cb       	rjmp	.-2206   	; 0x2444 <command_shell+0x54>
		}
#endif
		else
		{
			uart_puts_p(PSTR("unknown command: "));
    2ce2:	8f e7       	ldi	r24, 0x7F	; 127
    2ce4:	9a e0       	ldi	r25, 0x0A	; 10
    2ce6:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
			uart_puts(command_arg);
    2cea:	c8 01       	movw	r24, r16
    2cec:	0e 94 5f 45 	call	0x8abe	; 0x8abe <uart_puts>
			uart_putc('\n');
    2cf0:	8a e0       	ldi	r24, 0x0A	; 10
    2cf2:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    2cf6:	a6 cb       	rjmp	.-2228   	; 0x2444 <command_shell+0x54>

00002cf8 <read_config_file>:
	
	read_config_file(); //Read the system settings from the config file	
}

void read_config_file(void)
{
    2cf8:	4f 92       	push	r4
    2cfa:	5f 92       	push	r5
    2cfc:	6f 92       	push	r6
    2cfe:	7f 92       	push	r7
    2d00:	8f 92       	push	r8
    2d02:	9f 92       	push	r9
    2d04:	af 92       	push	r10
    2d06:	bf 92       	push	r11
    2d08:	cf 92       	push	r12
    2d0a:	df 92       	push	r13
    2d0c:	ef 92       	push	r14
    2d0e:	ff 92       	push	r15
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	c5 55       	subi	r28, 0x55	; 85
    2d1e:	d0 40       	sbci	r29, 0x00	; 0
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
	char config_file_name[13];
	sprintf(config_file_name, CFG_FILENAME); //This is the name of the config file. 'config.sys' is probably a bad idea.
    2d2a:	58 e0       	ldi	r21, 0x08	; 8
    2d2c:	e5 2e       	mov	r14, r21
    2d2e:	f1 2c       	mov	r15, r1
    2d30:	ec 0e       	add	r14, r28
    2d32:	fd 1e       	adc	r15, r29
    2d34:	c7 01       	movw	r24, r14
    2d36:	69 e1       	ldi	r22, 0x19	; 25
    2d38:	71 e0       	ldi	r23, 0x01	; 1
    2d3a:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <strcpy>

	struct fat_dir_entry_struct file_entry;

	//Check to see if we have a config file
	if(find_file_in_dir(fs, dd, config_file_name, &file_entry, 0))
    2d3e:	60 91 cd 0c 	lds	r22, 0x0CCD
    2d42:	70 91 ce 0c 	lds	r23, 0x0CCE
    2d46:	80 91 c2 04 	lds	r24, 0x04C2
    2d4a:	90 91 c3 04 	lds	r25, 0x04C3
    2d4e:	a7 01       	movw	r20, r14
    2d50:	9e 01       	movw	r18, r28
    2d52:	2b 5d       	subi	r18, 0xDB	; 219
    2d54:	3f 4f       	sbci	r19, 0xFF	; 255
    2d56:	00 e0       	ldi	r16, 0x00	; 0
    2d58:	0e 94 35 0a 	call	0x146a	; 0x146a <find_file_in_dir>
    2d5c:	88 23       	and	r24, r24
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <read_config_file+0x6a>
    2d60:	f8 c0       	rjmp	.+496    	; 0x2f52 <read_config_file+0x25a>
		#endif
		
		//Now load settings from file
		
		//search file in current directory and open it
		struct fat_file_struct* fd = open_file_in_dir(fs, dd, config_file_name);
    2d62:	60 91 cd 0c 	lds	r22, 0x0CCD
    2d66:	70 91 ce 0c 	lds	r23, 0x0CCE
    2d6a:	80 91 c2 04 	lds	r24, 0x04C2
    2d6e:	90 91 c3 04 	lds	r25, 0x04C3
    2d72:	a7 01       	movw	r20, r14
    2d74:	0e 94 65 0a 	call	0x14ca	; 0x14ca <open_file_in_dir>
    2d78:	7c 01       	movw	r14, r24
		if(!fd)
    2d7a:	00 97       	sbiw	r24, 0x00	; 0
    2d7c:	29 f4       	brne	.+10     	; 0x2d88 <read_config_file+0x90>
		{
			uart_puts_p(PSTR("error opening config file"));
    2d7e:	87 eb       	ldi	r24, 0xB7	; 183
    2d80:	9c e0       	ldi	r25, 0x0C	; 12
    2d82:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
    2d86:	e7 c0       	rjmp	.+462    	; 0x2f56 <read_config_file+0x25e>


		//Read line from file
		uint8_t settings_string[16]; //"115200,103,14,0\0" = 115200 bps, escape char of ASCII(103), 14 times, new log mode
		uint8_t len;
		len = fat_read_file(fd, settings_string, sizeof(settings_string)); //Read first line of file
    2d88:	45 e1       	ldi	r20, 0x15	; 21
    2d8a:	c4 2e       	mov	r12, r20
    2d8c:	d1 2c       	mov	r13, r1
    2d8e:	cc 0e       	add	r12, r28
    2d90:	dd 1e       	adc	r13, r29
    2d92:	b6 01       	movw	r22, r12
    2d94:	40 e1       	ldi	r20, 0x10	; 16
    2d96:	50 e0       	ldi	r21, 0x00	; 0
    2d98:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <fat_read_file>
    2d9c:	68 2e       	mov	r6, r24

		fat_close_file(fd);
    2d9e:	c7 01       	movw	r24, r14
    2da0:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <fat_close_file>
    2da4:	11 e0       	ldi	r17, 0x01	; 1
    2da6:	99 24       	eor	r9, r9
    2da8:	3a e1       	ldi	r19, 0x1A	; 26
    2daa:	83 2e       	mov	r8, r19
    2dac:	23 e0       	ldi	r18, 0x03	; 3
    2dae:	72 2e       	mov	r7, r18
    2db0:	bb 24       	eor	r11, r11
    2db2:	aa 24       	eor	r10, r10
		char new_system_max_escape = 3;

		//Parse the settings out
		uint8_t i = 0, j = 0, setting_number = 0;
		char new_setting[7]; //Max length of a setting is 6, the bps setting = '115200' plus '\0'
		for(i = 0 ; i < len; i++)
    2db4:	7e 01       	movw	r14, r28
    2db6:	08 94       	sec
    2db8:	e1 1c       	adc	r14, r1
    2dba:	f1 1c       	adc	r15, r1
		{
			//Pick out one setting from the line of text
			for(j = 0 ; settings_string[i] != ',' && i < len && j < 6 ; )
    2dbc:	26 01       	movw	r4, r12
    2dbe:	97 e0       	ldi	r25, 0x07	; 7
    2dc0:	c9 2e       	mov	r12, r25
    2dc2:	d1 2c       	mov	r13, r1
    2dc4:	cc 0e       	add	r12, r28
    2dc6:	dd 1e       	adc	r13, r29
    2dc8:	85 c0       	rjmp	.+266    	; 0x2ed4 <read_config_file+0x1dc>
			{
				new_setting[j] = settings_string[i];
    2dca:	ed 93       	st	X+, r30
				i++;
    2dcc:	b3 94       	inc	r11
    2dce:	8a 2f       	mov	r24, r26
    2dd0:	8e 19       	sub	r24, r14
		uint8_t i = 0, j = 0, setting_number = 0;
		char new_setting[7]; //Max length of a setting is 6, the bps setting = '115200' plus '\0'
		for(i = 0 ; i < len; i++)
		{
			//Pick out one setting from the line of text
			for(j = 0 ; settings_string[i] != ',' && i < len && j < 6 ; )
    2dd2:	f2 01       	movw	r30, r4
    2dd4:	eb 0d       	add	r30, r11
    2dd6:	f1 1d       	adc	r31, r1
    2dd8:	e0 81       	ld	r30, Z
    2dda:	ec 32       	cpi	r30, 0x2C	; 44
    2ddc:	29 f0       	breq	.+10     	; 0x2de8 <read_config_file+0xf0>
    2dde:	b6 14       	cp	r11, r6
    2de0:	18 f4       	brcc	.+6      	; 0x2de8 <read_config_file+0xf0>
    2de2:	ac 15       	cp	r26, r12
    2de4:	bd 05       	cpc	r27, r13
    2de6:	89 f7       	brne	.-30     	; 0x2dca <read_config_file+0xd2>
				new_setting[j] = settings_string[i];
				i++;
				j++;
			}
			
			new_setting[j] = '\0'; //Terminate the string for array compare
    2de8:	f7 01       	movw	r30, r14
    2dea:	e8 0f       	add	r30, r24
    2dec:	f1 1d       	adc	r31, r1
    2dee:	10 82       	st	Z, r1
			
			if(setting_number == 0) //Baud rate
    2df0:	aa 20       	and	r10, r10
    2df2:	09 f0       	breq	.+2      	; 0x2df6 <read_config_file+0xfe>
    2df4:	47 c0       	rjmp	.+142    	; 0x2e84 <read_config_file+0x18c>
			{
				if( strcmp(new_setting, "2400") == 0) new_system_baud = BAUD_2400;
    2df6:	c7 01       	movw	r24, r14
    2df8:	6d e5       	ldi	r22, 0x5D	; 93
    2dfa:	71 e0       	ldi	r23, 0x01	; 1
    2dfc:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <strcmp>
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	11 f4       	brne	.+4      	; 0x2e08 <read_config_file+0x110>
    2e04:	10 e0       	ldi	r17, 0x00	; 0
    2e06:	64 c0       	rjmp	.+200    	; 0x2ed0 <read_config_file+0x1d8>
				else if( strcmp(new_setting, "4800") == 0) new_system_baud = BAUD_4800;
    2e08:	c7 01       	movw	r24, r14
    2e0a:	62 e6       	ldi	r22, 0x62	; 98
    2e0c:	71 e0       	ldi	r23, 0x01	; 1
    2e0e:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <strcmp>
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	11 f4       	brne	.+4      	; 0x2e1a <read_config_file+0x122>
    2e16:	14 e0       	ldi	r17, 0x04	; 4
    2e18:	5b c0       	rjmp	.+182    	; 0x2ed0 <read_config_file+0x1d8>
				else if( strcmp(new_setting, "9600") == 0) new_system_baud = BAUD_9600;
    2e1a:	c7 01       	movw	r24, r14
    2e1c:	67 e6       	ldi	r22, 0x67	; 103
    2e1e:	71 e0       	ldi	r23, 0x01	; 1
    2e20:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <strcmp>
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <read_config_file+0x132>
    2e28:	52 c0       	rjmp	.+164    	; 0x2ece <read_config_file+0x1d6>
				else if( strcmp(new_setting, "19200") == 0) new_system_baud = BAUD_19200;
    2e2a:	c7 01       	movw	r24, r14
    2e2c:	6c e6       	ldi	r22, 0x6C	; 108
    2e2e:	71 e0       	ldi	r23, 0x01	; 1
    2e30:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <strcmp>
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	11 f4       	brne	.+4      	; 0x2e3c <read_config_file+0x144>
    2e38:	15 e0       	ldi	r17, 0x05	; 5
    2e3a:	4a c0       	rjmp	.+148    	; 0x2ed0 <read_config_file+0x1d8>
				else if( strcmp(new_setting, "38400") == 0) new_system_baud = BAUD_38400;
    2e3c:	c7 01       	movw	r24, r14
    2e3e:	62 e7       	ldi	r22, 0x72	; 114
    2e40:	71 e0       	ldi	r23, 0x01	; 1
    2e42:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <strcmp>
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	11 f4       	brne	.+4      	; 0x2e4e <read_config_file+0x156>
    2e4a:	16 e0       	ldi	r17, 0x06	; 6
    2e4c:	41 c0       	rjmp	.+130    	; 0x2ed0 <read_config_file+0x1d8>
				else if( strcmp(new_setting, "57600") == 0) new_system_baud = BAUD_57600;
    2e4e:	c7 01       	movw	r24, r14
    2e50:	68 e7       	ldi	r22, 0x78	; 120
    2e52:	71 e0       	ldi	r23, 0x01	; 1
    2e54:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <strcmp>
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	11 f4       	brne	.+4      	; 0x2e60 <read_config_file+0x168>
    2e5c:	12 e0       	ldi	r17, 0x02	; 2
    2e5e:	38 c0       	rjmp	.+112    	; 0x2ed0 <read_config_file+0x1d8>
				else if( strcmp(new_setting, "115200") == 0) new_system_baud = BAUD_115200;
    2e60:	c7 01       	movw	r24, r14
    2e62:	6e e7       	ldi	r22, 0x7E	; 126
    2e64:	71 e0       	ldi	r23, 0x01	; 1
    2e66:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <strcmp>
    2e6a:	00 97       	sbiw	r24, 0x00	; 0
    2e6c:	11 f4       	brne	.+4      	; 0x2e72 <read_config_file+0x17a>
    2e6e:	13 e0       	ldi	r17, 0x03	; 3
    2e70:	2f c0       	rjmp	.+94     	; 0x2ed0 <read_config_file+0x1d8>
				else if( strcmp(new_setting, "230400") == 0) new_system_baud = BAUD_230400;
    2e72:	c7 01       	movw	r24, r14
    2e74:	65 e8       	ldi	r22, 0x85	; 133
    2e76:	71 e0       	ldi	r23, 0x01	; 1
    2e78:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <strcmp>
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	39 f5       	brne	.+78     	; 0x2ece <read_config_file+0x1d6>
    2e80:	17 e0       	ldi	r17, 0x07	; 7
    2e82:	26 c0       	rjmp	.+76     	; 0x2ed0 <read_config_file+0x1d8>
				else new_system_baud = BAUD_9600; //Default is 9600bps
			}
			else if(setting_number == 1) //Escape character
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	a8 16       	cp	r10, r24
    2e88:	49 f4       	brne	.+18     	; 0x2e9c <read_config_file+0x1a4>
			{
				new_system_escape = atoi(new_setting);
    2e8a:	c7 01       	movw	r24, r14
    2e8c:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <atoi>
    2e90:	88 2e       	mov	r8, r24
				if(new_system_escape == 0 || new_system_escape > 127) new_system_escape = 26; //Default is ctrl+z
    2e92:	18 16       	cp	r1, r24
    2e94:	ec f0       	brlt	.+58     	; 0x2ed0 <read_config_file+0x1d8>
    2e96:	8a e1       	ldi	r24, 0x1A	; 26
    2e98:	88 2e       	mov	r8, r24
    2e9a:	1a c0       	rjmp	.+52     	; 0x2ed0 <read_config_file+0x1d8>
			}
			else if(setting_number == 2) //Max amount escape character
    2e9c:	82 e0       	ldi	r24, 0x02	; 2
    2e9e:	a8 16       	cp	r10, r24
    2ea0:	51 f4       	brne	.+20     	; 0x2eb6 <read_config_file+0x1be>
			{
				new_system_max_escape = atoi(new_setting);
    2ea2:	c7 01       	movw	r24, r14
    2ea4:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <atoi>
    2ea8:	78 2e       	mov	r7, r24
				if(new_system_max_escape == 0 || new_system_max_escape > 10) new_system_max_escape = 3; //Default is 3
    2eaa:	81 50       	subi	r24, 0x01	; 1
    2eac:	8a 30       	cpi	r24, 0x0A	; 10
    2eae:	80 f0       	brcs	.+32     	; 0x2ed0 <read_config_file+0x1d8>
    2eb0:	03 e0       	ldi	r16, 0x03	; 3
    2eb2:	70 2e       	mov	r7, r16
    2eb4:	0d c0       	rjmp	.+26     	; 0x2ed0 <read_config_file+0x1d8>
			}
			else if(setting_number == 3) //System mode
    2eb6:	83 e0       	ldi	r24, 0x03	; 3
    2eb8:	a8 16       	cp	r10, r24
    2eba:	81 f4       	brne	.+32     	; 0x2edc <read_config_file+0x1e4>
			{
				new_system_mode = atoi(new_setting);
    2ebc:	c7 01       	movw	r24, r14
    2ebe:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <atoi>
    2ec2:	98 2e       	mov	r9, r24
				if(new_system_mode == 0 || new_system_mode > 5) new_system_mode = MODE_NEWLOG; //Default is NEWLOG
    2ec4:	81 50       	subi	r24, 0x01	; 1
    2ec6:	85 30       	cpi	r24, 0x05	; 5
    2ec8:	18 f0       	brcs	.+6      	; 0x2ed0 <read_config_file+0x1d8>
    2eca:	99 24       	eor	r9, r9
    2ecc:	01 c0       	rjmp	.+2      	; 0x2ed0 <read_config_file+0x1d8>
    2ece:	11 e0       	ldi	r17, 0x01	; 1
			}
			else
				//We're done! Stop looking for settings
				break;
			
			setting_number++;
    2ed0:	a3 94       	inc	r10
		char new_system_max_escape = 3;

		//Parse the settings out
		uint8_t i = 0, j = 0, setting_number = 0;
		char new_setting[7]; //Max length of a setting is 6, the bps setting = '115200' plus '\0'
		for(i = 0 ; i < len; i++)
    2ed2:	b3 94       	inc	r11
    2ed4:	b6 14       	cp	r11, r6
    2ed6:	10 f4       	brcc	.+4      	; 0x2edc <read_config_file+0x1e4>
    2ed8:	d7 01       	movw	r26, r14
    2eda:	79 cf       	rjmp	.-270    	; 0x2dce <read_config_file+0xd6>
		uart_puts_p(PSTR("\n"));
		*/
		
		//We now have the settings loaded into the global variables. Now check if they're different from EEPROM settings

		if(new_system_baud != setting_uart_speed)
    2edc:	80 91 ca 04 	lds	r24, 0x04CA
    2ee0:	18 17       	cp	r17, r24
    2ee2:	69 f0       	breq	.+26     	; 0x2efe <read_config_file+0x206>
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2ee4:	f9 99       	sbic	0x1f, 1	; 31
    2ee6:	fe cf       	rjmp	.-4      	; 0x2ee4 <read_config_file+0x1ec>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2ee8:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2eee:	10 bd       	out	0x20, r17	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    2ef0:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    2ef2:	f9 9a       	sbi	0x1f, 1	; 31
		{
			//If the baud rate from the file is different from the current setting,
			//Then update the setting to the file setting
			//And re-init the UART
			EEPROM_write(LOCATION_BAUD_SETTING, new_system_baud);
			setting_uart_speed = new_system_baud;
    2ef4:	10 93 ca 04 	sts	0x04CA, r17
		    uart_init(setting_uart_speed);
    2ef8:	81 2f       	mov	r24, r17
    2efa:	0e 94 3c 44 	call	0x8878	; 0x8878 <uart_init>
		}

		if(new_system_mode != setting_system_mode)
    2efe:	80 91 c4 04 	lds	r24, 0x04C4
    2f02:	98 16       	cp	r9, r24
    2f04:	51 f0       	breq	.+20     	; 0x2f1a <read_config_file+0x222>
		{
			//Goto new system mode
			setting_system_mode = new_system_mode;
    2f06:	90 92 c4 04 	sts	0x04C4, r9
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2f0a:	f9 99       	sbic	0x1f, 1	; 31
    2f0c:	fe cf       	rjmp	.-4      	; 0x2f0a <read_config_file+0x212>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2f0e:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2f14:	90 bc       	out	0x20, r9	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    2f16:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    2f18:	f9 9a       	sbi	0x1f, 1	; 31
			//Goto new system mode
			setting_system_mode = new_system_mode;
			EEPROM_write(LOCATION_SYSTEM_SETTING, setting_system_mode);
		}
		
		if(new_system_escape != setting_escape_character)
    2f1a:	80 91 cf 0c 	lds	r24, 0x0CCF
    2f1e:	88 16       	cp	r8, r24
    2f20:	51 f0       	breq	.+20     	; 0x2f36 <read_config_file+0x23e>
		{
			//Goto new system escape char
			setting_escape_character = new_system_escape;
    2f22:	80 92 cf 0c 	sts	0x0CCF, r8
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2f26:	f9 99       	sbic	0x1f, 1	; 31
    2f28:	fe cf       	rjmp	.-4      	; 0x2f26 <read_config_file+0x22e>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2f2a:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2f2c:	85 e0       	ldi	r24, 0x05	; 5
    2f2e:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2f30:	80 bc       	out	0x20, r8	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    2f32:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    2f34:	f9 9a       	sbi	0x1f, 1	; 31
			//Goto new system escape char
			setting_escape_character = new_system_escape;
			EEPROM_write(LOCATION_ESCAPE_CHAR, setting_escape_character); 
		}
		
		if(new_system_max_escape != setting_max_escape_character)
    2f36:	80 91 c7 04 	lds	r24, 0x04C7
    2f3a:	78 16       	cp	r7, r24
    2f3c:	51 f0       	breq	.+20     	; 0x2f52 <read_config_file+0x25a>
		{
			//Goto new max escape
			setting_max_escape_character = new_system_max_escape;
    2f3e:	70 92 c7 04 	sts	0x04C7, r7
}

//Basic EEPROM functions to read/write to the internal EEPROM
void EEPROM_write(uint16_t uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEPE)); //Wait for completion of previous write
    2f42:	f9 99       	sbic	0x1f, 1	; 31
    2f44:	fe cf       	rjmp	.-4      	; 0x2f42 <read_config_file+0x24a>
	EEARH = uiAddress >> 8; //Set up address and data registers
    2f46:	12 bc       	out	0x22, r1	; 34
	EEARL = uiAddress; //Set up address and data registers
    2f48:	86 e0       	ldi	r24, 0x06	; 6
    2f4a:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    2f4c:	70 bc       	out	0x20, r7	; 32
	EECR |= (1<<EEMPE); //Write logical one to EEMWE
    2f4e:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE); //Start eeprom write by setting EEWE
    2f50:	f9 9a       	sbi	0x1f, 1	; 31
		#if DEBUG
			uart_puts("No config found - creating default:\n");
		#endif

		//Record the current eeprom settings to the config file
		record_config_file();
    2f52:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <record_config_file>
	}
	
}
    2f56:	cb 5a       	subi	r28, 0xAB	; 171
    2f58:	df 4f       	sbci	r29, 0xFF	; 255
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	cf 91       	pop	r28
    2f66:	df 91       	pop	r29
    2f68:	1f 91       	pop	r17
    2f6a:	0f 91       	pop	r16
    2f6c:	ff 90       	pop	r15
    2f6e:	ef 90       	pop	r14
    2f70:	df 90       	pop	r13
    2f72:	cf 90       	pop	r12
    2f74:	bf 90       	pop	r11
    2f76:	af 90       	pop	r10
    2f78:	9f 90       	pop	r9
    2f7a:	8f 90       	pop	r8
    2f7c:	7f 90       	pop	r7
    2f7e:	6f 90       	pop	r6
    2f80:	5f 90       	pop	r5
    2f82:	4f 90       	pop	r4
    2f84:	08 95       	ret

00002f86 <ioinit>:

    return 0;
}

void ioinit(void)
{
    2f86:	0f 93       	push	r16
    2f88:	1f 93       	push	r17
    //Init Timer0 for delay_us
    //TCCR0B = (1<<CS00); //Set Prescaler to clk/1 (assume we are running at internal 1MHz). CS00=1 
    TCCR0B = (1<<CS01); //Set Prescaler to clk/8 : 1click = 1us(assume we are running at internal 8MHz). CS01=1 
    2f8a:	82 e0       	ldi	r24, 0x02	; 2
    2f8c:	85 bd       	out	0x25, r24	; 37
    //Since we are running at 16MHz, this is a hack job. We will double the count during delay_us function.
	//TCCR0B = (1<<CS01)|(1<<CS00); //Set Prescaler to clk/64

	//Running power is 7.66mA at 3.3V / 7.23 at 5V before power tweaking
	//Let's see if we can shut off some peripherals and save some power
	PRR |= (1<<PRTWI) | (1<<PRTIM2) | (1<<PRTIM1) | (1<<PRADC); //Shut off TWI, Timer2, Timer1, ADC
    2f8e:	80 91 64 00 	lds	r24, 0x0064
    2f92:	89 6c       	ori	r24, 0xC9	; 201
    2f94:	80 93 64 00 	sts	0x0064, r24
	//Running power is 7.02mA at 3.3V / 6.66mA at 5V after power tweaking - so a little bit, and it still works!
	
	set_sleep_mode(SLEEP_MODE_IDLE); //I believe this is the lowest we can go and still get woken up by UART
    2f98:	83 b7       	in	r24, 0x33	; 51
    2f9a:	81 7f       	andi	r24, 0xF1	; 241
    2f9c:	83 bf       	out	0x33, r24	; 51
	sleep_enable(); //Set Sleep Enable bit to 1
    2f9e:	83 b7       	in	r24, 0x33	; 51
    2fa0:	81 60       	ori	r24, 0x01	; 1
    2fa2:	83 bf       	out	0x33, r24	; 51

    //1 = output, 0 = input
    STAT1_DDR |= (1<<STAT1);
    2fa4:	20 9a       	sbi	0x04, 0	; 4
    STAT2_DDR |= (1<<STAT2);
    2fa6:	21 9a       	sbi	0x04, 1	; 4

	if(check_emergency_reset()) //Look to see if the RX pin is being pulled low
    2fa8:	0e 94 90 07 	call	0xf20	; 0xf20 <check_emergency_reset>
    2fac:	88 23       	and	r24, r24
    2fae:	a9 f0       	breq	.+42     	; 0x2fda <ioinit+0x54>
	{
		set_default_settings(); //Reset baud, escape characters, escape number, system mode
    2fb0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <set_default_settings>

		init_media(); //Try to setup the SD card so we can record these new settings
    2fb4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <init_media>
		
		record_config_file(); //Record new config settings
    2fb8:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <record_config_file>

		//Now sit in forever loop indicating system is now at 9600bps
		sbi(STAT1_PORT, STAT1); 
    2fbc:	28 9a       	sbi	0x05, 0	; 5
		sbi(STAT2_PORT, STAT2);
    2fbe:	29 9a       	sbi	0x05, 1	; 5
		while(1)
		{
			delay_ms(500);
			STAT1_PORT ^= (1<<STAT1); //Blink the stat LEDs
    2fc0:	01 e0       	ldi	r16, 0x01	; 1
			STAT2_PORT ^= (1<<STAT2); //Blink the stat LEDs
    2fc2:	12 e0       	ldi	r17, 0x02	; 2
		//Now sit in forever loop indicating system is now at 9600bps
		sbi(STAT1_PORT, STAT1); 
		sbi(STAT2_PORT, STAT2);
		while(1)
		{
			delay_ms(500);
    2fc4:	84 ef       	ldi	r24, 0xF4	; 244
    2fc6:	91 e0       	ldi	r25, 0x01	; 1
    2fc8:	0e 94 64 07 	call	0xec8	; 0xec8 <delay_ms>
			STAT1_PORT ^= (1<<STAT1); //Blink the stat LEDs
    2fcc:	85 b1       	in	r24, 0x05	; 5
    2fce:	80 27       	eor	r24, r16
    2fd0:	85 b9       	out	0x05, r24	; 5
			STAT2_PORT ^= (1<<STAT2); //Blink the stat LEDs
    2fd2:	85 b1       	in	r24, 0x05	; 5
    2fd4:	81 27       	eor	r24, r17
    2fd6:	85 b9       	out	0x05, r24	; 5
    2fd8:	f5 cf       	rjmp	.-22     	; 0x2fc4 <ioinit+0x3e>
		}
	}
	
	read_system_settings(); //Read the system settings into some global variables
    2fda:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <read_system_settings>

    //Setup uart
    uart_init(setting_uart_speed);
    2fde:	80 91 ca 04 	lds	r24, 0x04CA
    2fe2:	0e 94 3c 44 	call	0x8878	; 0x8878 <uart_init>
#if DEBUG
	uart_puts_p(PSTR("UART Init\n"));
#else
	uart_puts_p(PSTR("1"));
    2fe6:	83 ed       	ldi	r24, 0xD3	; 211
    2fe8:	9c e0       	ldi	r25, 0x0C	; 12
    2fea:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
#endif
	
	//Setup SPI, init SD card, etc
	init_media();
    2fee:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <init_media>
	uart_puts_p(PSTR("2"));
    2ff2:	81 ed       	ldi	r24, 0xD1	; 209
    2ff4:	9c e0       	ldi	r25, 0x0C	; 12
    2ff6:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <uart_puts_p>
	
	read_config_file(); //Read the system settings from the config file	
    2ffa:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <read_config_file>
}
    2ffe:	1f 91       	pop	r17
    3000:	0f 91       	pop	r16
    3002:	08 95       	ret

00003004 <main>:
	if(read_spot == BUFF_LEN) read_spot = 0;
}

int main(void)
{
	ioinit();
    3004:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <ioinit>

	//If we are in new log mode, find a new file name to write to
	if(setting_system_mode == MODE_NEWLOG)
    3008:	80 91 c4 04 	lds	r24, 0x04C4
    300c:	88 23       	and	r24, r24
    300e:	11 f4       	brne	.+4      	; 0x3014 <main+0x10>
		newlog();
    3010:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <newlog>

	//If we are in sequential log mode, determine if seqlog.txt has been created or not, and then open it for logging
	if(setting_system_mode == MODE_SEQLOG)
    3014:	80 91 c4 04 	lds	r24, 0x04C4
    3018:	81 30       	cpi	r24, 0x01	; 1
    301a:	11 f4       	brne	.+4      	; 0x3020 <main+0x1c>
		seqlog();
    301c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <seqlog>

	//Once either one of these modes exits, go to normal command mode, which is called by returning to main()
	command_shell();
    3020:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <command_shell>

    return 0;
}
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	08 95       	ret

0000302a <partition_close>:
 * \param[in] partition The partition descriptor to destroy.
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    302a:	fc 01       	movw	r30, r24
    if(!partition)
    302c:	00 97       	sbiw	r24, 0x00	; 0
    302e:	11 f4       	brne	.+4      	; 0x3034 <partition_close+0xa>
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	08 95       	ret

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    3034:	10 86       	std	Z+8, r1	; 0x08
    3036:	81 e0       	ldi	r24, 0x01	; 1
#endif

    return 1;
}
    3038:	08 95       	ret

0000303a <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    303a:	4f 92       	push	r4
    303c:	5f 92       	push	r5
    303e:	6f 92       	push	r6
    3040:	7f 92       	push	r7
    3042:	8f 92       	push	r8
    3044:	9f 92       	push	r9
    3046:	bf 92       	push	r11
    3048:	cf 92       	push	r12
    304a:	df 92       	push	r13
    304c:	ef 92       	push	r14
    304e:	ff 92       	push	r15
    3050:	0f 93       	push	r16
    3052:	1f 93       	push	r17
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	60 97       	sbiw	r28, 0x10	; 16
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	6c 01       	movw	r12, r24
    306a:	4b 01       	movw	r8, r22
    306c:	3a 01       	movw	r6, r20
    306e:	29 01       	movw	r4, r18
    3070:	b0 2e       	mov	r11, r16
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	09 f4       	brne	.+2      	; 0x3078 <partition_open+0x3e>
    3076:	9c c0       	rjmp	.+312    	; 0x31b0 <partition_open+0x176>
    3078:	61 15       	cp	r22, r1
    307a:	71 05       	cpc	r23, r1
    307c:	09 f4       	brne	.+2      	; 0x3080 <partition_open+0x46>
    307e:	98 c0       	rjmp	.+304    	; 0x31b0 <partition_open+0x176>
    3080:	83 e0       	ldi	r24, 0x03	; 3
    3082:	80 17       	cp	r24, r16
    3084:	0c f4       	brge	.+2      	; 0x3088 <partition_open+0x4e>
    3086:	94 c0       	rjmp	.+296    	; 0x31b0 <partition_open+0x176>
        return 0;

    if(index >= 0)
    3088:	07 fd       	sbrc	r16, 7
    308a:	25 c0       	rjmp	.+74     	; 0x30d6 <partition_open+0x9c>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    308c:	80 2f       	mov	r24, r16
    308e:	99 27       	eor	r25, r25
    3090:	87 fd       	sbrc	r24, 7
    3092:	90 95       	com	r25
    3094:	b4 e0       	ldi	r27, 0x04	; 4
    3096:	88 0f       	add	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	ba 95       	dec	r27
    309c:	e1 f7       	brne	.-8      	; 0x3096 <partition_open+0x5c>
    309e:	82 54       	subi	r24, 0x42	; 66
    30a0:	9e 4f       	sbci	r25, 0xFE	; 254
    30a2:	fc 01       	movw	r30, r24
    30a4:	ff 0f       	add	r31, r31
    30a6:	ee 0b       	sbc	r30, r30
    30a8:	fe 2f       	mov	r31, r30
    30aa:	9c 01       	movw	r18, r24
    30ac:	4e 2f       	mov	r20, r30
    30ae:	5e 2f       	mov	r21, r30
    30b0:	6e 2f       	mov	r22, r30
    30b2:	7e 2f       	mov	r23, r30
    30b4:	8e 2f       	mov	r24, r30
    30b6:	9e 2f       	mov	r25, r30
    30b8:	8e 01       	movw	r16, r28
    30ba:	0f 5f       	subi	r16, 0xFF	; 255
    30bc:	1f 4f       	sbci	r17, 0xFF	; 255
    30be:	e0 e1       	ldi	r30, 0x10	; 16
    30c0:	ee 2e       	mov	r14, r30
    30c2:	f1 2c       	mov	r15, r1
    30c4:	f6 01       	movw	r30, r12
    30c6:	09 95       	icall
    30c8:	88 23       	and	r24, r24
    30ca:	09 f4       	brne	.+2      	; 0x30ce <partition_open+0x94>
    30cc:	71 c0       	rjmp	.+226    	; 0x31b0 <partition_open+0x176>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	88 23       	and	r24, r24
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <partition_open+0x9c>
    30d4:	6d c0       	rjmp	.+218    	; 0x31b0 <partition_open+0x176>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    30d6:	80 91 d0 01 	lds	r24, 0x01D0
    30da:	88 23       	and	r24, r24
    30dc:	09 f0       	breq	.+2      	; 0x30e0 <partition_open+0xa6>
    30de:	68 c0       	rjmp	.+208    	; 0x31b0 <partition_open+0x176>
    30e0:	80 c0       	rjmp	.+256    	; 0x31e2 <partition_open+0x1a8>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    30e2:	8d 81       	ldd	r24, Y+5	; 0x05
    30e4:	80 93 d0 01 	sts	0x01D0, r24
        new_partition->offset = ((uint32_t) buffer[8]) |
    30e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e0       	ldi	r20, 0x00	; 0
    30ee:	50 e0       	ldi	r21, 0x00	; 0
    30f0:	54 2f       	mov	r21, r20
    30f2:	43 2f       	mov	r20, r19
    30f4:	32 2f       	mov	r19, r18
    30f6:	22 27       	eor	r18, r18
    30f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	a0 e0       	ldi	r26, 0x00	; 0
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	dc 01       	movw	r26, r24
    3102:	99 27       	eor	r25, r25
    3104:	88 27       	eor	r24, r24
    3106:	28 2b       	or	r18, r24
    3108:	39 2b       	or	r19, r25
    310a:	4a 2b       	or	r20, r26
    310c:	5b 2b       	or	r21, r27
    310e:	89 85       	ldd	r24, Y+9	; 0x09
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	a0 e0       	ldi	r26, 0x00	; 0
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	28 2b       	or	r18, r24
    3118:	39 2b       	or	r19, r25
    311a:	4a 2b       	or	r20, r26
    311c:	5b 2b       	or	r21, r27
    311e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	a0 e0       	ldi	r26, 0x00	; 0
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	b8 2f       	mov	r27, r24
    3128:	aa 27       	eor	r26, r26
    312a:	99 27       	eor	r25, r25
    312c:	88 27       	eor	r24, r24
    312e:	28 2b       	or	r18, r24
    3130:	39 2b       	or	r19, r25
    3132:	4a 2b       	or	r20, r26
    3134:	5b 2b       	or	r21, r27
    3136:	20 93 d1 01 	sts	0x01D1, r18
    313a:	30 93 d2 01 	sts	0x01D2, r19
    313e:	40 93 d3 01 	sts	0x01D3, r20
    3142:	50 93 d4 01 	sts	0x01D4, r21
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    3146:	2e 85       	ldd	r18, Y+14	; 0x0e
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	54 2f       	mov	r21, r20
    3150:	43 2f       	mov	r20, r19
    3152:	32 2f       	mov	r19, r18
    3154:	22 27       	eor	r18, r18
    3156:	8f 85       	ldd	r24, Y+15	; 0x0f
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	a0 e0       	ldi	r26, 0x00	; 0
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	dc 01       	movw	r26, r24
    3160:	99 27       	eor	r25, r25
    3162:	88 27       	eor	r24, r24
    3164:	28 2b       	or	r18, r24
    3166:	39 2b       	or	r19, r25
    3168:	4a 2b       	or	r20, r26
    316a:	5b 2b       	or	r21, r27
    316c:	8d 85       	ldd	r24, Y+13	; 0x0d
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	a0 e0       	ldi	r26, 0x00	; 0
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	28 2b       	or	r18, r24
    3176:	39 2b       	or	r19, r25
    3178:	4a 2b       	or	r20, r26
    317a:	5b 2b       	or	r21, r27
    317c:	88 89       	ldd	r24, Y+16	; 0x10
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	a0 e0       	ldi	r26, 0x00	; 0
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	b8 2f       	mov	r27, r24
    3186:	aa 27       	eor	r26, r26
    3188:	99 27       	eor	r25, r25
    318a:	88 27       	eor	r24, r24
    318c:	28 2b       	or	r18, r24
    318e:	39 2b       	or	r19, r25
    3190:	4a 2b       	or	r20, r26
    3192:	5b 2b       	or	r21, r27
    3194:	20 93 d5 01 	sts	0x01D5, r18
    3198:	30 93 d6 01 	sts	0x01D6, r19
    319c:	40 93 d7 01 	sts	0x01D7, r20
    31a0:	50 93 d8 01 	sts	0x01D8, r21
    31a4:	03 c0       	rjmp	.+6      	; 0x31ac <partition_open+0x172>
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
    31a6:	8f ef       	ldi	r24, 0xFF	; 255
    31a8:	80 93 d0 01 	sts	0x01D0, r24
    31ac:	9f 01       	movw	r18, r30
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <partition_open+0x17a>
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    }

    return new_partition;
}
    31b4:	c9 01       	movw	r24, r18
    31b6:	60 96       	adiw	r28, 0x10	; 16
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	1f 91       	pop	r17
    31c8:	0f 91       	pop	r16
    31ca:	ff 90       	pop	r15
    31cc:	ef 90       	pop	r14
    31ce:	df 90       	pop	r13
    31d0:	cf 90       	pop	r12
    31d2:	bf 90       	pop	r11
    31d4:	9f 90       	pop	r9
    31d6:	8f 90       	pop	r8
    31d8:	7f 90       	pop	r7
    31da:	6f 90       	pop	r6
    31dc:	5f 90       	pop	r5
    31de:	4f 90       	pop	r4
    31e0:	08 95       	ret
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    31e2:	e8 ec       	ldi	r30, 0xC8	; 200
    31e4:	f1 e0       	ldi	r31, 0x01	; 1
    31e6:	81 e1       	ldi	r24, 0x11	; 17
    31e8:	df 01       	movw	r26, r30
    31ea:	1d 92       	st	X+, r1
    31ec:	8a 95       	dec	r24
    31ee:	e9 f7       	brne	.-6      	; 0x31ea <partition_open+0x1b0>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    31f0:	d0 92 c9 01 	sts	0x01C9, r13
    31f4:	c0 92 c8 01 	sts	0x01C8, r12
    new_partition->device_read_interval = device_read_interval;
    31f8:	90 92 cb 01 	sts	0x01CB, r9
    31fc:	80 92 ca 01 	sts	0x01CA, r8
    new_partition->device_write = device_write;
    3200:	70 92 cd 01 	sts	0x01CD, r7
    3204:	60 92 cc 01 	sts	0x01CC, r6
    new_partition->device_write_interval = device_write_interval;
    3208:	50 92 cf 01 	sts	0x01CF, r5
    320c:	40 92 ce 01 	sts	0x01CE, r4

    if(index >= 0)
    3210:	b7 fe       	sbrs	r11, 7
    3212:	67 cf       	rjmp	.-306    	; 0x30e2 <partition_open+0xa8>
    3214:	c8 cf       	rjmp	.-112    	; 0x31a6 <partition_open+0x16c>

00003216 <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
}
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	08 95       	ret

0000321a <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	08 95       	ret

0000321e <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    321e:	28 2f       	mov	r18, r24
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3220:	8f ef       	ldi	r24, 0xFF	; 255
    3222:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3224:	0d b4       	in	r0, 0x2d	; 45
    3226:	07 fe       	sbrs	r0, 7
    3228:	fd cf       	rjmp	.-6      	; 0x3224 <sd_raw_send_command+0x6>
    SPSR &= ~(1 << SPIF);
    322a:	8d b5       	in	r24, 0x2d	; 45
    322c:	8f 77       	andi	r24, 0x7F	; 127
    322e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3230:	8e b5       	in	r24, 0x2e	; 46

    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    3232:	82 2f       	mov	r24, r18
    3234:	80 64       	ori	r24, 0x40	; 64
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3236:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3238:	0d b4       	in	r0, 0x2d	; 45
    323a:	07 fe       	sbrs	r0, 7
    323c:	fd cf       	rjmp	.-6      	; 0x3238 <sd_raw_send_command+0x1a>
    SPSR &= ~(1 << SPIF);
    323e:	8d b5       	in	r24, 0x2d	; 45
    3240:	8f 77       	andi	r24, 0x7F	; 127
    3242:	8d bd       	out	0x2d, r24	; 45
    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    3244:	87 2f       	mov	r24, r23
    3246:	99 27       	eor	r25, r25
    3248:	aa 27       	eor	r26, r26
    324a:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    324c:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    324e:	0d b4       	in	r0, 0x2d	; 45
    3250:	07 fe       	sbrs	r0, 7
    3252:	fd cf       	rjmp	.-6      	; 0x324e <sd_raw_send_command+0x30>
    SPSR &= ~(1 << SPIF);
    3254:	8d b5       	in	r24, 0x2d	; 45
    3256:	8f 77       	andi	r24, 0x7F	; 127
    3258:	8d bd       	out	0x2d, r24	; 45
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    325a:	cb 01       	movw	r24, r22
    325c:	aa 27       	eor	r26, r26
    325e:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3260:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3262:	0d b4       	in	r0, 0x2d	; 45
    3264:	07 fe       	sbrs	r0, 7
    3266:	fd cf       	rjmp	.-6      	; 0x3262 <sd_raw_send_command+0x44>
    SPSR &= ~(1 << SPIF);
    3268:	8d b5       	in	r24, 0x2d	; 45
    326a:	8f 77       	andi	r24, 0x7F	; 127
    326c:	8d bd       	out	0x2d, r24	; 45

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    326e:	bb 27       	eor	r27, r27
    3270:	a7 2f       	mov	r26, r23
    3272:	96 2f       	mov	r25, r22
    3274:	85 2f       	mov	r24, r21
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3276:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3278:	0d b4       	in	r0, 0x2d	; 45
    327a:	07 fe       	sbrs	r0, 7
    327c:	fd cf       	rjmp	.-6      	; 0x3278 <sd_raw_send_command+0x5a>
    SPSR &= ~(1 << SPIF);
    327e:	8d b5       	in	r24, 0x2d	; 45
    3280:	8f 77       	andi	r24, 0x7F	; 127
    3282:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3284:	4e bd       	out	0x2e, r20	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    3286:	0d b4       	in	r0, 0x2d	; 45
    3288:	07 fe       	sbrs	r0, 7
    328a:	fd cf       	rjmp	.-6      	; 0x3286 <sd_raw_send_command+0x68>
    SPSR &= ~(1 << SPIF);
    328c:	8d b5       	in	r24, 0x2d	; 45
    328e:	8f 77       	andi	r24, 0x7F	; 127
    3290:	8d bd       	out	0x2d, r24	; 45
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
    3292:	22 23       	and	r18, r18
    3294:	19 f0       	breq	.+6      	; 0x329c <sd_raw_send_command+0x7e>
    3296:	28 30       	cpi	r18, 0x08	; 8
    3298:	69 f4       	brne	.+26     	; 0x32b4 <sd_raw_send_command+0x96>
    329a:	06 c0       	rjmp	.+12     	; 0x32a8 <sd_raw_send_command+0x8a>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    329c:	85 e9       	ldi	r24, 0x95	; 149
    329e:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    32a0:	0d b4       	in	r0, 0x2d	; 45
    32a2:	07 fe       	sbrs	r0, 7
    32a4:	fd cf       	rjmp	.-6      	; 0x32a0 <sd_raw_send_command+0x82>
    32a6:	0b c0       	rjmp	.+22     	; 0x32be <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    32a8:	87 e8       	ldi	r24, 0x87	; 135
    32aa:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    32ac:	0d b4       	in	r0, 0x2d	; 45
    32ae:	07 fe       	sbrs	r0, 7
    32b0:	fd cf       	rjmp	.-6      	; 0x32ac <sd_raw_send_command+0x8e>
    32b2:	05 c0       	rjmp	.+10     	; 0x32be <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    32b4:	8f ef       	ldi	r24, 0xFF	; 255
    32b6:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    32b8:	0d b4       	in	r0, 0x2d	; 45
    32ba:	07 fe       	sbrs	r0, 7
    32bc:	fd cf       	rjmp	.-6      	; 0x32b8 <sd_raw_send_command+0x9a>
    SPSR &= ~(1 << SPIF);
    32be:	8d b5       	in	r24, 0x2d	; 45
    32c0:	8f 77       	andi	r24, 0x7F	; 127
    32c2:	8d bd       	out	0x2d, r24	; 45
    32c4:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    32c6:	2f ef       	ldi	r18, 0xFF	; 255
    32c8:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    32ca:	0d b4       	in	r0, 0x2d	; 45
    32cc:	07 fe       	sbrs	r0, 7
    32ce:	fd cf       	rjmp	.-6      	; 0x32ca <sd_raw_send_command+0xac>
    SPSR &= ~(1 << SPIF);
    32d0:	8d b5       	in	r24, 0x2d	; 45
    32d2:	8f 77       	andi	r24, 0x7F	; 127
    32d4:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    32d6:	8e b5       	in	r24, 0x2e	; 46
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
        if(response != 0xff)
    32d8:	8f 3f       	cpi	r24, 0xFF	; 255
    32da:	19 f4       	brne	.+6      	; 0x32e2 <sd_raw_send_command+0xc4>
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    32dc:	9f 5f       	subi	r25, 0xFF	; 255
    32de:	9a 30       	cpi	r25, 0x0A	; 10
    32e0:	99 f7       	brne	.-26     	; 0x32c8 <sd_raw_send_command+0xaa>
        if(response != 0xff)
            break;
    }

    return response;
}
    32e2:	08 95       	ret

000032e4 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    32e4:	8f 92       	push	r8
    32e6:	9f 92       	push	r9
    32e8:	af 92       	push	r10
    32ea:	bf 92       	push	r11
    32ec:	cf 92       	push	r12
    32ee:	df 92       	push	r13
    32f0:	ef 92       	push	r14
    32f2:	ff 92       	push	r15
    32f4:	0f 93       	push	r16
    32f6:	1f 93       	push	r17
    32f8:	cf 93       	push	r28
    32fa:	df 93       	push	r29
    32fc:	ec 01       	movw	r28, r24
    if(!info || !sd_raw_available())
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	91 f0       	breq	.+36     	; 0x3326 <sd_raw_get_info+0x42>
        return 0;

    memset(info, 0, sizeof(*info));
    3302:	8d e1       	ldi	r24, 0x1D	; 29
    3304:	fe 01       	movw	r30, r28
    3306:	11 92       	st	Z+, r1
    3308:	8a 95       	dec	r24
    330a:	e9 f7       	brne	.-6      	; 0x3306 <sd_raw_get_info+0x22>

    select_card();
    330c:	29 9a       	sbi	0x05, 1	; 5
    330e:	2c 98       	cbi	0x05, 4	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    3310:	8a e0       	ldi	r24, 0x0A	; 10
    3312:	40 e0       	ldi	r20, 0x00	; 0
    3314:	50 e0       	ldi	r21, 0x00	; 0
    3316:	60 e0       	ldi	r22, 0x00	; 0
    3318:	70 e0       	ldi	r23, 0x00	; 0
    331a:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
    331e:	88 23       	and	r24, r24
    3320:	21 f0       	breq	.+8      	; 0x332a <sd_raw_get_info+0x46>
    {
        unselect_card();
    3322:	29 98       	cbi	0x05, 1	; 5
    3324:	2c 9a       	sbi	0x05, 4	; 5
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	22 c1       	rjmp	.+580    	; 0x356e <sd_raw_get_info+0x28a>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    332a:	9f ef       	ldi	r25, 0xFF	; 255
    332c:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    332e:	0d b4       	in	r0, 0x2d	; 45
    3330:	07 fe       	sbrs	r0, 7
    3332:	fd cf       	rjmp	.-6      	; 0x332e <sd_raw_get_info+0x4a>
    SPSR &= ~(1 << SPIF);
    3334:	8d b5       	in	r24, 0x2d	; 45
    3336:	8f 77       	andi	r24, 0x7F	; 127
    3338:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    333a:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    333c:	8e 3f       	cpi	r24, 0xFE	; 254
    333e:	b1 f7       	brne	.-20     	; 0x332c <sd_raw_get_info+0x48>
    3340:	1c 2f       	mov	r17, r28
    3342:	ce 01       	movw	r24, r28
    3344:	fc 01       	movw	r30, r24
    3346:	60 e6       	ldi	r22, 0x60	; 96
    3348:	70 e0       	ldi	r23, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    334a:	0f ef       	ldi	r16, 0xFF	; 255
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    334c:	9e 2f       	mov	r25, r30
    334e:	91 1b       	sub	r25, r17
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3350:	0e bd       	out	0x2e, r16	; 46
    while(!(SPSR & (1 << SPIF)));
    3352:	0d b4       	in	r0, 0x2d	; 45
    3354:	07 fe       	sbrs	r0, 7
    3356:	fd cf       	rjmp	.-6      	; 0x3352 <sd_raw_get_info+0x6e>
    SPSR &= ~(1 << SPIF);
    3358:	8d b5       	in	r24, 0x2d	; 45
    335a:	8f 77       	andi	r24, 0x7F	; 127
    335c:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    335e:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        switch(i)
    3360:	98 30       	cpi	r25, 0x08	; 8
    3362:	28 f4       	brcc	.+10     	; 0x336e <sd_raw_get_info+0x8a>
    3364:	93 30       	cpi	r25, 0x03	; 3
    3366:	88 f4       	brcc	.+34     	; 0x338a <sd_raw_get_info+0xa6>
    3368:	99 23       	and	r25, r25
    336a:	59 f0       	breq	.+22     	; 0x3382 <sd_raw_get_info+0x9e>
    336c:	0c c0       	rjmp	.+24     	; 0x3386 <sd_raw_get_info+0xa2>
    336e:	9d 30       	cpi	r25, 0x0D	; 13
    3370:	18 f4       	brcc	.+6      	; 0x3378 <sd_raw_get_info+0x94>
    3372:	99 30       	cpi	r25, 0x09	; 9
    3374:	70 f4       	brcc	.+28     	; 0x3392 <sd_raw_get_info+0xae>
    3376:	0b c0       	rjmp	.+22     	; 0x338e <sd_raw_get_info+0xaa>
    3378:	9d 30       	cpi	r25, 0x0D	; 13
    337a:	19 f1       	breq	.+70     	; 0x33c2 <sd_raw_get_info+0xde>
    337c:	9e 30       	cpi	r25, 0x0E	; 14
    337e:	69 f5       	brne	.+90     	; 0x33da <sd_raw_get_info+0xf6>
    3380:	24 c0       	rjmp	.+72     	; 0x33ca <sd_raw_get_info+0xe6>
        {
            case 0:
                info->manufacturer = b;
    3382:	28 83       	st	Y, r18
    3384:	2a c0       	rjmp	.+84     	; 0x33da <sd_raw_get_info+0xf6>
                break;
            case 1:
            case 2:
                info->oem[i - 1] = b;
    3386:	20 83       	st	Z, r18
    3388:	28 c0       	rjmp	.+80     	; 0x33da <sd_raw_get_info+0xf6>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    338a:	21 83       	std	Z+1, r18	; 0x01
    338c:	26 c0       	rjmp	.+76     	; 0x33da <sd_raw_get_info+0xf6>
                break;
            case 8:
                info->revision = b;
    338e:	2a 87       	std	Y+10, r18	; 0x0a
    3390:	24 c0       	rjmp	.+72     	; 0x33da <sd_raw_get_info+0xf6>
                break;
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e0       	ldi	r20, 0x00	; 0
    3396:	50 e0       	ldi	r21, 0x00	; 0
    3398:	06 2e       	mov	r0, r22
    339a:	04 c0       	rjmp	.+8      	; 0x33a4 <sd_raw_get_info+0xc0>
    339c:	22 0f       	add	r18, r18
    339e:	33 1f       	adc	r19, r19
    33a0:	44 1f       	adc	r20, r20
    33a2:	55 1f       	adc	r21, r21
    33a4:	0a 94       	dec	r0
    33a6:	d2 f7       	brpl	.-12     	; 0x339c <sd_raw_get_info+0xb8>
    33a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    33aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    33ac:	ad 85       	ldd	r26, Y+13	; 0x0d
    33ae:	be 85       	ldd	r27, Y+14	; 0x0e
    33b0:	82 2b       	or	r24, r18
    33b2:	93 2b       	or	r25, r19
    33b4:	a4 2b       	or	r26, r20
    33b6:	b5 2b       	or	r27, r21
    33b8:	8b 87       	std	Y+11, r24	; 0x0b
    33ba:	9c 87       	std	Y+12, r25	; 0x0c
    33bc:	ad 87       	std	Y+13, r26	; 0x0d
    33be:	be 87       	std	Y+14, r27	; 0x0e
    33c0:	0c c0       	rjmp	.+24     	; 0x33da <sd_raw_get_info+0xf6>
                break;
            case 13:
                info->manufacturing_year = b << 4;
    33c2:	22 95       	swap	r18
    33c4:	20 7f       	andi	r18, 0xF0	; 240
    33c6:	2f 87       	std	Y+15, r18	; 0x0f
    33c8:	08 c0       	rjmp	.+16     	; 0x33da <sd_raw_get_info+0xf6>
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
    33ca:	92 2f       	mov	r25, r18
    33cc:	92 95       	swap	r25
    33ce:	9f 70       	andi	r25, 0x0F	; 15
    33d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33d2:	89 2b       	or	r24, r25
    33d4:	8f 87       	std	Y+15, r24	; 0x0f
                info->manufacturing_month = b & 0x0f;
    33d6:	2f 70       	andi	r18, 0x0F	; 15
    33d8:	28 8b       	std	Y+16, r18	; 0x10
    33da:	31 96       	adiw	r30, 0x01	; 1
    33dc:	68 50       	subi	r22, 0x08	; 8
    33de:	70 40       	sbci	r23, 0x00	; 0
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    33e0:	8f ef       	ldi	r24, 0xFF	; 255
    33e2:	60 3d       	cpi	r22, 0xD0	; 208
    33e4:	78 07       	cpc	r23, r24
    33e6:	09 f0       	breq	.+2      	; 0x33ea <sd_raw_get_info+0x106>
    33e8:	b1 cf       	rjmp	.-158    	; 0x334c <sd_raw_get_info+0x68>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    33ea:	89 e0       	ldi	r24, 0x09	; 9
    33ec:	40 e0       	ldi	r20, 0x00	; 0
    33ee:	50 e0       	ldi	r21, 0x00	; 0
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	70 e0       	ldi	r23, 0x00	; 0
    33f4:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
    33f8:	88 23       	and	r24, r24
    33fa:	09 f0       	breq	.+2      	; 0x33fe <sd_raw_get_info+0x11a>
    33fc:	92 cf       	rjmp	.-220    	; 0x3322 <sd_raw_get_info+0x3e>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    33fe:	9f ef       	ldi	r25, 0xFF	; 255
    3400:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    3402:	0d b4       	in	r0, 0x2d	; 45
    3404:	07 fe       	sbrs	r0, 7
    3406:	fd cf       	rjmp	.-6      	; 0x3402 <sd_raw_get_info+0x11e>
    SPSR &= ~(1 << SPIF);
    3408:	8d b5       	in	r24, 0x2d	; 45
    340a:	8f 77       	andi	r24, 0x7F	; 127
    340c:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    340e:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    3410:	8e 3f       	cpi	r24, 0xFE	; 254
    3412:	b1 f7       	brne	.-20     	; 0x3400 <sd_raw_get_info+0x11c>
            info->format = (b & 0x0c) >> 2;
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    3414:	80 91 e2 03 	lds	r24, 0x03E2
    3418:	c8 2e       	mov	r12, r24
    341a:	dd 24       	eor	r13, r13
    341c:	e2 e0       	ldi	r30, 0x02	; 2
    341e:	ce 22       	and	r12, r30
    3420:	dd 24       	eor	r13, r13
    3422:	99 24       	eor	r9, r9
    3424:	bb 24       	eor	r11, r11
    3426:	ee 24       	eor	r14, r14
    3428:	ff 24       	eor	r15, r15
    342a:	10 e0       	ldi	r17, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    342c:	88 24       	eor	r8, r8
    342e:	8a 94       	dec	r8
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    3430:	aa 24       	eor	r10, r10
    3432:	a3 94       	inc	r10
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3434:	8e bc       	out	0x2e, r8	; 46
    while(!(SPSR & (1 << SPIF)));
    3436:	0d b4       	in	r0, 0x2d	; 45
    3438:	07 fe       	sbrs	r0, 7
    343a:	fd cf       	rjmp	.-6      	; 0x3436 <sd_raw_get_info+0x152>
    SPSR &= ~(1 << SPIF);
    343c:	8d b5       	in	r24, 0x2d	; 45
    343e:	8f 77       	andi	r24, 0x7F	; 127
    3440:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3442:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        if(i == 14)
    3444:	1e 30       	cpi	r17, 0x0E	; 14
    3446:	81 f4       	brne	.+32     	; 0x3468 <sd_raw_get_info+0x184>
        {
            if(b & 0x40)
    3448:	82 2f       	mov	r24, r18
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	26 fd       	sbrc	r18, 6
                info->flag_copy = 1;
    344e:	a9 8e       	std	Y+25, r10	; 0x19
            if(b & 0x20)
    3450:	85 fd       	sbrc	r24, 5
                info->flag_write_protect = 1;
    3452:	aa 8e       	std	Y+26, r10	; 0x1a
            if(b & 0x10)
    3454:	84 fd       	sbrc	r24, 4
                info->flag_write_protect_temp = 1;
    3456:	ab 8e       	std	Y+27, r10	; 0x1b
            info->format = (b & 0x0c) >> 2;
    3458:	8c 70       	andi	r24, 0x0C	; 12
    345a:	90 70       	andi	r25, 0x00	; 0
    345c:	95 95       	asr	r25
    345e:	87 95       	ror	r24
    3460:	95 95       	asr	r25
    3462:	87 95       	ror	r24
    3464:	8c 8f       	std	Y+28, r24	; 0x1c
    3466:	7c c0       	rjmp	.+248    	; 0x3560 <sd_raw_get_info+0x27c>
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    3468:	c1 14       	cp	r12, r1
    346a:	d1 04       	cpc	r13, r1
    346c:	39 f1       	breq	.+78     	; 0x34bc <sd_raw_get_info+0x1d8>
            {
                switch(i)
    346e:	17 30       	cpi	r17, 0x07	; 7
    3470:	29 f0       	breq	.+10     	; 0x347c <sd_raw_get_info+0x198>
    3472:	17 30       	cpi	r17, 0x07	; 7
    3474:	50 f0       	brcs	.+20     	; 0x348a <sd_raw_get_info+0x1a6>
    3476:	1a 30       	cpi	r17, 0x0A	; 10
    3478:	40 f4       	brcc	.+16     	; 0x348a <sd_raw_get_info+0x1a6>
    347a:	01 c0       	rjmp	.+2      	; 0x347e <sd_raw_get_info+0x19a>
                {
                    case 7:
                        b &= 0x3f;
    347c:	2f 73       	andi	r18, 0x3F	; 63
                    case 8:
                    case 9:
                        csd_c_size <<= 8;
    347e:	9e 2d       	mov	r25, r14
    3480:	88 27       	eor	r24, r24
                        csd_c_size |= b;
    3482:	e2 2e       	mov	r14, r18
    3484:	ff 24       	eor	r15, r15
    3486:	e8 2a       	or	r14, r24
    3488:	f9 2a       	or	r15, r25
                        break;
                }
                if(i == 9)
    348a:	19 30       	cpi	r17, 0x09	; 9
    348c:	09 f0       	breq	.+2      	; 0x3490 <sd_raw_get_info+0x1ac>
    348e:	68 c0       	rjmp	.+208    	; 0x3560 <sd_raw_get_info+0x27c>
                {
                    ++csd_c_size;
    3490:	08 94       	sec
    3492:	e1 1c       	adc	r14, r1
    3494:	f1 1c       	adc	r15, r1
                    info->capacity = (offset_t) csd_c_size * 512 * 1024;
    3496:	97 01       	movw	r18, r14
    3498:	40 e0       	ldi	r20, 0x00	; 0
    349a:	50 e0       	ldi	r21, 0x00	; 0
    349c:	60 e0       	ldi	r22, 0x00	; 0
    349e:	70 e0       	ldi	r23, 0x00	; 0
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	03 e1       	ldi	r16, 0x13	; 19
    34a6:	0e 94 16 47 	call	0x8e2c	; 0x8e2c <__ashldi3>
    34aa:	29 8b       	std	Y+17, r18	; 0x11
    34ac:	3a 8b       	std	Y+18, r19	; 0x12
    34ae:	4b 8b       	std	Y+19, r20	; 0x13
    34b0:	5c 8b       	std	Y+20, r21	; 0x14
    34b2:	6d 8b       	std	Y+21, r22	; 0x15
    34b4:	7e 8b       	std	Y+22, r23	; 0x16
    34b6:	8f 8b       	std	Y+23, r24	; 0x17
    34b8:	98 8f       	std	Y+24, r25	; 0x18
    34ba:	52 c0       	rjmp	.+164    	; 0x3560 <sd_raw_get_info+0x27c>
                }
            }
            else
#endif
            {
                switch(i)
    34bc:	17 30       	cpi	r17, 0x07	; 7
    34be:	d9 f0       	breq	.+54     	; 0x34f6 <sd_raw_get_info+0x212>
    34c0:	18 30       	cpi	r17, 0x08	; 8
    34c2:	30 f4       	brcc	.+12     	; 0x34d0 <sd_raw_get_info+0x1ec>
    34c4:	15 30       	cpi	r17, 0x05	; 5
    34c6:	61 f0       	breq	.+24     	; 0x34e0 <sd_raw_get_info+0x1fc>
    34c8:	16 30       	cpi	r17, 0x06	; 6
    34ca:	09 f0       	breq	.+2      	; 0x34ce <sd_raw_get_info+0x1ea>
    34cc:	49 c0       	rjmp	.+146    	; 0x3560 <sd_raw_get_info+0x27c>
    34ce:	0c c0       	rjmp	.+24     	; 0x34e8 <sd_raw_get_info+0x204>
    34d0:	19 30       	cpi	r17, 0x09	; 9
    34d2:	31 f1       	breq	.+76     	; 0x3520 <sd_raw_get_info+0x23c>
    34d4:	19 30       	cpi	r17, 0x09	; 9
    34d6:	c0 f0       	brcs	.+48     	; 0x3508 <sd_raw_get_info+0x224>
    34d8:	1a 30       	cpi	r17, 0x0A	; 10
    34da:	09 f0       	breq	.+2      	; 0x34de <sd_raw_get_info+0x1fa>
    34dc:	41 c0       	rjmp	.+130    	; 0x3560 <sd_raw_get_info+0x27c>
    34de:	25 c0       	rjmp	.+74     	; 0x352a <sd_raw_get_info+0x246>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    34e0:	7f e0       	ldi	r23, 0x0F	; 15
    34e2:	97 2e       	mov	r9, r23
    34e4:	92 22       	and	r9, r18
    34e6:	3c c0       	rjmp	.+120    	; 0x3560 <sd_raw_get_info+0x27c>
                        break;
                    case 6:
                        csd_c_size = b & 0x03;
    34e8:	82 2f       	mov	r24, r18
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	83 70       	andi	r24, 0x03	; 3
    34ee:	90 70       	andi	r25, 0x00	; 0
                        csd_c_size <<= 8;
    34f0:	f8 2e       	mov	r15, r24
    34f2:	ee 24       	eor	r14, r14
    34f4:	35 c0       	rjmp	.+106    	; 0x3560 <sd_raw_get_info+0x27c>
                        break;
                    case 7:
                        csd_c_size |= b;
    34f6:	82 2f       	mov	r24, r18
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	e8 2a       	or	r14, r24
    34fc:	f9 2a       	or	r15, r25
                        csd_c_size <<= 2;
    34fe:	ee 0c       	add	r14, r14
    3500:	ff 1c       	adc	r15, r15
    3502:	ee 0c       	add	r14, r14
    3504:	ff 1c       	adc	r15, r15
    3506:	2c c0       	rjmp	.+88     	; 0x3560 <sd_raw_get_info+0x27c>
                        break;
                    case 8:
                        csd_c_size |= b >> 6;
    3508:	22 95       	swap	r18
    350a:	26 95       	lsr	r18
    350c:	26 95       	lsr	r18
    350e:	23 70       	andi	r18, 0x03	; 3
    3510:	82 2f       	mov	r24, r18
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	e8 2a       	or	r14, r24
    3516:	f9 2a       	or	r15, r25
                        ++csd_c_size;
    3518:	08 94       	sec
    351a:	e1 1c       	adc	r14, r1
    351c:	f1 1c       	adc	r15, r1
    351e:	20 c0       	rjmp	.+64     	; 0x3560 <sd_raw_get_info+0x27c>
                        break;
                    case 9:
                        csd_c_size_mult = b & 0x03;
    3520:	43 e0       	ldi	r20, 0x03	; 3
    3522:	b4 2e       	mov	r11, r20
    3524:	b2 22       	and	r11, r18
                        csd_c_size_mult <<= 1;
    3526:	bb 0c       	add	r11, r11
    3528:	1b c0       	rjmp	.+54     	; 0x3560 <sd_raw_get_info+0x27c>
                        break;
                    case 10:
                        csd_c_size_mult |= b >> 7;
    352a:	22 1f       	adc	r18, r18
    352c:	22 27       	eor	r18, r18
    352e:	22 1f       	adc	r18, r18
    3530:	b2 2a       	or	r11, r18

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    3532:	97 01       	movw	r18, r14
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	e9 2d       	mov	r30, r9
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	32 96       	adiw	r30, 0x02	; 2
    353e:	eb 0d       	add	r30, r11
    3540:	f1 1d       	adc	r31, r1
    3542:	04 c0       	rjmp	.+8      	; 0x354c <sd_raw_get_info+0x268>
    3544:	22 0f       	add	r18, r18
    3546:	33 1f       	adc	r19, r19
    3548:	44 1f       	adc	r20, r20
    354a:	55 1f       	adc	r21, r21
    354c:	ea 95       	dec	r30
    354e:	d2 f7       	brpl	.-12     	; 0x3544 <sd_raw_get_info+0x260>
    3550:	29 8b       	std	Y+17, r18	; 0x11
    3552:	3a 8b       	std	Y+18, r19	; 0x12
    3554:	4b 8b       	std	Y+19, r20	; 0x13
    3556:	5c 8b       	std	Y+20, r21	; 0x14
    3558:	1d 8a       	std	Y+21, r1	; 0x15
    355a:	1e 8a       	std	Y+22, r1	; 0x16
    355c:	1f 8a       	std	Y+23, r1	; 0x17
    355e:	18 8e       	std	Y+24, r1	; 0x18
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    3560:	1f 5f       	subi	r17, 0xFF	; 255
    3562:	12 31       	cpi	r17, 0x12	; 18
    3564:	09 f0       	breq	.+2      	; 0x3568 <sd_raw_get_info+0x284>
    3566:	66 cf       	rjmp	.-308    	; 0x3434 <sd_raw_get_info+0x150>
                }
            }
        }
    }

    unselect_card();
    3568:	29 98       	cbi	0x05, 1	; 5
    356a:	2c 9a       	sbi	0x05, 4	; 5
    356c:	81 e0       	ldi	r24, 0x01	; 1

    return 1;
}
    356e:	df 91       	pop	r29
    3570:	cf 91       	pop	r28
    3572:	1f 91       	pop	r17
    3574:	0f 91       	pop	r16
    3576:	ff 90       	pop	r15
    3578:	ef 90       	pop	r14
    357a:	df 90       	pop	r13
    357c:	cf 90       	pop	r12
    357e:	bf 90       	pop	r11
    3580:	af 90       	pop	r10
    3582:	9f 90       	pop	r9
    3584:	8f 90       	pop	r8
    3586:	08 95       	ret

00003588 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    3588:	2f 92       	push	r2
    358a:	3f 92       	push	r3
    358c:	4f 92       	push	r4
    358e:	5f 92       	push	r5
    3590:	6f 92       	push	r6
    3592:	7f 92       	push	r7
    3594:	8f 92       	push	r8
    3596:	9f 92       	push	r9
    3598:	af 92       	push	r10
    359a:	bf 92       	push	r11
    359c:	cf 92       	push	r12
    359e:	df 92       	push	r13
    35a0:	ef 92       	push	r14
    35a2:	ff 92       	push	r15
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	2c 97       	sbiw	r28, 0x0c	; 12
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	cd bf       	out	0x3d, r28	; 61
    35bc:	39 01       	movw	r6, r18
    35be:	4a 01       	movw	r8, r20
    35c0:	5b 01       	movw	r10, r22
    35c2:	6c 01       	movw	r12, r24
    35c4:	1a 83       	std	Y+2, r17	; 0x02
    35c6:	09 83       	std	Y+1, r16	; 0x01
    35c8:	fc 82       	std	Y+4, r15	; 0x04
    35ca:	eb 82       	std	Y+3, r14	; 0x03
    35cc:	93 c1       	rjmp	.+806    	; 0x38f4 <sd_raw_write+0x36c>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    35ce:	bf ef       	ldi	r27, 0xFF	; 255
    35d0:	4b 2e       	mov	r4, r27
    35d2:	b1 e0       	ldi	r27, 0x01	; 1
    35d4:	5b 2e       	mov	r5, r27
    35d6:	46 20       	and	r4, r6
    35d8:	57 20       	and	r5, r7
        block_address = offset - block_offset;
    35da:	92 01       	movw	r18, r4
    35dc:	a6 2d       	mov	r26, r6
    35de:	a4 19       	sub	r26, r4
    35e0:	aa 87       	std	Y+10, r26	; 0x0a
    35e2:	e1 e0       	ldi	r30, 0x01	; 1
    35e4:	6a 16       	cp	r6, r26
    35e6:	08 f0       	brcs	.+2      	; 0x35ea <sd_raw_write+0x62>
    35e8:	e0 e0       	ldi	r30, 0x00	; 0
    35ea:	87 2d       	mov	r24, r7
    35ec:	83 1b       	sub	r24, r19
    35ee:	21 e0       	ldi	r18, 0x01	; 1
    35f0:	78 16       	cp	r7, r24
    35f2:	08 f0       	brcs	.+2      	; 0x35f6 <sd_raw_write+0x6e>
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	b8 2f       	mov	r27, r24
    35f8:	be 1b       	sub	r27, r30
    35fa:	bd 83       	std	Y+5, r27	; 0x05
    35fc:	91 e0       	ldi	r25, 0x01	; 1
    35fe:	8b 17       	cp	r24, r27
    3600:	08 f0       	brcs	.+2      	; 0x3604 <sd_raw_write+0x7c>
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	29 2b       	or	r18, r25
    3606:	e8 2d       	mov	r30, r8
    3608:	e2 1b       	sub	r30, r18
    360a:	ee 83       	std	Y+6, r30	; 0x06
    360c:	31 e0       	ldi	r19, 0x01	; 1
    360e:	8e 16       	cp	r8, r30
    3610:	08 f0       	brcs	.+2      	; 0x3614 <sd_raw_write+0x8c>
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	f9 2d       	mov	r31, r9
    3616:	f3 1b       	sub	r31, r19
    3618:	ff 83       	std	Y+7, r31	; 0x07
    361a:	61 e0       	ldi	r22, 0x01	; 1
    361c:	9f 16       	cp	r9, r31
    361e:	08 f0       	brcs	.+2      	; 0x3622 <sd_raw_write+0x9a>
    3620:	60 e0       	ldi	r22, 0x00	; 0
    3622:	2a 2d       	mov	r18, r10
    3624:	26 1b       	sub	r18, r22
    3626:	28 87       	std	Y+8, r18	; 0x08
    3628:	71 e0       	ldi	r23, 0x01	; 1
    362a:	a2 16       	cp	r10, r18
    362c:	08 f0       	brcs	.+2      	; 0x3630 <sd_raw_write+0xa8>
    362e:	70 e0       	ldi	r23, 0x00	; 0
    3630:	2b 2c       	mov	r2, r11
    3632:	27 1a       	sub	r2, r23
    3634:	91 e0       	ldi	r25, 0x01	; 1
    3636:	b2 14       	cp	r11, r2
    3638:	08 f0       	brcs	.+2      	; 0x363c <sd_raw_write+0xb4>
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	3c 2c       	mov	r3, r12
    363e:	39 1a       	sub	r3, r25
    3640:	91 e0       	ldi	r25, 0x01	; 1
    3642:	c3 14       	cp	r12, r3
    3644:	08 f0       	brcs	.+2      	; 0x3648 <sd_raw_write+0xc0>
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	3d 2d       	mov	r19, r13
    364a:	39 1b       	sub	r19, r25
    364c:	39 87       	std	Y+9, r19	; 0x09
        write_length = 512 - block_offset; /* write up to block border */
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	92 e0       	ldi	r25, 0x02	; 2
    3652:	84 19       	sub	r24, r4
    3654:	95 09       	sbc	r25, r5
    3656:	9c 87       	std	Y+12, r25	; 0x0c
    3658:	8b 87       	std	Y+11, r24	; 0x0b
    365a:	ab 81       	ldd	r26, Y+3	; 0x03
    365c:	bc 81       	ldd	r27, Y+4	; 0x04
    365e:	a8 17       	cp	r26, r24
    3660:	b9 07       	cpc	r27, r25
    3662:	10 f4       	brcc	.+4      	; 0x3668 <sd_raw_write+0xe0>
    3664:	bc 87       	std	Y+12, r27	; 0x0c
    3666:	ab 87       	std	Y+11, r26	; 0x0b
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    3668:	80 91 d9 03 	lds	r24, 0x03D9
    366c:	ba 85       	ldd	r27, Y+10	; 0x0a
    366e:	8b 17       	cp	r24, r27
    3670:	09 f5       	brne	.+66     	; 0x36b4 <sd_raw_write+0x12c>
    3672:	80 91 da 03 	lds	r24, 0x03DA
    3676:	ed 81       	ldd	r30, Y+5	; 0x05
    3678:	8e 17       	cp	r24, r30
    367a:	e1 f4       	brne	.+56     	; 0x36b4 <sd_raw_write+0x12c>
    367c:	80 91 db 03 	lds	r24, 0x03DB
    3680:	fe 81       	ldd	r31, Y+6	; 0x06
    3682:	8f 17       	cp	r24, r31
    3684:	b9 f4       	brne	.+46     	; 0x36b4 <sd_raw_write+0x12c>
    3686:	80 91 dc 03 	lds	r24, 0x03DC
    368a:	2f 81       	ldd	r18, Y+7	; 0x07
    368c:	82 17       	cp	r24, r18
    368e:	91 f4       	brne	.+36     	; 0x36b4 <sd_raw_write+0x12c>
    3690:	80 91 dd 03 	lds	r24, 0x03DD
    3694:	38 85       	ldd	r19, Y+8	; 0x08
    3696:	83 17       	cp	r24, r19
    3698:	69 f4       	brne	.+26     	; 0x36b4 <sd_raw_write+0x12c>
    369a:	80 91 de 03 	lds	r24, 0x03DE
    369e:	82 15       	cp	r24, r2
    36a0:	49 f4       	brne	.+18     	; 0x36b4 <sd_raw_write+0x12c>
    36a2:	80 91 df 03 	lds	r24, 0x03DF
    36a6:	83 15       	cp	r24, r3
    36a8:	29 f4       	brne	.+10     	; 0x36b4 <sd_raw_write+0x12c>
    36aa:	80 91 e0 03 	lds	r24, 0x03E0
    36ae:	99 85       	ldd	r25, Y+9	; 0x09
    36b0:	89 17       	cp	r24, r25
    36b2:	a9 f1       	breq	.+106    	; 0x371e <sd_raw_write+0x196>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    36b4:	0e 94 9b 1c 	call	0x3936	; 0x3936 <sd_raw_sync>
    36b8:	88 23       	and	r24, r24
    36ba:	09 f4       	brne	.+2      	; 0x36be <sd_raw_write+0x136>
    36bc:	22 c1       	rjmp	.+580    	; 0x3902 <sd_raw_write+0x37a>
                return 0;
#endif

            if(block_offset || write_length < 512)
    36be:	41 14       	cp	r4, r1
    36c0:	51 04       	cpc	r5, r1
    36c2:	29 f4       	brne	.+10     	; 0x36ce <sd_raw_write+0x146>
    36c4:	ab 85       	ldd	r26, Y+11	; 0x0b
    36c6:	bc 85       	ldd	r27, Y+12	; 0x0c
    36c8:	a0 50       	subi	r26, 0x00	; 0
    36ca:	b2 40       	sbci	r27, 0x02	; 2
    36cc:	90 f4       	brcc	.+36     	; 0x36f2 <sd_raw_write+0x16a>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    36ce:	2a 85       	ldd	r18, Y+10	; 0x0a
    36d0:	3d 81       	ldd	r19, Y+5	; 0x05
    36d2:	4e 81       	ldd	r20, Y+6	; 0x06
    36d4:	5f 81       	ldd	r21, Y+7	; 0x07
    36d6:	68 85       	ldd	r22, Y+8	; 0x08
    36d8:	72 2d       	mov	r23, r2
    36da:	83 2d       	mov	r24, r3
    36dc:	99 85       	ldd	r25, Y+9	; 0x09
    36de:	09 ed       	ldi	r16, 0xD9	; 217
    36e0:	11 e0       	ldi	r17, 0x01	; 1
    36e2:	e1 2c       	mov	r14, r1
    36e4:	a2 e0       	ldi	r26, 0x02	; 2
    36e6:	fa 2e       	mov	r15, r26
    36e8:	0e 94 c6 1c 	call	0x398c	; 0x398c <sd_raw_read>
    36ec:	88 23       	and	r24, r24
    36ee:	09 f4       	brne	.+2      	; 0x36f2 <sd_raw_write+0x16a>
    36f0:	08 c1       	rjmp	.+528    	; 0x3902 <sd_raw_write+0x37a>
                    return 0;
            }
            raw_block_address = block_address;
    36f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    36f4:	f0 93 d9 03 	sts	0x03D9, r31
    36f8:	2d 81       	ldd	r18, Y+5	; 0x05
    36fa:	20 93 da 03 	sts	0x03DA, r18
    36fe:	3e 81       	ldd	r19, Y+6	; 0x06
    3700:	30 93 db 03 	sts	0x03DB, r19
    3704:	8f 81       	ldd	r24, Y+7	; 0x07
    3706:	80 93 dc 03 	sts	0x03DC, r24
    370a:	98 85       	ldd	r25, Y+8	; 0x08
    370c:	90 93 dd 03 	sts	0x03DD, r25
    3710:	20 92 de 03 	sts	0x03DE, r2
    3714:	30 92 df 03 	sts	0x03DF, r3
    3718:	a9 85       	ldd	r26, Y+9	; 0x09
    371a:	a0 93 e0 03 	sts	0x03E0, r26
        }

        if(buffer != raw_block)
    371e:	e9 81       	ldd	r30, Y+1	; 0x01
    3720:	fa 81       	ldd	r31, Y+2	; 0x02
    3722:	e9 5d       	subi	r30, 0xD9	; 217
    3724:	f1 40       	sbci	r31, 0x01	; 1
    3726:	a1 f0       	breq	.+40     	; 0x3750 <sd_raw_write+0x1c8>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    3728:	92 01       	movw	r18, r4
    372a:	27 52       	subi	r18, 0x27	; 39
    372c:	3e 4f       	sbci	r19, 0xFE	; 254
    372e:	c9 01       	movw	r24, r18
    3730:	69 81       	ldd	r22, Y+1	; 0x01
    3732:	7a 81       	ldd	r23, Y+2	; 0x02
    3734:	4b 85       	ldd	r20, Y+11	; 0x0b
    3736:	5c 85       	ldd	r21, Y+12	; 0x0c
    3738:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    373c:	10 92 e1 03 	sts	0x03E1, r1

            if(length == write_length)
    3740:	8b 81       	ldd	r24, Y+3	; 0x03
    3742:	9c 81       	ldd	r25, Y+4	; 0x04
    3744:	ab 85       	ldd	r26, Y+11	; 0x0b
    3746:	bc 85       	ldd	r27, Y+12	; 0x0c
    3748:	8a 17       	cp	r24, r26
    374a:	9b 07       	cpc	r25, r27
    374c:	09 f4       	brne	.+2      	; 0x3750 <sd_raw_write+0x1c8>
    374e:	d7 c0       	rjmp	.+430    	; 0x38fe <sd_raw_write+0x376>
                return 1;
#endif
        }

        /* address card */
        select_card();
    3750:	29 9a       	sbi	0x05, 1	; 5
    3752:	2c 98       	cbi	0x05, 4	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    3754:	80 91 e2 03 	lds	r24, 0x03E2
    3758:	82 ff       	sbrs	r24, 2
    375a:	0f c0       	rjmp	.+30     	; 0x377a <sd_raw_write+0x1f2>
    375c:	2a 85       	ldd	r18, Y+10	; 0x0a
    375e:	3d 81       	ldd	r19, Y+5	; 0x05
    3760:	4e 81       	ldd	r20, Y+6	; 0x06
    3762:	5f 81       	ldd	r21, Y+7	; 0x07
    3764:	68 85       	ldd	r22, Y+8	; 0x08
    3766:	72 2d       	mov	r23, r2
    3768:	83 2d       	mov	r24, r3
    376a:	99 85       	ldd	r25, Y+9	; 0x09
    376c:	09 e0       	ldi	r16, 0x09	; 9
    376e:	0e 94 97 46 	call	0x8d2e	; 0x8d2e <__lshrdi3>
    3772:	ba 01       	movw	r22, r20
    3774:	a9 01       	movw	r20, r18
    3776:	9b 01       	movw	r18, r22
    3778:	05 c0       	rjmp	.+10     	; 0x3784 <sd_raw_write+0x1fc>
    377a:	8a 85       	ldd	r24, Y+10	; 0x0a
    377c:	9d 81       	ldd	r25, Y+5	; 0x05
    377e:	2e 81       	ldd	r18, Y+6	; 0x06
    3780:	3f 81       	ldd	r19, Y+7	; 0x07
    3782:	ac 01       	movw	r20, r24
    3784:	88 e1       	ldi	r24, 0x18	; 24
    3786:	b9 01       	movw	r22, r18
    3788:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
    378c:	88 23       	and	r24, r24
    378e:	19 f0       	breq	.+6      	; 0x3796 <sd_raw_write+0x20e>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    3790:	29 98       	cbi	0x05, 1	; 5
    3792:	2c 9a       	sbi	0x05, 4	; 5
    3794:	b6 c0       	rjmp	.+364    	; 0x3902 <sd_raw_write+0x37a>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    3796:	be ef       	ldi	r27, 0xFE	; 254
    3798:	be bd       	out	0x2e, r27	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    379a:	0d b4       	in	r0, 0x2d	; 45
    379c:	07 fe       	sbrs	r0, 7
    379e:	fd cf       	rjmp	.-6      	; 0x379a <sd_raw_write+0x212>
    SPSR &= ~(1 << SPIF);
    37a0:	8d b5       	in	r24, 0x2d	; 45
    37a2:	8f 77       	andi	r24, 0x7F	; 127
    37a4:	8d bd       	out	0x2d, r24	; 45
    37a6:	e9 ed       	ldi	r30, 0xD9	; 217
    37a8:	f1 e0       	ldi	r31, 0x01	; 1
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    37aa:	81 91       	ld	r24, Z+
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    37ac:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    37ae:	0d b4       	in	r0, 0x2d	; 45
    37b0:	07 fe       	sbrs	r0, 7
    37b2:	fd cf       	rjmp	.-6      	; 0x37ae <sd_raw_write+0x226>
    SPSR &= ~(1 << SPIF);
    37b4:	8d b5       	in	r24, 0x2d	; 45
    37b6:	8f 77       	andi	r24, 0x7F	; 127
    37b8:	8d bd       	out	0x2d, r24	; 45
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    37ba:	23 e0       	ldi	r18, 0x03	; 3
    37bc:	e9 3d       	cpi	r30, 0xD9	; 217
    37be:	f2 07       	cpc	r31, r18
    37c0:	a1 f7       	brne	.-24     	; 0x37aa <sd_raw_write+0x222>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    37c2:	3f ef       	ldi	r19, 0xFF	; 255
    37c4:	3e bd       	out	0x2e, r19	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    37c6:	0d b4       	in	r0, 0x2d	; 45
    37c8:	07 fe       	sbrs	r0, 7
    37ca:	fd cf       	rjmp	.-6      	; 0x37c6 <sd_raw_write+0x23e>
    SPSR &= ~(1 << SPIF);
    37cc:	8d b5       	in	r24, 0x2d	; 45
    37ce:	8f 77       	andi	r24, 0x7F	; 127
    37d0:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    37d2:	8f ef       	ldi	r24, 0xFF	; 255
    37d4:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    37d6:	0d b4       	in	r0, 0x2d	; 45
    37d8:	07 fe       	sbrs	r0, 7
    37da:	fd cf       	rjmp	.-6      	; 0x37d6 <sd_raw_write+0x24e>
    SPSR &= ~(1 << SPIF);
    37dc:	8d b5       	in	r24, 0x2d	; 45
    37de:	8f 77       	andi	r24, 0x7F	; 127
    37e0:	8d bd       	out	0x2d, r24	; 45
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    37e2:	9f ef       	ldi	r25, 0xFF	; 255
    37e4:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    37e6:	0d b4       	in	r0, 0x2d	; 45
    37e8:	07 fe       	sbrs	r0, 7
    37ea:	fd cf       	rjmp	.-6      	; 0x37e6 <sd_raw_write+0x25e>
    SPSR &= ~(1 << SPIF);
    37ec:	8d b5       	in	r24, 0x2d	; 45
    37ee:	8f 77       	andi	r24, 0x7F	; 127
    37f0:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    37f2:	8e b5       	in	r24, 0x2e	; 46
        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
        sd_raw_send_byte(0xff);

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    37f4:	8f 3f       	cpi	r24, 0xFF	; 255
    37f6:	a9 f7       	brne	.-22     	; 0x37e2 <sd_raw_write+0x25a>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    37f8:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    37fa:	0d b4       	in	r0, 0x2d	; 45
    37fc:	07 fe       	sbrs	r0, 7
    37fe:	fd cf       	rjmp	.-6      	; 0x37fa <sd_raw_write+0x272>
    SPSR &= ~(1 << SPIF);
    3800:	8d b5       	in	r24, 0x2d	; 45
    3802:	8f 77       	andi	r24, 0x7F	; 127
    3804:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3806:	8e b5       	in	r24, 0x2e	; 46
        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();
    3808:	29 98       	cbi	0x05, 1	; 5
    380a:	2c 9a       	sbi	0x05, 4	; 5

        buffer += write_length;
    380c:	a9 81       	ldd	r26, Y+1	; 0x01
    380e:	ba 81       	ldd	r27, Y+2	; 0x02
    3810:	eb 85       	ldd	r30, Y+11	; 0x0b
    3812:	fc 85       	ldd	r31, Y+12	; 0x0c
    3814:	ae 0f       	add	r26, r30
    3816:	bf 1f       	adc	r27, r31
    3818:	ba 83       	std	Y+2, r27	; 0x02
    381a:	a9 83       	std	Y+1, r26	; 0x01
        offset += write_length;
    381c:	9f 01       	movw	r18, r30
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	50 e0       	ldi	r21, 0x00	; 0
    3822:	60 e0       	ldi	r22, 0x00	; 0
    3824:	70 e0       	ldi	r23, 0x00	; 0
    3826:	80 e0       	ldi	r24, 0x00	; 0
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	46 2c       	mov	r4, r6
    382c:	4e 0e       	add	r4, r30
    382e:	f1 e0       	ldi	r31, 0x01	; 1
    3830:	46 14       	cp	r4, r6
    3832:	08 f0       	brcs	.+2      	; 0x3836 <sd_raw_write+0x2ae>
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	e7 2d       	mov	r30, r7
    3838:	e3 0f       	add	r30, r19
    383a:	a1 e0       	ldi	r26, 0x01	; 1
    383c:	e7 15       	cp	r30, r7
    383e:	08 f0       	brcs	.+2      	; 0x3842 <sd_raw_write+0x2ba>
    3840:	a0 e0       	ldi	r26, 0x00	; 0
    3842:	5f 2e       	mov	r5, r31
    3844:	5e 0e       	add	r5, r30
    3846:	f1 e0       	ldi	r31, 0x01	; 1
    3848:	5e 16       	cp	r5, r30
    384a:	08 f0       	brcs	.+2      	; 0x384e <sd_raw_write+0x2c6>
    384c:	f0 e0       	ldi	r31, 0x00	; 0
    384e:	af 2b       	or	r26, r31
    3850:	e8 2d       	mov	r30, r8
    3852:	e4 0f       	add	r30, r20
    3854:	b1 e0       	ldi	r27, 0x01	; 1
    3856:	e8 15       	cp	r30, r8
    3858:	08 f0       	brcs	.+2      	; 0x385c <sd_raw_write+0x2d4>
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	ea 2e       	mov	r14, r26
    385e:	ee 0e       	add	r14, r30
    3860:	f1 e0       	ldi	r31, 0x01	; 1
    3862:	ee 16       	cp	r14, r30
    3864:	08 f0       	brcs	.+2      	; 0x3868 <sd_raw_write+0x2e0>
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	bf 2b       	or	r27, r31
    386a:	e9 2d       	mov	r30, r9
    386c:	e5 0f       	add	r30, r21
    386e:	a1 e0       	ldi	r26, 0x01	; 1
    3870:	e9 15       	cp	r30, r9
    3872:	08 f0       	brcs	.+2      	; 0x3876 <sd_raw_write+0x2ee>
    3874:	a0 e0       	ldi	r26, 0x00	; 0
    3876:	fb 2e       	mov	r15, r27
    3878:	fe 0e       	add	r15, r30
    387a:	f1 e0       	ldi	r31, 0x01	; 1
    387c:	fe 16       	cp	r15, r30
    387e:	08 f0       	brcs	.+2      	; 0x3882 <sd_raw_write+0x2fa>
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	af 2b       	or	r26, r31
    3884:	ea 2d       	mov	r30, r10
    3886:	e6 0f       	add	r30, r22
    3888:	b1 e0       	ldi	r27, 0x01	; 1
    388a:	ea 15       	cp	r30, r10
    388c:	08 f0       	brcs	.+2      	; 0x3890 <sd_raw_write+0x308>
    388e:	b0 e0       	ldi	r27, 0x00	; 0
    3890:	0a 2f       	mov	r16, r26
    3892:	0e 0f       	add	r16, r30
    3894:	f1 e0       	ldi	r31, 0x01	; 1
    3896:	0e 17       	cp	r16, r30
    3898:	08 f0       	brcs	.+2      	; 0x389c <sd_raw_write+0x314>
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	bf 2b       	or	r27, r31
    389e:	eb 2d       	mov	r30, r11
    38a0:	e7 0f       	add	r30, r23
    38a2:	a1 e0       	ldi	r26, 0x01	; 1
    38a4:	eb 15       	cp	r30, r11
    38a6:	08 f0       	brcs	.+2      	; 0x38aa <sd_raw_write+0x322>
    38a8:	a0 e0       	ldi	r26, 0x00	; 0
    38aa:	1b 2f       	mov	r17, r27
    38ac:	1e 0f       	add	r17, r30
    38ae:	f1 e0       	ldi	r31, 0x01	; 1
    38b0:	1e 17       	cp	r17, r30
    38b2:	08 f0       	brcs	.+2      	; 0x38b6 <sd_raw_write+0x32e>
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	af 2b       	or	r26, r31
    38b8:	ec 2d       	mov	r30, r12
    38ba:	e8 0f       	add	r30, r24
    38bc:	b1 e0       	ldi	r27, 0x01	; 1
    38be:	ec 15       	cp	r30, r12
    38c0:	08 f0       	brcs	.+2      	; 0x38c4 <sd_raw_write+0x33c>
    38c2:	b0 e0       	ldi	r27, 0x00	; 0
    38c4:	ae 0f       	add	r26, r30
    38c6:	f1 e0       	ldi	r31, 0x01	; 1
    38c8:	ae 17       	cp	r26, r30
    38ca:	08 f0       	brcs	.+2      	; 0x38ce <sd_raw_write+0x346>
    38cc:	f0 e0       	ldi	r31, 0x00	; 0
    38ce:	bf 2b       	or	r27, r31
    38d0:	8d 2d       	mov	r24, r13
    38d2:	89 0f       	add	r24, r25
    38d4:	32 01       	movw	r6, r4
    38d6:	47 01       	movw	r8, r14
    38d8:	58 01       	movw	r10, r16
    38da:	6d 01       	movw	r12, r26
    38dc:	d8 0e       	add	r13, r24
        length -= write_length;
    38de:	2b 81       	ldd	r18, Y+3	; 0x03
    38e0:	3c 81       	ldd	r19, Y+4	; 0x04
    38e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    38e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    38e6:	28 1b       	sub	r18, r24
    38e8:	39 0b       	sbc	r19, r25
    38ea:	3c 83       	std	Y+4, r19	; 0x04
    38ec:	2b 83       	std	Y+3, r18	; 0x03

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    38ee:	91 e0       	ldi	r25, 0x01	; 1
    38f0:	90 93 e1 03 	sts	0x03E1, r25
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    38f4:	ab 81       	ldd	r26, Y+3	; 0x03
    38f6:	bc 81       	ldd	r27, Y+4	; 0x04
    38f8:	ab 2b       	or	r26, r27
    38fa:	09 f0       	breq	.+2      	; 0x38fe <sd_raw_write+0x376>
    38fc:	68 ce       	rjmp	.-816    	; 0x35ce <sd_raw_write+0x46>
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	01 c0       	rjmp	.+2      	; 0x3904 <sd_raw_write+0x37c>
    3902:	80 e0       	ldi	r24, 0x00	; 0
        raw_block_written = 1;
#endif
    }

    return 1;
}
    3904:	2c 96       	adiw	r28, 0x0c	; 12
    3906:	0f b6       	in	r0, 0x3f	; 63
    3908:	f8 94       	cli
    390a:	de bf       	out	0x3e, r29	; 62
    390c:	0f be       	out	0x3f, r0	; 63
    390e:	cd bf       	out	0x3d, r28	; 61
    3910:	cf 91       	pop	r28
    3912:	df 91       	pop	r29
    3914:	1f 91       	pop	r17
    3916:	0f 91       	pop	r16
    3918:	ff 90       	pop	r15
    391a:	ef 90       	pop	r14
    391c:	df 90       	pop	r13
    391e:	cf 90       	pop	r12
    3920:	bf 90       	pop	r11
    3922:	af 90       	pop	r10
    3924:	9f 90       	pop	r9
    3926:	8f 90       	pop	r8
    3928:	7f 90       	pop	r7
    392a:	6f 90       	pop	r6
    392c:	5f 90       	pop	r5
    392e:	4f 90       	pop	r4
    3930:	3f 90       	pop	r3
    3932:	2f 90       	pop	r2
    3934:	08 95       	ret

00003936 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    3936:	ef 92       	push	r14
    3938:	ff 92       	push	r15
    393a:	0f 93       	push	r16
    393c:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    393e:	80 91 e1 03 	lds	r24, 0x03E1
    3942:	88 23       	and	r24, r24
    3944:	11 f0       	breq	.+4      	; 0x394a <sd_raw_sync+0x14>
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	1c c0       	rjmp	.+56     	; 0x3982 <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    394a:	20 91 d9 03 	lds	r18, 0x03D9
    394e:	30 91 da 03 	lds	r19, 0x03DA
    3952:	40 91 db 03 	lds	r20, 0x03DB
    3956:	50 91 dc 03 	lds	r21, 0x03DC
    395a:	60 91 dd 03 	lds	r22, 0x03DD
    395e:	70 91 de 03 	lds	r23, 0x03DE
    3962:	80 91 df 03 	lds	r24, 0x03DF
    3966:	90 91 e0 03 	lds	r25, 0x03E0
    396a:	09 ed       	ldi	r16, 0xD9	; 217
    396c:	11 e0       	ldi	r17, 0x01	; 1
    396e:	e1 2c       	mov	r14, r1
    3970:	e2 e0       	ldi	r30, 0x02	; 2
    3972:	fe 2e       	mov	r15, r30
    3974:	0e 94 c4 1a 	call	0x3588	; 0x3588 <sd_raw_write>
    3978:	88 23       	and	r24, r24
    397a:	19 f0       	breq	.+6      	; 0x3982 <sd_raw_sync+0x4c>
        return 0;
    raw_block_written = 1;
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	80 93 e1 03 	sts	0x03E1, r24
#endif
    return 1;
}
    3982:	1f 91       	pop	r17
    3984:	0f 91       	pop	r16
    3986:	ff 90       	pop	r15
    3988:	ef 90       	pop	r14
    398a:	08 95       	ret

0000398c <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    398c:	2f 92       	push	r2
    398e:	3f 92       	push	r3
    3990:	4f 92       	push	r4
    3992:	5f 92       	push	r5
    3994:	6f 92       	push	r6
    3996:	7f 92       	push	r7
    3998:	8f 92       	push	r8
    399a:	9f 92       	push	r9
    399c:	af 92       	push	r10
    399e:	bf 92       	push	r11
    39a0:	cf 92       	push	r12
    39a2:	df 92       	push	r13
    39a4:	ef 92       	push	r14
    39a6:	ff 92       	push	r15
    39a8:	0f 93       	push	r16
    39aa:	1f 93       	push	r17
    39ac:	df 93       	push	r29
    39ae:	cf 93       	push	r28
    39b0:	cd b7       	in	r28, 0x3d	; 61
    39b2:	de b7       	in	r29, 0x3e	; 62
    39b4:	29 97       	sbiw	r28, 0x09	; 9
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	de bf       	out	0x3e, r29	; 62
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	cd bf       	out	0x3d, r28	; 61
    39c0:	39 01       	movw	r6, r18
    39c2:	4a 01       	movw	r8, r20
    39c4:	5b 01       	movw	r10, r22
    39c6:	6c 01       	movw	r12, r24
    39c8:	28 01       	movw	r4, r16
    39ca:	fa 82       	std	Y+2, r15	; 0x02
    39cc:	e9 82       	std	Y+1, r14	; 0x01
    39ce:	6e c1       	rjmp	.+732    	; 0x3cac <sd_raw_read+0x320>
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    39d0:	ff ef       	ldi	r31, 0xFF	; 255
    39d2:	ef 2e       	mov	r14, r31
    39d4:	f1 e0       	ldi	r31, 0x01	; 1
    39d6:	ff 2e       	mov	r15, r31
    39d8:	e6 20       	and	r14, r6
    39da:	f7 20       	and	r15, r7
        block_address = offset - block_offset;
    39dc:	97 01       	movw	r18, r14
    39de:	a6 2d       	mov	r26, r6
    39e0:	ae 19       	sub	r26, r14
    39e2:	af 83       	std	Y+7, r26	; 0x07
    39e4:	e1 e0       	ldi	r30, 0x01	; 1
    39e6:	6a 16       	cp	r6, r26
    39e8:	08 f0       	brcs	.+2      	; 0x39ec <sd_raw_read+0x60>
    39ea:	e0 e0       	ldi	r30, 0x00	; 0
    39ec:	87 2d       	mov	r24, r7
    39ee:	83 1b       	sub	r24, r19
    39f0:	21 e0       	ldi	r18, 0x01	; 1
    39f2:	78 16       	cp	r7, r24
    39f4:	08 f0       	brcs	.+2      	; 0x39f8 <sd_raw_read+0x6c>
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	b8 2f       	mov	r27, r24
    39fa:	be 1b       	sub	r27, r30
    39fc:	bb 83       	std	Y+3, r27	; 0x03
    39fe:	91 e0       	ldi	r25, 0x01	; 1
    3a00:	8b 17       	cp	r24, r27
    3a02:	08 f0       	brcs	.+2      	; 0x3a06 <sd_raw_read+0x7a>
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	29 2b       	or	r18, r25
    3a08:	38 2c       	mov	r3, r8
    3a0a:	32 1a       	sub	r3, r18
    3a0c:	31 e0       	ldi	r19, 0x01	; 1
    3a0e:	83 14       	cp	r8, r3
    3a10:	08 f0       	brcs	.+2      	; 0x3a14 <sd_raw_read+0x88>
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	19 2d       	mov	r17, r9
    3a16:	13 1b       	sub	r17, r19
    3a18:	61 e0       	ldi	r22, 0x01	; 1
    3a1a:	91 16       	cp	r9, r17
    3a1c:	08 f0       	brcs	.+2      	; 0x3a20 <sd_raw_read+0x94>
    3a1e:	60 e0       	ldi	r22, 0x00	; 0
    3a20:	ea 2d       	mov	r30, r10
    3a22:	e6 1b       	sub	r30, r22
    3a24:	ec 83       	std	Y+4, r30	; 0x04
    3a26:	71 e0       	ldi	r23, 0x01	; 1
    3a28:	ae 16       	cp	r10, r30
    3a2a:	08 f0       	brcs	.+2      	; 0x3a2e <sd_raw_read+0xa2>
    3a2c:	70 e0       	ldi	r23, 0x00	; 0
    3a2e:	fb 2d       	mov	r31, r11
    3a30:	f7 1b       	sub	r31, r23
    3a32:	fd 83       	std	Y+5, r31	; 0x05
    3a34:	91 e0       	ldi	r25, 0x01	; 1
    3a36:	bf 16       	cp	r11, r31
    3a38:	08 f0       	brcs	.+2      	; 0x3a3c <sd_raw_read+0xb0>
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	2c 2c       	mov	r2, r12
    3a3e:	29 1a       	sub	r2, r25
    3a40:	91 e0       	ldi	r25, 0x01	; 1
    3a42:	c2 14       	cp	r12, r2
    3a44:	08 f0       	brcs	.+2      	; 0x3a48 <sd_raw_read+0xbc>
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	2d 2d       	mov	r18, r13
    3a4a:	29 1b       	sub	r18, r25
    3a4c:	2e 83       	std	Y+6, r18	; 0x06
        read_length = 512 - block_offset; /* read up to block border */
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	92 e0       	ldi	r25, 0x02	; 2
    3a52:	8e 19       	sub	r24, r14
    3a54:	9f 09       	sbc	r25, r15
    3a56:	99 87       	std	Y+9, r25	; 0x09
    3a58:	88 87       	std	Y+8, r24	; 0x08
    3a5a:	a9 81       	ldd	r26, Y+1	; 0x01
    3a5c:	ba 81       	ldd	r27, Y+2	; 0x02
    3a5e:	a8 17       	cp	r26, r24
    3a60:	b9 07       	cpc	r27, r25
    3a62:	10 f4       	brcc	.+4      	; 0x3a68 <sd_raw_read+0xdc>
    3a64:	b9 87       	std	Y+9, r27	; 0x09
    3a66:	a8 87       	std	Y+8, r26	; 0x08
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    3a68:	80 91 d9 03 	lds	r24, 0x03D9
    3a6c:	bf 81       	ldd	r27, Y+7	; 0x07
    3a6e:	8b 17       	cp	r24, r27
    3a70:	09 f5       	brne	.+66     	; 0x3ab4 <sd_raw_read+0x128>
    3a72:	80 91 da 03 	lds	r24, 0x03DA
    3a76:	eb 81       	ldd	r30, Y+3	; 0x03
    3a78:	8e 17       	cp	r24, r30
    3a7a:	e1 f4       	brne	.+56     	; 0x3ab4 <sd_raw_read+0x128>
    3a7c:	80 91 db 03 	lds	r24, 0x03DB
    3a80:	83 15       	cp	r24, r3
    3a82:	c1 f4       	brne	.+48     	; 0x3ab4 <sd_raw_read+0x128>
    3a84:	80 91 dc 03 	lds	r24, 0x03DC
    3a88:	81 17       	cp	r24, r17
    3a8a:	a1 f4       	brne	.+40     	; 0x3ab4 <sd_raw_read+0x128>
    3a8c:	80 91 dd 03 	lds	r24, 0x03DD
    3a90:	fc 81       	ldd	r31, Y+4	; 0x04
    3a92:	8f 17       	cp	r24, r31
    3a94:	79 f4       	brne	.+30     	; 0x3ab4 <sd_raw_read+0x128>
    3a96:	80 91 de 03 	lds	r24, 0x03DE
    3a9a:	2d 81       	ldd	r18, Y+5	; 0x05
    3a9c:	82 17       	cp	r24, r18
    3a9e:	51 f4       	brne	.+20     	; 0x3ab4 <sd_raw_read+0x128>
    3aa0:	80 91 df 03 	lds	r24, 0x03DF
    3aa4:	82 15       	cp	r24, r2
    3aa6:	31 f4       	brne	.+12     	; 0x3ab4 <sd_raw_read+0x128>
    3aa8:	80 91 e0 03 	lds	r24, 0x03E0
    3aac:	3e 81       	ldd	r19, Y+6	; 0x06
    3aae:	83 17       	cp	r24, r19
    3ab0:	09 f4       	brne	.+2      	; 0x3ab4 <sd_raw_read+0x128>
    3ab2:	86 c0       	rjmp	.+268    	; 0x3bc0 <sd_raw_read+0x234>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    3ab4:	0e 94 9b 1c 	call	0x3936	; 0x3936 <sd_raw_sync>
    3ab8:	88 23       	and	r24, r24
    3aba:	09 f4       	brne	.+2      	; 0x3abe <sd_raw_read+0x132>
    3abc:	fd c0       	rjmp	.+506    	; 0x3cb8 <sd_raw_read+0x32c>
                return 0;
#endif

            /* address card */
            select_card();
    3abe:	29 9a       	sbi	0x05, 1	; 5
    3ac0:	2c 98       	cbi	0x05, 4	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    3ac2:	80 91 e2 03 	lds	r24, 0x03E2
    3ac6:	82 ff       	sbrs	r24, 2
    3ac8:	0f c0       	rjmp	.+30     	; 0x3ae8 <sd_raw_read+0x15c>
    3aca:	2f 81       	ldd	r18, Y+7	; 0x07
    3acc:	3b 81       	ldd	r19, Y+3	; 0x03
    3ace:	43 2d       	mov	r20, r3
    3ad0:	51 2f       	mov	r21, r17
    3ad2:	6c 81       	ldd	r22, Y+4	; 0x04
    3ad4:	7d 81       	ldd	r23, Y+5	; 0x05
    3ad6:	82 2d       	mov	r24, r2
    3ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    3ada:	09 e0       	ldi	r16, 0x09	; 9
    3adc:	0e 94 97 46 	call	0x8d2e	; 0x8d2e <__lshrdi3>
    3ae0:	ba 01       	movw	r22, r20
    3ae2:	a9 01       	movw	r20, r18
    3ae4:	9b 01       	movw	r18, r22
    3ae6:	05 c0       	rjmp	.+10     	; 0x3af2 <sd_raw_read+0x166>
    3ae8:	8f 81       	ldd	r24, Y+7	; 0x07
    3aea:	9b 81       	ldd	r25, Y+3	; 0x03
    3aec:	23 2d       	mov	r18, r3
    3aee:	31 2f       	mov	r19, r17
    3af0:	ac 01       	movw	r20, r24
    3af2:	81 e1       	ldi	r24, 0x11	; 17
    3af4:	b9 01       	movw	r22, r18
    3af6:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
    3afa:	88 23       	and	r24, r24
    3afc:	21 f0       	breq	.+8      	; 0x3b06 <sd_raw_read+0x17a>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    3afe:	29 98       	cbi	0x05, 1	; 5
    3b00:	2c 9a       	sbi	0x05, 4	; 5
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	d9 c0       	rjmp	.+434    	; 0x3cb8 <sd_raw_read+0x32c>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3b06:	8f ef       	ldi	r24, 0xFF	; 255
    3b08:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3b0a:	0d b4       	in	r0, 0x2d	; 45
    3b0c:	07 fe       	sbrs	r0, 7
    3b0e:	fd cf       	rjmp	.-6      	; 0x3b0a <sd_raw_read+0x17e>
    SPSR &= ~(1 << SPIF);
    3b10:	8d b5       	in	r24, 0x2d	; 45
    3b12:	8f 77       	andi	r24, 0x7F	; 127
    3b14:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3b16:	8e b5       	in	r24, 0x2e	; 46
                unselect_card();
                return 0;
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    3b18:	8e 3f       	cpi	r24, 0xFE	; 254
    3b1a:	a9 f7       	brne	.-22     	; 0x3b06 <sd_raw_read+0x17a>
    3b1c:	e9 ed       	ldi	r30, 0xD9	; 217
    3b1e:	f1 e0       	ldi	r31, 0x01	; 1
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3b20:	9f ef       	ldi	r25, 0xFF	; 255
    3b22:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    3b24:	0d b4       	in	r0, 0x2d	; 45
    3b26:	07 fe       	sbrs	r0, 7
    3b28:	fd cf       	rjmp	.-6      	; 0x3b24 <sd_raw_read+0x198>
    SPSR &= ~(1 << SPIF);
    3b2a:	8d b5       	in	r24, 0x2d	; 45
    3b2c:	8f 77       	andi	r24, 0x7F	; 127
    3b2e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3b30:	8e b5       	in	r24, 0x2e	; 46
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    3b32:	80 83       	st	Z, r24
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    3b34:	a3 e0       	ldi	r26, 0x03	; 3
    3b36:	e8 3d       	cpi	r30, 0xD8	; 216
    3b38:	fa 07       	cpc	r31, r26
    3b3a:	11 f0       	breq	.+4      	; 0x3b40 <sd_raw_read+0x1b4>
                *cache++ = sd_raw_rec_byte();
    3b3c:	31 96       	adiw	r30, 0x01	; 1
    3b3e:	f0 cf       	rjmp	.-32     	; 0x3b20 <sd_raw_read+0x194>
            raw_block_address = block_address;
    3b40:	bf 81       	ldd	r27, Y+7	; 0x07
    3b42:	b0 93 d9 03 	sts	0x03D9, r27
    3b46:	eb 81       	ldd	r30, Y+3	; 0x03
    3b48:	e0 93 da 03 	sts	0x03DA, r30
    3b4c:	30 92 db 03 	sts	0x03DB, r3
    3b50:	10 93 dc 03 	sts	0x03DC, r17
    3b54:	fc 81       	ldd	r31, Y+4	; 0x04
    3b56:	f0 93 dd 03 	sts	0x03DD, r31
    3b5a:	2d 81       	ldd	r18, Y+5	; 0x05
    3b5c:	20 93 de 03 	sts	0x03DE, r18
    3b60:	20 92 df 03 	sts	0x03DF, r2
    3b64:	3e 81       	ldd	r19, Y+6	; 0x06
    3b66:	30 93 e0 03 	sts	0x03E0, r19

            memcpy(buffer, raw_block + block_offset, read_length);
    3b6a:	97 01       	movw	r18, r14
    3b6c:	27 52       	subi	r18, 0x27	; 39
    3b6e:	3e 4f       	sbci	r19, 0xFE	; 254
    3b70:	c2 01       	movw	r24, r4
    3b72:	b9 01       	movw	r22, r18
    3b74:	48 85       	ldd	r20, Y+8	; 0x08
    3b76:	59 85       	ldd	r21, Y+9	; 0x09
    3b78:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <memcpy>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3b7c:	8f ef       	ldi	r24, 0xFF	; 255
    3b7e:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3b80:	0d b4       	in	r0, 0x2d	; 45
    3b82:	07 fe       	sbrs	r0, 7
    3b84:	fd cf       	rjmp	.-6      	; 0x3b80 <sd_raw_read+0x1f4>
    SPSR &= ~(1 << SPIF);
    3b86:	8d b5       	in	r24, 0x2d	; 45
    3b88:	8f 77       	andi	r24, 0x7F	; 127
    3b8a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3b8c:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3b8e:	9f ef       	ldi	r25, 0xFF	; 255
    3b90:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    3b92:	0d b4       	in	r0, 0x2d	; 45
    3b94:	07 fe       	sbrs	r0, 7
    3b96:	fd cf       	rjmp	.-6      	; 0x3b92 <sd_raw_read+0x206>
    SPSR &= ~(1 << SPIF);
    3b98:	8d b5       	in	r24, 0x2d	; 45
    3b9a:	8f 77       	andi	r24, 0x7F	; 127
    3b9c:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3b9e:	8e b5       	in	r24, 0x2e	; 46
            /* read crc16 */
            sd_raw_rec_byte();
            sd_raw_rec_byte();
            
            /* deaddress card */
            unselect_card();
    3ba0:	29 98       	cbi	0x05, 1	; 5
    3ba2:	2c 9a       	sbi	0x05, 4	; 5
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3ba4:	af ef       	ldi	r26, 0xFF	; 255
    3ba6:	ae bd       	out	0x2e, r26	; 46
    while(!(SPSR & (1 << SPIF)));
    3ba8:	0d b4       	in	r0, 0x2d	; 45
    3baa:	07 fe       	sbrs	r0, 7
    3bac:	fd cf       	rjmp	.-6      	; 0x3ba8 <sd_raw_read+0x21c>
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;

            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
    3bae:	e8 85       	ldd	r30, Y+8	; 0x08
    3bb0:	f9 85       	ldd	r31, Y+9	; 0x09
    3bb2:	4e 0e       	add	r4, r30
    3bb4:	5f 1e       	adc	r5, r31
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);
    3bb6:	8d b5       	in	r24, 0x2d	; 45
    3bb8:	8f 77       	andi	r24, 0x7F	; 127
    3bba:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3bbc:	8e b5       	in	r24, 0x2e	; 46
    3bbe:	0d c0       	rjmp	.+26     	; 0x3bda <sd_raw_read+0x24e>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    3bc0:	97 01       	movw	r18, r14
    3bc2:	27 52       	subi	r18, 0x27	; 39
    3bc4:	3e 4f       	sbci	r19, 0xFE	; 254
    3bc6:	c2 01       	movw	r24, r4
    3bc8:	b9 01       	movw	r22, r18
    3bca:	48 85       	ldd	r20, Y+8	; 0x08
    3bcc:	59 85       	ldd	r21, Y+9	; 0x09
    3bce:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <memcpy>
            buffer += read_length;
    3bd2:	28 85       	ldd	r18, Y+8	; 0x08
    3bd4:	39 85       	ldd	r19, Y+9	; 0x09
    3bd6:	42 0e       	add	r4, r18
    3bd8:	53 1e       	adc	r5, r19
        }
#endif

        length -= read_length;
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bde:	a8 85       	ldd	r26, Y+8	; 0x08
    3be0:	b9 85       	ldd	r27, Y+9	; 0x09
    3be2:	8a 1b       	sub	r24, r26
    3be4:	9b 0b       	sbc	r25, r27
    3be6:	9a 83       	std	Y+2, r25	; 0x02
    3be8:	89 83       	std	Y+1, r24	; 0x01
        offset += read_length;
    3bea:	ad 01       	movw	r20, r26
    3bec:	60 e0       	ldi	r22, 0x00	; 0
    3bee:	70 e0       	ldi	r23, 0x00	; 0
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	a0 e0       	ldi	r26, 0x00	; 0
    3bf6:	b0 e0       	ldi	r27, 0x00	; 0
    3bf8:	26 2c       	mov	r2, r6
    3bfa:	24 0e       	add	r2, r20
    3bfc:	31 e0       	ldi	r19, 0x01	; 1
    3bfe:	26 14       	cp	r2, r6
    3c00:	08 f0       	brcs	.+2      	; 0x3c04 <sd_raw_read+0x278>
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	27 2d       	mov	r18, r7
    3c06:	25 0f       	add	r18, r21
    3c08:	e1 e0       	ldi	r30, 0x01	; 1
    3c0a:	27 15       	cp	r18, r7
    3c0c:	08 f0       	brcs	.+2      	; 0x3c10 <sd_raw_read+0x284>
    3c0e:	e0 e0       	ldi	r30, 0x00	; 0
    3c10:	33 2e       	mov	r3, r19
    3c12:	32 0e       	add	r3, r18
    3c14:	31 e0       	ldi	r19, 0x01	; 1
    3c16:	32 16       	cp	r3, r18
    3c18:	08 f0       	brcs	.+2      	; 0x3c1c <sd_raw_read+0x290>
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	e3 2b       	or	r30, r19
    3c1e:	28 2d       	mov	r18, r8
    3c20:	26 0f       	add	r18, r22
    3c22:	f1 e0       	ldi	r31, 0x01	; 1
    3c24:	28 15       	cp	r18, r8
    3c26:	08 f0       	brcs	.+2      	; 0x3c2a <sd_raw_read+0x29e>
    3c28:	f0 e0       	ldi	r31, 0x00	; 0
    3c2a:	ee 2e       	mov	r14, r30
    3c2c:	e2 0e       	add	r14, r18
    3c2e:	31 e0       	ldi	r19, 0x01	; 1
    3c30:	e2 16       	cp	r14, r18
    3c32:	08 f0       	brcs	.+2      	; 0x3c36 <sd_raw_read+0x2aa>
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	f3 2b       	or	r31, r19
    3c38:	29 2d       	mov	r18, r9
    3c3a:	27 0f       	add	r18, r23
    3c3c:	e1 e0       	ldi	r30, 0x01	; 1
    3c3e:	29 15       	cp	r18, r9
    3c40:	08 f0       	brcs	.+2      	; 0x3c44 <sd_raw_read+0x2b8>
    3c42:	e0 e0       	ldi	r30, 0x00	; 0
    3c44:	ff 2e       	mov	r15, r31
    3c46:	f2 0e       	add	r15, r18
    3c48:	31 e0       	ldi	r19, 0x01	; 1
    3c4a:	f2 16       	cp	r15, r18
    3c4c:	08 f0       	brcs	.+2      	; 0x3c50 <sd_raw_read+0x2c4>
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	e3 2b       	or	r30, r19
    3c52:	2a 2d       	mov	r18, r10
    3c54:	28 0f       	add	r18, r24
    3c56:	f1 e0       	ldi	r31, 0x01	; 1
    3c58:	2a 15       	cp	r18, r10
    3c5a:	08 f0       	brcs	.+2      	; 0x3c5e <sd_raw_read+0x2d2>
    3c5c:	f0 e0       	ldi	r31, 0x00	; 0
    3c5e:	0e 2f       	mov	r16, r30
    3c60:	02 0f       	add	r16, r18
    3c62:	31 e0       	ldi	r19, 0x01	; 1
    3c64:	02 17       	cp	r16, r18
    3c66:	08 f0       	brcs	.+2      	; 0x3c6a <sd_raw_read+0x2de>
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	f3 2b       	or	r31, r19
    3c6c:	2b 2d       	mov	r18, r11
    3c6e:	29 0f       	add	r18, r25
    3c70:	e1 e0       	ldi	r30, 0x01	; 1
    3c72:	2b 15       	cp	r18, r11
    3c74:	08 f0       	brcs	.+2      	; 0x3c78 <sd_raw_read+0x2ec>
    3c76:	e0 e0       	ldi	r30, 0x00	; 0
    3c78:	1f 2f       	mov	r17, r31
    3c7a:	12 0f       	add	r17, r18
    3c7c:	31 e0       	ldi	r19, 0x01	; 1
    3c7e:	12 17       	cp	r17, r18
    3c80:	08 f0       	brcs	.+2      	; 0x3c84 <sd_raw_read+0x2f8>
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	e3 2b       	or	r30, r19
    3c86:	2c 2d       	mov	r18, r12
    3c88:	2a 0f       	add	r18, r26
    3c8a:	f1 e0       	ldi	r31, 0x01	; 1
    3c8c:	2c 15       	cp	r18, r12
    3c8e:	08 f0       	brcs	.+2      	; 0x3c92 <sd_raw_read+0x306>
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	e2 0f       	add	r30, r18
    3c94:	31 e0       	ldi	r19, 0x01	; 1
    3c96:	e2 17       	cp	r30, r18
    3c98:	08 f0       	brcs	.+2      	; 0x3c9c <sd_raw_read+0x310>
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	f3 2b       	or	r31, r19
    3c9e:	8d 2d       	mov	r24, r13
    3ca0:	8b 0f       	add	r24, r27
    3ca2:	31 01       	movw	r6, r2
    3ca4:	47 01       	movw	r8, r14
    3ca6:	58 01       	movw	r10, r16
    3ca8:	6f 01       	movw	r12, r30
    3caa:	d8 0e       	add	r13, r24
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3cac:	e9 81       	ldd	r30, Y+1	; 0x01
    3cae:	fa 81       	ldd	r31, Y+2	; 0x02
    3cb0:	ef 2b       	or	r30, r31
    3cb2:	09 f0       	breq	.+2      	; 0x3cb6 <sd_raw_read+0x32a>
    3cb4:	8d ce       	rjmp	.-742    	; 0x39d0 <sd_raw_read+0x44>
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    3cb8:	29 96       	adiw	r28, 0x09	; 9
    3cba:	0f b6       	in	r0, 0x3f	; 63
    3cbc:	f8 94       	cli
    3cbe:	de bf       	out	0x3e, r29	; 62
    3cc0:	0f be       	out	0x3f, r0	; 63
    3cc2:	cd bf       	out	0x3d, r28	; 61
    3cc4:	cf 91       	pop	r28
    3cc6:	df 91       	pop	r29
    3cc8:	1f 91       	pop	r17
    3cca:	0f 91       	pop	r16
    3ccc:	ff 90       	pop	r15
    3cce:	ef 90       	pop	r14
    3cd0:	df 90       	pop	r13
    3cd2:	cf 90       	pop	r12
    3cd4:	bf 90       	pop	r11
    3cd6:	af 90       	pop	r10
    3cd8:	9f 90       	pop	r9
    3cda:	8f 90       	pop	r8
    3cdc:	7f 90       	pop	r7
    3cde:	6f 90       	pop	r6
    3ce0:	5f 90       	pop	r5
    3ce2:	4f 90       	pop	r4
    3ce4:	3f 90       	pop	r3
    3ce6:	2f 90       	pop	r2
    3ce8:	08 95       	ret

00003cea <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    3cea:	2f 92       	push	r2
    3cec:	3f 92       	push	r3
    3cee:	4f 92       	push	r4
    3cf0:	5f 92       	push	r5
    3cf2:	6f 92       	push	r6
    3cf4:	7f 92       	push	r7
    3cf6:	8f 92       	push	r8
    3cf8:	9f 92       	push	r9
    3cfa:	af 92       	push	r10
    3cfc:	bf 92       	push	r11
    3cfe:	cf 92       	push	r12
    3d00:	df 92       	push	r13
    3d02:	ef 92       	push	r14
    3d04:	ff 92       	push	r15
    3d06:	0f 93       	push	r16
    3d08:	1f 93       	push	r17
    3d0a:	df 93       	push	r29
    3d0c:	cf 93       	push	r28
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
    3d12:	60 97       	sbiw	r28, 0x10	; 16
    3d14:	0f b6       	in	r0, 0x3f	; 63
    3d16:	f8 94       	cli
    3d18:	de bf       	out	0x3e, r29	; 62
    3d1a:	0f be       	out	0x3f, r0	; 63
    3d1c:	cd bf       	out	0x3d, r28	; 61
    3d1e:	52 2e       	mov	r5, r18
    3d20:	43 2e       	mov	r4, r19
    3d22:	4b 83       	std	Y+3, r20	; 0x03
    3d24:	5c 83       	std	Y+4, r21	; 0x04
    3d26:	6d 83       	std	Y+5, r22	; 0x05
    3d28:	7e 83       	std	Y+6, r23	; 0x06
    3d2a:	8f 83       	std	Y+7, r24	; 0x07
    3d2c:	98 87       	std	Y+8, r25	; 0x08
    3d2e:	18 01       	movw	r2, r16
    3d30:	37 01       	movw	r6, r14
    3d32:	9a 82       	std	Y+2, r9	; 0x02
    3d34:	89 82       	std	Y+1, r8	; 0x01
    if(!buffer || interval == 0 || length < interval || !callback)
    3d36:	01 15       	cp	r16, r1
    3d38:	11 05       	cpc	r17, r1
    3d3a:	09 f4       	brne	.+2      	; 0x3d3e <sd_raw_read_interval+0x54>
    3d3c:	88 c0       	rjmp	.+272    	; 0x3e4e <sd_raw_read_interval+0x164>
    3d3e:	e1 14       	cp	r14, r1
    3d40:	f1 04       	cpc	r15, r1
    3d42:	09 f4       	brne	.+2      	; 0x3d46 <sd_raw_read_interval+0x5c>
    3d44:	84 c0       	rjmp	.+264    	; 0x3e4e <sd_raw_read_interval+0x164>
    3d46:	ce 14       	cp	r12, r14
    3d48:	df 04       	cpc	r13, r15
    3d4a:	08 f4       	brcc	.+2      	; 0x3d4e <sd_raw_read_interval+0x64>
    3d4c:	80 c0       	rjmp	.+256    	; 0x3e4e <sd_raw_read_interval+0x164>
    3d4e:	a1 14       	cp	r10, r1
    3d50:	b1 04       	cpc	r11, r1
    3d52:	09 f4       	brne	.+2      	; 0x3d56 <sd_raw_read_interval+0x6c>
    3d54:	7c c0       	rjmp	.+248    	; 0x3e4e <sd_raw_read_interval+0x164>
    3d56:	88 24       	eor	r8, r8
    3d58:	99 24       	eor	r9, r9
    3d5a:	8e 18       	sub	r8, r14
    3d5c:	9f 08       	sbc	r9, r15
    3d5e:	ce 18       	sub	r12, r14
    3d60:	df 08       	sbc	r13, r15
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    3d62:	97 01       	movw	r18, r14
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	50 e0       	ldi	r21, 0x00	; 0
    3d68:	60 e0       	ldi	r22, 0x00	; 0
    3d6a:	70 e0       	ldi	r23, 0x00	; 0
    3d6c:	80 e0       	ldi	r24, 0x00	; 0
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	e9 86       	std	Y+9, r14	; 0x09
    3d72:	3a 87       	std	Y+10, r19	; 0x0a
    3d74:	4b 87       	std	Y+11, r20	; 0x0b
    3d76:	5c 87       	std	Y+12, r21	; 0x0c
    3d78:	6d 87       	std	Y+13, r22	; 0x0d
    3d7a:	7e 87       	std	Y+14, r23	; 0x0e
    3d7c:	8f 87       	std	Y+15, r24	; 0x0f
    3d7e:	98 8b       	std	Y+16, r25	; 0x10
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    3d80:	25 2d       	mov	r18, r5
    3d82:	34 2d       	mov	r19, r4
    3d84:	4b 81       	ldd	r20, Y+3	; 0x03
    3d86:	5c 81       	ldd	r21, Y+4	; 0x04
    3d88:	6d 81       	ldd	r22, Y+5	; 0x05
    3d8a:	7e 81       	ldd	r23, Y+6	; 0x06
    3d8c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d8e:	98 85       	ldd	r25, Y+8	; 0x08
    3d90:	81 01       	movw	r16, r2
    3d92:	73 01       	movw	r14, r6
    3d94:	0e 94 c6 1c 	call	0x398c	; 0x398c <sd_raw_read>
    3d98:	88 23       	and	r24, r24
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <sd_raw_read_interval+0xb4>
    3d9c:	58 c0       	rjmp	.+176    	; 0x3e4e <sd_raw_read_interval+0x164>
            return 0;
        if(!callback(buffer, offset, p))
    3d9e:	c1 01       	movw	r24, r2
    3da0:	05 2d       	mov	r16, r5
    3da2:	14 2d       	mov	r17, r4
    3da4:	2b 81       	ldd	r18, Y+3	; 0x03
    3da6:	3c 81       	ldd	r19, Y+4	; 0x04
    3da8:	4d 81       	ldd	r20, Y+5	; 0x05
    3daa:	5e 81       	ldd	r21, Y+6	; 0x06
    3dac:	6f 81       	ldd	r22, Y+7	; 0x07
    3dae:	78 85       	ldd	r23, Y+8	; 0x08
    3db0:	e9 80       	ldd	r14, Y+1	; 0x01
    3db2:	fa 80       	ldd	r15, Y+2	; 0x02
    3db4:	f5 01       	movw	r30, r10
    3db6:	09 95       	icall
    3db8:	88 23       	and	r24, r24
    3dba:	09 f4       	brne	.+2      	; 0x3dbe <sd_raw_read_interval+0xd4>
    3dbc:	4a c0       	rjmp	.+148    	; 0x3e52 <sd_raw_read_interval+0x168>
            break;
    3dbe:	c8 0c       	add	r12, r8
    3dc0:	d9 1c       	adc	r13, r9
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    3dc2:	c6 01       	movw	r24, r12
    3dc4:	86 0d       	add	r24, r6
    3dc6:	97 1d       	adc	r25, r7
    3dc8:	86 15       	cp	r24, r6
    3dca:	97 05       	cpc	r25, r7
    3dcc:	08 f4       	brcc	.+2      	; 0x3dd0 <sd_raw_read_interval+0xe6>
    3dce:	41 c0       	rjmp	.+130    	; 0x3e52 <sd_raw_read_interval+0x168>
    3dd0:	39 85       	ldd	r19, Y+9	; 0x09
    3dd2:	35 0d       	add	r19, r5
    3dd4:	91 e0       	ldi	r25, 0x01	; 1
    3dd6:	35 15       	cp	r19, r5
    3dd8:	08 f0       	brcs	.+2      	; 0x3ddc <sd_raw_read_interval+0xf2>
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dde:	84 0d       	add	r24, r4
    3de0:	21 e0       	ldi	r18, 0x01	; 1
    3de2:	84 15       	cp	r24, r4
    3de4:	08 f0       	brcs	.+2      	; 0x3de8 <sd_raw_read_interval+0xfe>
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	19 2f       	mov	r17, r25
    3dea:	18 0f       	add	r17, r24
    3dec:	91 e0       	ldi	r25, 0x01	; 1
    3dee:	18 17       	cp	r17, r24
    3df0:	08 f0       	brcs	.+2      	; 0x3df4 <sd_raw_read_interval+0x10a>
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	92 2b       	or	r25, r18
    3df6:	4b 81       	ldd	r20, Y+3	; 0x03
    3df8:	94 0f       	add	r25, r20
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	94 17       	cp	r25, r20
    3dfe:	08 f0       	brcs	.+2      	; 0x3e02 <sd_raw_read_interval+0x118>
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	6c 81       	ldd	r22, Y+4	; 0x04
    3e04:	68 0f       	add	r22, r24
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	5c 81       	ldd	r21, Y+4	; 0x04
    3e0a:	65 17       	cp	r22, r21
    3e0c:	08 f0       	brcs	.+2      	; 0x3e10 <sd_raw_read_interval+0x126>
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	5d 81       	ldd	r21, Y+5	; 0x05
    3e12:	58 0f       	add	r21, r24
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	7d 81       	ldd	r23, Y+5	; 0x05
    3e18:	57 17       	cp	r21, r23
    3e1a:	08 f0       	brcs	.+2      	; 0x3e1e <sd_raw_read_interval+0x134>
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	4e 81       	ldd	r20, Y+6	; 0x06
    3e20:	48 0f       	add	r20, r24
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	2e 81       	ldd	r18, Y+6	; 0x06
    3e26:	42 17       	cp	r20, r18
    3e28:	08 f0       	brcs	.+2      	; 0x3e2c <sd_raw_read_interval+0x142>
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	7f 81       	ldd	r23, Y+7	; 0x07
    3e2e:	87 0f       	add	r24, r23
    3e30:	21 e0       	ldi	r18, 0x01	; 1
    3e32:	87 17       	cp	r24, r23
    3e34:	08 f0       	brcs	.+2      	; 0x3e38 <sd_raw_read_interval+0x14e>
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	53 2e       	mov	r5, r19
    3e3a:	41 2e       	mov	r4, r17
    3e3c:	9b 83       	std	Y+3, r25	; 0x03
    3e3e:	6c 83       	std	Y+4, r22	; 0x04
    3e40:	5d 83       	std	Y+5, r21	; 0x05
    3e42:	4e 83       	std	Y+6, r20	; 0x06
    3e44:	8f 83       	std	Y+7, r24	; 0x07
    3e46:	88 85       	ldd	r24, Y+8	; 0x08
    3e48:	82 0f       	add	r24, r18
    3e4a:	88 87       	std	Y+8, r24	; 0x08
    3e4c:	99 cf       	rjmp	.-206    	; 0x3d80 <sd_raw_read_interval+0x96>
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	01 c0       	rjmp	.+2      	; 0x3e54 <sd_raw_read_interval+0x16a>
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    3e54:	60 96       	adiw	r28, 0x10	; 16
    3e56:	0f b6       	in	r0, 0x3f	; 63
    3e58:	f8 94       	cli
    3e5a:	de bf       	out	0x3e, r29	; 62
    3e5c:	0f be       	out	0x3f, r0	; 63
    3e5e:	cd bf       	out	0x3d, r28	; 61
    3e60:	cf 91       	pop	r28
    3e62:	df 91       	pop	r29
    3e64:	1f 91       	pop	r17
    3e66:	0f 91       	pop	r16
    3e68:	ff 90       	pop	r15
    3e6a:	ef 90       	pop	r14
    3e6c:	df 90       	pop	r13
    3e6e:	cf 90       	pop	r12
    3e70:	bf 90       	pop	r11
    3e72:	af 90       	pop	r10
    3e74:	9f 90       	pop	r9
    3e76:	8f 90       	pop	r8
    3e78:	7f 90       	pop	r7
    3e7a:	6f 90       	pop	r6
    3e7c:	5f 90       	pop	r5
    3e7e:	4f 90       	pop	r4
    3e80:	3f 90       	pop	r3
    3e82:	2f 90       	pop	r2
    3e84:	08 95       	ret

00003e86 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    3e86:	8f 92       	push	r8
    3e88:	9f 92       	push	r9
    3e8a:	bf 92       	push	r11
    3e8c:	cf 92       	push	r12
    3e8e:	df 92       	push	r13
    3e90:	ef 92       	push	r14
    3e92:	ff 92       	push	r15
    3e94:	0f 93       	push	r16
    3e96:	1f 93       	push	r17
    3e98:	cf 93       	push	r28
    3e9a:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    3e9c:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_sck();
    3e9e:	27 9a       	sbi	0x04, 7	; 4
    configure_pin_ss();
    3ea0:	24 9a       	sbi	0x04, 4	; 4
    configure_pin_miso();
    3ea2:	26 98       	cbi	0x04, 6	; 4

    unselect_card();
    3ea4:	29 98       	cbi	0x05, 1	; 5
    3ea6:	2c 9a       	sbi	0x05, 4	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    3ea8:	83 e5       	ldi	r24, 0x53	; 83
    3eaa:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    3eac:	8d b5       	in	r24, 0x2d	; 45
    3eae:	8e 7f       	andi	r24, 0xFE	; 254
    3eb0:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    3eb2:	10 92 e2 03 	sts	0x03E2, r1
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3eb8:	2f ef       	ldi	r18, 0xFF	; 255
    3eba:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    3ebc:	0d b4       	in	r0, 0x2d	; 45
    3ebe:	07 fe       	sbrs	r0, 7
    3ec0:	fd cf       	rjmp	.-6      	; 0x3ebc <sd_raw_init+0x36>
    SPSR &= ~(1 << SPIF);
    3ec2:	8d b5       	in	r24, 0x2d	; 45
    3ec4:	8f 77       	andi	r24, 0x7F	; 127
    3ec6:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3ec8:	8e b5       	in	r24, 0x2e	; 46
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    3eca:	9f 5f       	subi	r25, 0xFF	; 255
    3ecc:	9a 30       	cpi	r25, 0x0A	; 10
    3ece:	a9 f7       	brne	.-22     	; 0x3eba <sd_raw_init+0x34>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    3ed0:	29 9a       	sbi	0x05, 1	; 5
    3ed2:	2c 98       	cbi	0x05, 4	; 5
    3ed4:	00 e0       	ldi	r16, 0x00	; 0
    3ed6:	10 e0       	ldi	r17, 0x00	; 0

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	40 e0       	ldi	r20, 0x00	; 0
    3edc:	50 e0       	ldi	r21, 0x00	; 0
    3ede:	60 e0       	ldi	r22, 0x00	; 0
    3ee0:	70 e0       	ldi	r23, 0x00	; 0
    3ee2:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
    3ee6:	f8 2e       	mov	r15, r24
        if(response == (1 << R1_IDLE_STATE))
    3ee8:	81 e0       	ldi	r24, 0x01	; 1
    3eea:	f8 16       	cp	r15, r24
    3eec:	41 f0       	breq	.+16     	; 0x3efe <sd_raw_init+0x78>
            break;

        if(i == 0x1ff)
    3eee:	81 e0       	ldi	r24, 0x01	; 1
    3ef0:	0f 3f       	cpi	r16, 0xFF	; 255
    3ef2:	18 07       	cpc	r17, r24
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <sd_raw_init+0x72>
    3ef6:	c3 c0       	rjmp	.+390    	; 0x407e <sd_raw_init+0x1f8>
    /* address card */
    select_card();

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    3ef8:	0f 5f       	subi	r16, 0xFF	; 255
    3efa:	1f 4f       	sbci	r17, 0xFF	; 255
    3efc:	ed cf       	rjmp	.-38     	; 0x3ed8 <sd_raw_init+0x52>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    3efe:	88 e0       	ldi	r24, 0x08	; 8
    3f00:	4a ea       	ldi	r20, 0xAA	; 170
    3f02:	51 e0       	ldi	r21, 0x01	; 1
    3f04:	60 e0       	ldi	r22, 0x00	; 0
    3f06:	70 e0       	ldi	r23, 0x00	; 0
    3f08:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    3f0c:	82 fd       	sbrc	r24, 2
    3f0e:	2d c0       	rjmp	.+90     	; 0x3f6a <sd_raw_init+0xe4>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3f10:	8f ef       	ldi	r24, 0xFF	; 255
    3f12:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3f14:	0d b4       	in	r0, 0x2d	; 45
    3f16:	07 fe       	sbrs	r0, 7
    3f18:	fd cf       	rjmp	.-6      	; 0x3f14 <sd_raw_init+0x8e>
    SPSR &= ~(1 << SPIF);
    3f1a:	8d b5       	in	r24, 0x2d	; 45
    3f1c:	8f 77       	andi	r24, 0x7F	; 127
    3f1e:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3f20:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3f22:	8f ef       	ldi	r24, 0xFF	; 255
    3f24:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3f26:	0d b4       	in	r0, 0x2d	; 45
    3f28:	07 fe       	sbrs	r0, 7
    3f2a:	fd cf       	rjmp	.-6      	; 0x3f26 <sd_raw_init+0xa0>
    SPSR &= ~(1 << SPIF);
    3f2c:	8d b5       	in	r24, 0x2d	; 45
    3f2e:	8f 77       	andi	r24, 0x7F	; 127
    3f30:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3f32:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3f34:	8f ef       	ldi	r24, 0xFF	; 255
    3f36:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3f38:	0d b4       	in	r0, 0x2d	; 45
    3f3a:	07 fe       	sbrs	r0, 7
    3f3c:	fd cf       	rjmp	.-6      	; 0x3f38 <sd_raw_init+0xb2>
    SPSR &= ~(1 << SPIF);
    3f3e:	8d b5       	in	r24, 0x2d	; 45
    3f40:	8f 77       	andi	r24, 0x7F	; 127
    3f42:	8d bd       	out	0x2d, r24	; 45
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    {
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
    3f44:	0e b4       	in	r0, 0x2e	; 46
    3f46:	00 fe       	sbrs	r0, 0
    3f48:	cc c0       	rjmp	.+408    	; 0x40e2 <sd_raw_init+0x25c>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    3f4a:	8f ef       	ldi	r24, 0xFF	; 255
    3f4c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    3f4e:	0d b4       	in	r0, 0x2d	; 45
    3f50:	07 fe       	sbrs	r0, 7
    3f52:	fd cf       	rjmp	.-6      	; 0x3f4e <sd_raw_init+0xc8>
    SPSR &= ~(1 << SPIF);
    3f54:	8d b5       	in	r24, 0x2d	; 45
    3f56:	8f 77       	andi	r24, 0x7F	; 127
    3f58:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    3f5a:	8e b5       	in	r24, 0x2e	; 46
    {
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
    3f5c:	8a 3a       	cpi	r24, 0xAA	; 170
    3f5e:	09 f0       	breq	.+2      	; 0x3f62 <sd_raw_init+0xdc>
    3f60:	c0 c0       	rjmp	.+384    	; 0x40e2 <sd_raw_init+0x25c>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    3f62:	82 e0       	ldi	r24, 0x02	; 2
    3f64:	80 93 e2 03 	sts	0x03E2, r24
    3f68:	12 c0       	rjmp	.+36     	; 0x3f8e <sd_raw_init+0x108>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    3f6a:	87 e3       	ldi	r24, 0x37	; 55
    3f6c:	40 e0       	ldi	r20, 0x00	; 0
    3f6e:	50 e0       	ldi	r21, 0x00	; 0
    3f70:	60 e0       	ldi	r22, 0x00	; 0
    3f72:	70 e0       	ldi	r23, 0x00	; 0
    3f74:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    3f78:	89 e2       	ldi	r24, 0x29	; 41
    3f7a:	40 e0       	ldi	r20, 0x00	; 0
    3f7c:	50 e0       	ldi	r21, 0x00	; 0
    3f7e:	60 e0       	ldi	r22, 0x00	; 0
    3f80:	70 e0       	ldi	r23, 0x00	; 0
    3f82:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    3f86:	82 fd       	sbrc	r24, 2
    3f88:	02 c0       	rjmp	.+4      	; 0x3f8e <sd_raw_init+0x108>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    3f8a:	f0 92 e2 03 	sts	0x03E2, r15
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    3f8e:	b0 90 e2 03 	lds	r11, 0x03E2
    3f92:	8b 2d       	mov	r24, r11
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	03 e0       	ldi	r16, 0x03	; 3
    3f98:	80 2e       	mov	r8, r16
    3f9a:	91 2c       	mov	r9, r1
    3f9c:	88 22       	and	r8, r24
    3f9e:	99 22       	and	r9, r25
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    3fa0:	12 e0       	ldi	r17, 0x02	; 2
    3fa2:	c1 2e       	mov	r12, r17
    3fa4:	d1 2c       	mov	r13, r1
    3fa6:	c8 22       	and	r12, r24
    3fa8:	d9 22       	and	r13, r25
    3faa:	c0 e0       	ldi	r28, 0x00	; 0
    3fac:	d0 e0       	ldi	r29, 0x00	; 0
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    3fae:	81 14       	cp	r8, r1
    3fb0:	91 04       	cpc	r9, r1
    3fb2:	b9 f0       	breq	.+46     	; 0x3fe2 <sd_raw_init+0x15c>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    3fb4:	c1 14       	cp	r12, r1
    3fb6:	d1 04       	cpc	r13, r1
    3fb8:	31 f0       	breq	.+12     	; 0x3fc6 <sd_raw_init+0x140>
    3fba:	e1 2c       	mov	r14, r1
    3fbc:	f1 2c       	mov	r15, r1
    3fbe:	01 2d       	mov	r16, r1
    3fc0:	b0 e4       	ldi	r27, 0x40	; 64
    3fc2:	1b 2f       	mov	r17, r27
    3fc4:	03 c0       	rjmp	.+6      	; 0x3fcc <sd_raw_init+0x146>
    3fc6:	ee 24       	eor	r14, r14
    3fc8:	ff 24       	eor	r15, r15
    3fca:	87 01       	movw	r16, r14
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    3fcc:	87 e3       	ldi	r24, 0x37	; 55
    3fce:	40 e0       	ldi	r20, 0x00	; 0
    3fd0:	50 e0       	ldi	r21, 0x00	; 0
    3fd2:	60 e0       	ldi	r22, 0x00	; 0
    3fd4:	70 e0       	ldi	r23, 0x00	; 0
    3fd6:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    3fda:	89 e2       	ldi	r24, 0x29	; 41
    3fdc:	b8 01       	movw	r22, r16
    3fde:	a7 01       	movw	r20, r14
    3fe0:	05 c0       	rjmp	.+10     	; 0x3fec <sd_raw_init+0x166>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	40 e0       	ldi	r20, 0x00	; 0
    3fe6:	50 e0       	ldi	r21, 0x00	; 0
    3fe8:	60 e0       	ldi	r22, 0x00	; 0
    3fea:	70 e0       	ldi	r23, 0x00	; 0
    3fec:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    3ff0:	80 ff       	sbrs	r24, 0
    3ff2:	07 c0       	rjmp	.+14     	; 0x4002 <sd_raw_init+0x17c>
            break;

        if(i == 0x7fff)
    3ff4:	8f e7       	ldi	r24, 0x7F	; 127
    3ff6:	cf 3f       	cpi	r28, 0xFF	; 255
    3ff8:	d8 07       	cpc	r29, r24
    3ffa:	09 f4       	brne	.+2      	; 0x3ffe <sd_raw_init+0x178>
    3ffc:	40 c0       	rjmp	.+128    	; 0x407e <sd_raw_init+0x1f8>
            /* MMC card */
        }
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    3ffe:	21 96       	adiw	r28, 0x01	; 1
    4000:	d6 cf       	rjmp	.-84     	; 0x3fae <sd_raw_init+0x128>
            return 0;
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    4002:	cd 28       	or	r12, r13
    4004:	99 f1       	breq	.+102    	; 0x406c <sd_raw_init+0x1e6>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    4006:	8a e3       	ldi	r24, 0x3A	; 58
    4008:	40 e0       	ldi	r20, 0x00	; 0
    400a:	50 e0       	ldi	r21, 0x00	; 0
    400c:	60 e0       	ldi	r22, 0x00	; 0
    400e:	70 e0       	ldi	r23, 0x00	; 0
    4010:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
    4014:	88 23       	and	r24, r24
    4016:	99 f5       	brne	.+102    	; 0x407e <sd_raw_init+0x1f8>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4018:	8f ef       	ldi	r24, 0xFF	; 255
    401a:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    401c:	0d b4       	in	r0, 0x2d	; 45
    401e:	07 fe       	sbrs	r0, 7
    4020:	fd cf       	rjmp	.-6      	; 0x401c <sd_raw_init+0x196>
    SPSR &= ~(1 << SPIF);
    4022:	8d b5       	in	r24, 0x2d	; 45
    4024:	8f 77       	andi	r24, 0x7F	; 127
    4026:	8d bd       	out	0x2d, r24	; 45
        {
            unselect_card();
            return 0;
        }

        if(sd_raw_rec_byte() & 0x40)
    4028:	0e b4       	in	r0, 0x2e	; 46
    402a:	06 fe       	sbrs	r0, 6
    402c:	04 c0       	rjmp	.+8      	; 0x4036 <sd_raw_init+0x1b0>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    402e:	84 e0       	ldi	r24, 0x04	; 4
    4030:	b8 2a       	or	r11, r24
    4032:	b0 92 e2 03 	sts	0x03E2, r11
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4036:	8f ef       	ldi	r24, 0xFF	; 255
    4038:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    403a:	0d b4       	in	r0, 0x2d	; 45
    403c:	07 fe       	sbrs	r0, 7
    403e:	fd cf       	rjmp	.-6      	; 0x403a <sd_raw_init+0x1b4>
    SPSR &= ~(1 << SPIF);
    4040:	8d b5       	in	r24, 0x2d	; 45
    4042:	8f 77       	andi	r24, 0x7F	; 127
    4044:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4046:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4048:	8f ef       	ldi	r24, 0xFF	; 255
    404a:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    404c:	0d b4       	in	r0, 0x2d	; 45
    404e:	07 fe       	sbrs	r0, 7
    4050:	fd cf       	rjmp	.-6      	; 0x404c <sd_raw_init+0x1c6>
    SPSR &= ~(1 << SPIF);
    4052:	8d b5       	in	r24, 0x2d	; 45
    4054:	8f 77       	andi	r24, 0x7F	; 127
    4056:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    4058:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    405a:	8f ef       	ldi	r24, 0xFF	; 255
    405c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    405e:	0d b4       	in	r0, 0x2d	; 45
    4060:	07 fe       	sbrs	r0, 7
    4062:	fd cf       	rjmp	.-6      	; 0x405e <sd_raw_init+0x1d8>
    SPSR &= ~(1 << SPIF);
    4064:	8d b5       	in	r24, 0x2d	; 45
    4066:	8f 77       	andi	r24, 0x7F	; 127
    4068:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    406a:	8e b5       	in	r24, 0x2e	; 46
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    406c:	80 e1       	ldi	r24, 0x10	; 16
    406e:	40 e0       	ldi	r20, 0x00	; 0
    4070:	52 e0       	ldi	r21, 0x02	; 2
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	70 e0       	ldi	r23, 0x00	; 0
    4076:	0e 94 0f 19 	call	0x321e	; 0x321e <sd_raw_send_command>
    407a:	88 23       	and	r24, r24
    407c:	19 f0       	breq	.+6      	; 0x4084 <sd_raw_init+0x1fe>
    {
        unselect_card();
    407e:	29 98       	cbi	0x05, 1	; 5
    4080:	2c 9a       	sbi	0x05, 4	; 5
    4082:	2f c0       	rjmp	.+94     	; 0x40e2 <sd_raw_init+0x25c>
        return 0;
    }

    /* deaddress card */
    unselect_card();
    4084:	29 98       	cbi	0x05, 1	; 5
    4086:	2c 9a       	sbi	0x05, 4	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    4088:	8c b5       	in	r24, 0x2c	; 44
    408a:	8c 7f       	andi	r24, 0xFC	; 252
    408c:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    408e:	8d b5       	in	r24, 0x2d	; 45
    4090:	81 60       	ori	r24, 0x01	; 1
    4092:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    4094:	8f ef       	ldi	r24, 0xFF	; 255
    4096:	80 93 d9 03 	sts	0x03D9, r24
    409a:	80 93 da 03 	sts	0x03DA, r24
    409e:	80 93 db 03 	sts	0x03DB, r24
    40a2:	80 93 dc 03 	sts	0x03DC, r24
    40a6:	80 93 dd 03 	sts	0x03DD, r24
    40aa:	80 93 de 03 	sts	0x03DE, r24
    40ae:	80 93 df 03 	sts	0x03DF, r24
    40b2:	80 93 e0 03 	sts	0x03E0, r24
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    40b6:	81 e0       	ldi	r24, 0x01	; 1
    40b8:	80 93 e1 03 	sts	0x03E1, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	40 e0       	ldi	r20, 0x00	; 0
    40c2:	50 e0       	ldi	r21, 0x00	; 0
    40c4:	60 e0       	ldi	r22, 0x00	; 0
    40c6:	70 e0       	ldi	r23, 0x00	; 0
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	09 ed       	ldi	r16, 0xD9	; 217
    40ce:	11 e0       	ldi	r17, 0x01	; 1
    40d0:	e1 2c       	mov	r14, r1
    40d2:	a2 e0       	ldi	r26, 0x02	; 2
    40d4:	fa 2e       	mov	r15, r26
    40d6:	0e 94 c6 1c 	call	0x398c	; 0x398c <sd_raw_read>
    40da:	88 23       	and	r24, r24
    40dc:	19 f0       	breq	.+6      	; 0x40e4 <sd_raw_init+0x25e>
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	01 c0       	rjmp	.+2      	; 0x40e4 <sd_raw_init+0x25e>
    40e2:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
#endif

    return 1;
}
    40e4:	df 91       	pop	r29
    40e6:	cf 91       	pop	r28
    40e8:	1f 91       	pop	r17
    40ea:	0f 91       	pop	r16
    40ec:	ff 90       	pop	r15
    40ee:	ef 90       	pop	r14
    40f0:	df 90       	pop	r13
    40f2:	cf 90       	pop	r12
    40f4:	bf 90       	pop	r11
    40f6:	9f 90       	pop	r9
    40f8:	8f 90       	pop	r8
    40fa:	08 95       	ret

000040fc <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    40fc:	2f 92       	push	r2
    40fe:	3f 92       	push	r3
    4100:	4f 92       	push	r4
    4102:	5f 92       	push	r5
    4104:	6f 92       	push	r6
    4106:	7f 92       	push	r7
    4108:	8f 92       	push	r8
    410a:	9f 92       	push	r9
    410c:	af 92       	push	r10
    410e:	bf 92       	push	r11
    4110:	cf 92       	push	r12
    4112:	df 92       	push	r13
    4114:	ef 92       	push	r14
    4116:	ff 92       	push	r15
    4118:	0f 93       	push	r16
    411a:	1f 93       	push	r17
    411c:	df 93       	push	r29
    411e:	cf 93       	push	r28
    4120:	cd b7       	in	r28, 0x3d	; 61
    4122:	de b7       	in	r29, 0x3e	; 62
    4124:	28 97       	sbiw	r28, 0x08	; 8
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	f8 94       	cli
    412a:	de bf       	out	0x3e, r29	; 62
    412c:	0f be       	out	0x3f, r0	; 63
    412e:	cd bf       	out	0x3d, r28	; 61
    4130:	92 2e       	mov	r9, r18
    4132:	83 2e       	mov	r8, r19
    4134:	54 2e       	mov	r5, r20
    4136:	45 2e       	mov	r4, r21
    4138:	36 2e       	mov	r3, r22
    413a:	27 2e       	mov	r2, r23
    413c:	8d 83       	std	Y+5, r24	; 0x05
    413e:	9e 83       	std	Y+6, r25	; 0x06
    4140:	38 01       	movw	r6, r16
    4142:	f8 86       	std	Y+8, r15	; 0x08
    4144:	ef 82       	std	Y+7, r14	; 0x07
    4146:	da 82       	std	Y+2, r13	; 0x02
    4148:	c9 82       	std	Y+1, r12	; 0x01
    414a:	bc 82       	std	Y+4, r11	; 0x04
    414c:	ab 82       	std	Y+3, r10	; 0x03
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    414e:	01 15       	cp	r16, r1
    4150:	11 05       	cpc	r17, r1
    4152:	09 f4       	brne	.+2      	; 0x4156 <sd_raw_write_interval+0x5a>
    4154:	7e c0       	rjmp	.+252    	; 0x4252 <sd_raw_write_interval+0x156>
    4156:	cd 28       	or	r12, r13
    4158:	09 f4       	brne	.+2      	; 0x415c <sd_raw_write_interval+0x60>
    415a:	7b c0       	rjmp	.+246    	; 0x4252 <sd_raw_write_interval+0x156>
        return 0;

    uint8_t endless = (length == 0);
    415c:	bb 24       	eor	r11, r11
    415e:	ef 28       	or	r14, r15
    4160:	09 f0       	breq	.+2      	; 0x4164 <sd_raw_write_interval+0x68>
    4162:	6e c0       	rjmp	.+220    	; 0x4240 <sd_raw_write_interval+0x144>
    4164:	bb 24       	eor	r11, r11
    4166:	b3 94       	inc	r11
    4168:	6b c0       	rjmp	.+214    	; 0x4240 <sd_raw_write_interval+0x144>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    416a:	c3 01       	movw	r24, r6
    416c:	09 2d       	mov	r16, r9
    416e:	18 2d       	mov	r17, r8
    4170:	25 2d       	mov	r18, r5
    4172:	34 2d       	mov	r19, r4
    4174:	43 2d       	mov	r20, r3
    4176:	52 2d       	mov	r21, r2
    4178:	6d 81       	ldd	r22, Y+5	; 0x05
    417a:	7e 81       	ldd	r23, Y+6	; 0x06
    417c:	eb 80       	ldd	r14, Y+3	; 0x03
    417e:	fc 80       	ldd	r15, Y+4	; 0x04
    4180:	a9 81       	ldd	r26, Y+1	; 0x01
    4182:	ba 81       	ldd	r27, Y+2	; 0x02
    4184:	fd 01       	movw	r30, r26
    4186:	09 95       	icall
    4188:	6c 01       	movw	r12, r24
        if(!bytes_to_write)
    418a:	00 97       	sbiw	r24, 0x00	; 0
    418c:	09 f4       	brne	.+2      	; 0x4190 <sd_raw_write_interval+0x94>
    418e:	63 c0       	rjmp	.+198    	; 0x4256 <sd_raw_write_interval+0x15a>
            break;
        if(!endless && bytes_to_write > length)
    4190:	bb 20       	and	r11, r11
    4192:	31 f4       	brne	.+12     	; 0x41a0 <sd_raw_write_interval+0xa4>
    4194:	ef 81       	ldd	r30, Y+7	; 0x07
    4196:	f8 85       	ldd	r31, Y+8	; 0x08
    4198:	e8 17       	cp	r30, r24
    419a:	f9 07       	cpc	r31, r25
    419c:	08 f4       	brcc	.+2      	; 0x41a0 <sd_raw_write_interval+0xa4>
    419e:	59 c0       	rjmp	.+178    	; 0x4252 <sd_raw_write_interval+0x156>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    41a0:	29 2d       	mov	r18, r9
    41a2:	38 2d       	mov	r19, r8
    41a4:	45 2d       	mov	r20, r5
    41a6:	54 2d       	mov	r21, r4
    41a8:	63 2d       	mov	r22, r3
    41aa:	72 2d       	mov	r23, r2
    41ac:	8d 81       	ldd	r24, Y+5	; 0x05
    41ae:	9e 81       	ldd	r25, Y+6	; 0x06
    41b0:	83 01       	movw	r16, r6
    41b2:	76 01       	movw	r14, r12
    41b4:	0e 94 c4 1a 	call	0x3588	; 0x3588 <sd_raw_write>
    41b8:	88 23       	and	r24, r24
    41ba:	09 f4       	brne	.+2      	; 0x41be <sd_raw_write_interval+0xc2>
    41bc:	4a c0       	rjmp	.+148    	; 0x4252 <sd_raw_write_interval+0x156>
            return 0;

        offset += bytes_to_write;
    41be:	96 01       	movw	r18, r12
    41c0:	f9 2d       	mov	r31, r9
    41c2:	fc 0d       	add	r31, r12
    41c4:	e1 e0       	ldi	r30, 0x01	; 1
    41c6:	f9 15       	cp	r31, r9
    41c8:	08 f0       	brcs	.+2      	; 0x41cc <sd_raw_write_interval+0xd0>
    41ca:	e0 e0       	ldi	r30, 0x00	; 0
    41cc:	88 2d       	mov	r24, r8
    41ce:	83 0f       	add	r24, r19
    41d0:	21 e0       	ldi	r18, 0x01	; 1
    41d2:	88 15       	cp	r24, r8
    41d4:	08 f0       	brcs	.+2      	; 0x41d8 <sd_raw_write_interval+0xdc>
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	1e 2f       	mov	r17, r30
    41da:	18 0f       	add	r17, r24
    41dc:	91 e0       	ldi	r25, 0x01	; 1
    41de:	18 17       	cp	r17, r24
    41e0:	08 f0       	brcs	.+2      	; 0x41e4 <sd_raw_write_interval+0xe8>
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	92 2b       	or	r25, r18
    41e6:	95 0d       	add	r25, r5
    41e8:	81 e0       	ldi	r24, 0x01	; 1
    41ea:	95 15       	cp	r25, r5
    41ec:	08 f0       	brcs	.+2      	; 0x41f0 <sd_raw_write_interval+0xf4>
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	68 2f       	mov	r22, r24
    41f2:	64 0d       	add	r22, r4
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	64 15       	cp	r22, r4
    41f8:	08 f0       	brcs	.+2      	; 0x41fc <sd_raw_write_interval+0x100>
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	58 2f       	mov	r21, r24
    41fe:	53 0d       	add	r21, r3
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	53 15       	cp	r21, r3
    4204:	08 f0       	brcs	.+2      	; 0x4208 <sd_raw_write_interval+0x10c>
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	48 2f       	mov	r20, r24
    420a:	42 0d       	add	r20, r2
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	42 15       	cp	r20, r2
    4210:	08 f0       	brcs	.+2      	; 0x4214 <sd_raw_write_interval+0x118>
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	2d 81       	ldd	r18, Y+5	; 0x05
    4216:	82 0f       	add	r24, r18
    4218:	21 e0       	ldi	r18, 0x01	; 1
    421a:	3d 81       	ldd	r19, Y+5	; 0x05
    421c:	83 17       	cp	r24, r19
    421e:	08 f0       	brcs	.+2      	; 0x4222 <sd_raw_write_interval+0x126>
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	9f 2e       	mov	r9, r31
    4224:	81 2e       	mov	r8, r17
    4226:	59 2e       	mov	r5, r25
    4228:	46 2e       	mov	r4, r22
    422a:	1a 01       	movw	r2, r20
    422c:	8d 83       	std	Y+5, r24	; 0x05
    422e:	8e 81       	ldd	r24, Y+6	; 0x06
    4230:	82 0f       	add	r24, r18
    4232:	8e 83       	std	Y+6, r24	; 0x06
        length -= bytes_to_write;
    4234:	af 81       	ldd	r26, Y+7	; 0x07
    4236:	b8 85       	ldd	r27, Y+8	; 0x08
    4238:	ac 19       	sub	r26, r12
    423a:	bd 09       	sbc	r27, r13
    423c:	b8 87       	std	Y+8, r27	; 0x08
    423e:	af 83       	std	Y+7, r26	; 0x07

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    4240:	bb 20       	and	r11, r11
    4242:	09 f0       	breq	.+2      	; 0x4246 <sd_raw_write_interval+0x14a>
    4244:	92 cf       	rjmp	.-220    	; 0x416a <sd_raw_write_interval+0x6e>
    4246:	ef 81       	ldd	r30, Y+7	; 0x07
    4248:	f8 85       	ldd	r31, Y+8	; 0x08
    424a:	ef 2b       	or	r30, r31
    424c:	09 f0       	breq	.+2      	; 0x4250 <sd_raw_write_interval+0x154>
    424e:	8d cf       	rjmp	.-230    	; 0x416a <sd_raw_write_interval+0x6e>
    4250:	02 c0       	rjmp	.+4      	; 0x4256 <sd_raw_write_interval+0x15a>
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	01 c0       	rjmp	.+2      	; 0x4258 <sd_raw_write_interval+0x15c>
    4256:	81 e0       	ldi	r24, 0x01	; 1
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    4258:	28 96       	adiw	r28, 0x08	; 8
    425a:	0f b6       	in	r0, 0x3f	; 63
    425c:	f8 94       	cli
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	0f be       	out	0x3f, r0	; 63
    4262:	cd bf       	out	0x3d, r28	; 61
    4264:	cf 91       	pop	r28
    4266:	df 91       	pop	r29
    4268:	1f 91       	pop	r17
    426a:	0f 91       	pop	r16
    426c:	ff 90       	pop	r15
    426e:	ef 90       	pop	r14
    4270:	df 90       	pop	r13
    4272:	cf 90       	pop	r12
    4274:	bf 90       	pop	r11
    4276:	af 90       	pop	r10
    4278:	9f 90       	pop	r9
    427a:	8f 90       	pop	r8
    427c:	7f 90       	pop	r7
    427e:	6f 90       	pop	r6
    4280:	5f 90       	pop	r5
    4282:	4f 90       	pop	r4
    4284:	3f 90       	pop	r3
    4286:	2f 90       	pop	r2
    4288:	08 95       	ret

0000428a <fat_close>:
 *
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    428a:	fc 01       	movw	r30, r24
    if(!fs)
    428c:	00 97       	sbiw	r24, 0x00	; 0
    428e:	11 f0       	breq	.+4      	; 0x4294 <fat_close+0xa>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
    4290:	11 82       	std	Z+1, r1	; 0x01
    4292:	10 82       	st	Z, r1
    4294:	08 95       	ret

00004296 <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    4296:	8f 92       	push	r8
    4298:	9f 92       	push	r9
    429a:	af 92       	push	r10
    429c:	bf 92       	push	r11
    429e:	cf 92       	push	r12
    42a0:	df 92       	push	r13
    42a2:	ef 92       	push	r14
    42a4:	ff 92       	push	r15
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	df 93       	push	r29
    42ac:	cf 93       	push	r28
    42ae:	00 d0       	rcall	.+0      	; 0x42b0 <fat_get_next_cluster+0x1a>
    42b0:	00 d0       	rcall	.+0      	; 0x42b2 <fat_get_next_cluster+0x1c>
    42b2:	00 d0       	rcall	.+0      	; 0x42b4 <fat_get_next_cluster+0x1e>
    42b4:	cd b7       	in	r28, 0x3d	; 61
    42b6:	de b7       	in	r29, 0x3e	; 62
    42b8:	dc 01       	movw	r26, r24
    if(!fs || cluster_num < 2)
    42ba:	00 97       	sbiw	r24, 0x00	; 0
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <fat_get_next_cluster+0x2a>
    42be:	f0 c0       	rjmp	.+480    	; 0x44a0 <fat_get_next_cluster+0x20a>
    42c0:	42 30       	cpi	r20, 0x02	; 2
    42c2:	51 05       	cpc	r21, r1
    42c4:	61 05       	cpc	r22, r1
    42c6:	71 05       	cpc	r23, r1
    42c8:	08 f4       	brcc	.+2      	; 0x42cc <fat_get_next_cluster+0x36>
    42ca:	ea c0       	rjmp	.+468    	; 0x44a0 <fat_get_next_cluster+0x20a>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    42cc:	ed 91       	ld	r30, X+
    42ce:	fc 91       	ld	r31, X
    42d0:	11 97       	sbiw	r26, 0x01	; 1
    42d2:	80 85       	ldd	r24, Z+8	; 0x08
    42d4:	8b 30       	cpi	r24, 0x0B	; 11
    42d6:	09 f0       	breq	.+2      	; 0x42da <fat_get_next_cluster+0x44>
    42d8:	9d c0       	rjmp	.+314    	; 0x4414 <fat_get_next_cluster+0x17e>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    42da:	12 e0       	ldi	r17, 0x02	; 2
    42dc:	44 0f       	add	r20, r20
    42de:	55 1f       	adc	r21, r21
    42e0:	66 1f       	adc	r22, r22
    42e2:	77 1f       	adc	r23, r23
    42e4:	1a 95       	dec	r17
    42e6:	d1 f7       	brne	.-12     	; 0x42dc <fat_get_next_cluster+0x46>
    42e8:	5a 01       	movw	r10, r20
    42ea:	6b 01       	movw	r12, r22
    42ec:	ee 24       	eor	r14, r14
    42ee:	ff 24       	eor	r15, r15
    42f0:	87 01       	movw	r16, r14
    42f2:	1a 96       	adiw	r26, 0x0a	; 10
    42f4:	9c 90       	ld	r9, X
    42f6:	1a 97       	sbiw	r26, 0x0a	; 10
    42f8:	1b 96       	adiw	r26, 0x0b	; 11
    42fa:	8c 91       	ld	r24, X
    42fc:	1b 97       	sbiw	r26, 0x0b	; 11
    42fe:	1c 96       	adiw	r26, 0x0c	; 12
    4300:	6c 91       	ld	r22, X
    4302:	1c 97       	sbiw	r26, 0x0c	; 12
    4304:	1d 96       	adiw	r26, 0x0d	; 13
    4306:	7c 91       	ld	r23, X
    4308:	1d 97       	sbiw	r26, 0x0d	; 13
    430a:	1e 96       	adiw	r26, 0x0e	; 14
    430c:	9c 91       	ld	r25, X
    430e:	1e 97       	sbiw	r26, 0x0e	; 14
    4310:	1f 96       	adiw	r26, 0x0f	; 15
    4312:	2c 91       	ld	r18, X
    4314:	1f 97       	sbiw	r26, 0x0f	; 15
    4316:	50 96       	adiw	r26, 0x10	; 16
    4318:	8c 90       	ld	r8, X
    431a:	50 97       	sbiw	r26, 0x10	; 16
    431c:	51 96       	adiw	r26, 0x11	; 17
    431e:	bc 91       	ld	r27, X
    4320:	9a 0c       	add	r9, r10
    4322:	31 e0       	ldi	r19, 0x01	; 1
    4324:	9a 14       	cp	r9, r10
    4326:	08 f0       	brcs	.+2      	; 0x432a <fat_get_next_cluster+0x94>
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	8b 0d       	add	r24, r11
    432c:	41 e0       	ldi	r20, 0x01	; 1
    432e:	8b 15       	cp	r24, r11
    4330:	08 f0       	brcs	.+2      	; 0x4334 <fat_get_next_cluster+0x9e>
    4332:	40 e0       	ldi	r20, 0x00	; 0
    4334:	38 0f       	add	r19, r24
    4336:	51 e0       	ldi	r21, 0x01	; 1
    4338:	38 17       	cp	r19, r24
    433a:	08 f0       	brcs	.+2      	; 0x433e <fat_get_next_cluster+0xa8>
    433c:	50 e0       	ldi	r21, 0x00	; 0
    433e:	45 2b       	or	r20, r21
    4340:	8c 2d       	mov	r24, r12
    4342:	86 0f       	add	r24, r22
    4344:	51 e0       	ldi	r21, 0x01	; 1
    4346:	8c 15       	cp	r24, r12
    4348:	08 f0       	brcs	.+2      	; 0x434c <fat_get_next_cluster+0xb6>
    434a:	50 e0       	ldi	r21, 0x00	; 0
    434c:	48 0f       	add	r20, r24
    434e:	61 e0       	ldi	r22, 0x01	; 1
    4350:	48 17       	cp	r20, r24
    4352:	08 f0       	brcs	.+2      	; 0x4356 <fat_get_next_cluster+0xc0>
    4354:	60 e0       	ldi	r22, 0x00	; 0
    4356:	56 2b       	or	r21, r22
    4358:	8d 2d       	mov	r24, r13
    435a:	87 0f       	add	r24, r23
    435c:	61 e0       	ldi	r22, 0x01	; 1
    435e:	8d 15       	cp	r24, r13
    4360:	08 f0       	brcs	.+2      	; 0x4364 <fat_get_next_cluster+0xce>
    4362:	60 e0       	ldi	r22, 0x00	; 0
    4364:	58 0f       	add	r21, r24
    4366:	71 e0       	ldi	r23, 0x01	; 1
    4368:	58 17       	cp	r21, r24
    436a:	08 f0       	brcs	.+2      	; 0x436e <fat_get_next_cluster+0xd8>
    436c:	70 e0       	ldi	r23, 0x00	; 0
    436e:	67 2b       	or	r22, r23
    4370:	71 e0       	ldi	r23, 0x01	; 1
    4372:	9e 15       	cp	r25, r14
    4374:	08 f0       	brcs	.+2      	; 0x4378 <fat_get_next_cluster+0xe2>
    4376:	70 e0       	ldi	r23, 0x00	; 0
    4378:	69 0f       	add	r22, r25
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	69 17       	cp	r22, r25
    437e:	08 f0       	brcs	.+2      	; 0x4382 <fat_get_next_cluster+0xec>
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	78 2b       	or	r23, r24
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	2f 15       	cp	r18, r15
    4388:	08 f0       	brcs	.+2      	; 0x438c <fat_get_next_cluster+0xf6>
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	72 0f       	add	r23, r18
    438e:	a1 e0       	ldi	r26, 0x01	; 1
    4390:	72 17       	cp	r23, r18
    4392:	08 f0       	brcs	.+2      	; 0x4396 <fat_get_next_cluster+0x100>
    4394:	a0 e0       	ldi	r26, 0x00	; 0
    4396:	8a 2b       	or	r24, r26
    4398:	91 e0       	ldi	r25, 0x01	; 1
    439a:	80 16       	cp	r8, r16
    439c:	08 f0       	brcs	.+2      	; 0x43a0 <fat_get_next_cluster+0x10a>
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	88 0d       	add	r24, r8
    43a2:	a1 e0       	ldi	r26, 0x01	; 1
    43a4:	88 15       	cp	r24, r8
    43a6:	08 f0       	brcs	.+2      	; 0x43aa <fat_get_next_cluster+0x114>
    43a8:	a0 e0       	ldi	r26, 0x00	; 0
    43aa:	9a 2b       	or	r25, r26
    43ac:	01 90       	ld	r0, Z+
    43ae:	f0 81       	ld	r31, Z
    43b0:	e0 2d       	mov	r30, r0
    43b2:	29 2d       	mov	r18, r9
    43b4:	9b 0f       	add	r25, r27
    43b6:	8e 01       	movw	r16, r28
    43b8:	0d 5f       	subi	r16, 0xFD	; 253
    43ba:	1f 4f       	sbci	r17, 0xFF	; 255
    43bc:	a4 e0       	ldi	r26, 0x04	; 4
    43be:	ea 2e       	mov	r14, r26
    43c0:	f1 2c       	mov	r15, r1
    43c2:	09 95       	icall
    43c4:	88 23       	and	r24, r24
    43c6:	09 f4       	brne	.+2      	; 0x43ca <fat_get_next_cluster+0x134>
    43c8:	6b c0       	rjmp	.+214    	; 0x44a0 <fat_get_next_cluster+0x20a>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
    43ca:	2b 81       	ldd	r18, Y+3	; 0x03
    43cc:	3c 81       	ldd	r19, Y+4	; 0x04
    43ce:	4d 81       	ldd	r20, Y+5	; 0x05
    43d0:	5e 81       	ldd	r21, Y+6	; 0x06
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
    43d2:	21 15       	cp	r18, r1
    43d4:	31 05       	cpc	r19, r1
    43d6:	41 05       	cpc	r20, r1
    43d8:	51 05       	cpc	r21, r1
    43da:	09 f4       	brne	.+2      	; 0x43de <fat_get_next_cluster+0x148>
    43dc:	65 c0       	rjmp	.+202    	; 0x44a8 <fat_get_next_cluster+0x212>
    43de:	27 3f       	cpi	r18, 0xF7	; 247
    43e0:	8f ef       	ldi	r24, 0xFF	; 255
    43e2:	38 07       	cpc	r19, r24
    43e4:	8f ef       	ldi	r24, 0xFF	; 255
    43e6:	48 07       	cpc	r20, r24
    43e8:	8f e0       	ldi	r24, 0x0F	; 15
    43ea:	58 07       	cpc	r21, r24
    43ec:	09 f4       	brne	.+2      	; 0x43f0 <fat_get_next_cluster+0x15a>
    43ee:	58 c0       	rjmp	.+176    	; 0x44a0 <fat_get_next_cluster+0x20a>
    43f0:	da 01       	movw	r26, r20
    43f2:	c9 01       	movw	r24, r18
    43f4:	80 5f       	subi	r24, 0xF0	; 240
    43f6:	9f 4f       	sbci	r25, 0xFF	; 255
    43f8:	af 4f       	sbci	r26, 0xFF	; 255
    43fa:	bf 40       	sbci	r27, 0x0F	; 15
    43fc:	07 97       	sbiw	r24, 0x07	; 7
    43fe:	a1 05       	cpc	r26, r1
    4400:	b1 05       	cpc	r27, r1
    4402:	08 f4       	brcc	.+2      	; 0x4406 <fat_get_next_cluster+0x170>
    4404:	4d c0       	rjmp	.+154    	; 0x44a0 <fat_get_next_cluster+0x20a>
    4406:	da 01       	movw	r26, r20
    4408:	c9 01       	movw	r24, r18
    440a:	88 5f       	subi	r24, 0xF8	; 248
    440c:	9f 4f       	sbci	r25, 0xFF	; 255
    440e:	af 4f       	sbci	r26, 0xFF	; 255
    4410:	bf 40       	sbci	r27, 0x0F	; 15
    4412:	42 c0       	rjmp	.+132    	; 0x4498 <fat_get_next_cluster+0x202>
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        uint32_t cluster_offset = cluster_num;
        cluster_offset *= sizeof(fat_entry);
    4414:	44 0f       	add	r20, r20
    4416:	55 1f       	adc	r21, r21
    4418:	66 1f       	adc	r22, r22
    441a:	77 1f       	adc	r23, r23
        cluster_offset += fs->header.fat_offset;

        if(!fs->partition->device_read(cluster_offset, (uint8_t*) &fat_entry, sizeof(fat_entry)))
    441c:	1a 96       	adiw	r26, 0x0a	; 10
    441e:	ad 90       	ld	r10, X+
    4420:	bd 90       	ld	r11, X+
    4422:	cd 90       	ld	r12, X+
    4424:	dc 90       	ld	r13, X
    4426:	1d 97       	sbiw	r26, 0x0d	; 13
    4428:	a4 0e       	add	r10, r20
    442a:	b5 1e       	adc	r11, r21
    442c:	c6 1e       	adc	r12, r22
    442e:	d7 1e       	adc	r13, r23
    4430:	01 90       	ld	r0, Z+
    4432:	f0 81       	ld	r31, Z
    4434:	e0 2d       	mov	r30, r0
    4436:	95 01       	movw	r18, r10
    4438:	a6 01       	movw	r20, r12
    443a:	60 e0       	ldi	r22, 0x00	; 0
    443c:	70 e0       	ldi	r23, 0x00	; 0
    443e:	80 e0       	ldi	r24, 0x00	; 0
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	8e 01       	movw	r16, r28
    4444:	0f 5f       	subi	r16, 0xFF	; 255
    4446:	1f 4f       	sbci	r17, 0xFF	; 255
    4448:	a2 e0       	ldi	r26, 0x02	; 2
    444a:	ea 2e       	mov	r14, r26
    444c:	f1 2c       	mov	r15, r1
    444e:	09 95       	icall
    4450:	88 23       	and	r24, r24
    4452:	31 f1       	breq	.+76     	; 0x44a0 <fat_get_next_cluster+0x20a>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    4454:	89 81       	ldd	r24, Y+1	; 0x01
    4456:	9a 81       	ldd	r25, Y+2	; 0x02
    4458:	9c 01       	movw	r18, r24
    445a:	40 e0       	ldi	r20, 0x00	; 0
    445c:	50 e0       	ldi	r21, 0x00	; 0
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
    445e:	21 15       	cp	r18, r1
    4460:	31 05       	cpc	r19, r1
    4462:	41 05       	cpc	r20, r1
    4464:	51 05       	cpc	r21, r1
    4466:	01 f1       	breq	.+64     	; 0x44a8 <fat_get_next_cluster+0x212>
    4468:	27 3f       	cpi	r18, 0xF7	; 247
    446a:	8f ef       	ldi	r24, 0xFF	; 255
    446c:	38 07       	cpc	r19, r24
    446e:	80 e0       	ldi	r24, 0x00	; 0
    4470:	48 07       	cpc	r20, r24
    4472:	80 e0       	ldi	r24, 0x00	; 0
    4474:	58 07       	cpc	r21, r24
    4476:	a1 f0       	breq	.+40     	; 0x44a0 <fat_get_next_cluster+0x20a>
    4478:	da 01       	movw	r26, r20
    447a:	c9 01       	movw	r24, r18
    447c:	80 5f       	subi	r24, 0xF0	; 240
    447e:	9f 4f       	sbci	r25, 0xFF	; 255
    4480:	a0 40       	sbci	r26, 0x00	; 0
    4482:	b0 40       	sbci	r27, 0x00	; 0
    4484:	07 97       	sbiw	r24, 0x07	; 7
    4486:	a1 05       	cpc	r26, r1
    4488:	b1 05       	cpc	r27, r1
    448a:	50 f0       	brcs	.+20     	; 0x44a0 <fat_get_next_cluster+0x20a>
    448c:	da 01       	movw	r26, r20
    448e:	c9 01       	movw	r24, r18
    4490:	88 5f       	subi	r24, 0xF8	; 248
    4492:	9f 4f       	sbci	r25, 0xFF	; 255
    4494:	a0 40       	sbci	r26, 0x00	; 0
    4496:	b0 40       	sbci	r27, 0x00	; 0
    4498:	08 97       	sbiw	r24, 0x08	; 8
    449a:	a1 05       	cpc	r26, r1
    449c:	b1 05       	cpc	r27, r1
    449e:	20 f4       	brcc	.+8      	; 0x44a8 <fat_get_next_cluster+0x212>
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	40 e0       	ldi	r20, 0x00	; 0
    44a6:	50 e0       	ldi	r21, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
    44a8:	b9 01       	movw	r22, r18
    44aa:	ca 01       	movw	r24, r20
    44ac:	26 96       	adiw	r28, 0x06	; 6
    44ae:	0f b6       	in	r0, 0x3f	; 63
    44b0:	f8 94       	cli
    44b2:	de bf       	out	0x3e, r29	; 62
    44b4:	0f be       	out	0x3f, r0	; 63
    44b6:	cd bf       	out	0x3d, r28	; 61
    44b8:	cf 91       	pop	r28
    44ba:	df 91       	pop	r29
    44bc:	1f 91       	pop	r17
    44be:	0f 91       	pop	r16
    44c0:	ff 90       	pop	r15
    44c2:	ef 90       	pop	r14
    44c4:	df 90       	pop	r13
    44c6:	cf 90       	pop	r12
    44c8:	bf 90       	pop	r11
    44ca:	af 90       	pop	r10
    44cc:	9f 90       	pop	r9
    44ce:	8f 90       	pop	r8
    44d0:	08 95       	ret

000044d2 <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    44d2:	2f 92       	push	r2
    44d4:	3f 92       	push	r3
    44d6:	4f 92       	push	r4
    44d8:	5f 92       	push	r5
    44da:	6f 92       	push	r6
    44dc:	7f 92       	push	r7
    44de:	8f 92       	push	r8
    44e0:	9f 92       	push	r9
    44e2:	af 92       	push	r10
    44e4:	bf 92       	push	r11
    44e6:	cf 92       	push	r12
    44e8:	df 92       	push	r13
    44ea:	ef 92       	push	r14
    44ec:	ff 92       	push	r15
    44ee:	0f 93       	push	r16
    44f0:	1f 93       	push	r17
    44f2:	df 93       	push	r29
    44f4:	cf 93       	push	r28
    44f6:	cd b7       	in	r28, 0x3d	; 61
    44f8:	de b7       	in	r29, 0x3e	; 62
    44fa:	60 97       	sbiw	r28, 0x10	; 16
    44fc:	0f b6       	in	r0, 0x3f	; 63
    44fe:	f8 94       	cli
    4500:	de bf       	out	0x3e, r29	; 62
    4502:	0f be       	out	0x3f, r0	; 63
    4504:	cd bf       	out	0x3d, r28	; 61
    4506:	4c 01       	movw	r8, r24
    if(!fs || cluster_num < 2)
    4508:	00 97       	sbiw	r24, 0x00	; 0
    450a:	09 f4       	brne	.+2      	; 0x450e <fat_free_clusters+0x3c>
    450c:	82 c1       	rjmp	.+772    	; 0x4812 <fat_free_clusters+0x340>
    450e:	42 30       	cpi	r20, 0x02	; 2
    4510:	51 05       	cpc	r21, r1
    4512:	61 05       	cpc	r22, r1
    4514:	71 05       	cpc	r23, r1
    4516:	08 f4       	brcc	.+2      	; 0x451a <fat_free_clusters+0x48>
    4518:	7c c1       	rjmp	.+760    	; 0x4812 <fat_free_clusters+0x340>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
    451a:	dc 01       	movw	r26, r24
    451c:	1a 96       	adiw	r26, 0x0a	; 10
    451e:	bc 91       	ld	r27, X
    4520:	b8 87       	std	Y+8, r27	; 0x08
    4522:	fc 01       	movw	r30, r24
    4524:	f3 85       	ldd	r31, Z+11	; 0x0b
    4526:	f9 87       	std	Y+9, r31	; 0x09
    4528:	dc 01       	movw	r26, r24
    452a:	1c 96       	adiw	r26, 0x0c	; 12
    452c:	bc 91       	ld	r27, X
    452e:	ba 87       	std	Y+10, r27	; 0x0a
    4530:	fc 01       	movw	r30, r24
    4532:	f5 85       	ldd	r31, Z+13	; 0x0d
    4534:	fb 87       	std	Y+11, r31	; 0x0b
    4536:	dc 01       	movw	r26, r24
    4538:	1e 96       	adiw	r26, 0x0e	; 14
    453a:	bc 91       	ld	r27, X
    453c:	bc 87       	std	Y+12, r27	; 0x0c
    453e:	fc 01       	movw	r30, r24
    4540:	f7 85       	ldd	r31, Z+15	; 0x0f
    4542:	fd 87       	std	Y+13, r31	; 0x0d
    4544:	dc 01       	movw	r26, r24
    4546:	50 96       	adiw	r26, 0x10	; 16
    4548:	bc 91       	ld	r27, X
    454a:	be 87       	std	Y+14, r27	; 0x0e
    454c:	fc 01       	movw	r30, r24
    454e:	f1 89       	ldd	r31, Z+17	; 0x11
    4550:	ff 87       	std	Y+15, r31	; 0x0f
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    4552:	dc 01       	movw	r26, r24
    4554:	ed 91       	ld	r30, X+
    4556:	fc 91       	ld	r31, X
    4558:	80 85       	ldd	r24, Z+8	; 0x08
    455a:	8b 30       	cpi	r24, 0x0B	; 11
    455c:	09 f0       	breq	.+2      	; 0x4560 <fat_free_clusters+0x8e>
    455e:	ba c0       	rjmp	.+372    	; 0x46d4 <fat_free_clusters+0x202>
    {
        uint32_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    4560:	12 e0       	ldi	r17, 0x02	; 2
    4562:	44 0f       	add	r20, r20
    4564:	55 1f       	adc	r21, r21
    4566:	66 1f       	adc	r22, r22
    4568:	77 1f       	adc	r23, r23
    456a:	1a 95       	dec	r17
    456c:	d1 f7       	brne	.-12     	; 0x4562 <fat_free_clusters+0x90>
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	a0 e0       	ldi	r26, 0x00	; 0
    4574:	b0 e0       	ldi	r27, 0x00	; 0
    4576:	e8 85       	ldd	r30, Y+8	; 0x08
    4578:	e4 0f       	add	r30, r20
    457a:	e8 8b       	std	Y+16, r30	; 0x10
    457c:	31 e0       	ldi	r19, 0x01	; 1
    457e:	e4 17       	cp	r30, r20
    4580:	08 f0       	brcs	.+2      	; 0x4584 <fat_free_clusters+0xb2>
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	29 85       	ldd	r18, Y+9	; 0x09
    4586:	25 0f       	add	r18, r21
    4588:	e1 e0       	ldi	r30, 0x01	; 1
    458a:	25 17       	cp	r18, r21
    458c:	08 f0       	brcs	.+2      	; 0x4590 <fat_free_clusters+0xbe>
    458e:	e0 e0       	ldi	r30, 0x00	; 0
    4590:	32 0f       	add	r19, r18
    4592:	3f 83       	std	Y+7, r19	; 0x07
    4594:	31 e0       	ldi	r19, 0x01	; 1
    4596:	ff 81       	ldd	r31, Y+7	; 0x07
    4598:	f2 17       	cp	r31, r18
    459a:	08 f0       	brcs	.+2      	; 0x459e <fat_free_clusters+0xcc>
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	e3 2b       	or	r30, r19
    45a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    45a2:	26 0f       	add	r18, r22
    45a4:	f1 e0       	ldi	r31, 0x01	; 1
    45a6:	26 17       	cp	r18, r22
    45a8:	08 f0       	brcs	.+2      	; 0x45ac <fat_free_clusters+0xda>
    45aa:	f0 e0       	ldi	r31, 0x00	; 0
    45ac:	2e 2e       	mov	r2, r30
    45ae:	22 0e       	add	r2, r18
    45b0:	31 e0       	ldi	r19, 0x01	; 1
    45b2:	22 16       	cp	r2, r18
    45b4:	08 f0       	brcs	.+2      	; 0x45b8 <fat_free_clusters+0xe6>
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	f3 2b       	or	r31, r19
    45ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    45bc:	27 0f       	add	r18, r23
    45be:	31 e0       	ldi	r19, 0x01	; 1
    45c0:	27 17       	cp	r18, r23
    45c2:	08 f0       	brcs	.+2      	; 0x45c6 <fat_free_clusters+0xf4>
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	3f 2e       	mov	r3, r31
    45c8:	32 0e       	add	r3, r18
    45ca:	e1 e0       	ldi	r30, 0x01	; 1
    45cc:	32 16       	cp	r3, r18
    45ce:	08 f0       	brcs	.+2      	; 0x45d2 <fat_free_clusters+0x100>
    45d0:	e0 e0       	ldi	r30, 0x00	; 0
    45d2:	3e 2b       	or	r19, r30
    45d4:	21 e0       	ldi	r18, 0x01	; 1
    45d6:	ec 85       	ldd	r30, Y+12	; 0x0c
    45d8:	e8 17       	cp	r30, r24
    45da:	08 f0       	brcs	.+2      	; 0x45de <fat_free_clusters+0x10c>
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	4c 84       	ldd	r4, Y+12	; 0x0c
    45e0:	43 0e       	add	r4, r19
    45e2:	31 e0       	ldi	r19, 0x01	; 1
    45e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    45e6:	4f 16       	cp	r4, r31
    45e8:	08 f0       	brcs	.+2      	; 0x45ec <fat_free_clusters+0x11a>
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	23 2b       	or	r18, r19
    45ee:	31 e0       	ldi	r19, 0x01	; 1
    45f0:	ed 85       	ldd	r30, Y+13	; 0x0d
    45f2:	e9 17       	cp	r30, r25
    45f4:	08 f0       	brcs	.+2      	; 0x45f8 <fat_free_clusters+0x126>
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	5d 84       	ldd	r5, Y+13	; 0x0d
    45fa:	52 0e       	add	r5, r18
    45fc:	21 e0       	ldi	r18, 0x01	; 1
    45fe:	fd 85       	ldd	r31, Y+13	; 0x0d
    4600:	5f 16       	cp	r5, r31
    4602:	08 f0       	brcs	.+2      	; 0x4606 <fat_free_clusters+0x134>
    4604:	20 e0       	ldi	r18, 0x00	; 0
    4606:	32 2b       	or	r19, r18
    4608:	21 e0       	ldi	r18, 0x01	; 1
    460a:	ee 85       	ldd	r30, Y+14	; 0x0e
    460c:	ea 17       	cp	r30, r26
    460e:	08 f0       	brcs	.+2      	; 0x4612 <fat_free_clusters+0x140>
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	6e 84       	ldd	r6, Y+14	; 0x0e
    4614:	63 0e       	add	r6, r19
    4616:	91 e0       	ldi	r25, 0x01	; 1
    4618:	fe 85       	ldd	r31, Y+14	; 0x0e
    461a:	6f 16       	cp	r6, r31
    461c:	08 f0       	brcs	.+2      	; 0x4620 <fat_free_clusters+0x14e>
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	72 2e       	mov	r7, r18
    4622:	79 2a       	or	r7, r25
    4624:	2f 85       	ldd	r18, Y+15	; 0x0f
    4626:	72 0e       	add	r7, r18
    4628:	d4 01       	movw	r26, r8
    462a:	ed 91       	ld	r30, X+
    462c:	fc 91       	ld	r31, X
    462e:	01 90       	ld	r0, Z+
    4630:	f0 81       	ld	r31, Z
    4632:	e0 2d       	mov	r30, r0
    4634:	28 89       	ldd	r18, Y+16	; 0x10
    4636:	3f 81       	ldd	r19, Y+7	; 0x07
    4638:	a1 01       	movw	r20, r2
    463a:	b2 01       	movw	r22, r4
    463c:	c3 01       	movw	r24, r6
    463e:	8e 01       	movw	r16, r28
    4640:	0d 5f       	subi	r16, 0xFD	; 253
    4642:	1f 4f       	sbci	r17, 0xFF	; 255
    4644:	b4 e0       	ldi	r27, 0x04	; 4
    4646:	eb 2e       	mov	r14, r27
    4648:	f1 2c       	mov	r15, r1
    464a:	09 95       	icall
    464c:	88 23       	and	r24, r24
    464e:	09 f4       	brne	.+2      	; 0x4652 <fat_free_clusters+0x180>
    4650:	e0 c0       	rjmp	.+448    	; 0x4812 <fat_free_clusters+0x340>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint32_t cluster_num_next = ltoh32(fat_entry);
    4652:	ab 80       	ldd	r10, Y+3	; 0x03
    4654:	bc 80       	ldd	r11, Y+4	; 0x04
    4656:	cd 80       	ldd	r12, Y+5	; 0x05
    4658:	de 80       	ldd	r13, Y+6	; 0x06

            if(cluster_num_next == FAT32_CLUSTER_FREE)
    465a:	a1 14       	cp	r10, r1
    465c:	b1 04       	cpc	r11, r1
    465e:	c1 04       	cpc	r12, r1
    4660:	d1 04       	cpc	r13, r1
    4662:	09 f4       	brne	.+2      	; 0x4666 <fat_free_clusters+0x194>
    4664:	d8 c0       	rjmp	.+432    	; 0x4816 <fat_free_clusters+0x344>
                return 1;
            if(cluster_num_next == FAT32_CLUSTER_BAD ||
    4666:	d6 01       	movw	r26, r12
    4668:	c5 01       	movw	r24, r10
    466a:	80 5f       	subi	r24, 0xF0	; 240
    466c:	9f 4f       	sbci	r25, 0xFF	; 255
    466e:	af 4f       	sbci	r26, 0xFF	; 255
    4670:	bf 40       	sbci	r27, 0x0F	; 15
    4672:	08 97       	sbiw	r24, 0x08	; 8
    4674:	a1 05       	cpc	r26, r1
    4676:	b1 05       	cpc	r27, r1
    4678:	08 f4       	brcc	.+2      	; 0x467c <fat_free_clusters+0x1aa>
    467a:	cb c0       	rjmp	.+406    	; 0x4812 <fat_free_clusters+0x340>
               (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
    467c:	d6 01       	movw	r26, r12
    467e:	c5 01       	movw	r24, r10
    4680:	88 5f       	subi	r24, 0xF8	; 248
    4682:	9f 4f       	sbci	r25, 0xFF	; 255
    4684:	af 4f       	sbci	r26, 0xFF	; 255
    4686:	bf 40       	sbci	r27, 0x0F	; 15
    4688:	08 97       	sbiw	r24, 0x08	; 8
    468a:	a1 05       	cpc	r26, r1
    468c:	b1 05       	cpc	r27, r1
    468e:	18 f4       	brcc	.+6      	; 0x4696 <fat_free_clusters+0x1c4>
    4690:	aa 24       	eor	r10, r10
    4692:	bb 24       	eor	r11, r11
    4694:	65 01       	movw	r12, r10
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
    4696:	1b 82       	std	Y+3, r1	; 0x03
    4698:	1c 82       	std	Y+4, r1	; 0x04
    469a:	1d 82       	std	Y+5, r1	; 0x05
    469c:	1e 82       	std	Y+6, r1	; 0x06
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    469e:	d4 01       	movw	r26, r8
    46a0:	ed 91       	ld	r30, X+
    46a2:	fc 91       	ld	r31, X
    46a4:	04 80       	ldd	r0, Z+4	; 0x04
    46a6:	f5 81       	ldd	r31, Z+5	; 0x05
    46a8:	e0 2d       	mov	r30, r0
    46aa:	28 89       	ldd	r18, Y+16	; 0x10
    46ac:	3f 81       	ldd	r19, Y+7	; 0x07
    46ae:	a1 01       	movw	r20, r2
    46b0:	b2 01       	movw	r22, r4
    46b2:	c3 01       	movw	r24, r6
    46b4:	8e 01       	movw	r16, r28
    46b6:	0d 5f       	subi	r16, 0xFD	; 253
    46b8:	1f 4f       	sbci	r17, 0xFF	; 255
    46ba:	a4 e0       	ldi	r26, 0x04	; 4
    46bc:	ea 2e       	mov	r14, r26
    46be:	f1 2c       	mov	r15, r1
    46c0:	09 95       	icall
    46c2:	b6 01       	movw	r22, r12
    46c4:	a5 01       	movw	r20, r10
    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
    46c6:	a1 14       	cp	r10, r1
    46c8:	b1 04       	cpc	r11, r1
    46ca:	c1 04       	cpc	r12, r1
    46cc:	d1 04       	cpc	r13, r1
    46ce:	09 f0       	breq	.+2      	; 0x46d2 <fat_free_clusters+0x200>
    46d0:	47 cf       	rjmp	.-370    	; 0x4560 <fat_free_clusters+0x8e>
    46d2:	a1 c0       	rjmp	.+322    	; 0x4816 <fat_free_clusters+0x344>
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    46d4:	44 0f       	add	r20, r20
    46d6:	55 1f       	adc	r21, r21
    46d8:	66 1f       	adc	r22, r22
    46da:	77 1f       	adc	r23, r23
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	a0 e0       	ldi	r26, 0x00	; 0
    46e2:	b0 e0       	ldi	r27, 0x00	; 0
    46e4:	28 84       	ldd	r2, Y+8	; 0x08
    46e6:	24 0e       	add	r2, r20
    46e8:	31 e0       	ldi	r19, 0x01	; 1
    46ea:	24 16       	cp	r2, r20
    46ec:	08 f0       	brcs	.+2      	; 0x46f0 <fat_free_clusters+0x21e>
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	29 85       	ldd	r18, Y+9	; 0x09
    46f2:	25 0f       	add	r18, r21
    46f4:	e1 e0       	ldi	r30, 0x01	; 1
    46f6:	25 17       	cp	r18, r21
    46f8:	08 f0       	brcs	.+2      	; 0x46fc <fat_free_clusters+0x22a>
    46fa:	e0 e0       	ldi	r30, 0x00	; 0
    46fc:	33 2e       	mov	r3, r19
    46fe:	32 0e       	add	r3, r18
    4700:	31 e0       	ldi	r19, 0x01	; 1
    4702:	32 16       	cp	r3, r18
    4704:	08 f0       	brcs	.+2      	; 0x4708 <fat_free_clusters+0x236>
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	e3 2b       	or	r30, r19
    470a:	2a 85       	ldd	r18, Y+10	; 0x0a
    470c:	26 0f       	add	r18, r22
    470e:	f1 e0       	ldi	r31, 0x01	; 1
    4710:	26 17       	cp	r18, r22
    4712:	08 f0       	brcs	.+2      	; 0x4716 <fat_free_clusters+0x244>
    4714:	f0 e0       	ldi	r31, 0x00	; 0
    4716:	4e 2e       	mov	r4, r30
    4718:	42 0e       	add	r4, r18
    471a:	31 e0       	ldi	r19, 0x01	; 1
    471c:	42 16       	cp	r4, r18
    471e:	08 f0       	brcs	.+2      	; 0x4722 <fat_free_clusters+0x250>
    4720:	30 e0       	ldi	r19, 0x00	; 0
    4722:	f3 2b       	or	r31, r19
    4724:	2b 85       	ldd	r18, Y+11	; 0x0b
    4726:	27 0f       	add	r18, r23
    4728:	31 e0       	ldi	r19, 0x01	; 1
    472a:	27 17       	cp	r18, r23
    472c:	08 f0       	brcs	.+2      	; 0x4730 <fat_free_clusters+0x25e>
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	5f 2e       	mov	r5, r31
    4732:	52 0e       	add	r5, r18
    4734:	e1 e0       	ldi	r30, 0x01	; 1
    4736:	52 16       	cp	r5, r18
    4738:	08 f0       	brcs	.+2      	; 0x473c <fat_free_clusters+0x26a>
    473a:	e0 e0       	ldi	r30, 0x00	; 0
    473c:	3e 2b       	or	r19, r30
    473e:	21 e0       	ldi	r18, 0x01	; 1
    4740:	ec 85       	ldd	r30, Y+12	; 0x0c
    4742:	e8 17       	cp	r30, r24
    4744:	08 f0       	brcs	.+2      	; 0x4748 <fat_free_clusters+0x276>
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	6c 84       	ldd	r6, Y+12	; 0x0c
    474a:	63 0e       	add	r6, r19
    474c:	31 e0       	ldi	r19, 0x01	; 1
    474e:	fc 85       	ldd	r31, Y+12	; 0x0c
    4750:	6f 16       	cp	r6, r31
    4752:	08 f0       	brcs	.+2      	; 0x4756 <fat_free_clusters+0x284>
    4754:	30 e0       	ldi	r19, 0x00	; 0
    4756:	23 2b       	or	r18, r19
    4758:	31 e0       	ldi	r19, 0x01	; 1
    475a:	ed 85       	ldd	r30, Y+13	; 0x0d
    475c:	e9 17       	cp	r30, r25
    475e:	08 f0       	brcs	.+2      	; 0x4762 <fat_free_clusters+0x290>
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	7d 84       	ldd	r7, Y+13	; 0x0d
    4764:	72 0e       	add	r7, r18
    4766:	21 e0       	ldi	r18, 0x01	; 1
    4768:	fd 85       	ldd	r31, Y+13	; 0x0d
    476a:	7f 16       	cp	r7, r31
    476c:	08 f0       	brcs	.+2      	; 0x4770 <fat_free_clusters+0x29e>
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	32 2b       	or	r19, r18
    4772:	21 e0       	ldi	r18, 0x01	; 1
    4774:	ee 85       	ldd	r30, Y+14	; 0x0e
    4776:	ea 17       	cp	r30, r26
    4778:	08 f0       	brcs	.+2      	; 0x477c <fat_free_clusters+0x2aa>
    477a:	20 e0       	ldi	r18, 0x00	; 0
    477c:	ae 84       	ldd	r10, Y+14	; 0x0e
    477e:	a3 0e       	add	r10, r19
    4780:	91 e0       	ldi	r25, 0x01	; 1
    4782:	fe 85       	ldd	r31, Y+14	; 0x0e
    4784:	af 16       	cp	r10, r31
    4786:	08 f0       	brcs	.+2      	; 0x478a <fat_free_clusters+0x2b8>
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	b2 2e       	mov	r11, r18
    478c:	b9 2a       	or	r11, r25
    478e:	2f 85       	ldd	r18, Y+15	; 0x0f
    4790:	b2 0e       	add	r11, r18
    4792:	d4 01       	movw	r26, r8
    4794:	ed 91       	ld	r30, X+
    4796:	fc 91       	ld	r31, X
    4798:	01 90       	ld	r0, Z+
    479a:	f0 81       	ld	r31, Z
    479c:	e0 2d       	mov	r30, r0
    479e:	91 01       	movw	r18, r2
    47a0:	a2 01       	movw	r20, r4
    47a2:	b3 01       	movw	r22, r6
    47a4:	c5 01       	movw	r24, r10
    47a6:	8e 01       	movw	r16, r28
    47a8:	0f 5f       	subi	r16, 0xFF	; 255
    47aa:	1f 4f       	sbci	r17, 0xFF	; 255
    47ac:	b2 e0       	ldi	r27, 0x02	; 2
    47ae:	eb 2e       	mov	r14, r27
    47b0:	f1 2c       	mov	r15, r1
    47b2:	09 95       	icall
    47b4:	88 23       	and	r24, r24
    47b6:	69 f1       	breq	.+90     	; 0x4812 <fat_free_clusters+0x340>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
    47b8:	c9 80       	ldd	r12, Y+1	; 0x01
    47ba:	da 80       	ldd	r13, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
    47bc:	c1 14       	cp	r12, r1
    47be:	d1 04       	cpc	r13, r1
    47c0:	51 f1       	breq	.+84     	; 0x4816 <fat_free_clusters+0x344>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
    47c2:	c6 01       	movw	r24, r12
    47c4:	40 96       	adiw	r24, 0x10	; 16
    47c6:	08 97       	sbiw	r24, 0x08	; 8
    47c8:	20 f1       	brcs	.+72     	; 0x4812 <fat_free_clusters+0x340>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    47ca:	b8 ef       	ldi	r27, 0xF8	; 248
    47cc:	cb 16       	cp	r12, r27
    47ce:	bf ef       	ldi	r27, 0xFF	; 255
    47d0:	db 06       	cpc	r13, r27
    47d2:	10 f0       	brcs	.+4      	; 0x47d8 <fat_free_clusters+0x306>
    47d4:	cc 24       	eor	r12, r12
    47d6:	dd 24       	eor	r13, r13
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    47d8:	1a 82       	std	Y+2, r1	; 0x02
    47da:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    47dc:	d4 01       	movw	r26, r8
    47de:	ed 91       	ld	r30, X+
    47e0:	fc 91       	ld	r31, X
    47e2:	04 80       	ldd	r0, Z+4	; 0x04
    47e4:	f5 81       	ldd	r31, Z+5	; 0x05
    47e6:	e0 2d       	mov	r30, r0
    47e8:	91 01       	movw	r18, r2
    47ea:	a2 01       	movw	r20, r4
    47ec:	b3 01       	movw	r22, r6
    47ee:	c5 01       	movw	r24, r10
    47f0:	8e 01       	movw	r16, r28
    47f2:	0f 5f       	subi	r16, 0xFF	; 255
    47f4:	1f 4f       	sbci	r17, 0xFF	; 255
    47f6:	a2 e0       	ldi	r26, 0x02	; 2
    47f8:	ea 2e       	mov	r14, r26
    47fa:	f1 2c       	mov	r15, r1
    47fc:	09 95       	icall

            /* We continue in any case here, even if freeing the cluster failed.
             * The cluster is lost, but maybe we can still free up some later ones.
             */

            cluster_num = cluster_num_next;
    47fe:	a6 01       	movw	r20, r12
    4800:	60 e0       	ldi	r22, 0x00	; 0
    4802:	70 e0       	ldi	r23, 0x00	; 0
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
    4804:	41 15       	cp	r20, r1
    4806:	51 05       	cpc	r21, r1
    4808:	61 05       	cpc	r22, r1
    480a:	71 05       	cpc	r23, r1
    480c:	09 f0       	breq	.+2      	; 0x4810 <fat_free_clusters+0x33e>
    480e:	62 cf       	rjmp	.-316    	; 0x46d4 <fat_free_clusters+0x202>
    4810:	02 c0       	rjmp	.+4      	; 0x4816 <fat_free_clusters+0x344>
    4812:	80 e0       	ldi	r24, 0x00	; 0
    4814:	01 c0       	rjmp	.+2      	; 0x4818 <fat_free_clusters+0x346>
    4816:	81 e0       	ldi	r24, 0x01	; 1
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
    4818:	60 96       	adiw	r28, 0x10	; 16
    481a:	0f b6       	in	r0, 0x3f	; 63
    481c:	f8 94       	cli
    481e:	de bf       	out	0x3e, r29	; 62
    4820:	0f be       	out	0x3f, r0	; 63
    4822:	cd bf       	out	0x3d, r28	; 61
    4824:	cf 91       	pop	r28
    4826:	df 91       	pop	r29
    4828:	1f 91       	pop	r17
    482a:	0f 91       	pop	r16
    482c:	ff 90       	pop	r15
    482e:	ef 90       	pop	r14
    4830:	df 90       	pop	r13
    4832:	cf 90       	pop	r12
    4834:	bf 90       	pop	r11
    4836:	af 90       	pop	r10
    4838:	9f 90       	pop	r9
    483a:	8f 90       	pop	r8
    483c:	7f 90       	pop	r7
    483e:	6f 90       	pop	r6
    4840:	5f 90       	pop	r5
    4842:	4f 90       	pop	r4
    4844:	3f 90       	pop	r3
    4846:	2f 90       	pop	r2
    4848:	08 95       	ret

0000484a <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    484a:	2f 92       	push	r2
    484c:	3f 92       	push	r3
    484e:	4f 92       	push	r4
    4850:	5f 92       	push	r5
    4852:	6f 92       	push	r6
    4854:	7f 92       	push	r7
    4856:	8f 92       	push	r8
    4858:	9f 92       	push	r9
    485a:	af 92       	push	r10
    485c:	bf 92       	push	r11
    485e:	cf 92       	push	r12
    4860:	df 92       	push	r13
    4862:	ef 92       	push	r14
    4864:	ff 92       	push	r15
    4866:	0f 93       	push	r16
    4868:	1f 93       	push	r17
    486a:	df 93       	push	r29
    486c:	cf 93       	push	r28
    486e:	cd b7       	in	r28, 0x3d	; 61
    4870:	de b7       	in	r29, 0x3e	; 62
    4872:	ad 97       	sbiw	r28, 0x2d	; 45
    4874:	0f b6       	in	r0, 0x3f	; 63
    4876:	f8 94       	cli
    4878:	de bf       	out	0x3e, r29	; 62
    487a:	0f be       	out	0x3f, r0	; 63
    487c:	cd bf       	out	0x3d, r28	; 61
    487e:	9d 8f       	std	Y+29, r25	; 0x1d
    4880:	8c 8f       	std	Y+28, r24	; 0x1c
    4882:	3a 01       	movw	r6, r20
    4884:	4b 01       	movw	r8, r22
    4886:	b9 01       	movw	r22, r18
    if(!fs)
    4888:	00 97       	sbiw	r24, 0x00	; 0
    488a:	09 f4       	brne	.+2      	; 0x488e <fat_append_clusters+0x44>
    488c:	ed c2       	rjmp	.+1498   	; 0x4e68 <fat_append_clusters+0x61e>
        return 0;

    device_read_t device_read = fs->partition->device_read;
    488e:	dc 01       	movw	r26, r24
    4890:	ed 91       	ld	r30, X+
    4892:	fc 91       	ld	r31, X
    4894:	11 97       	sbiw	r26, 0x01	; 1
    4896:	e0 80       	ld	r14, Z
    4898:	f1 80       	ldd	r15, Z+1	; 0x01
    489a:	fb 8e       	std	Y+27, r15	; 0x1b
    489c:	ea 8e       	std	Y+26, r14	; 0x1a
    device_write_t device_write = fs->partition->device_write;
    489e:	24 81       	ldd	r18, Z+4	; 0x04
    48a0:	35 81       	ldd	r19, Z+5	; 0x05
    48a2:	39 8f       	std	Y+25, r19	; 0x19
    48a4:	28 8f       	std	Y+24, r18	; 0x18
    offset_t fat_offset = fs->header.fat_offset;
    48a6:	1a 96       	adiw	r26, 0x0a	; 10
    48a8:	3c 91       	ld	r19, X
    48aa:	1a 97       	sbiw	r26, 0x0a	; 10
    48ac:	3c a3       	std	Y+36, r19	; 0x24
    48ae:	1b 96       	adiw	r26, 0x0b	; 11
    48b0:	4c 91       	ld	r20, X
    48b2:	1b 97       	sbiw	r26, 0x0b	; 11
    48b4:	4d a3       	std	Y+37, r20	; 0x25
    48b6:	1c 96       	adiw	r26, 0x0c	; 12
    48b8:	5c 91       	ld	r21, X
    48ba:	1c 97       	sbiw	r26, 0x0c	; 12
    48bc:	5e a3       	std	Y+38, r21	; 0x26
    48be:	1d 96       	adiw	r26, 0x0d	; 13
    48c0:	8c 91       	ld	r24, X
    48c2:	1d 97       	sbiw	r26, 0x0d	; 13
    48c4:	8f a3       	std	Y+39, r24	; 0x27
    48c6:	1e 96       	adiw	r26, 0x0e	; 14
    48c8:	9c 91       	ld	r25, X
    48ca:	1e 97       	sbiw	r26, 0x0e	; 14
    48cc:	98 a7       	std	Y+40, r25	; 0x28
    48ce:	1f 96       	adiw	r26, 0x0f	; 15
    48d0:	ac 91       	ld	r26, X
    48d2:	a9 a7       	std	Y+41, r26	; 0x29
    48d4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    48d6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    48d8:	50 96       	adiw	r26, 0x10	; 16
    48da:	bc 91       	ld	r27, X
    48dc:	ba a7       	std	Y+42, r27	; 0x2a
    48de:	ac 8d       	ldd	r26, Y+28	; 0x1c
    48e0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    48e2:	51 96       	adiw	r26, 0x11	; 17
    48e4:	bc 91       	ld	r27, X
    48e6:	bb a7       	std	Y+43, r27	; 0x2b
    cluster_t cluster_next = 0;
    cluster_t cluster_max;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    48e8:	1f 86       	std	Y+15, r1	; 0x0f
    48ea:	80 85       	ldd	r24, Z+8	; 0x08
    48ec:	8b 30       	cpi	r24, 0x0B	; 11
    48ee:	11 f4       	brne	.+4      	; 0x48f4 <fat_append_clusters+0xaa>
    48f0:	e1 e0       	ldi	r30, 0x01	; 1
    48f2:	ef 87       	std	Y+15, r30	; 0x0f
    48f4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    48f6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    48f8:	82 89       	ldd	r24, Z+18	; 0x12
    48fa:	93 89       	ldd	r25, Z+19	; 0x13
    48fc:	a4 89       	ldd	r26, Z+20	; 0x14
    48fe:	b5 89       	ldd	r27, Z+21	; 0x15

    if(is_fat32)
    4900:	ff 85       	ldd	r31, Y+15	; 0x0f
    4902:	ff 23       	and	r31, r31
    4904:	51 f0       	breq	.+20     	; 0x491a <fat_append_clusters+0xd0>
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    4906:	9c 01       	movw	r18, r24
    4908:	ad 01       	movw	r20, r26
    490a:	82 e0       	ldi	r24, 0x02	; 2
    490c:	56 95       	lsr	r21
    490e:	47 95       	ror	r20
    4910:	37 95       	ror	r19
    4912:	27 95       	ror	r18
    4914:	8a 95       	dec	r24
    4916:	d1 f7       	brne	.-12     	; 0x490c <fat_append_clusters+0xc2>
    4918:	06 c0       	rjmp	.+12     	; 0x4926 <fat_append_clusters+0xdc>
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);
    491a:	9c 01       	movw	r18, r24
    491c:	ad 01       	movw	r20, r26
    491e:	56 95       	lsr	r21
    4920:	47 95       	ror	r20
    4922:	37 95       	ror	r19
    4924:	27 95       	ror	r18
    4926:	28 8b       	std	Y+16, r18	; 0x10
    4928:	39 8b       	std	Y+17, r19	; 0x11
    492a:	4a 8b       	std	Y+18, r20	; 0x12
    492c:	5b 8b       	std	Y+19, r21	; 0x13
    492e:	c8 01       	movw	r24, r16
    4930:	db 01       	movw	r26, r22
    4932:	8c 8b       	std	Y+20, r24	; 0x14
    4934:	9d 8b       	std	Y+21, r25	; 0x15
    4936:	ae 8b       	std	Y+22, r26	; 0x16
    4938:	bf 8b       	std	Y+23, r27	; 0x17
    493a:	aa 24       	eor	r10, r10
    493c:	bb 24       	eor	r11, r11
    493e:	65 01       	movw	r12, r10
    4940:	82 e0       	ldi	r24, 0x02	; 2
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	a0 e0       	ldi	r26, 0x00	; 0
    4946:	b0 e0       	ldi	r27, 0x00	; 0
    4948:	8b 87       	std	Y+11, r24	; 0x0b
    494a:	9c 87       	std	Y+12, r25	; 0x0c
    494c:	ad 87       	std	Y+13, r26	; 0x0d
    494e:	be 87       	std	Y+14, r27	; 0x0e
    4950:	a4 e0       	ldi	r26, 0x04	; 4
    4952:	ea 2e       	mov	r14, r26
    4954:	f1 2c       	mov	r15, r1
    4956:	01 2d       	mov	r16, r1
    4958:	11 2d       	mov	r17, r1
    495a:	ef 82       	std	Y+7, r14	; 0x07
    495c:	f8 86       	std	Y+8, r15	; 0x08
    495e:	09 87       	std	Y+9, r16	; 0x09
    4960:	1a 87       	std	Y+10, r17	; 0x0a
    4962:	78 c1       	rjmp	.+752    	; 0x4c54 <fat_append_clusters+0x40a>

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    4964:	ff 84       	ldd	r15, Y+15	; 0x0f
    4966:	ff 20       	and	r15, r15
    4968:	09 f4       	brne	.+2      	; 0x496c <fat_append_clusters+0x122>
    496a:	7b c0       	rjmp	.+246    	; 0x4a62 <fat_append_clusters+0x218>
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    496c:	8f 81       	ldd	r24, Y+7	; 0x07
    496e:	98 85       	ldd	r25, Y+8	; 0x08
    4970:	a9 85       	ldd	r26, Y+9	; 0x09
    4972:	ba 85       	ldd	r27, Y+10	; 0x0a
    4974:	88 0f       	add	r24, r24
    4976:	99 1f       	adc	r25, r25
    4978:	aa 1f       	adc	r26, r26
    497a:	bb 1f       	adc	r27, r27
    497c:	9c 01       	movw	r18, r24
    497e:	ad 01       	movw	r20, r26
    4980:	60 e0       	ldi	r22, 0x00	; 0
    4982:	70 e0       	ldi	r23, 0x00	; 0
    4984:	80 e0       	ldi	r24, 0x00	; 0
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	0c a1       	ldd	r16, Y+36	; 0x24
    498a:	02 0f       	add	r16, r18
    498c:	0c a7       	std	Y+44, r16	; 0x2c
    498e:	f1 e0       	ldi	r31, 0x01	; 1
    4990:	02 17       	cp	r16, r18
    4992:	08 f0       	brcs	.+2      	; 0x4996 <fat_append_clusters+0x14c>
    4994:	f0 e0       	ldi	r31, 0x00	; 0
    4996:	ed a1       	ldd	r30, Y+37	; 0x25
    4998:	e3 0f       	add	r30, r19
    499a:	a1 e0       	ldi	r26, 0x01	; 1
    499c:	e3 17       	cp	r30, r19
    499e:	08 f0       	brcs	.+2      	; 0x49a2 <fat_append_clusters+0x158>
    49a0:	a0 e0       	ldi	r26, 0x00	; 0
    49a2:	fe 0f       	add	r31, r30
    49a4:	fe 8f       	std	Y+30, r31	; 0x1e
    49a6:	f1 e0       	ldi	r31, 0x01	; 1
    49a8:	1e 8d       	ldd	r17, Y+30	; 0x1e
    49aa:	1e 17       	cp	r17, r30
    49ac:	08 f0       	brcs	.+2      	; 0x49b0 <fat_append_clusters+0x166>
    49ae:	f0 e0       	ldi	r31, 0x00	; 0
    49b0:	af 2b       	or	r26, r31
    49b2:	ee a1       	ldd	r30, Y+38	; 0x26
    49b4:	e4 0f       	add	r30, r20
    49b6:	b1 e0       	ldi	r27, 0x01	; 1
    49b8:	e4 17       	cp	r30, r20
    49ba:	08 f0       	brcs	.+2      	; 0x49be <fat_append_clusters+0x174>
    49bc:	b0 e0       	ldi	r27, 0x00	; 0
    49be:	ae 0f       	add	r26, r30
    49c0:	af 8f       	std	Y+31, r26	; 0x1f
    49c2:	f1 e0       	ldi	r31, 0x01	; 1
    49c4:	ae 17       	cp	r26, r30
    49c6:	08 f0       	brcs	.+2      	; 0x49ca <fat_append_clusters+0x180>
    49c8:	f0 e0       	ldi	r31, 0x00	; 0
    49ca:	bf 2b       	or	r27, r31
    49cc:	ef a1       	ldd	r30, Y+39	; 0x27
    49ce:	e5 0f       	add	r30, r21
    49d0:	f1 e0       	ldi	r31, 0x01	; 1
    49d2:	e5 17       	cp	r30, r21
    49d4:	08 f0       	brcs	.+2      	; 0x49d8 <fat_append_clusters+0x18e>
    49d6:	f0 e0       	ldi	r31, 0x00	; 0
    49d8:	be 0f       	add	r27, r30
    49da:	b8 a3       	std	Y+32, r27	; 0x20
    49dc:	a1 e0       	ldi	r26, 0x01	; 1
    49de:	be 17       	cp	r27, r30
    49e0:	08 f0       	brcs	.+2      	; 0x49e4 <fat_append_clusters+0x19a>
    49e2:	a0 e0       	ldi	r26, 0x00	; 0
    49e4:	fa 2b       	or	r31, r26
    49e6:	e1 e0       	ldi	r30, 0x01	; 1
    49e8:	a8 a5       	ldd	r26, Y+40	; 0x28
    49ea:	a6 17       	cp	r26, r22
    49ec:	08 f0       	brcs	.+2      	; 0x49f0 <fat_append_clusters+0x1a6>
    49ee:	e0 e0       	ldi	r30, 0x00	; 0
    49f0:	28 a4       	ldd	r2, Y+40	; 0x28
    49f2:	2f 0e       	add	r2, r31
    49f4:	f1 e0       	ldi	r31, 0x01	; 1
    49f6:	b8 a5       	ldd	r27, Y+40	; 0x28
    49f8:	2b 16       	cp	r2, r27
    49fa:	08 f0       	brcs	.+2      	; 0x49fe <fat_append_clusters+0x1b4>
    49fc:	f0 e0       	ldi	r31, 0x00	; 0
    49fe:	ef 2b       	or	r30, r31
    4a00:	f1 e0       	ldi	r31, 0x01	; 1
    4a02:	e9 a4       	ldd	r14, Y+41	; 0x29
    4a04:	e7 16       	cp	r14, r23
    4a06:	08 f0       	brcs	.+2      	; 0x4a0a <fat_append_clusters+0x1c0>
    4a08:	f0 e0       	ldi	r31, 0x00	; 0
    4a0a:	39 a4       	ldd	r3, Y+41	; 0x29
    4a0c:	3e 0e       	add	r3, r30
    4a0e:	e1 e0       	ldi	r30, 0x01	; 1
    4a10:	f9 a4       	ldd	r15, Y+41	; 0x29
    4a12:	3f 14       	cp	r3, r15
    4a14:	08 f0       	brcs	.+2      	; 0x4a18 <fat_append_clusters+0x1ce>
    4a16:	e0 e0       	ldi	r30, 0x00	; 0
    4a18:	fe 2b       	or	r31, r30
    4a1a:	e1 e0       	ldi	r30, 0x01	; 1
    4a1c:	0a a5       	ldd	r16, Y+42	; 0x2a
    4a1e:	08 17       	cp	r16, r24
    4a20:	08 f0       	brcs	.+2      	; 0x4a24 <fat_append_clusters+0x1da>
    4a22:	e0 e0       	ldi	r30, 0x00	; 0
    4a24:	4a a4       	ldd	r4, Y+42	; 0x2a
    4a26:	4f 0e       	add	r4, r31
    4a28:	91 e0       	ldi	r25, 0x01	; 1
    4a2a:	1a a5       	ldd	r17, Y+42	; 0x2a
    4a2c:	41 16       	cp	r4, r17
    4a2e:	08 f0       	brcs	.+2      	; 0x4a32 <fat_append_clusters+0x1e8>
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	5e 2e       	mov	r5, r30
    4a34:	59 2a       	or	r5, r25
    4a36:	2b a5       	ldd	r18, Y+43	; 0x2b
    4a38:	52 0e       	add	r5, r18
    4a3a:	2c a5       	ldd	r18, Y+44	; 0x2c
    4a3c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4a3e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4a40:	58 a1       	ldd	r21, Y+32	; 0x20
    4a42:	b1 01       	movw	r22, r2
    4a44:	c2 01       	movw	r24, r4
    4a46:	8e 01       	movw	r16, r28
    4a48:	0d 5f       	subi	r16, 0xFD	; 253
    4a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a4c:	e4 e0       	ldi	r30, 0x04	; 4
    4a4e:	ee 2e       	mov	r14, r30
    4a50:	f1 2c       	mov	r15, r1
    4a52:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4a54:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4a56:	fd 01       	movw	r30, r26
    4a58:	09 95       	icall
    4a5a:	88 23       	and	r24, r24
    4a5c:	09 f0       	breq	.+2      	; 0x4a60 <fat_append_clusters+0x216>
    4a5e:	7e c0       	rjmp	.+252    	; 0x4b5c <fat_append_clusters+0x312>
    4a60:	03 c2       	rjmp	.+1030   	; 0x4e68 <fat_append_clusters+0x61e>
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    4a62:	ef 80       	ldd	r14, Y+7	; 0x07
    4a64:	f8 84       	ldd	r15, Y+8	; 0x08
    4a66:	09 85       	ldd	r16, Y+9	; 0x09
    4a68:	1a 85       	ldd	r17, Y+10	; 0x0a
    4a6a:	a8 01       	movw	r20, r16
    4a6c:	97 01       	movw	r18, r14
    4a6e:	60 e0       	ldi	r22, 0x00	; 0
    4a70:	70 e0       	ldi	r23, 0x00	; 0
    4a72:	80 e0       	ldi	r24, 0x00	; 0
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	fc a0       	ldd	r15, Y+36	; 0x24
    4a78:	f2 0e       	add	r15, r18
    4a7a:	fd a6       	std	Y+45, r15	; 0x2d
    4a7c:	f1 e0       	ldi	r31, 0x01	; 1
    4a7e:	f2 16       	cp	r15, r18
    4a80:	08 f0       	brcs	.+2      	; 0x4a84 <fat_append_clusters+0x23a>
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	ed a1       	ldd	r30, Y+37	; 0x25
    4a86:	e3 0f       	add	r30, r19
    4a88:	a1 e0       	ldi	r26, 0x01	; 1
    4a8a:	e3 17       	cp	r30, r19
    4a8c:	08 f0       	brcs	.+2      	; 0x4a90 <fat_append_clusters+0x246>
    4a8e:	a0 e0       	ldi	r26, 0x00	; 0
    4a90:	fe 0f       	add	r31, r30
    4a92:	f9 a3       	std	Y+33, r31	; 0x21
    4a94:	f1 e0       	ldi	r31, 0x01	; 1
    4a96:	09 a1       	ldd	r16, Y+33	; 0x21
    4a98:	0e 17       	cp	r16, r30
    4a9a:	08 f0       	brcs	.+2      	; 0x4a9e <fat_append_clusters+0x254>
    4a9c:	f0 e0       	ldi	r31, 0x00	; 0
    4a9e:	af 2b       	or	r26, r31
    4aa0:	ee a1       	ldd	r30, Y+38	; 0x26
    4aa2:	e4 0f       	add	r30, r20
    4aa4:	b1 e0       	ldi	r27, 0x01	; 1
    4aa6:	e4 17       	cp	r30, r20
    4aa8:	08 f0       	brcs	.+2      	; 0x4aac <fat_append_clusters+0x262>
    4aaa:	b0 e0       	ldi	r27, 0x00	; 0
    4aac:	ae 0f       	add	r26, r30
    4aae:	aa a3       	std	Y+34, r26	; 0x22
    4ab0:	f1 e0       	ldi	r31, 0x01	; 1
    4ab2:	ae 17       	cp	r26, r30
    4ab4:	08 f0       	brcs	.+2      	; 0x4ab8 <fat_append_clusters+0x26e>
    4ab6:	f0 e0       	ldi	r31, 0x00	; 0
    4ab8:	bf 2b       	or	r27, r31
    4aba:	ef a1       	ldd	r30, Y+39	; 0x27
    4abc:	e5 0f       	add	r30, r21
    4abe:	a1 e0       	ldi	r26, 0x01	; 1
    4ac0:	e5 17       	cp	r30, r21
    4ac2:	08 f0       	brcs	.+2      	; 0x4ac6 <fat_append_clusters+0x27c>
    4ac4:	a0 e0       	ldi	r26, 0x00	; 0
    4ac6:	be 0f       	add	r27, r30
    4ac8:	bb a3       	std	Y+35, r27	; 0x23
    4aca:	f1 e0       	ldi	r31, 0x01	; 1
    4acc:	be 17       	cp	r27, r30
    4ace:	08 f0       	brcs	.+2      	; 0x4ad2 <fat_append_clusters+0x288>
    4ad0:	f0 e0       	ldi	r31, 0x00	; 0
    4ad2:	af 2b       	or	r26, r31
    4ad4:	e8 a5       	ldd	r30, Y+40	; 0x28
    4ad6:	e6 0f       	add	r30, r22
    4ad8:	b1 e0       	ldi	r27, 0x01	; 1
    4ada:	e6 17       	cp	r30, r22
    4adc:	08 f0       	brcs	.+2      	; 0x4ae0 <fat_append_clusters+0x296>
    4ade:	b0 e0       	ldi	r27, 0x00	; 0
    4ae0:	2a 2e       	mov	r2, r26
    4ae2:	2e 0e       	add	r2, r30
    4ae4:	f1 e0       	ldi	r31, 0x01	; 1
    4ae6:	2e 16       	cp	r2, r30
    4ae8:	08 f0       	brcs	.+2      	; 0x4aec <fat_append_clusters+0x2a2>
    4aea:	f0 e0       	ldi	r31, 0x00	; 0
    4aec:	bf 2b       	or	r27, r31
    4aee:	e9 a5       	ldd	r30, Y+41	; 0x29
    4af0:	e7 0f       	add	r30, r23
    4af2:	a1 e0       	ldi	r26, 0x01	; 1
    4af4:	e7 17       	cp	r30, r23
    4af6:	08 f0       	brcs	.+2      	; 0x4afa <fat_append_clusters+0x2b0>
    4af8:	a0 e0       	ldi	r26, 0x00	; 0
    4afa:	3b 2e       	mov	r3, r27
    4afc:	3e 0e       	add	r3, r30
    4afe:	f1 e0       	ldi	r31, 0x01	; 1
    4b00:	3e 16       	cp	r3, r30
    4b02:	08 f0       	brcs	.+2      	; 0x4b06 <fat_append_clusters+0x2bc>
    4b04:	f0 e0       	ldi	r31, 0x00	; 0
    4b06:	af 2b       	or	r26, r31
    4b08:	ea a5       	ldd	r30, Y+42	; 0x2a
    4b0a:	e8 0f       	add	r30, r24
    4b0c:	b1 e0       	ldi	r27, 0x01	; 1
    4b0e:	e8 17       	cp	r30, r24
    4b10:	08 f0       	brcs	.+2      	; 0x4b14 <fat_append_clusters+0x2ca>
    4b12:	b0 e0       	ldi	r27, 0x00	; 0
    4b14:	4a 2e       	mov	r4, r26
    4b16:	4e 0e       	add	r4, r30
    4b18:	f1 e0       	ldi	r31, 0x01	; 1
    4b1a:	4e 16       	cp	r4, r30
    4b1c:	08 f0       	brcs	.+2      	; 0x4b20 <fat_append_clusters+0x2d6>
    4b1e:	f0 e0       	ldi	r31, 0x00	; 0
    4b20:	5b 2e       	mov	r5, r27
    4b22:	5f 2a       	or	r5, r31
    4b24:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b26:	89 0f       	add	r24, r25
    4b28:	58 0e       	add	r5, r24
    4b2a:	2d a5       	ldd	r18, Y+45	; 0x2d
    4b2c:	39 a1       	ldd	r19, Y+33	; 0x21
    4b2e:	4a a1       	ldd	r20, Y+34	; 0x22
    4b30:	5b a1       	ldd	r21, Y+35	; 0x23
    4b32:	b1 01       	movw	r22, r2
    4b34:	c2 01       	movw	r24, r4
    4b36:	8e 01       	movw	r16, r28
    4b38:	0f 5f       	subi	r16, 0xFF	; 255
    4b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b3c:	b2 e0       	ldi	r27, 0x02	; 2
    4b3e:	eb 2e       	mov	r14, r27
    4b40:	f1 2c       	mov	r15, r1
    4b42:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4b44:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4b46:	fd 01       	movw	r30, r26
    4b48:	09 95       	icall
    4b4a:	88 23       	and	r24, r24
    4b4c:	09 f4       	brne	.+2      	; 0x4b50 <fat_append_clusters+0x306>
    4b4e:	8c c1       	rjmp	.+792    	; 0x4e68 <fat_append_clusters+0x61e>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
    4b50:	89 81       	ldd	r24, Y+1	; 0x01
    4b52:	9a 81       	ldd	r25, Y+2	; 0x02
    4b54:	89 2b       	or	r24, r25
    4b56:	09 f0       	breq	.+2      	; 0x4b5a <fat_append_clusters+0x310>
    4b58:	66 c0       	rjmp	.+204    	; 0x4c26 <fat_append_clusters+0x3dc>
    4b5a:	2c c0       	rjmp	.+88     	; 0x4bb4 <fat_append_clusters+0x36a>

#if FAT_FAT32_SUPPORT
        if(is_fat32)
        {
            /* check if this is a free cluster */
            if(fat_entry32 != HTOL32(FAT32_CLUSTER_FREE))
    4b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b60:	ad 81       	ldd	r26, Y+5	; 0x05
    4b62:	be 81       	ldd	r27, Y+6	; 0x06
    4b64:	00 97       	sbiw	r24, 0x00	; 0
    4b66:	a1 05       	cpc	r26, r1
    4b68:	b1 05       	cpc	r27, r1
    4b6a:	09 f0       	breq	.+2      	; 0x4b6e <fat_append_clusters+0x324>
    4b6c:	5c c0       	rjmp	.+184    	; 0x4c26 <fat_append_clusters+0x3dc>
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    4b6e:	a1 14       	cp	r10, r1
    4b70:	b1 04       	cpc	r11, r1
    4b72:	c1 04       	cpc	r12, r1
    4b74:	d1 04       	cpc	r13, r1
    4b76:	69 f4       	brne	.+26     	; 0x4b92 <fat_append_clusters+0x348>
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
    4b78:	af ef       	ldi	r26, 0xFF	; 255
    4b7a:	ea 2e       	mov	r14, r26
    4b7c:	af ef       	ldi	r26, 0xFF	; 255
    4b7e:	fa 2e       	mov	r15, r26
    4b80:	af ef       	ldi	r26, 0xFF	; 255
    4b82:	0a 2f       	mov	r16, r26
    4b84:	af e0       	ldi	r26, 0x0F	; 15
    4b86:	1a 2f       	mov	r17, r26
    4b88:	eb 82       	std	Y+3, r14	; 0x03
    4b8a:	fc 82       	std	Y+4, r15	; 0x04
    4b8c:	0d 83       	std	Y+5, r16	; 0x05
    4b8e:	1e 83       	std	Y+6, r17	; 0x06
    4b90:	04 c0       	rjmp	.+8      	; 0x4b9a <fat_append_clusters+0x350>
            else
                fat_entry32 = htol32(cluster_next);
    4b92:	ab 82       	std	Y+3, r10	; 0x03
    4b94:	bc 82       	std	Y+4, r11	; 0x04
    4b96:	cd 82       	std	Y+5, r12	; 0x05
    4b98:	de 82       	std	Y+6, r13	; 0x06

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    4b9a:	2c a5       	ldd	r18, Y+44	; 0x2c
    4b9c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4b9e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4ba0:	58 a1       	ldd	r21, Y+32	; 0x20
    4ba2:	b1 01       	movw	r22, r2
    4ba4:	c2 01       	movw	r24, r4
    4ba6:	8e 01       	movw	r16, r28
    4ba8:	0d 5f       	subi	r16, 0xFD	; 253
    4baa:	1f 4f       	sbci	r17, 0xFF	; 255
    4bac:	f4 e0       	ldi	r31, 0x04	; 4
    4bae:	ef 2e       	mov	r14, r31
    4bb0:	f1 2c       	mov	r15, r1
    4bb2:	18 c0       	rjmp	.+48     	; 0x4be4 <fat_append_clusters+0x39a>
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    4bb4:	a1 14       	cp	r10, r1
    4bb6:	b1 04       	cpc	r11, r1
    4bb8:	c1 04       	cpc	r12, r1
    4bba:	d1 04       	cpc	r13, r1
    4bbc:	29 f4       	brne	.+10     	; 0x4bc8 <fat_append_clusters+0x37e>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
    4bbe:	ef ef       	ldi	r30, 0xFF	; 255
    4bc0:	ff ef       	ldi	r31, 0xFF	; 255
    4bc2:	fa 83       	std	Y+2, r31	; 0x02
    4bc4:	e9 83       	std	Y+1, r30	; 0x01
    4bc6:	02 c0       	rjmp	.+4      	; 0x4bcc <fat_append_clusters+0x382>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
    4bc8:	ba 82       	std	Y+2, r11	; 0x02
    4bca:	a9 82       	std	Y+1, r10	; 0x01

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    4bcc:	2d a5       	ldd	r18, Y+45	; 0x2d
    4bce:	39 a1       	ldd	r19, Y+33	; 0x21
    4bd0:	4a a1       	ldd	r20, Y+34	; 0x22
    4bd2:	5b a1       	ldd	r21, Y+35	; 0x23
    4bd4:	b1 01       	movw	r22, r2
    4bd6:	c2 01       	movw	r24, r4
    4bd8:	8e 01       	movw	r16, r28
    4bda:	0f 5f       	subi	r16, 0xFF	; 255
    4bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bde:	e2 e0       	ldi	r30, 0x02	; 2
    4be0:	ee 2e       	mov	r14, r30
    4be2:	f1 2c       	mov	r15, r1
    4be4:	a8 8d       	ldd	r26, Y+24	; 0x18
    4be6:	b9 8d       	ldd	r27, Y+25	; 0x19
    4be8:	fd 01       	movw	r30, r26
    4bea:	09 95       	icall
    4bec:	88 23       	and	r24, r24
    4bee:	09 f4       	brne	.+2      	; 0x4bf2 <fat_append_clusters+0x3a8>
    4bf0:	3f c0       	rjmp	.+126    	; 0x4c70 <fat_append_clusters+0x426>
                break;
        }

        cluster_next = cluster_new;
        if(--count_left == 0)
    4bf2:	0c 89       	ldd	r16, Y+20	; 0x14
    4bf4:	1d 89       	ldd	r17, Y+21	; 0x15
    4bf6:	2e 89       	ldd	r18, Y+22	; 0x16
    4bf8:	3f 89       	ldd	r19, Y+23	; 0x17
    4bfa:	01 50       	subi	r16, 0x01	; 1
    4bfc:	10 40       	sbci	r17, 0x00	; 0
    4bfe:	20 40       	sbci	r18, 0x00	; 0
    4c00:	30 40       	sbci	r19, 0x00	; 0
    4c02:	0c 8b       	std	Y+20, r16	; 0x14
    4c04:	1d 8b       	std	Y+21, r17	; 0x15
    4c06:	2e 8b       	std	Y+22, r18	; 0x16
    4c08:	3f 8b       	std	Y+23, r19	; 0x17
    4c0a:	01 15       	cp	r16, r1
    4c0c:	11 05       	cpc	r17, r1
    4c0e:	21 05       	cpc	r18, r1
    4c10:	31 05       	cpc	r19, r1
    4c12:	29 f4       	brne	.+10     	; 0x4c1e <fat_append_clusters+0x3d4>
    4c14:	ab 84       	ldd	r10, Y+11	; 0x0b
    4c16:	bc 84       	ldd	r11, Y+12	; 0x0c
    4c18:	cd 84       	ldd	r12, Y+13	; 0x0d
    4c1a:	de 84       	ldd	r13, Y+14	; 0x0e
    4c1c:	32 c0       	rjmp	.+100    	; 0x4c82 <fat_append_clusters+0x438>
    4c1e:	ab 84       	ldd	r10, Y+11	; 0x0b
    4c20:	bc 84       	ldd	r11, Y+12	; 0x0c
    4c22:	cd 84       	ldd	r12, Y+13	; 0x0d
    4c24:	de 84       	ldd	r13, Y+14	; 0x0e
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    4c26:	2b 85       	ldd	r18, Y+11	; 0x0b
    4c28:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c2a:	4d 85       	ldd	r20, Y+13	; 0x0d
    4c2c:	5e 85       	ldd	r21, Y+14	; 0x0e
    4c2e:	2f 5f       	subi	r18, 0xFF	; 255
    4c30:	3f 4f       	sbci	r19, 0xFF	; 255
    4c32:	4f 4f       	sbci	r20, 0xFF	; 255
    4c34:	5f 4f       	sbci	r21, 0xFF	; 255
    4c36:	2b 87       	std	Y+11, r18	; 0x0b
    4c38:	3c 87       	std	Y+12, r19	; 0x0c
    4c3a:	4d 87       	std	Y+13, r20	; 0x0d
    4c3c:	5e 87       	std	Y+14, r21	; 0x0e
    4c3e:	8f 81       	ldd	r24, Y+7	; 0x07
    4c40:	98 85       	ldd	r25, Y+8	; 0x08
    4c42:	a9 85       	ldd	r26, Y+9	; 0x09
    4c44:	ba 85       	ldd	r27, Y+10	; 0x0a
    4c46:	02 96       	adiw	r24, 0x02	; 2
    4c48:	a1 1d       	adc	r26, r1
    4c4a:	b1 1d       	adc	r27, r1
    4c4c:	8f 83       	std	Y+7, r24	; 0x07
    4c4e:	98 87       	std	Y+8, r25	; 0x08
    4c50:	a9 87       	std	Y+9, r26	; 0x09
    4c52:	ba 87       	std	Y+10, r27	; 0x0a
    4c54:	eb 84       	ldd	r14, Y+11	; 0x0b
    4c56:	fc 84       	ldd	r15, Y+12	; 0x0c
    4c58:	0d 85       	ldd	r16, Y+13	; 0x0d
    4c5a:	1e 85       	ldd	r17, Y+14	; 0x0e
    4c5c:	28 89       	ldd	r18, Y+16	; 0x10
    4c5e:	39 89       	ldd	r19, Y+17	; 0x11
    4c60:	4a 89       	ldd	r20, Y+18	; 0x12
    4c62:	5b 89       	ldd	r21, Y+19	; 0x13
    4c64:	e2 16       	cp	r14, r18
    4c66:	f3 06       	cpc	r15, r19
    4c68:	04 07       	cpc	r16, r20
    4c6a:	15 07       	cpc	r17, r21
    4c6c:	08 f4       	brcc	.+2      	; 0x4c70 <fat_append_clusters+0x426>
    4c6e:	7a ce       	rjmp	.-780    	; 0x4964 <fat_append_clusters+0x11a>
            break;
    }

    do
    {
        if(count_left > 0)
    4c70:	8c 89       	ldd	r24, Y+20	; 0x14
    4c72:	9d 89       	ldd	r25, Y+21	; 0x15
    4c74:	ae 89       	ldd	r26, Y+22	; 0x16
    4c76:	bf 89       	ldd	r27, Y+23	; 0x17
    4c78:	00 97       	sbiw	r24, 0x00	; 0
    4c7a:	a1 05       	cpc	r26, r1
    4c7c:	b1 05       	cpc	r27, r1
    4c7e:	09 f0       	breq	.+2      	; 0x4c82 <fat_append_clusters+0x438>
    4c80:	ed c0       	rjmp	.+474    	; 0x4e5c <fat_append_clusters+0x612>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
    4c82:	92 e0       	ldi	r25, 0x02	; 2
    4c84:	69 16       	cp	r6, r25
    4c86:	71 04       	cpc	r7, r1
    4c88:	81 04       	cpc	r8, r1
    4c8a:	91 04       	cpc	r9, r1
    4c8c:	08 f4       	brcc	.+2      	; 0x4c90 <fat_append_clusters+0x446>
    4c8e:	ef c0       	rjmp	.+478    	; 0x4e6e <fat_append_clusters+0x624>
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
    4c90:	af 85       	ldd	r26, Y+15	; 0x0f
    4c92:	aa 23       	and	r26, r26
    4c94:	09 f4       	brne	.+2      	; 0x4c98 <fat_append_clusters+0x44e>
    4c96:	71 c0       	rjmp	.+226    	; 0x4d7a <fat_append_clusters+0x530>
            {
                fat_entry32 = htol32(cluster_next);
    4c98:	ab 82       	std	Y+3, r10	; 0x03
    4c9a:	bc 82       	std	Y+4, r11	; 0x04
    4c9c:	cd 82       	std	Y+5, r12	; 0x05
    4c9e:	de 82       	std	Y+6, r13	; 0x06

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    4ca0:	b2 e0       	ldi	r27, 0x02	; 2
    4ca2:	66 0c       	add	r6, r6
    4ca4:	77 1c       	adc	r7, r7
    4ca6:	88 1c       	adc	r8, r8
    4ca8:	99 1c       	adc	r9, r9
    4caa:	ba 95       	dec	r27
    4cac:	d1 f7       	brne	.-12     	; 0x4ca2 <fat_append_clusters+0x458>
    4cae:	b4 01       	movw	r22, r8
    4cb0:	a3 01       	movw	r20, r6
    4cb2:	80 e0       	ldi	r24, 0x00	; 0
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	a0 e0       	ldi	r26, 0x00	; 0
    4cb8:	b0 e0       	ldi	r27, 0x00	; 0
    4cba:	2c a1       	ldd	r18, Y+36	; 0x24
    4cbc:	26 0d       	add	r18, r6
    4cbe:	31 e0       	ldi	r19, 0x01	; 1
    4cc0:	26 15       	cp	r18, r6
    4cc2:	08 f0       	brcs	.+2      	; 0x4cc6 <fat_append_clusters+0x47c>
    4cc4:	30 e0       	ldi	r19, 0x00	; 0
    4cc6:	ed a1       	ldd	r30, Y+37	; 0x25
    4cc8:	e5 0f       	add	r30, r21
    4cca:	11 e0       	ldi	r17, 0x01	; 1
    4ccc:	e5 17       	cp	r30, r21
    4cce:	08 f0       	brcs	.+2      	; 0x4cd2 <fat_append_clusters+0x488>
    4cd0:	10 e0       	ldi	r17, 0x00	; 0
    4cd2:	3e 0f       	add	r19, r30
    4cd4:	f1 e0       	ldi	r31, 0x01	; 1
    4cd6:	3e 17       	cp	r19, r30
    4cd8:	08 f0       	brcs	.+2      	; 0x4cdc <fat_append_clusters+0x492>
    4cda:	f0 e0       	ldi	r31, 0x00	; 0
    4cdc:	1f 2b       	or	r17, r31
    4cde:	ee a1       	ldd	r30, Y+38	; 0x26
    4ce0:	e6 0f       	add	r30, r22
    4ce2:	01 e0       	ldi	r16, 0x01	; 1
    4ce4:	e6 17       	cp	r30, r22
    4ce6:	08 f0       	brcs	.+2      	; 0x4cea <fat_append_clusters+0x4a0>
    4ce8:	00 e0       	ldi	r16, 0x00	; 0
    4cea:	91 2e       	mov	r9, r17
    4cec:	9e 0e       	add	r9, r30
    4cee:	f1 e0       	ldi	r31, 0x01	; 1
    4cf0:	9e 16       	cp	r9, r30
    4cf2:	08 f0       	brcs	.+2      	; 0x4cf6 <fat_append_clusters+0x4ac>
    4cf4:	f0 e0       	ldi	r31, 0x00	; 0
    4cf6:	0f 2b       	or	r16, r31
    4cf8:	ef a1       	ldd	r30, Y+39	; 0x27
    4cfa:	e7 0f       	add	r30, r23
    4cfc:	f1 e0       	ldi	r31, 0x01	; 1
    4cfe:	e7 17       	cp	r30, r23
    4d00:	08 f0       	brcs	.+2      	; 0x4d04 <fat_append_clusters+0x4ba>
    4d02:	f0 e0       	ldi	r31, 0x00	; 0
    4d04:	e0 2e       	mov	r14, r16
    4d06:	ee 0e       	add	r14, r30
    4d08:	11 e0       	ldi	r17, 0x01	; 1
    4d0a:	ee 16       	cp	r14, r30
    4d0c:	08 f0       	brcs	.+2      	; 0x4d10 <fat_append_clusters+0x4c6>
    4d0e:	10 e0       	ldi	r17, 0x00	; 0
    4d10:	f1 2b       	or	r31, r17
    4d12:	e1 e0       	ldi	r30, 0x01	; 1
    4d14:	f8 a4       	ldd	r15, Y+40	; 0x28
    4d16:	f8 16       	cp	r15, r24
    4d18:	08 f0       	brcs	.+2      	; 0x4d1c <fat_append_clusters+0x4d2>
    4d1a:	e0 e0       	ldi	r30, 0x00	; 0
    4d1c:	f8 a4       	ldd	r15, Y+40	; 0x28
    4d1e:	ff 0e       	add	r15, r31
    4d20:	f1 e0       	ldi	r31, 0x01	; 1
    4d22:	08 a5       	ldd	r16, Y+40	; 0x28
    4d24:	f0 16       	cp	r15, r16
    4d26:	08 f0       	brcs	.+2      	; 0x4d2a <fat_append_clusters+0x4e0>
    4d28:	f0 e0       	ldi	r31, 0x00	; 0
    4d2a:	ef 2b       	or	r30, r31
    4d2c:	f1 e0       	ldi	r31, 0x01	; 1
    4d2e:	19 a5       	ldd	r17, Y+41	; 0x29
    4d30:	19 17       	cp	r17, r25
    4d32:	08 f0       	brcs	.+2      	; 0x4d36 <fat_append_clusters+0x4ec>
    4d34:	f0 e0       	ldi	r31, 0x00	; 0
    4d36:	09 a5       	ldd	r16, Y+41	; 0x29
    4d38:	0e 0f       	add	r16, r30
    4d3a:	e1 e0       	ldi	r30, 0x01	; 1
    4d3c:	19 a5       	ldd	r17, Y+41	; 0x29
    4d3e:	01 17       	cp	r16, r17
    4d40:	08 f0       	brcs	.+2      	; 0x4d44 <fat_append_clusters+0x4fa>
    4d42:	e0 e0       	ldi	r30, 0x00	; 0
    4d44:	fe 2b       	or	r31, r30
    4d46:	11 e0       	ldi	r17, 0x01	; 1
    4d48:	ea a5       	ldd	r30, Y+42	; 0x2a
    4d4a:	ea 17       	cp	r30, r26
    4d4c:	08 f0       	brcs	.+2      	; 0x4d50 <fat_append_clusters+0x506>
    4d4e:	10 e0       	ldi	r17, 0x00	; 0
    4d50:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d52:	8f 0f       	add	r24, r31
    4d54:	e1 e0       	ldi	r30, 0x01	; 1
    4d56:	fa a5       	ldd	r31, Y+42	; 0x2a
    4d58:	8f 17       	cp	r24, r31
    4d5a:	08 f0       	brcs	.+2      	; 0x4d5e <fat_append_clusters+0x514>
    4d5c:	e0 e0       	ldi	r30, 0x00	; 0
    4d5e:	1e 2b       	or	r17, r30
    4d60:	49 2d       	mov	r20, r9
    4d62:	5e 2d       	mov	r21, r14
    4d64:	6f 2d       	mov	r22, r15
    4d66:	70 2f       	mov	r23, r16
    4d68:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d6a:	91 0f       	add	r25, r17
    4d6c:	8e 01       	movw	r16, r28
    4d6e:	0d 5f       	subi	r16, 0xFD	; 253
    4d70:	1f 4f       	sbci	r17, 0xFF	; 255
    4d72:	a4 e0       	ldi	r26, 0x04	; 4
    4d74:	ea 2e       	mov	r14, r26
    4d76:	f1 2c       	mov	r15, r1
    4d78:	6b c0       	rjmp	.+214    	; 0x4e50 <fat_append_clusters+0x606>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
    4d7a:	ba 82       	std	Y+2, r11	; 0x02
    4d7c:	a9 82       	std	Y+1, r10	; 0x01

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    4d7e:	66 0c       	add	r6, r6
    4d80:	77 1c       	adc	r7, r7
    4d82:	88 1c       	adc	r8, r8
    4d84:	99 1c       	adc	r9, r9
    4d86:	b4 01       	movw	r22, r8
    4d88:	a3 01       	movw	r20, r6
    4d8a:	80 e0       	ldi	r24, 0x00	; 0
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	a0 e0       	ldi	r26, 0x00	; 0
    4d90:	b0 e0       	ldi	r27, 0x00	; 0
    4d92:	2c a1       	ldd	r18, Y+36	; 0x24
    4d94:	26 0d       	add	r18, r6
    4d96:	31 e0       	ldi	r19, 0x01	; 1
    4d98:	26 15       	cp	r18, r6
    4d9a:	08 f0       	brcs	.+2      	; 0x4d9e <fat_append_clusters+0x554>
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	ed a1       	ldd	r30, Y+37	; 0x25
    4da0:	e5 0f       	add	r30, r21
    4da2:	11 e0       	ldi	r17, 0x01	; 1
    4da4:	e5 17       	cp	r30, r21
    4da6:	08 f0       	brcs	.+2      	; 0x4daa <fat_append_clusters+0x560>
    4da8:	10 e0       	ldi	r17, 0x00	; 0
    4daa:	3e 0f       	add	r19, r30
    4dac:	f1 e0       	ldi	r31, 0x01	; 1
    4dae:	3e 17       	cp	r19, r30
    4db0:	08 f0       	brcs	.+2      	; 0x4db4 <fat_append_clusters+0x56a>
    4db2:	f0 e0       	ldi	r31, 0x00	; 0
    4db4:	1f 2b       	or	r17, r31
    4db6:	ee a1       	ldd	r30, Y+38	; 0x26
    4db8:	e6 0f       	add	r30, r22
    4dba:	01 e0       	ldi	r16, 0x01	; 1
    4dbc:	e6 17       	cp	r30, r22
    4dbe:	08 f0       	brcs	.+2      	; 0x4dc2 <fat_append_clusters+0x578>
    4dc0:	00 e0       	ldi	r16, 0x00	; 0
    4dc2:	91 2e       	mov	r9, r17
    4dc4:	9e 0e       	add	r9, r30
    4dc6:	f1 e0       	ldi	r31, 0x01	; 1
    4dc8:	9e 16       	cp	r9, r30
    4dca:	08 f0       	brcs	.+2      	; 0x4dce <fat_append_clusters+0x584>
    4dcc:	f0 e0       	ldi	r31, 0x00	; 0
    4dce:	0f 2b       	or	r16, r31
    4dd0:	ef a1       	ldd	r30, Y+39	; 0x27
    4dd2:	e7 0f       	add	r30, r23
    4dd4:	f1 e0       	ldi	r31, 0x01	; 1
    4dd6:	e7 17       	cp	r30, r23
    4dd8:	08 f0       	brcs	.+2      	; 0x4ddc <fat_append_clusters+0x592>
    4dda:	f0 e0       	ldi	r31, 0x00	; 0
    4ddc:	e0 2e       	mov	r14, r16
    4dde:	ee 0e       	add	r14, r30
    4de0:	11 e0       	ldi	r17, 0x01	; 1
    4de2:	ee 16       	cp	r14, r30
    4de4:	08 f0       	brcs	.+2      	; 0x4de8 <fat_append_clusters+0x59e>
    4de6:	10 e0       	ldi	r17, 0x00	; 0
    4de8:	f1 2b       	or	r31, r17
    4dea:	e1 e0       	ldi	r30, 0x01	; 1
    4dec:	f8 a4       	ldd	r15, Y+40	; 0x28
    4dee:	f8 16       	cp	r15, r24
    4df0:	08 f0       	brcs	.+2      	; 0x4df4 <fat_append_clusters+0x5aa>
    4df2:	e0 e0       	ldi	r30, 0x00	; 0
    4df4:	f8 a4       	ldd	r15, Y+40	; 0x28
    4df6:	ff 0e       	add	r15, r31
    4df8:	f1 e0       	ldi	r31, 0x01	; 1
    4dfa:	08 a5       	ldd	r16, Y+40	; 0x28
    4dfc:	f0 16       	cp	r15, r16
    4dfe:	08 f0       	brcs	.+2      	; 0x4e02 <fat_append_clusters+0x5b8>
    4e00:	f0 e0       	ldi	r31, 0x00	; 0
    4e02:	ef 2b       	or	r30, r31
    4e04:	f1 e0       	ldi	r31, 0x01	; 1
    4e06:	19 a5       	ldd	r17, Y+41	; 0x29
    4e08:	19 17       	cp	r17, r25
    4e0a:	08 f0       	brcs	.+2      	; 0x4e0e <fat_append_clusters+0x5c4>
    4e0c:	f0 e0       	ldi	r31, 0x00	; 0
    4e0e:	09 a5       	ldd	r16, Y+41	; 0x29
    4e10:	0e 0f       	add	r16, r30
    4e12:	e1 e0       	ldi	r30, 0x01	; 1
    4e14:	19 a5       	ldd	r17, Y+41	; 0x29
    4e16:	01 17       	cp	r16, r17
    4e18:	08 f0       	brcs	.+2      	; 0x4e1c <fat_append_clusters+0x5d2>
    4e1a:	e0 e0       	ldi	r30, 0x00	; 0
    4e1c:	fe 2b       	or	r31, r30
    4e1e:	11 e0       	ldi	r17, 0x01	; 1
    4e20:	ea a5       	ldd	r30, Y+42	; 0x2a
    4e22:	ea 17       	cp	r30, r26
    4e24:	08 f0       	brcs	.+2      	; 0x4e28 <fat_append_clusters+0x5de>
    4e26:	10 e0       	ldi	r17, 0x00	; 0
    4e28:	8a a5       	ldd	r24, Y+42	; 0x2a
    4e2a:	8f 0f       	add	r24, r31
    4e2c:	e1 e0       	ldi	r30, 0x01	; 1
    4e2e:	fa a5       	ldd	r31, Y+42	; 0x2a
    4e30:	8f 17       	cp	r24, r31
    4e32:	08 f0       	brcs	.+2      	; 0x4e36 <fat_append_clusters+0x5ec>
    4e34:	e0 e0       	ldi	r30, 0x00	; 0
    4e36:	1e 2b       	or	r17, r30
    4e38:	49 2d       	mov	r20, r9
    4e3a:	5e 2d       	mov	r21, r14
    4e3c:	6f 2d       	mov	r22, r15
    4e3e:	70 2f       	mov	r23, r16
    4e40:	9b a5       	ldd	r25, Y+43	; 0x2b
    4e42:	91 0f       	add	r25, r17
    4e44:	8e 01       	movw	r16, r28
    4e46:	0f 5f       	subi	r16, 0xFF	; 255
    4e48:	1f 4f       	sbci	r17, 0xFF	; 255
    4e4a:	e2 e0       	ldi	r30, 0x02	; 2
    4e4c:	ee 2e       	mov	r14, r30
    4e4e:	f1 2c       	mov	r15, r1
    4e50:	a8 8d       	ldd	r26, Y+24	; 0x18
    4e52:	b9 8d       	ldd	r27, Y+25	; 0x19
    4e54:	fd 01       	movw	r30, r26
    4e56:	09 95       	icall
    4e58:	88 23       	and	r24, r24
    4e5a:	49 f4       	brne	.+18     	; 0x4e6e <fat_append_clusters+0x624>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
    4e5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4e60:	b6 01       	movw	r22, r12
    4e62:	a5 01       	movw	r20, r10
    4e64:	0e 94 69 22 	call	0x44d2	; 0x44d2 <fat_free_clusters>

    return 0;
    4e68:	aa 24       	eor	r10, r10
    4e6a:	bb 24       	eor	r11, r11
    4e6c:	65 01       	movw	r12, r10
}
    4e6e:	b5 01       	movw	r22, r10
    4e70:	c6 01       	movw	r24, r12
    4e72:	ad 96       	adiw	r28, 0x2d	; 45
    4e74:	0f b6       	in	r0, 0x3f	; 63
    4e76:	f8 94       	cli
    4e78:	de bf       	out	0x3e, r29	; 62
    4e7a:	0f be       	out	0x3f, r0	; 63
    4e7c:	cd bf       	out	0x3d, r28	; 61
    4e7e:	cf 91       	pop	r28
    4e80:	df 91       	pop	r29
    4e82:	1f 91       	pop	r17
    4e84:	0f 91       	pop	r16
    4e86:	ff 90       	pop	r15
    4e88:	ef 90       	pop	r14
    4e8a:	df 90       	pop	r13
    4e8c:	cf 90       	pop	r12
    4e8e:	bf 90       	pop	r11
    4e90:	af 90       	pop	r10
    4e92:	9f 90       	pop	r9
    4e94:	8f 90       	pop	r8
    4e96:	7f 90       	pop	r7
    4e98:	6f 90       	pop	r6
    4e9a:	5f 90       	pop	r5
    4e9c:	4f 90       	pop	r4
    4e9e:	3f 90       	pop	r3
    4ea0:	2f 90       	pop	r2
    4ea2:	08 95       	ret

00004ea4 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
    4ea4:	80 e1       	ldi	r24, 0x10	; 16
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	08 95       	ret

00004eaa <fat_close_file>:
 *
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    4eaa:	fc 01       	movw	r30, r24
    if(fd)
    4eac:	00 97       	sbiw	r24, 0x00	; 0
    4eae:	11 f0       	breq	.+4      	; 0x4eb4 <fat_close_file+0xa>
#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    4eb0:	11 82       	std	Z+1, r1	; 0x01
    4eb2:	10 82       	st	Z, r1
    4eb4:	08 95       	ret

00004eb6 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    4eb6:	2f 92       	push	r2
    4eb8:	3f 92       	push	r3
    4eba:	4f 92       	push	r4
    4ebc:	5f 92       	push	r5
    4ebe:	6f 92       	push	r6
    4ec0:	7f 92       	push	r7
    4ec2:	8f 92       	push	r8
    4ec4:	9f 92       	push	r9
    4ec6:	af 92       	push	r10
    4ec8:	bf 92       	push	r11
    4eca:	cf 92       	push	r12
    4ecc:	df 92       	push	r13
    4ece:	ef 92       	push	r14
    4ed0:	ff 92       	push	r15
    4ed2:	0f 93       	push	r16
    4ed4:	1f 93       	push	r17
    4ed6:	df 93       	push	r29
    4ed8:	cf 93       	push	r28
    4eda:	cd b7       	in	r28, 0x3d	; 61
    4edc:	de b7       	in	r29, 0x3e	; 62
    4ede:	68 97       	sbiw	r28, 0x18	; 24
    4ee0:	0f b6       	in	r0, 0x3f	; 63
    4ee2:	f8 94       	cli
    4ee4:	de bf       	out	0x3e, r29	; 62
    4ee6:	0f be       	out	0x3f, r0	; 63
    4ee8:	cd bf       	out	0x3d, r28	; 61
    4eea:	98 8f       	std	Y+24, r25	; 0x18
    4eec:	8f 8b       	std	Y+23, r24	; 0x17
    4eee:	7e 87       	std	Y+14, r23	; 0x0e
    4ef0:	6d 87       	std	Y+13, r22	; 0x0d
    4ef2:	58 8b       	std	Y+16, r21	; 0x10
    4ef4:	4f 87       	std	Y+15, r20	; 0x0f
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    4ef6:	00 97       	sbiw	r24, 0x00	; 0
    4ef8:	09 f4       	brne	.+2      	; 0x4efc <fat_read_file+0x46>
    4efa:	1e c3       	rjmp	.+1596   	; 0x5538 <fat_read_file+0x682>
    4efc:	67 2b       	or	r22, r23
    4efe:	09 f4       	brne	.+2      	; 0x4f02 <fat_read_file+0x4c>
    4f00:	1b c3       	rjmp	.+1590   	; 0x5538 <fat_read_file+0x682>
    4f02:	41 15       	cp	r20, r1
    4f04:	51 05       	cpc	r21, r1
    4f06:	09 f4       	brne	.+2      	; 0x4f0a <fat_read_file+0x54>
    4f08:	17 c3       	rjmp	.+1582   	; 0x5538 <fat_read_file+0x682>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    4f0a:	dc 01       	movw	r26, r24
    4f0c:	d3 96       	adiw	r26, 0x33	; 51
    4f0e:	ac 90       	ld	r10, X
    4f10:	d3 97       	sbiw	r26, 0x33	; 51
    4f12:	d4 96       	adiw	r26, 0x34	; 52
    4f14:	bc 90       	ld	r11, X
    4f16:	d4 97       	sbiw	r26, 0x34	; 52
    4f18:	d5 96       	adiw	r26, 0x35	; 53
    4f1a:	cc 90       	ld	r12, X
    4f1c:	d5 97       	sbiw	r26, 0x35	; 53
    4f1e:	d6 96       	adiw	r26, 0x36	; 54
    4f20:	dc 90       	ld	r13, X
    4f22:	d6 97       	sbiw	r26, 0x36	; 54
    4f24:	d7 96       	adiw	r26, 0x37	; 55
    4f26:	ec 90       	ld	r14, X
    4f28:	d7 97       	sbiw	r26, 0x37	; 55
    4f2a:	d8 96       	adiw	r26, 0x38	; 56
    4f2c:	fc 90       	ld	r15, X
    4f2e:	d8 97       	sbiw	r26, 0x38	; 56
    4f30:	d9 96       	adiw	r26, 0x39	; 57
    4f32:	0c 91       	ld	r16, X
    4f34:	d9 97       	sbiw	r26, 0x39	; 57
    4f36:	da 96       	adiw	r26, 0x3a	; 58
    4f38:	1c 91       	ld	r17, X
    4f3a:	da 97       	sbiw	r26, 0x3a	; 58
    4f3c:	97 96       	adiw	r26, 0x27	; 39
    4f3e:	2d 90       	ld	r2, X+
    4f40:	3d 90       	ld	r3, X+
    4f42:	4d 90       	ld	r4, X+
    4f44:	5c 90       	ld	r5, X
    4f46:	9a 97       	sbiw	r26, 0x2a	; 42
    4f48:	9a 01       	movw	r18, r20
    4f4a:	40 e0       	ldi	r20, 0x00	; 0
    4f4c:	50 e0       	ldi	r21, 0x00	; 0
    4f4e:	60 e0       	ldi	r22, 0x00	; 0
    4f50:	70 e0       	ldi	r23, 0x00	; 0
    4f52:	80 e0       	ldi	r24, 0x00	; 0
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	b2 2f       	mov	r27, r18
    4f58:	ba 0d       	add	r27, r10
    4f5a:	ba 8b       	std	Y+18, r27	; 0x12
    4f5c:	f1 e0       	ldi	r31, 0x01	; 1
    4f5e:	b2 17       	cp	r27, r18
    4f60:	08 f0       	brcs	.+2      	; 0x4f64 <fat_read_file+0xae>
    4f62:	f0 e0       	ldi	r31, 0x00	; 0
    4f64:	e3 2f       	mov	r30, r19
    4f66:	eb 0d       	add	r30, r11
    4f68:	99 24       	eor	r9, r9
    4f6a:	93 94       	inc	r9
    4f6c:	e3 17       	cp	r30, r19
    4f6e:	08 f0       	brcs	.+2      	; 0x4f72 <fat_read_file+0xbc>
    4f70:	99 24       	eor	r9, r9
    4f72:	fe 0f       	add	r31, r30
    4f74:	f9 8b       	std	Y+17, r31	; 0x11
    4f76:	f1 e0       	ldi	r31, 0x01	; 1
    4f78:	a9 89       	ldd	r26, Y+17	; 0x11
    4f7a:	ae 17       	cp	r26, r30
    4f7c:	08 f0       	brcs	.+2      	; 0x4f80 <fat_read_file+0xca>
    4f7e:	f0 e0       	ldi	r31, 0x00	; 0
    4f80:	9f 2a       	or	r9, r31
    4f82:	e4 2f       	mov	r30, r20
    4f84:	ec 0d       	add	r30, r12
    4f86:	b1 e0       	ldi	r27, 0x01	; 1
    4f88:	e4 17       	cp	r30, r20
    4f8a:	08 f0       	brcs	.+2      	; 0x4f8e <fat_read_file+0xd8>
    4f8c:	b0 e0       	ldi	r27, 0x00	; 0
    4f8e:	69 2c       	mov	r6, r9
    4f90:	6e 0e       	add	r6, r30
    4f92:	f1 e0       	ldi	r31, 0x01	; 1
    4f94:	6e 16       	cp	r6, r30
    4f96:	08 f0       	brcs	.+2      	; 0x4f9a <fat_read_file+0xe4>
    4f98:	f0 e0       	ldi	r31, 0x00	; 0
    4f9a:	bf 2b       	or	r27, r31
    4f9c:	e5 2f       	mov	r30, r21
    4f9e:	ed 0d       	add	r30, r13
    4fa0:	a1 e0       	ldi	r26, 0x01	; 1
    4fa2:	e5 17       	cp	r30, r21
    4fa4:	08 f0       	brcs	.+2      	; 0x4fa8 <fat_read_file+0xf2>
    4fa6:	a0 e0       	ldi	r26, 0x00	; 0
    4fa8:	7b 2e       	mov	r7, r27
    4faa:	7e 0e       	add	r7, r30
    4fac:	f1 e0       	ldi	r31, 0x01	; 1
    4fae:	7e 16       	cp	r7, r30
    4fb0:	08 f0       	brcs	.+2      	; 0x4fb4 <fat_read_file+0xfe>
    4fb2:	f0 e0       	ldi	r31, 0x00	; 0
    4fb4:	af 2b       	or	r26, r31
    4fb6:	e6 2f       	mov	r30, r22
    4fb8:	ee 0d       	add	r30, r14
    4fba:	b1 e0       	ldi	r27, 0x01	; 1
    4fbc:	e6 17       	cp	r30, r22
    4fbe:	08 f0       	brcs	.+2      	; 0x4fc2 <fat_read_file+0x10c>
    4fc0:	b0 e0       	ldi	r27, 0x00	; 0
    4fc2:	8a 2e       	mov	r8, r26
    4fc4:	8e 0e       	add	r8, r30
    4fc6:	f1 e0       	ldi	r31, 0x01	; 1
    4fc8:	8e 16       	cp	r8, r30
    4fca:	08 f0       	brcs	.+2      	; 0x4fce <fat_read_file+0x118>
    4fcc:	f0 e0       	ldi	r31, 0x00	; 0
    4fce:	bf 2b       	or	r27, r31
    4fd0:	e7 2f       	mov	r30, r23
    4fd2:	ef 0d       	add	r30, r15
    4fd4:	a1 e0       	ldi	r26, 0x01	; 1
    4fd6:	e7 17       	cp	r30, r23
    4fd8:	08 f0       	brcs	.+2      	; 0x4fdc <fat_read_file+0x126>
    4fda:	a0 e0       	ldi	r26, 0x00	; 0
    4fdc:	9b 2e       	mov	r9, r27
    4fde:	9e 0e       	add	r9, r30
    4fe0:	f1 e0       	ldi	r31, 0x01	; 1
    4fe2:	9e 16       	cp	r9, r30
    4fe4:	08 f0       	brcs	.+2      	; 0x4fe8 <fat_read_file+0x132>
    4fe6:	f0 e0       	ldi	r31, 0x00	; 0
    4fe8:	af 2b       	or	r26, r31
    4fea:	e8 2f       	mov	r30, r24
    4fec:	e0 0f       	add	r30, r16
    4fee:	b1 e0       	ldi	r27, 0x01	; 1
    4ff0:	e8 17       	cp	r30, r24
    4ff2:	08 f0       	brcs	.+2      	; 0x4ff6 <fat_read_file+0x140>
    4ff4:	b0 e0       	ldi	r27, 0x00	; 0
    4ff6:	ae 0f       	add	r26, r30
    4ff8:	f1 e0       	ldi	r31, 0x01	; 1
    4ffa:	ae 17       	cp	r26, r30
    4ffc:	08 f0       	brcs	.+2      	; 0x5000 <fat_read_file+0x14a>
    4ffe:	f0 e0       	ldi	r31, 0x00	; 0
    5000:	eb 2f       	mov	r30, r27
    5002:	ef 2b       	or	r30, r31
    5004:	89 2f       	mov	r24, r25
    5006:	81 0f       	add	r24, r17
    5008:	e8 0f       	add	r30, r24
    500a:	a2 01       	movw	r20, r4
    500c:	91 01       	movw	r18, r2
    500e:	60 e0       	ldi	r22, 0x00	; 0
    5010:	70 e0       	ldi	r23, 0x00	; 0
    5012:	80 e0       	ldi	r24, 0x00	; 0
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	9e 17       	cp	r25, r30
    5018:	f0 f0       	brcs	.+60     	; 0x5056 <fat_read_file+0x1a0>
    501a:	e9 17       	cp	r30, r25
    501c:	21 f5       	brne	.+72     	; 0x5066 <fat_read_file+0x1b0>
    501e:	8a 17       	cp	r24, r26
    5020:	d0 f0       	brcs	.+52     	; 0x5056 <fat_read_file+0x1a0>
    5022:	a8 17       	cp	r26, r24
    5024:	01 f5       	brne	.+64     	; 0x5066 <fat_read_file+0x1b0>
    5026:	79 15       	cp	r23, r9
    5028:	b0 f0       	brcs	.+44     	; 0x5056 <fat_read_file+0x1a0>
    502a:	97 16       	cp	r9, r23
    502c:	e1 f4       	brne	.+56     	; 0x5066 <fat_read_file+0x1b0>
    502e:	68 15       	cp	r22, r8
    5030:	90 f0       	brcs	.+36     	; 0x5056 <fat_read_file+0x1a0>
    5032:	86 16       	cp	r8, r22
    5034:	c1 f4       	brne	.+48     	; 0x5066 <fat_read_file+0x1b0>
    5036:	57 15       	cp	r21, r7
    5038:	70 f0       	brcs	.+28     	; 0x5056 <fat_read_file+0x1a0>
    503a:	75 16       	cp	r7, r21
    503c:	a1 f4       	brne	.+40     	; 0x5066 <fat_read_file+0x1b0>
    503e:	46 15       	cp	r20, r6
    5040:	50 f0       	brcs	.+20     	; 0x5056 <fat_read_file+0x1a0>
    5042:	64 16       	cp	r6, r20
    5044:	81 f4       	brne	.+32     	; 0x5066 <fat_read_file+0x1b0>
    5046:	b9 89       	ldd	r27, Y+17	; 0x11
    5048:	3b 17       	cp	r19, r27
    504a:	28 f0       	brcs	.+10     	; 0x5056 <fat_read_file+0x1a0>
    504c:	b3 17       	cp	r27, r19
    504e:	59 f4       	brne	.+22     	; 0x5066 <fat_read_file+0x1b0>
    5050:	ea 89       	ldd	r30, Y+18	; 0x12
    5052:	2e 16       	cp	r2, r30
    5054:	40 f4       	brcc	.+16     	; 0x5066 <fat_read_file+0x1b0>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    5056:	91 01       	movw	r18, r2
    5058:	2a 19       	sub	r18, r10
    505a:	3b 09       	sbc	r19, r11
    505c:	38 8b       	std	Y+16, r19	; 0x10
    505e:	2f 87       	std	Y+15, r18	; 0x0f
    if(buffer_len == 0)
    5060:	23 2b       	or	r18, r19
    5062:	09 f4       	brne	.+2      	; 0x5066 <fat_read_file+0x1b0>
    5064:	6c c2       	rjmp	.+1240   	; 0x553e <fat_read_file+0x688>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    5066:	af 89       	ldd	r26, Y+23	; 0x17
    5068:	b8 8d       	ldd	r27, Y+24	; 0x18
    506a:	ed 91       	ld	r30, X+
    506c:	fc 91       	ld	r31, X
    506e:	11 97       	sbiw	r26, 0x01	; 1
    5070:	20 8d       	ldd	r18, Z+24	; 0x18
    5072:	31 8d       	ldd	r19, Z+25	; 0x19
    5074:	3c 87       	std	Y+12, r19	; 0x0c
    5076:	2b 87       	std	Y+11, r18	; 0x0b
    cluster_t cluster_num = fd->pos_cluster;
    5078:	db 96       	adiw	r26, 0x3b	; 59
    507a:	8d 91       	ld	r24, X+
    507c:	9d 91       	ld	r25, X+
    507e:	0d 90       	ld	r0, X+
    5080:	bc 91       	ld	r27, X
    5082:	a0 2d       	mov	r26, r0
    5084:	8f 83       	std	Y+7, r24	; 0x07
    5086:	98 87       	std	Y+8, r25	; 0x08
    5088:	a9 87       	std	Y+9, r26	; 0x09
    508a:	ba 87       	std	Y+10, r27	; 0x0a
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    508c:	00 97       	sbiw	r24, 0x00	; 0
    508e:	a1 05       	cpc	r26, r1
    5090:	b1 05       	cpc	r27, r1
    5092:	09 f0       	breq	.+2      	; 0x5096 <fat_read_file+0x1e0>
    5094:	59 c0       	rjmp	.+178    	; 0x5148 <fat_read_file+0x292>
    {
        cluster_num = fd->dir_entry.cluster;
    5096:	af 89       	ldd	r26, Y+23	; 0x17
    5098:	b8 8d       	ldd	r27, Y+24	; 0x18
    509a:	93 96       	adiw	r26, 0x23	; 35
    509c:	2d 91       	ld	r18, X+
    509e:	3d 91       	ld	r19, X+
    50a0:	4d 91       	ld	r20, X+
    50a2:	5c 91       	ld	r21, X
    50a4:	96 97       	sbiw	r26, 0x26	; 38
    50a6:	2f 83       	std	Y+7, r18	; 0x07
    50a8:	38 87       	std	Y+8, r19	; 0x08
    50aa:	49 87       	std	Y+9, r20	; 0x09
    50ac:	5a 87       	std	Y+10, r21	; 0x0a
        
        if(!cluster_num)
    50ae:	21 15       	cp	r18, r1
    50b0:	31 05       	cpc	r19, r1
    50b2:	41 05       	cpc	r20, r1
    50b4:	51 05       	cpc	r21, r1
    50b6:	59 f4       	brne	.+22     	; 0x50ce <fat_read_file+0x218>
        {
            if(!fd->pos)
    50b8:	8a 2d       	mov	r24, r10
    50ba:	8b 29       	or	r24, r11
    50bc:	8c 29       	or	r24, r12
    50be:	8d 29       	or	r24, r13
    50c0:	8e 29       	or	r24, r14
    50c2:	8f 29       	or	r24, r15
    50c4:	80 2b       	or	r24, r16
    50c6:	81 2b       	or	r24, r17
    50c8:	09 f4       	brne	.+2      	; 0x50cc <fat_read_file+0x216>
    50ca:	39 c2       	rjmp	.+1138   	; 0x553e <fat_read_file+0x688>
    50cc:	35 c2       	rjmp	.+1130   	; 0x5538 <fat_read_file+0x682>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    50ce:	8a 2d       	mov	r24, r10
    50d0:	8b 29       	or	r24, r11
    50d2:	8c 29       	or	r24, r12
    50d4:	8d 29       	or	r24, r13
    50d6:	8e 29       	or	r24, r14
    50d8:	8f 29       	or	r24, r15
    50da:	80 2b       	or	r24, r16
    50dc:	81 2b       	or	r24, r17
    50de:	a1 f1       	breq	.+104    	; 0x5148 <fat_read_file+0x292>
        {
            uint32_t pos = fd->pos;
    50e0:	35 01       	movw	r6, r10
    50e2:	46 01       	movw	r8, r12
            while(pos >= cluster_size)
    50e4:	eb 85       	ldd	r30, Y+11	; 0x0b
    50e6:	fc 85       	ldd	r31, Y+12	; 0x0c
    50e8:	1f 01       	movw	r2, r30
    50ea:	44 24       	eor	r4, r4
    50ec:	55 24       	eor	r5, r5
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
    50ee:	22 27       	eor	r18, r18
    50f0:	33 27       	eor	r19, r19
    50f2:	a9 01       	movw	r20, r18
    50f4:	22 19       	sub	r18, r2
    50f6:	33 09       	sbc	r19, r3
    50f8:	44 09       	sbc	r20, r4
    50fa:	55 09       	sbc	r21, r5
    50fc:	2b 8b       	std	Y+19, r18	; 0x13
    50fe:	3c 8b       	std	Y+20, r19	; 0x14
    5100:	4d 8b       	std	Y+21, r20	; 0x15
    5102:	5e 8b       	std	Y+22, r21	; 0x16
    5104:	1c c0       	rjmp	.+56     	; 0x513e <fat_read_file+0x288>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    5106:	af 89       	ldd	r26, Y+23	; 0x17
    5108:	b8 8d       	ldd	r27, Y+24	; 0x18
    510a:	8d 91       	ld	r24, X+
    510c:	9c 91       	ld	r25, X
    510e:	4f 81       	ldd	r20, Y+7	; 0x07
    5110:	58 85       	ldd	r21, Y+8	; 0x08
    5112:	69 85       	ldd	r22, Y+9	; 0x09
    5114:	7a 85       	ldd	r23, Y+10	; 0x0a
    5116:	0e 94 4b 21 	call	0x4296	; 0x4296 <fat_get_next_cluster>
    511a:	6f 83       	std	Y+7, r22	; 0x07
    511c:	78 87       	std	Y+8, r23	; 0x08
    511e:	89 87       	std	Y+9, r24	; 0x09
    5120:	9a 87       	std	Y+10, r25	; 0x0a
                if(!cluster_num)
    5122:	61 15       	cp	r22, r1
    5124:	71 05       	cpc	r23, r1
    5126:	81 05       	cpc	r24, r1
    5128:	91 05       	cpc	r25, r1
    512a:	09 f4       	brne	.+2      	; 0x512e <fat_read_file+0x278>
    512c:	05 c2       	rjmp	.+1034   	; 0x5538 <fat_read_file+0x682>
    512e:	2b 89       	ldd	r18, Y+19	; 0x13
    5130:	3c 89       	ldd	r19, Y+20	; 0x14
    5132:	4d 89       	ldd	r20, Y+21	; 0x15
    5134:	5e 89       	ldd	r21, Y+22	; 0x16
    5136:	62 0e       	add	r6, r18
    5138:	73 1e       	adc	r7, r19
    513a:	84 1e       	adc	r8, r20
    513c:	95 1e       	adc	r9, r21
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    513e:	62 14       	cp	r6, r2
    5140:	73 04       	cpc	r7, r3
    5142:	84 04       	cpc	r8, r4
    5144:	95 04       	cpc	r9, r5
    5146:	f8 f6       	brcc	.-66     	; 0x5106 <fat_read_file+0x250>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    5148:	4b 85       	ldd	r20, Y+11	; 0x0b
    514a:	5c 85       	ldd	r21, Y+12	; 0x0c
    514c:	41 50       	subi	r20, 0x01	; 1
    514e:	50 40       	sbci	r21, 0x00	; 0
    5150:	5c 87       	std	Y+12, r21	; 0x0c
    5152:	4b 87       	std	Y+11, r20	; 0x0b
    5154:	4a 21       	and	r20, r10
    5156:	5b 21       	and	r21, r11
    5158:	5c 83       	std	Y+4, r21	; 0x04
    515a:	4b 83       	std	Y+3, r20	; 0x03
    515c:	8b 85       	ldd	r24, Y+11	; 0x0b
    515e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5160:	01 96       	adiw	r24, 0x01	; 1
    5162:	9c 87       	std	Y+12, r25	; 0x0c
    5164:	8b 87       	std	Y+11, r24	; 0x0b
    5166:	af 85       	ldd	r26, Y+15	; 0x0f
    5168:	b8 89       	ldd	r27, Y+16	; 0x10
    516a:	be 83       	std	Y+6, r27	; 0x06
    516c:	ad 83       	std	Y+5, r26	; 0x05
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    516e:	ef 89       	ldd	r30, Y+23	; 0x17
    5170:	f8 8d       	ldd	r31, Y+24	; 0x18
    5172:	01 90       	ld	r0, Z+
    5174:	f0 81       	ld	r31, Z
    5176:	e0 2d       	mov	r30, r0
    5178:	fa 83       	std	Y+2, r31	; 0x02
    517a:	e9 83       	std	Y+1, r30	; 0x01
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    517c:	30 97       	sbiw	r30, 0x00	; 0
    517e:	09 f4       	brne	.+2      	; 0x5182 <fat_read_file+0x2cc>
    5180:	8e c0       	rjmp	.+284    	; 0x529e <fat_read_file+0x3e8>
    5182:	2f 81       	ldd	r18, Y+7	; 0x07
    5184:	38 85       	ldd	r19, Y+8	; 0x08
    5186:	49 85       	ldd	r20, Y+9	; 0x09
    5188:	5a 85       	ldd	r21, Y+10	; 0x0a
    518a:	22 30       	cpi	r18, 0x02	; 2
    518c:	31 05       	cpc	r19, r1
    518e:	41 05       	cpc	r20, r1
    5190:	51 05       	cpc	r21, r1
    5192:	08 f4       	brcc	.+2      	; 0x5196 <fat_read_file+0x2e0>
    5194:	84 c0       	rjmp	.+264    	; 0x529e <fat_read_file+0x3e8>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    5196:	22 50       	subi	r18, 0x02	; 2
    5198:	30 40       	sbci	r19, 0x00	; 0
    519a:	40 40       	sbci	r20, 0x00	; 0
    519c:	50 40       	sbci	r21, 0x00	; 0
    519e:	59 01       	movw	r10, r18
    51a0:	6a 01       	movw	r12, r20
    51a2:	2e 5f       	subi	r18, 0xFE	; 254
    51a4:	3f 4f       	sbci	r19, 0xFF	; 255
    51a6:	4f 4f       	sbci	r20, 0xFF	; 255
    51a8:	5f 4f       	sbci	r21, 0xFF	; 255
    51aa:	2f 83       	std	Y+7, r18	; 0x07
    51ac:	38 87       	std	Y+8, r19	; 0x08
    51ae:	49 87       	std	Y+9, r20	; 0x09
    51b0:	5a 87       	std	Y+10, r21	; 0x0a
    51b2:	20 8c       	ldd	r2, Z+24	; 0x18
    51b4:	31 8c       	ldd	r3, Z+25	; 0x19
    51b6:	95 01       	movw	r18, r10
    51b8:	a6 01       	movw	r20, r12
    51ba:	60 e0       	ldi	r22, 0x00	; 0
    51bc:	70 e0       	ldi	r23, 0x00	; 0
    51be:	80 e0       	ldi	r24, 0x00	; 0
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	51 01       	movw	r10, r2
    51c4:	cc 24       	eor	r12, r12
    51c6:	dd 24       	eor	r13, r13
    51c8:	ee 24       	eor	r14, r14
    51ca:	ff 24       	eor	r15, r15
    51cc:	00 e0       	ldi	r16, 0x00	; 0
    51ce:	10 e0       	ldi	r17, 0x00	; 0
    51d0:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    51d4:	e9 81       	ldd	r30, Y+1	; 0x01
    51d6:	fa 81       	ldd	r31, Y+2	; 0x02
    51d8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    51da:	f3 8c       	ldd	r15, Z+27	; 0x1b
    51dc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    51de:	05 8d       	ldd	r16, Z+29	; 0x1d
    51e0:	e6 8c       	ldd	r14, Z+30	; 0x1e
    51e2:	d7 8c       	ldd	r13, Z+31	; 0x1f
    51e4:	c0 a0       	ldd	r12, Z+32	; 0x20
    51e6:	11 a1       	ldd	r17, Z+33	; 0x21
    51e8:	a2 0f       	add	r26, r18
    51ea:	f1 e0       	ldi	r31, 0x01	; 1
    51ec:	a2 17       	cp	r26, r18
    51ee:	08 f0       	brcs	.+2      	; 0x51f2 <fat_read_file+0x33c>
    51f0:	f0 e0       	ldi	r31, 0x00	; 0
    51f2:	23 2f       	mov	r18, r19
    51f4:	2f 0d       	add	r18, r15
    51f6:	e1 e0       	ldi	r30, 0x01	; 1
    51f8:	23 17       	cp	r18, r19
    51fa:	08 f0       	brcs	.+2      	; 0x51fe <fat_read_file+0x348>
    51fc:	e0 e0       	ldi	r30, 0x00	; 0
    51fe:	ff 2e       	mov	r15, r31
    5200:	f2 0e       	add	r15, r18
    5202:	31 e0       	ldi	r19, 0x01	; 1
    5204:	f2 16       	cp	r15, r18
    5206:	08 f0       	brcs	.+2      	; 0x520a <fat_read_file+0x354>
    5208:	30 e0       	ldi	r19, 0x00	; 0
    520a:	e3 2b       	or	r30, r19
    520c:	24 2f       	mov	r18, r20
    520e:	2b 0f       	add	r18, r27
    5210:	f1 e0       	ldi	r31, 0x01	; 1
    5212:	24 17       	cp	r18, r20
    5214:	08 f0       	brcs	.+2      	; 0x5218 <fat_read_file+0x362>
    5216:	f0 e0       	ldi	r31, 0x00	; 0
    5218:	be 2f       	mov	r27, r30
    521a:	b2 0f       	add	r27, r18
    521c:	31 e0       	ldi	r19, 0x01	; 1
    521e:	b2 17       	cp	r27, r18
    5220:	08 f0       	brcs	.+2      	; 0x5224 <fat_read_file+0x36e>
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	f3 2b       	or	r31, r19
    5226:	25 2f       	mov	r18, r21
    5228:	20 0f       	add	r18, r16
    522a:	41 e0       	ldi	r20, 0x01	; 1
    522c:	25 17       	cp	r18, r21
    522e:	08 f0       	brcs	.+2      	; 0x5232 <fat_read_file+0x37c>
    5230:	40 e0       	ldi	r20, 0x00	; 0
    5232:	f2 0f       	add	r31, r18
    5234:	31 e0       	ldi	r19, 0x01	; 1
    5236:	f2 17       	cp	r31, r18
    5238:	08 f0       	brcs	.+2      	; 0x523c <fat_read_file+0x386>
    523a:	30 e0       	ldi	r19, 0x00	; 0
    523c:	43 2b       	or	r20, r19
    523e:	26 2f       	mov	r18, r22
    5240:	2e 0d       	add	r18, r14
    5242:	51 e0       	ldi	r21, 0x01	; 1
    5244:	26 17       	cp	r18, r22
    5246:	08 f0       	brcs	.+2      	; 0x524a <fat_read_file+0x394>
    5248:	50 e0       	ldi	r21, 0x00	; 0
    524a:	e4 2f       	mov	r30, r20
    524c:	e2 0f       	add	r30, r18
    524e:	31 e0       	ldi	r19, 0x01	; 1
    5250:	e2 17       	cp	r30, r18
    5252:	08 f0       	brcs	.+2      	; 0x5256 <fat_read_file+0x3a0>
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	53 2b       	or	r21, r19
    5258:	27 2f       	mov	r18, r23
    525a:	2d 0d       	add	r18, r13
    525c:	41 e0       	ldi	r20, 0x01	; 1
    525e:	27 17       	cp	r18, r23
    5260:	08 f0       	brcs	.+2      	; 0x5264 <fat_read_file+0x3ae>
    5262:	40 e0       	ldi	r20, 0x00	; 0
    5264:	52 0f       	add	r21, r18
    5266:	31 e0       	ldi	r19, 0x01	; 1
    5268:	52 17       	cp	r21, r18
    526a:	08 f0       	brcs	.+2      	; 0x526e <fat_read_file+0x3b8>
    526c:	30 e0       	ldi	r19, 0x00	; 0
    526e:	43 2b       	or	r20, r19
    5270:	28 2f       	mov	r18, r24
    5272:	2c 0d       	add	r18, r12
    5274:	31 e0       	ldi	r19, 0x01	; 1
    5276:	28 17       	cp	r18, r24
    5278:	08 f0       	brcs	.+2      	; 0x527c <fat_read_file+0x3c6>
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	42 0f       	add	r20, r18
    527e:	81 e0       	ldi	r24, 0x01	; 1
    5280:	42 17       	cp	r20, r18
    5282:	08 f0       	brcs	.+2      	; 0x5286 <fat_read_file+0x3d0>
    5284:	80 e0       	ldi	r24, 0x00	; 0
    5286:	73 2e       	mov	r7, r19
    5288:	78 2a       	or	r7, r24
    528a:	19 0f       	add	r17, r25
    528c:	2a 2f       	mov	r18, r26
    528e:	9f 2d       	mov	r25, r15
    5290:	6b 2f       	mov	r22, r27
    5292:	7f 2f       	mov	r23, r31
    5294:	ae 2f       	mov	r26, r30
    5296:	b5 2f       	mov	r27, r21
    5298:	34 2e       	mov	r3, r20
    529a:	71 0e       	add	r7, r17
    529c:	08 c0       	rjmp	.+16     	; 0x52ae <fat_read_file+0x3f8>
    529e:	20 e0       	ldi	r18, 0x00	; 0
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	60 e0       	ldi	r22, 0x00	; 0
    52a4:	70 e0       	ldi	r23, 0x00	; 0
    52a6:	a0 e0       	ldi	r26, 0x00	; 0
    52a8:	b0 e0       	ldi	r27, 0x00	; 0
    52aa:	33 24       	eor	r3, r3
    52ac:	77 24       	eor	r7, r7
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
    52ae:	8b 84       	ldd	r8, Y+11	; 0x0b
    52b0:	9c 84       	ldd	r9, Y+12	; 0x0c
    52b2:	4b 81       	ldd	r20, Y+3	; 0x03
    52b4:	5c 81       	ldd	r21, Y+4	; 0x04
    52b6:	84 1a       	sub	r8, r20
    52b8:	95 0a       	sbc	r9, r21
    52ba:	ed 81       	ldd	r30, Y+5	; 0x05
    52bc:	fe 81       	ldd	r31, Y+6	; 0x06
    52be:	e8 15       	cp	r30, r8
    52c0:	f9 05       	cpc	r31, r9
    52c2:	08 f4       	brcc	.+2      	; 0x52c6 <fat_read_file+0x410>
    52c4:	4f 01       	movw	r8, r30
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    52c6:	e9 81       	ldd	r30, Y+1	; 0x01
    52c8:	fa 81       	ldd	r31, Y+2	; 0x02
    52ca:	40 80       	ld	r4, Z
    52cc:	51 80       	ldd	r5, Z+1	; 0x01
    52ce:	4b 81       	ldd	r20, Y+3	; 0x03
    52d0:	5c 81       	ldd	r21, Y+4	; 0x04
    52d2:	5a 01       	movw	r10, r20
    52d4:	cc 24       	eor	r12, r12
    52d6:	dd 24       	eor	r13, r13
    52d8:	ee 24       	eor	r14, r14
    52da:	ff 24       	eor	r15, r15
    52dc:	87 01       	movw	r16, r14
    52de:	62 2e       	mov	r6, r18
    52e0:	64 0e       	add	r6, r20
    52e2:	31 e0       	ldi	r19, 0x01	; 1
    52e4:	62 16       	cp	r6, r18
    52e6:	08 f0       	brcs	.+2      	; 0x52ea <fat_read_file+0x434>
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	89 2f       	mov	r24, r25
    52ec:	8b 0d       	add	r24, r11
    52ee:	41 e0       	ldi	r20, 0x01	; 1
    52f0:	89 17       	cp	r24, r25
    52f2:	08 f0       	brcs	.+2      	; 0x52f6 <fat_read_file+0x440>
    52f4:	40 e0       	ldi	r20, 0x00	; 0
    52f6:	38 0f       	add	r19, r24
    52f8:	91 e0       	ldi	r25, 0x01	; 1
    52fa:	38 17       	cp	r19, r24
    52fc:	08 f0       	brcs	.+2      	; 0x5300 <fat_read_file+0x44a>
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	49 2b       	or	r20, r25
    5302:	86 2f       	mov	r24, r22
    5304:	8c 0d       	add	r24, r12
    5306:	51 e0       	ldi	r21, 0x01	; 1
    5308:	86 17       	cp	r24, r22
    530a:	08 f0       	brcs	.+2      	; 0x530e <fat_read_file+0x458>
    530c:	50 e0       	ldi	r21, 0x00	; 0
    530e:	48 0f       	add	r20, r24
    5310:	91 e0       	ldi	r25, 0x01	; 1
    5312:	48 17       	cp	r20, r24
    5314:	08 f0       	brcs	.+2      	; 0x5318 <fat_read_file+0x462>
    5316:	90 e0       	ldi	r25, 0x00	; 0
    5318:	59 2b       	or	r21, r25
    531a:	87 2f       	mov	r24, r23
    531c:	8d 0d       	add	r24, r13
    531e:	61 e0       	ldi	r22, 0x01	; 1
    5320:	87 17       	cp	r24, r23
    5322:	08 f0       	brcs	.+2      	; 0x5326 <fat_read_file+0x470>
    5324:	60 e0       	ldi	r22, 0x00	; 0
    5326:	58 0f       	add	r21, r24
    5328:	91 e0       	ldi	r25, 0x01	; 1
    532a:	58 17       	cp	r21, r24
    532c:	08 f0       	brcs	.+2      	; 0x5330 <fat_read_file+0x47a>
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	69 2b       	or	r22, r25
    5332:	8a 2f       	mov	r24, r26
    5334:	8e 0d       	add	r24, r14
    5336:	71 e0       	ldi	r23, 0x01	; 1
    5338:	8a 17       	cp	r24, r26
    533a:	08 f0       	brcs	.+2      	; 0x533e <fat_read_file+0x488>
    533c:	70 e0       	ldi	r23, 0x00	; 0
    533e:	68 0f       	add	r22, r24
    5340:	91 e0       	ldi	r25, 0x01	; 1
    5342:	68 17       	cp	r22, r24
    5344:	08 f0       	brcs	.+2      	; 0x5348 <fat_read_file+0x492>
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	79 2b       	or	r23, r25
    534a:	9b 2f       	mov	r25, r27
    534c:	9f 0d       	add	r25, r15
    534e:	81 e0       	ldi	r24, 0x01	; 1
    5350:	9b 17       	cp	r25, r27
    5352:	08 f0       	brcs	.+2      	; 0x5356 <fat_read_file+0x4a0>
    5354:	80 e0       	ldi	r24, 0x00	; 0
    5356:	79 0f       	add	r23, r25
    5358:	a1 e0       	ldi	r26, 0x01	; 1
    535a:	79 17       	cp	r23, r25
    535c:	08 f0       	brcs	.+2      	; 0x5360 <fat_read_file+0x4aa>
    535e:	a0 e0       	ldi	r26, 0x00	; 0
    5360:	8a 2b       	or	r24, r26
    5362:	a3 2d       	mov	r26, r3
    5364:	a0 0f       	add	r26, r16
    5366:	91 e0       	ldi	r25, 0x01	; 1
    5368:	a3 15       	cp	r26, r3
    536a:	08 f0       	brcs	.+2      	; 0x536e <fat_read_file+0x4b8>
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	8a 0f       	add	r24, r26
    5370:	b1 e0       	ldi	r27, 0x01	; 1
    5372:	8a 17       	cp	r24, r26
    5374:	08 f0       	brcs	.+2      	; 0x5378 <fat_read_file+0x4c2>
    5376:	b0 e0       	ldi	r27, 0x00	; 0
    5378:	9b 2b       	or	r25, r27
    537a:	71 0e       	add	r7, r17
    537c:	d2 01       	movw	r26, r4
    537e:	ed 91       	ld	r30, X+
    5380:	fc 91       	ld	r31, X
    5382:	26 2d       	mov	r18, r6
    5384:	97 0d       	add	r25, r7
    5386:	0d 85       	ldd	r16, Y+13	; 0x0d
    5388:	1e 85       	ldd	r17, Y+14	; 0x0e
    538a:	74 01       	movw	r14, r8
    538c:	09 95       	icall
    538e:	88 23       	and	r24, r24
    5390:	09 f4       	brne	.+2      	; 0x5394 <fat_read_file+0x4de>
    5392:	af c0       	rjmp	.+350    	; 0x54f2 <fat_read_file+0x63c>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
    5394:	2d 81       	ldd	r18, Y+5	; 0x05
    5396:	3e 81       	ldd	r19, Y+6	; 0x06
    5398:	28 19       	sub	r18, r8
    539a:	39 09       	sbc	r19, r9
    539c:	3e 83       	std	Y+6, r19	; 0x06
    539e:	2d 83       	std	Y+5, r18	; 0x05
        fd->pos += copy_length;
    53a0:	94 01       	movw	r18, r8
    53a2:	40 e0       	ldi	r20, 0x00	; 0
    53a4:	50 e0       	ldi	r21, 0x00	; 0
    53a6:	60 e0       	ldi	r22, 0x00	; 0
    53a8:	70 e0       	ldi	r23, 0x00	; 0
    53aa:	80 e0       	ldi	r24, 0x00	; 0
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	af 89       	ldd	r26, Y+23	; 0x17
    53b0:	b8 8d       	ldd	r27, Y+24	; 0x18
    53b2:	d3 96       	adiw	r26, 0x33	; 51
    53b4:	1c 91       	ld	r17, X
    53b6:	d3 97       	sbiw	r26, 0x33	; 51
    53b8:	d4 96       	adiw	r26, 0x34	; 52
    53ba:	dc 90       	ld	r13, X
    53bc:	d4 97       	sbiw	r26, 0x34	; 52
    53be:	d5 96       	adiw	r26, 0x35	; 53
    53c0:	bc 91       	ld	r27, X
    53c2:	ef 89       	ldd	r30, Y+23	; 0x17
    53c4:	f8 8d       	ldd	r31, Y+24	; 0x18
    53c6:	06 a9       	ldd	r16, Z+54	; 0x36
    53c8:	e7 a8       	ldd	r14, Z+55	; 0x37
    53ca:	a0 ac       	ldd	r10, Z+56	; 0x38
    53cc:	71 ac       	ldd	r7, Z+57	; 0x39
    53ce:	f2 ac       	ldd	r15, Z+58	; 0x3a
    53d0:	18 0d       	add	r17, r8
    53d2:	f1 e0       	ldi	r31, 0x01	; 1
    53d4:	18 15       	cp	r17, r8
    53d6:	08 f0       	brcs	.+2      	; 0x53da <fat_read_file+0x524>
    53d8:	f0 e0       	ldi	r31, 0x00	; 0
    53da:	ed 2d       	mov	r30, r13
    53dc:	e3 0f       	add	r30, r19
    53de:	a1 e0       	ldi	r26, 0x01	; 1
    53e0:	e3 17       	cp	r30, r19
    53e2:	08 f0       	brcs	.+2      	; 0x53e6 <fat_read_file+0x530>
    53e4:	a0 e0       	ldi	r26, 0x00	; 0
    53e6:	bf 2e       	mov	r11, r31
    53e8:	be 0e       	add	r11, r30
    53ea:	f1 e0       	ldi	r31, 0x01	; 1
    53ec:	be 16       	cp	r11, r30
    53ee:	08 f0       	brcs	.+2      	; 0x53f2 <fat_read_file+0x53c>
    53f0:	f0 e0       	ldi	r31, 0x00	; 0
    53f2:	af 2b       	or	r26, r31
    53f4:	e4 2f       	mov	r30, r20
    53f6:	eb 0f       	add	r30, r27
    53f8:	b1 e0       	ldi	r27, 0x01	; 1
    53fa:	e4 17       	cp	r30, r20
    53fc:	08 f0       	brcs	.+2      	; 0x5400 <fat_read_file+0x54a>
    53fe:	b0 e0       	ldi	r27, 0x00	; 0
    5400:	ca 2e       	mov	r12, r26
    5402:	ce 0e       	add	r12, r30
    5404:	f1 e0       	ldi	r31, 0x01	; 1
    5406:	ce 16       	cp	r12, r30
    5408:	08 f0       	brcs	.+2      	; 0x540c <fat_read_file+0x556>
    540a:	f0 e0       	ldi	r31, 0x00	; 0
    540c:	bf 2b       	or	r27, r31
    540e:	e5 2f       	mov	r30, r21
    5410:	e0 0f       	add	r30, r16
    5412:	a1 e0       	ldi	r26, 0x01	; 1
    5414:	e5 17       	cp	r30, r21
    5416:	08 f0       	brcs	.+2      	; 0x541a <fat_read_file+0x564>
    5418:	a0 e0       	ldi	r26, 0x00	; 0
    541a:	db 2e       	mov	r13, r27
    541c:	de 0e       	add	r13, r30
    541e:	f1 e0       	ldi	r31, 0x01	; 1
    5420:	de 16       	cp	r13, r30
    5422:	08 f0       	brcs	.+2      	; 0x5426 <fat_read_file+0x570>
    5424:	f0 e0       	ldi	r31, 0x00	; 0
    5426:	af 2b       	or	r26, r31
    5428:	e6 2f       	mov	r30, r22
    542a:	ee 0d       	add	r30, r14
    542c:	b1 e0       	ldi	r27, 0x01	; 1
    542e:	e6 17       	cp	r30, r22
    5430:	08 f0       	brcs	.+2      	; 0x5434 <fat_read_file+0x57e>
    5432:	b0 e0       	ldi	r27, 0x00	; 0
    5434:	ea 2e       	mov	r14, r26
    5436:	ee 0e       	add	r14, r30
    5438:	f1 e0       	ldi	r31, 0x01	; 1
    543a:	ee 16       	cp	r14, r30
    543c:	08 f0       	brcs	.+2      	; 0x5440 <fat_read_file+0x58a>
    543e:	f0 e0       	ldi	r31, 0x00	; 0
    5440:	bf 2b       	or	r27, r31
    5442:	e7 2f       	mov	r30, r23
    5444:	ea 0d       	add	r30, r10
    5446:	a1 e0       	ldi	r26, 0x01	; 1
    5448:	e7 17       	cp	r30, r23
    544a:	08 f0       	brcs	.+2      	; 0x544e <fat_read_file+0x598>
    544c:	a0 e0       	ldi	r26, 0x00	; 0
    544e:	0b 2f       	mov	r16, r27
    5450:	0e 0f       	add	r16, r30
    5452:	f1 e0       	ldi	r31, 0x01	; 1
    5454:	0e 17       	cp	r16, r30
    5456:	08 f0       	brcs	.+2      	; 0x545a <fat_read_file+0x5a4>
    5458:	f0 e0       	ldi	r31, 0x00	; 0
    545a:	af 2b       	or	r26, r31
    545c:	e8 2f       	mov	r30, r24
    545e:	e7 0d       	add	r30, r7
    5460:	f1 e0       	ldi	r31, 0x01	; 1
    5462:	e8 17       	cp	r30, r24
    5464:	08 f0       	brcs	.+2      	; 0x5468 <fat_read_file+0x5b2>
    5466:	f0 e0       	ldi	r31, 0x00	; 0
    5468:	aa 2e       	mov	r10, r26
    546a:	ae 0e       	add	r10, r30
    546c:	a1 e0       	ldi	r26, 0x01	; 1
    546e:	ae 16       	cp	r10, r30
    5470:	08 f0       	brcs	.+2      	; 0x5474 <fat_read_file+0x5be>
    5472:	a0 e0       	ldi	r26, 0x00	; 0
    5474:	fa 2b       	or	r31, r26
    5476:	f9 0e       	add	r15, r25
    5478:	ff 0d       	add	r31, r15
    547a:	af 89       	ldd	r26, Y+23	; 0x17
    547c:	b8 8d       	ldd	r27, Y+24	; 0x18
    547e:	d3 96       	adiw	r26, 0x33	; 51
    5480:	1c 93       	st	X, r17
    5482:	d3 97       	sbiw	r26, 0x33	; 51
    5484:	d4 96       	adiw	r26, 0x34	; 52
    5486:	bc 92       	st	X, r11
    5488:	d4 97       	sbiw	r26, 0x34	; 52
    548a:	d5 96       	adiw	r26, 0x35	; 53
    548c:	cc 92       	st	X, r12
    548e:	d5 97       	sbiw	r26, 0x35	; 53
    5490:	d6 96       	adiw	r26, 0x36	; 54
    5492:	dc 92       	st	X, r13
    5494:	d6 97       	sbiw	r26, 0x36	; 54
    5496:	d7 96       	adiw	r26, 0x37	; 55
    5498:	ec 92       	st	X, r14
    549a:	d7 97       	sbiw	r26, 0x37	; 55
    549c:	d8 96       	adiw	r26, 0x38	; 56
    549e:	0c 93       	st	X, r16
    54a0:	d8 97       	sbiw	r26, 0x38	; 56
    54a2:	d9 96       	adiw	r26, 0x39	; 57
    54a4:	ac 92       	st	X, r10
    54a6:	d9 97       	sbiw	r26, 0x39	; 57
    54a8:	da 96       	adiw	r26, 0x3a	; 58
    54aa:	fc 93       	st	X, r31
    54ac:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + copy_length >= cluster_size)
    54ae:	8b 81       	ldd	r24, Y+3	; 0x03
    54b0:	9c 81       	ldd	r25, Y+4	; 0x04
    54b2:	88 0d       	add	r24, r8
    54b4:	99 1d       	adc	r25, r9
    54b6:	eb 85       	ldd	r30, Y+11	; 0x0b
    54b8:	fc 85       	ldd	r31, Y+12	; 0x0c
    54ba:	8e 17       	cp	r24, r30
    54bc:	9f 07       	cpc	r25, r31
    54be:	10 f1       	brcs	.+68     	; 0x5504 <fat_read_file+0x64e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    54c0:	8d 91       	ld	r24, X+
    54c2:	9c 91       	ld	r25, X
    54c4:	4f 81       	ldd	r20, Y+7	; 0x07
    54c6:	58 85       	ldd	r21, Y+8	; 0x08
    54c8:	69 85       	ldd	r22, Y+9	; 0x09
    54ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    54cc:	0e 94 4b 21 	call	0x4296	; 0x4296 <fat_get_next_cluster>
    54d0:	6f 83       	std	Y+7, r22	; 0x07
    54d2:	78 87       	std	Y+8, r23	; 0x08
    54d4:	89 87       	std	Y+9, r24	; 0x09
    54d6:	9a 87       	std	Y+10, r25	; 0x0a
    54d8:	61 15       	cp	r22, r1
    54da:	71 05       	cpc	r23, r1
    54dc:	81 05       	cpc	r24, r1
    54de:	91 05       	cpc	r25, r1
    54e0:	79 f4       	brne	.+30     	; 0x5500 <fat_read_file+0x64a>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    54e2:	af 89       	ldd	r26, Y+23	; 0x17
    54e4:	b8 8d       	ldd	r27, Y+24	; 0x18
    54e6:	db 96       	adiw	r26, 0x3b	; 59
    54e8:	1d 92       	st	X+, r1
    54ea:	1d 92       	st	X+, r1
    54ec:	1d 92       	st	X+, r1
    54ee:	1c 92       	st	X, r1
    54f0:	de 97       	sbiw	r26, 0x3e	; 62
                return buffer_len - buffer_left;
    54f2:	4f 85       	ldd	r20, Y+15	; 0x0f
    54f4:	58 89       	ldd	r21, Y+16	; 0x10
    54f6:	ed 81       	ldd	r30, Y+5	; 0x05
    54f8:	fe 81       	ldd	r31, Y+6	; 0x06
    54fa:	4e 1b       	sub	r20, r30
    54fc:	5f 0b       	sbc	r21, r31
    54fe:	21 c0       	rjmp	.+66     	; 0x5542 <fat_read_file+0x68c>
    5500:	1c 82       	std	Y+4, r1	; 0x04
    5502:	1b 82       	std	Y+3, r1	; 0x03
            }
        }

        fd->pos_cluster = cluster_num;
    5504:	2f 81       	ldd	r18, Y+7	; 0x07
    5506:	38 85       	ldd	r19, Y+8	; 0x08
    5508:	49 85       	ldd	r20, Y+9	; 0x09
    550a:	5a 85       	ldd	r21, Y+10	; 0x0a
    550c:	af 89       	ldd	r26, Y+23	; 0x17
    550e:	b8 8d       	ldd	r27, Y+24	; 0x18
    5510:	db 96       	adiw	r26, 0x3b	; 59
    5512:	2d 93       	st	X+, r18
    5514:	3d 93       	st	X+, r19
    5516:	4d 93       	st	X+, r20
    5518:	5c 93       	st	X, r21
    551a:	de 97       	sbiw	r26, 0x3e	; 62

    } while(buffer_left > 0); /* check if we are done */
    551c:	ed 81       	ldd	r30, Y+5	; 0x05
    551e:	fe 81       	ldd	r31, Y+6	; 0x06
    5520:	ef 2b       	or	r30, r31
    5522:	39 f0       	breq	.+14     	; 0x5532 <fat_read_file+0x67c>
        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
    5524:	2d 85       	ldd	r18, Y+13	; 0x0d
    5526:	3e 85       	ldd	r19, Y+14	; 0x0e
    5528:	28 0d       	add	r18, r8
    552a:	39 1d       	adc	r19, r9
    552c:	3e 87       	std	Y+14, r19	; 0x0e
    552e:	2d 87       	std	Y+13, r18	; 0x0d
    5530:	1e ce       	rjmp	.-964    	; 0x516e <fat_read_file+0x2b8>

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
    5532:	4f 85       	ldd	r20, Y+15	; 0x0f
    5534:	58 89       	ldd	r21, Y+16	; 0x10
    5536:	05 c0       	rjmp	.+10     	; 0x5542 <fat_read_file+0x68c>
    5538:	4f ef       	ldi	r20, 0xFF	; 255
    553a:	5f ef       	ldi	r21, 0xFF	; 255
    553c:	02 c0       	rjmp	.+4      	; 0x5542 <fat_read_file+0x68c>
    553e:	40 e0       	ldi	r20, 0x00	; 0
    5540:	50 e0       	ldi	r21, 0x00	; 0
}
    5542:	ca 01       	movw	r24, r20
    5544:	68 96       	adiw	r28, 0x18	; 24
    5546:	0f b6       	in	r0, 0x3f	; 63
    5548:	f8 94       	cli
    554a:	de bf       	out	0x3e, r29	; 62
    554c:	0f be       	out	0x3f, r0	; 63
    554e:	cd bf       	out	0x3d, r28	; 61
    5550:	cf 91       	pop	r28
    5552:	df 91       	pop	r29
    5554:	1f 91       	pop	r17
    5556:	0f 91       	pop	r16
    5558:	ff 90       	pop	r15
    555a:	ef 90       	pop	r14
    555c:	df 90       	pop	r13
    555e:	cf 90       	pop	r12
    5560:	bf 90       	pop	r11
    5562:	af 90       	pop	r10
    5564:	9f 90       	pop	r9
    5566:	8f 90       	pop	r8
    5568:	7f 90       	pop	r7
    556a:	6f 90       	pop	r6
    556c:	5f 90       	pop	r5
    556e:	4f 90       	pop	r4
    5570:	3f 90       	pop	r3
    5572:	2f 90       	pop	r2
    5574:	08 95       	ret

00005576 <fat_close_dir>:
 *
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    5576:	fc 01       	movw	r30, r24
    if(dd)
    5578:	00 97       	sbiw	r24, 0x00	; 0
    557a:	11 f0       	breq	.+4      	; 0x5580 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    557c:	11 82       	std	Z+1, r1	; 0x01
    557e:	10 82       	st	Z, r1
    5580:	08 95       	ret

00005582 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    5582:	fc 01       	movw	r30, r24
    if(!dd)
    5584:	00 97       	sbiw	r24, 0x00	; 0
    5586:	11 f4       	brne	.+4      	; 0x558c <fat_reset_dir+0xa>
    5588:	80 e0       	ldi	r24, 0x00	; 0
    558a:	08 95       	ret
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    558c:	83 a1       	ldd	r24, Z+35	; 0x23
    558e:	94 a1       	ldd	r25, Z+36	; 0x24
    5590:	a5 a1       	ldd	r26, Z+37	; 0x25
    5592:	b6 a1       	ldd	r27, Z+38	; 0x26
    5594:	83 ab       	std	Z+51, r24	; 0x33
    5596:	94 ab       	std	Z+52, r25	; 0x34
    5598:	a5 ab       	std	Z+53, r26	; 0x35
    559a:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    559c:	10 ae       	std	Z+56, r1	; 0x38
    559e:	17 aa       	std	Z+55, r1	; 0x37
    55a0:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}
    55a2:	08 95       	ret

000055a4 <fat_dir_entry_read_callback>:
/**
 * \ingroup fat_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    55a4:	cf 92       	push	r12
    55a6:	df 92       	push	r13
    55a8:	ef 92       	push	r14
    55aa:	ff 92       	push	r15
    55ac:	0f 93       	push	r16
    55ae:	1f 93       	push	r17
    55b0:	cf 93       	push	r28
    55b2:	df 93       	push	r29
    55b4:	6c 01       	movw	r12, r24
    55b6:	fb 01       	movw	r30, r22
    struct fat_read_dir_callback_arg* arg = p;
    55b8:	b7 01       	movw	r22, r14
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    55ba:	d7 01       	movw	r26, r14
    55bc:	cd 91       	ld	r28, X+
    55be:	dc 91       	ld	r29, X
    55c0:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    55c2:	12 96       	adiw	r26, 0x02	; 2
    55c4:	8d 91       	ld	r24, X+
    55c6:	9c 91       	ld	r25, X
    55c8:	13 97       	sbiw	r26, 0x03	; 3
    55ca:	80 96       	adiw	r24, 0x20	; 32
    55cc:	13 96       	adiw	r26, 0x03	; 3
    55ce:	9c 93       	st	X, r25
    55d0:	8e 93       	st	-X, r24
    55d2:	12 97       	sbiw	r26, 0x02	; 2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    55d4:	d6 01       	movw	r26, r12
    55d6:	8c 91       	ld	r24, X
    55d8:	85 3e       	cpi	r24, 0xE5	; 229
    55da:	09 f4       	brne	.+2      	; 0x55de <fat_dir_entry_read_callback+0x3a>
    55dc:	c3 c0       	rjmp	.+390    	; 0x5764 <fat_dir_entry_read_callback+0x1c0>
    55de:	88 23       	and	r24, r24
    55e0:	09 f4       	brne	.+2      	; 0x55e4 <fat_dir_entry_read_callback+0x40>
    55e2:	c0 c0       	rjmp	.+384    	; 0x5764 <fat_dir_entry_read_callback+0x1c0>
        return 1;

    if(!dir_entry->entry_offset)
    55e4:	89 a5       	ldd	r24, Y+41	; 0x29
    55e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    55e8:	89 2b       	or	r24, r25
    55ea:	9b a5       	ldd	r25, Y+43	; 0x2b
    55ec:	89 2b       	or	r24, r25
    55ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    55f0:	89 2b       	or	r24, r25
    55f2:	9d a5       	ldd	r25, Y+45	; 0x2d
    55f4:	89 2b       	or	r24, r25
    55f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    55f8:	89 2b       	or	r24, r25
    55fa:	9f a5       	ldd	r25, Y+47	; 0x2f
    55fc:	89 2b       	or	r24, r25
    55fe:	98 a9       	ldd	r25, Y+48	; 0x30
    5600:	89 2b       	or	r24, r25
    5602:	41 f4       	brne	.+16     	; 0x5614 <fat_dir_entry_read_callback+0x70>
        dir_entry->entry_offset = offset;
    5604:	09 a7       	std	Y+41, r16	; 0x29
    5606:	1a a7       	std	Y+42, r17	; 0x2a
    5608:	2b a7       	std	Y+43, r18	; 0x2b
    560a:	3c a7       	std	Y+44, r19	; 0x2c
    560c:	4d a7       	std	Y+45, r20	; 0x2d
    560e:	5e a7       	std	Y+46, r21	; 0x2e
    5610:	ef a7       	std	Y+47, r30	; 0x2f
    5612:	f8 ab       	std	Y+48, r31	; 0x30
 * \returns 0 on failure, 1 on success and 2 if the
 *          directory entry is complete.
 */
uint8_t fat_interpret_dir_entry(struct fat_dir_entry_struct* dir_entry, const uint8_t* raw_entry)
{
    if(!dir_entry || !raw_entry || !raw_entry[0])
    5614:	20 97       	sbiw	r28, 0x00	; 0
    5616:	09 f4       	brne	.+2      	; 0x561a <fat_dir_entry_read_callback+0x76>
    5618:	a7 c0       	rjmp	.+334    	; 0x5768 <fat_dir_entry_read_callback+0x1c4>
    561a:	c1 14       	cp	r12, r1
    561c:	d1 04       	cpc	r13, r1
    561e:	09 f4       	brne	.+2      	; 0x5622 <fat_dir_entry_read_callback+0x7e>
    5620:	a3 c0       	rjmp	.+326    	; 0x5768 <fat_dir_entry_read_callback+0x1c4>
    5622:	f6 01       	movw	r30, r12
    5624:	90 81       	ld	r25, Z
    5626:	99 23       	and	r25, r25
    5628:	09 f4       	brne	.+2      	; 0x562c <fat_dir_entry_read_callback+0x88>
    562a:	9e c0       	rjmp	.+316    	; 0x5768 <fat_dir_entry_read_callback+0x1c4>
        return 0;

    char* long_name = dir_entry->long_name;
    if(raw_entry[11] == 0x0f)
    562c:	83 85       	ldd	r24, Z+11	; 0x0b
    562e:	8f 30       	cpi	r24, 0x0F	; 15
    5630:	29 f5       	brne	.+74     	; 0x567c <fat_dir_entry_read_callback+0xd8>
    {
        /* Lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
    5632:	89 2f       	mov	r24, r25
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	8f 73       	andi	r24, 0x3F	; 63
    5638:	90 70       	andi	r25, 0x00	; 0
    563a:	2d e0       	ldi	r18, 0x0D	; 13
    563c:	30 e0       	ldi	r19, 0x00	; 0
    563e:	82 9f       	mul	r24, r18
    5640:	a0 01       	movw	r20, r0
    5642:	83 9f       	mul	r24, r19
    5644:	50 0d       	add	r21, r0
    5646:	92 9f       	mul	r25, r18
    5648:	50 0d       	add	r21, r0
    564a:	11 24       	eor	r1, r1
    564c:	4d 50       	subi	r20, 0x0D	; 13
    564e:	50 40       	sbci	r21, 0x00	; 0
    5650:	ae ea       	ldi	r26, 0xAE	; 174
    5652:	b1 e0       	ldi	r27, 0x01	; 1
    5654:	c4 0f       	add	r28, r20
    5656:	d5 1f       	adc	r29, r21
    5658:	0d c0       	rjmp	.+26     	; 0x5674 <fat_dir_entry_read_callback+0xd0>
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = raw_entry[char_mapping[i]];
    565a:	8d 91       	ld	r24, X+
    565c:	f6 01       	movw	r30, r12
    565e:	e8 0f       	add	r30, r24
    5660:	f1 1d       	adc	r31, r1
    5662:	80 81       	ld	r24, Z
    5664:	89 93       	st	Y+, r24
    5666:	4f 5f       	subi	r20, 0xFF	; 255
    5668:	5f 4f       	sbci	r21, 0xFF	; 255
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    566a:	f1 e0       	ldi	r31, 0x01	; 1
    566c:	ab 3b       	cpi	r26, 0xBB	; 187
    566e:	bf 07       	cpc	r27, r31
    5670:	09 f4       	brne	.+2      	; 0x5674 <fat_dir_entry_read_callback+0xd0>
    5672:	78 c0       	rjmp	.+240    	; 0x5764 <fat_dir_entry_read_callback+0x1c0>
    5674:	4f 31       	cpi	r20, 0x1F	; 31
    5676:	51 05       	cpc	r21, r1
    5678:	80 f3       	brcs	.-32     	; 0x565a <fat_dir_entry_read_callback+0xb6>
    567a:	74 c0       	rjmp	.+232    	; 0x5764 <fat_dir_entry_read_callback+0x1c0>
        return 1;
    }
    else
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
    567c:	88 81       	ld	r24, Y
    567e:	88 23       	and	r24, r24
    5680:	09 f0       	breq	.+2      	; 0x5684 <fat_dir_entry_read_callback+0xe0>
    5682:	4d c0       	rjmp	.+154    	; 0x571e <fat_dir_entry_read_callback+0x17a>
    5684:	a6 01       	movw	r20, r12
    5686:	de 01       	movw	r26, r28
    5688:	86 01       	movw	r16, r12
    568a:	20 e0       	ldi	r18, 0x00	; 0
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(raw_entry[i] == ' ')
    568c:	f8 01       	movw	r30, r16
    568e:	90 81       	ld	r25, Z
    5690:	90 32       	cpi	r25, 0x20	; 32
    5692:	99 f0       	breq	.+38     	; 0x56ba <fat_dir_entry_read_callback+0x116>
                    break;
                long_name[i] = raw_entry[i];
    5694:	9c 93       	st	X, r25
                /* Windows NT and later versions do not store LFN entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
    5696:	f6 01       	movw	r30, r12
    5698:	84 85       	ldd	r24, Z+12	; 0x0c
    569a:	83 ff       	sbrs	r24, 3
    569c:	08 c0       	rjmp	.+16     	; 0x56ae <fat_dir_entry_read_callback+0x10a>
    569e:	f8 01       	movw	r30, r16
    56a0:	80 81       	ld	r24, Z
    56a2:	81 34       	cpi	r24, 0x41	; 65
    56a4:	20 f0       	brcs	.+8      	; 0x56ae <fat_dir_entry_read_callback+0x10a>
    56a6:	8b 35       	cpi	r24, 0x5B	; 91
    56a8:	10 f4       	brcc	.+4      	; 0x56ae <fat_dir_entry_read_callback+0x10a>
                    long_name[i] += 'a' - 'A';
    56aa:	90 5e       	subi	r25, 0xE0	; 224
    56ac:	9c 93       	st	X, r25
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
    56ae:	2f 5f       	subi	r18, 0xFF	; 255
    56b0:	0f 5f       	subi	r16, 0xFF	; 255
    56b2:	1f 4f       	sbci	r17, 0xFF	; 255
    56b4:	11 96       	adiw	r26, 0x01	; 1
    56b6:	28 30       	cpi	r18, 0x08	; 8
    56b8:	49 f7       	brne	.-46     	; 0x568c <fat_dir_entry_read_callback+0xe8>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    56ba:	88 81       	ld	r24, Y
    56bc:	85 30       	cpi	r24, 0x05	; 5
    56be:	11 f4       	brne	.+4      	; 0x56c4 <fat_dir_entry_read_callback+0x120>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    56c0:	85 ee       	ldi	r24, 0xE5	; 229
    56c2:	88 83       	st	Y, r24

            if(raw_entry[8] != ' ')
    56c4:	d6 01       	movw	r26, r12
    56c6:	18 96       	adiw	r26, 0x08	; 8
    56c8:	8c 91       	ld	r24, X
    56ca:	80 32       	cpi	r24, 0x20	; 32
    56cc:	21 f1       	breq	.+72     	; 0x5716 <fat_dir_entry_read_callback+0x172>
            {
                long_name[i++] = '.';
    56ce:	fe 01       	movw	r30, r28
    56d0:	e2 0f       	add	r30, r18
    56d2:	f1 1d       	adc	r31, r1
    56d4:	8e e2       	ldi	r24, 0x2E	; 46
    56d6:	80 83       	st	Z, r24
    56d8:	32 2f       	mov	r19, r18
    56da:	3f 5f       	subi	r19, 0xFF	; 255

                uint8_t j = 8;
                for(; j < 11; ++j)
    56dc:	2c 5f       	subi	r18, 0xFC	; 252
                {
                    if(raw_entry[j] == ' ')
    56de:	fa 01       	movw	r30, r20
    56e0:	90 85       	ldd	r25, Z+8	; 0x08
    56e2:	90 32       	cpi	r25, 0x20	; 32
    56e4:	b9 f0       	breq	.+46     	; 0x5714 <fat_dir_entry_read_callback+0x170>
                        break;
                    long_name[i] = raw_entry[j];
    56e6:	fe 01       	movw	r30, r28
    56e8:	e3 0f       	add	r30, r19
    56ea:	f1 1d       	adc	r31, r1
    56ec:	90 83       	st	Z, r25

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((raw_entry[12] & 0x10) && raw_entry[j] >= 'A' && raw_entry[j] <= 'Z')
    56ee:	d6 01       	movw	r26, r12
    56f0:	1c 96       	adiw	r26, 0x0c	; 12
    56f2:	8c 91       	ld	r24, X
    56f4:	84 ff       	sbrs	r24, 4
    56f6:	09 c0       	rjmp	.+18     	; 0x570a <fat_dir_entry_read_callback+0x166>
    56f8:	da 01       	movw	r26, r20
    56fa:	18 96       	adiw	r26, 0x08	; 8
    56fc:	8c 91       	ld	r24, X
    56fe:	81 34       	cpi	r24, 0x41	; 65
    5700:	20 f0       	brcs	.+8      	; 0x570a <fat_dir_entry_read_callback+0x166>
    5702:	8b 35       	cpi	r24, 0x5B	; 91
    5704:	10 f4       	brcc	.+4      	; 0x570a <fat_dir_entry_read_callback+0x166>
                        long_name[i] += 'a' - 'A';
    5706:	90 5e       	subi	r25, 0xE0	; 224
    5708:	90 83       	st	Z, r25

                    ++i;
    570a:	3f 5f       	subi	r19, 0xFF	; 255
    570c:	4f 5f       	subi	r20, 0xFF	; 255
    570e:	5f 4f       	sbci	r21, 0xFF	; 255
            if(raw_entry[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    5710:	32 17       	cp	r19, r18
    5712:	29 f7       	brne	.-54     	; 0x56de <fat_dir_entry_read_callback+0x13a>
    5714:	23 2f       	mov	r18, r19

                    ++i;
                }
            } 

            long_name[i] = '\0';
    5716:	fe 01       	movw	r30, r28
    5718:	e2 0f       	add	r30, r18
    571a:	f1 1d       	adc	r31, r1
    571c:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
    571e:	f6 01       	movw	r30, r12
    5720:	83 85       	ldd	r24, Z+11	; 0x0b
    5722:	88 a3       	std	Y+32, r24	; 0x20
        dir_entry->cluster = ltoh16(*((uint16_t*) &raw_entry[26]));
    5724:	22 8d       	ldd	r18, Z+26	; 0x1a
    5726:	33 8d       	ldd	r19, Z+27	; 0x1b
    5728:	40 e0       	ldi	r20, 0x00	; 0
    572a:	50 e0       	ldi	r21, 0x00	; 0
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &raw_entry[20]))) << 16;
    572c:	84 89       	ldd	r24, Z+20	; 0x14
    572e:	95 89       	ldd	r25, Z+21	; 0x15
    5730:	a0 e0       	ldi	r26, 0x00	; 0
    5732:	b0 e0       	ldi	r27, 0x00	; 0
    5734:	dc 01       	movw	r26, r24
    5736:	99 27       	eor	r25, r25
    5738:	88 27       	eor	r24, r24
    573a:	82 2b       	or	r24, r18
    573c:	93 2b       	or	r25, r19
    573e:	a4 2b       	or	r26, r20
    5740:	b5 2b       	or	r27, r21
    5742:	89 a3       	std	Y+33, r24	; 0x21
    5744:	9a a3       	std	Y+34, r25	; 0x22
    5746:	ab a3       	std	Y+35, r26	; 0x23
    5748:	bc a3       	std	Y+36, r27	; 0x24
#endif
        dir_entry->file_size = ltoh32(*((uint32_t*) &raw_entry[28]));
    574a:	84 8d       	ldd	r24, Z+28	; 0x1c
    574c:	95 8d       	ldd	r25, Z+29	; 0x1d
    574e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    5750:	b7 8d       	ldd	r27, Z+31	; 0x1f
    5752:	8d a3       	std	Y+37, r24	; 0x25
    5754:	9e a3       	std	Y+38, r25	; 0x26
    5756:	af a3       	std	Y+39, r26	; 0x27
    5758:	b8 a7       	std	Y+40, r27	; 0x28
        {
            return 1;
        }
        case 2: /* directory entry complete, finish */
        {
            arg->finished = 1;
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	db 01       	movw	r26, r22
    575e:	14 96       	adiw	r26, 0x04	; 4
    5760:	8c 93       	st	X, r24
    5762:	02 c0       	rjmp	.+4      	; 0x5768 <fat_dir_entry_read_callback+0x1c4>
            return 0;
    5764:	81 e0       	ldi	r24, 0x01	; 1
    5766:	01 c0       	rjmp	.+2      	; 0x576a <fat_dir_entry_read_callback+0x1c6>
    5768:	80 e0       	ldi	r24, 0x00	; 0
        }
    }

    return 0;
}
    576a:	df 91       	pop	r29
    576c:	cf 91       	pop	r28
    576e:	1f 91       	pop	r17
    5770:	0f 91       	pop	r16
    5772:	ff 90       	pop	r15
    5774:	ef 90       	pop	r14
    5776:	df 90       	pop	r13
    5778:	cf 90       	pop	r12
    577a:	08 95       	ret

0000577c <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    577c:	2f 92       	push	r2
    577e:	3f 92       	push	r3
    5780:	4f 92       	push	r4
    5782:	5f 92       	push	r5
    5784:	6f 92       	push	r6
    5786:	7f 92       	push	r7
    5788:	8f 92       	push	r8
    578a:	9f 92       	push	r9
    578c:	af 92       	push	r10
    578e:	bf 92       	push	r11
    5790:	cf 92       	push	r12
    5792:	df 92       	push	r13
    5794:	ef 92       	push	r14
    5796:	ff 92       	push	r15
    5798:	0f 93       	push	r16
    579a:	1f 93       	push	r17
    579c:	df 93       	push	r29
    579e:	cf 93       	push	r28
    57a0:	cd b7       	in	r28, 0x3d	; 61
    57a2:	de b7       	in	r29, 0x3e	; 62
    57a4:	2c 97       	sbiw	r28, 0x0c	; 12
    57a6:	0f b6       	in	r0, 0x3f	; 63
    57a8:	f8 94       	cli
    57aa:	de bf       	out	0x3e, r29	; 62
    57ac:	0f be       	out	0x3f, r0	; 63
    57ae:	cd bf       	out	0x3d, r28	; 61
    57b0:	3c 01       	movw	r6, r24
    57b2:	6b 01       	movw	r12, r22
    if(!fs || !dir_entry)
    57b4:	00 97       	sbiw	r24, 0x00	; 0
    57b6:	09 f4       	brne	.+2      	; 0x57ba <fat_delete_file+0x3e>
    57b8:	9c c0       	rjmp	.+312    	; 0x58f2 <fat_delete_file+0x176>
    57ba:	61 15       	cp	r22, r1
    57bc:	71 05       	cpc	r23, r1
    57be:	09 f4       	brne	.+2      	; 0x57c2 <fat_delete_file+0x46>
    57c0:	98 c0       	rjmp	.+304    	; 0x58f2 <fat_delete_file+0x176>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    57c2:	db 01       	movw	r26, r22
    57c4:	99 96       	adiw	r26, 0x29	; 41
    57c6:	bc 90       	ld	r11, X
    57c8:	99 97       	sbiw	r26, 0x29	; 41
    57ca:	9a 96       	adiw	r26, 0x2a	; 42
    57cc:	ac 90       	ld	r10, X
    57ce:	9a 97       	sbiw	r26, 0x2a	; 42
    57d0:	9b 96       	adiw	r26, 0x2b	; 43
    57d2:	9c 90       	ld	r9, X
    57d4:	9b 97       	sbiw	r26, 0x2b	; 43
    57d6:	9c 96       	adiw	r26, 0x2c	; 44
    57d8:	8c 90       	ld	r8, X
    57da:	9c 97       	sbiw	r26, 0x2c	; 44
    57dc:	9d 96       	adiw	r26, 0x2d	; 45
    57de:	5c 90       	ld	r5, X
    57e0:	9d 97       	sbiw	r26, 0x2d	; 45
    57e2:	9e 96       	adiw	r26, 0x2e	; 46
    57e4:	4c 90       	ld	r4, X
    57e6:	9e 97       	sbiw	r26, 0x2e	; 46
    57e8:	9f 96       	adiw	r26, 0x2f	; 47
    57ea:	3c 90       	ld	r3, X
    57ec:	9f 97       	sbiw	r26, 0x2f	; 47
    57ee:	d0 96       	adiw	r26, 0x30	; 48
    57f0:	2c 90       	ld	r2, X
    if(!dir_entry_offset)
    57f2:	8b 2d       	mov	r24, r11
    57f4:	8a 29       	or	r24, r10
    57f6:	89 29       	or	r24, r9
    57f8:	88 29       	or	r24, r8
    57fa:	85 29       	or	r24, r5
    57fc:	84 29       	or	r24, r4
    57fe:	83 29       	or	r24, r3
    5800:	82 29       	or	r24, r2
    5802:	09 f4       	brne	.+2      	; 0x5806 <fat_delete_file+0x8a>
    5804:	76 c0       	rjmp	.+236    	; 0x58f2 <fat_delete_file+0x176>

    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    5806:	d3 01       	movw	r26, r6
    5808:	ed 91       	ld	r30, X+
    580a:	fc 91       	ld	r31, X
    580c:	01 90       	ld	r0, Z+
    580e:	f0 81       	ld	r31, Z
    5810:	e0 2d       	mov	r30, r0
    5812:	2b 2d       	mov	r18, r11
    5814:	3a 2d       	mov	r19, r10
    5816:	49 2d       	mov	r20, r9
    5818:	58 2d       	mov	r21, r8
    581a:	65 2d       	mov	r22, r5
    581c:	74 2d       	mov	r23, r4
    581e:	83 2d       	mov	r24, r3
    5820:	92 2d       	mov	r25, r2
    5822:	8e 01       	movw	r16, r28
    5824:	0f 5f       	subi	r16, 0xFF	; 255
    5826:	1f 4f       	sbci	r17, 0xFF	; 255
    5828:	ac e0       	ldi	r26, 0x0C	; 12
    582a:	ea 2e       	mov	r14, r26
    582c:	f1 2c       	mov	r15, r1
    582e:	09 95       	icall
    5830:	88 23       	and	r24, r24
    5832:	09 f4       	brne	.+2      	; 0x5836 <fat_delete_file+0xba>
    5834:	5e c0       	rjmp	.+188    	; 0x58f2 <fat_delete_file+0x176>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    5836:	b5 ee       	ldi	r27, 0xE5	; 229
    5838:	b9 83       	std	Y+1, r27	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    583a:	d3 01       	movw	r26, r6
    583c:	ed 91       	ld	r30, X+
    583e:	fc 91       	ld	r31, X
    5840:	04 80       	ldd	r0, Z+4	; 0x04
    5842:	f5 81       	ldd	r31, Z+5	; 0x05
    5844:	e0 2d       	mov	r30, r0
    5846:	2b 2d       	mov	r18, r11
    5848:	3a 2d       	mov	r19, r10
    584a:	49 2d       	mov	r20, r9
    584c:	58 2d       	mov	r21, r8
    584e:	65 2d       	mov	r22, r5
    5850:	74 2d       	mov	r23, r4
    5852:	83 2d       	mov	r24, r3
    5854:	92 2d       	mov	r25, r2
    5856:	8e 01       	movw	r16, r28
    5858:	0f 5f       	subi	r16, 0xFF	; 255
    585a:	1f 4f       	sbci	r17, 0xFF	; 255
    585c:	09 95       	icall
    585e:	88 23       	and	r24, r24
    5860:	09 f4       	brne	.+2      	; 0x5864 <fat_delete_file+0xe8>
    5862:	47 c0       	rjmp	.+142    	; 0x58f2 <fat_delete_file+0x176>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    5864:	8c 85       	ldd	r24, Y+12	; 0x0c
    5866:	8f 30       	cpi	r24, 0x0F	; 15
    5868:	79 f5       	brne	.+94     	; 0x58c8 <fat_delete_file+0x14c>
            break;

        dir_entry_offset += 32;
    586a:	7b 2d       	mov	r23, r11
    586c:	70 5e       	subi	r23, 0xE0	; 224
    586e:	81 e0       	ldi	r24, 0x01	; 1
    5870:	7b 15       	cp	r23, r11
    5872:	08 f0       	brcs	.+2      	; 0x5876 <fat_delete_file+0xfa>
    5874:	80 e0       	ldi	r24, 0x00	; 0
    5876:	68 2f       	mov	r22, r24
    5878:	6a 0d       	add	r22, r10
    587a:	81 e0       	ldi	r24, 0x01	; 1
    587c:	6a 15       	cp	r22, r10
    587e:	08 f0       	brcs	.+2      	; 0x5882 <fat_delete_file+0x106>
    5880:	80 e0       	ldi	r24, 0x00	; 0
    5882:	58 2f       	mov	r21, r24
    5884:	59 0d       	add	r21, r9
    5886:	81 e0       	ldi	r24, 0x01	; 1
    5888:	59 15       	cp	r21, r9
    588a:	08 f0       	brcs	.+2      	; 0x588e <fat_delete_file+0x112>
    588c:	80 e0       	ldi	r24, 0x00	; 0
    588e:	48 2f       	mov	r20, r24
    5890:	48 0d       	add	r20, r8
    5892:	81 e0       	ldi	r24, 0x01	; 1
    5894:	48 15       	cp	r20, r8
    5896:	08 f0       	brcs	.+2      	; 0x589a <fat_delete_file+0x11e>
    5898:	80 e0       	ldi	r24, 0x00	; 0
    589a:	38 2f       	mov	r19, r24
    589c:	35 0d       	add	r19, r5
    589e:	81 e0       	ldi	r24, 0x01	; 1
    58a0:	35 15       	cp	r19, r5
    58a2:	08 f0       	brcs	.+2      	; 0x58a6 <fat_delete_file+0x12a>
    58a4:	80 e0       	ldi	r24, 0x00	; 0
    58a6:	28 2f       	mov	r18, r24
    58a8:	24 0d       	add	r18, r4
    58aa:	81 e0       	ldi	r24, 0x01	; 1
    58ac:	24 15       	cp	r18, r4
    58ae:	08 f0       	brcs	.+2      	; 0x58b2 <fat_delete_file+0x136>
    58b0:	80 e0       	ldi	r24, 0x00	; 0
    58b2:	83 0d       	add	r24, r3
    58b4:	91 e0       	ldi	r25, 0x01	; 1
    58b6:	83 15       	cp	r24, r3
    58b8:	08 f0       	brcs	.+2      	; 0x58bc <fat_delete_file+0x140>
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	5b 01       	movw	r10, r22
    58be:	4a 01       	movw	r8, r20
    58c0:	29 01       	movw	r4, r18
    58c2:	38 2e       	mov	r3, r24
    58c4:	29 0e       	add	r2, r25
    58c6:	9f cf       	rjmp	.-194    	; 0x5806 <fat_delete_file+0x8a>
    }

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    58c8:	f6 01       	movw	r30, r12
    58ca:	41 a1       	ldd	r20, Z+33	; 0x21
    58cc:	52 a1       	ldd	r21, Z+34	; 0x22
    58ce:	63 a1       	ldd	r22, Z+35	; 0x23
    58d0:	74 a1       	ldd	r23, Z+36	; 0x24
    58d2:	41 15       	cp	r20, r1
    58d4:	51 05       	cpc	r21, r1
    58d6:	61 05       	cpc	r22, r1
    58d8:	71 05       	cpc	r23, r1
    58da:	39 f0       	breq	.+14     	; 0x58ea <fat_delete_file+0x16e>
    58dc:	c3 01       	movw	r24, r6
    58de:	0e 94 69 22 	call	0x44d2	; 0x44d2 <fat_free_clusters>
    58e2:	20 e0       	ldi	r18, 0x00	; 0
    58e4:	30 e0       	ldi	r19, 0x00	; 0
    58e6:	88 23       	and	r24, r24
    58e8:	11 f0       	breq	.+4      	; 0x58ee <fat_delete_file+0x172>
    58ea:	21 e0       	ldi	r18, 0x01	; 1
    58ec:	30 e0       	ldi	r19, 0x00	; 0
    58ee:	82 2f       	mov	r24, r18
    58f0:	01 c0       	rjmp	.+2      	; 0x58f4 <fat_delete_file+0x178>
    58f2:	80 e0       	ldi	r24, 0x00	; 0
}
    58f4:	2c 96       	adiw	r28, 0x0c	; 12
    58f6:	0f b6       	in	r0, 0x3f	; 63
    58f8:	f8 94       	cli
    58fa:	de bf       	out	0x3e, r29	; 62
    58fc:	0f be       	out	0x3f, r0	; 63
    58fe:	cd bf       	out	0x3d, r28	; 61
    5900:	cf 91       	pop	r28
    5902:	df 91       	pop	r29
    5904:	1f 91       	pop	r17
    5906:	0f 91       	pop	r16
    5908:	ff 90       	pop	r15
    590a:	ef 90       	pop	r14
    590c:	df 90       	pop	r13
    590e:	cf 90       	pop	r12
    5910:	bf 90       	pop	r11
    5912:	af 90       	pop	r10
    5914:	9f 90       	pop	r9
    5916:	8f 90       	pop	r8
    5918:	7f 90       	pop	r7
    591a:	6f 90       	pop	r6
    591c:	5f 90       	pop	r5
    591e:	4f 90       	pop	r4
    5920:	3f 90       	pop	r3
    5922:	2f 90       	pop	r2
    5924:	08 95       	ret

00005926 <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    5926:	2f 92       	push	r2
    5928:	3f 92       	push	r3
    592a:	4f 92       	push	r4
    592c:	5f 92       	push	r5
    592e:	6f 92       	push	r6
    5930:	7f 92       	push	r7
    5932:	8f 92       	push	r8
    5934:	9f 92       	push	r9
    5936:	af 92       	push	r10
    5938:	bf 92       	push	r11
    593a:	cf 92       	push	r12
    593c:	df 92       	push	r13
    593e:	ef 92       	push	r14
    5940:	ff 92       	push	r15
    5942:	0f 93       	push	r16
    5944:	1f 93       	push	r17
    5946:	dc 01       	movw	r26, r24
    if(!fs)
    5948:	00 97       	sbiw	r24, 0x00	; 0
    594a:	49 f4       	brne	.+18     	; 0x595e <fat_get_fs_size+0x38>
    594c:	20 e0       	ldi	r18, 0x00	; 0
    594e:	30 e0       	ldi	r19, 0x00	; 0
    5950:	40 e0       	ldi	r20, 0x00	; 0
    5952:	50 e0       	ldi	r21, 0x00	; 0
    5954:	60 e0       	ldi	r22, 0x00	; 0
    5956:	70 e0       	ldi	r23, 0x00	; 0
    5958:	80 e0       	ldi	r24, 0x00	; 0
    595a:	90 e0       	ldi	r25, 0x00	; 0
    595c:	30 c0       	rjmp	.+96     	; 0x59be <fat_get_fs_size+0x98>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    595e:	ed 91       	ld	r30, X+
    5960:	fc 91       	ld	r31, X
    5962:	11 97       	sbiw	r26, 0x01	; 1
    5964:	80 85       	ldd	r24, Z+8	; 0x08
    5966:	52 96       	adiw	r26, 0x12	; 18
    5968:	2d 91       	ld	r18, X+
    596a:	3d 91       	ld	r19, X+
    596c:	4d 91       	ld	r20, X+
    596e:	5c 91       	ld	r21, X
    5970:	55 97       	sbiw	r26, 0x15	; 21
    5972:	58 96       	adiw	r26, 0x18	; 24
    5974:	ed 91       	ld	r30, X+
    5976:	fc 91       	ld	r31, X
    5978:	59 97       	sbiw	r26, 0x19	; 25
    597a:	8b 30       	cpi	r24, 0x0B	; 11
    597c:	41 f4       	brne	.+16     	; 0x598e <fat_get_fs_size+0x68>
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    597e:	12 e0       	ldi	r17, 0x02	; 2
    5980:	56 95       	lsr	r21
    5982:	47 95       	ror	r20
    5984:	37 95       	ror	r19
    5986:	27 95       	ror	r18
    5988:	1a 95       	dec	r17
    598a:	d1 f7       	brne	.-12     	; 0x5980 <fat_get_fs_size+0x5a>
    598c:	04 c0       	rjmp	.+8      	; 0x5996 <fat_get_fs_size+0x70>
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    598e:	56 95       	lsr	r21
    5990:	47 95       	ror	r20
    5992:	37 95       	ror	r19
    5994:	27 95       	ror	r18
    5996:	22 50       	subi	r18, 0x02	; 2
    5998:	30 40       	sbci	r19, 0x00	; 0
    599a:	40 40       	sbci	r20, 0x00	; 0
    599c:	50 40       	sbci	r21, 0x00	; 0
    599e:	59 01       	movw	r10, r18
    59a0:	6a 01       	movw	r12, r20
    59a2:	a6 01       	movw	r20, r12
    59a4:	60 e0       	ldi	r22, 0x00	; 0
    59a6:	70 e0       	ldi	r23, 0x00	; 0
    59a8:	80 e0       	ldi	r24, 0x00	; 0
    59aa:	90 e0       	ldi	r25, 0x00	; 0
    59ac:	5f 01       	movw	r10, r30
    59ae:	cc 24       	eor	r12, r12
    59b0:	dd 24       	eor	r13, r13
    59b2:	ee 24       	eor	r14, r14
    59b4:	ff 24       	eor	r15, r15
    59b6:	00 e0       	ldi	r16, 0x00	; 0
    59b8:	10 e0       	ldi	r17, 0x00	; 0
    59ba:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
}
    59be:	1f 91       	pop	r17
    59c0:	0f 91       	pop	r16
    59c2:	ff 90       	pop	r15
    59c4:	ef 90       	pop	r14
    59c6:	df 90       	pop	r13
    59c8:	cf 90       	pop	r12
    59ca:	bf 90       	pop	r11
    59cc:	af 90       	pop	r10
    59ce:	9f 90       	pop	r9
    59d0:	8f 90       	pop	r8
    59d2:	7f 90       	pop	r7
    59d4:	6f 90       	pop	r6
    59d6:	5f 90       	pop	r5
    59d8:	4f 90       	pop	r4
    59da:	3f 90       	pop	r3
    59dc:	2f 90       	pop	r2
    59de:	08 95       	ret

000059e0 <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    59e0:	2f 92       	push	r2
    59e2:	3f 92       	push	r3
    59e4:	4f 92       	push	r4
    59e6:	5f 92       	push	r5
    59e8:	6f 92       	push	r6
    59ea:	7f 92       	push	r7
    59ec:	8f 92       	push	r8
    59ee:	9f 92       	push	r9
    59f0:	af 92       	push	r10
    59f2:	bf 92       	push	r11
    59f4:	cf 92       	push	r12
    59f6:	df 92       	push	r13
    59f8:	ef 92       	push	r14
    59fa:	ff 92       	push	r15
    59fc:	0f 93       	push	r16
    59fe:	1f 93       	push	r17
    5a00:	df 93       	push	r29
    5a02:	cf 93       	push	r28
    5a04:	cd b7       	in	r28, 0x3d	; 61
    5a06:	de b7       	in	r29, 0x3e	; 62
    5a08:	e0 97       	sbiw	r28, 0x30	; 48
    5a0a:	0f b6       	in	r0, 0x3f	; 63
    5a0c:	f8 94       	cli
    5a0e:	de bf       	out	0x3e, r29	; 62
    5a10:	0f be       	out	0x3f, r0	; 63
    5a12:	cd bf       	out	0x3d, r28	; 61
    5a14:	3c 01       	movw	r6, r24
    if(!fs)
    5a16:	00 97       	sbiw	r24, 0x00	; 0
    5a18:	09 f4       	brne	.+2      	; 0x5a1c <fat_get_fs_free+0x3c>
    5a1a:	f8 c0       	rjmp	.+496    	; 0x5c0c <fat_get_fs_free+0x22c>
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    5a1c:	19 82       	std	Y+1, r1	; 0x01
    5a1e:	1a 82       	std	Y+2, r1	; 0x02
    5a20:	1b 82       	std	Y+3, r1	; 0x03
    5a22:	1c 82       	std	Y+4, r1	; 0x04
    count_arg.buffer_size = sizeof(fat);
    5a24:	80 e2       	ldi	r24, 0x20	; 32
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	9e 83       	std	Y+6, r25	; 0x06
    5a2a:	8d 83       	std	Y+5, r24	; 0x05

    offset_t fat_offset = fs->header.fat_offset;
    5a2c:	d3 01       	movw	r26, r6
    5a2e:	1a 96       	adiw	r26, 0x0a	; 10
    5a30:	bc 91       	ld	r27, X
    5a32:	b9 a7       	std	Y+41, r27	; 0x29
    5a34:	f3 01       	movw	r30, r6
    5a36:	f3 85       	ldd	r31, Z+11	; 0x0b
    5a38:	fa a7       	std	Y+42, r31	; 0x2a
    5a3a:	d3 01       	movw	r26, r6
    5a3c:	1c 96       	adiw	r26, 0x0c	; 12
    5a3e:	bc 91       	ld	r27, X
    5a40:	bb a7       	std	Y+43, r27	; 0x2b
    5a42:	f3 01       	movw	r30, r6
    5a44:	f5 85       	ldd	r31, Z+13	; 0x0d
    5a46:	fc a7       	std	Y+44, r31	; 0x2c
    5a48:	d3 01       	movw	r26, r6
    5a4a:	1e 96       	adiw	r26, 0x0e	; 14
    5a4c:	bc 91       	ld	r27, X
    5a4e:	bd a7       	std	Y+45, r27	; 0x2d
    5a50:	f3 01       	movw	r30, r6
    5a52:	f7 85       	ldd	r31, Z+15	; 0x0f
    5a54:	fe a7       	std	Y+46, r31	; 0x2e
    5a56:	d3 01       	movw	r26, r6
    5a58:	50 96       	adiw	r26, 0x10	; 16
    5a5a:	bc 91       	ld	r27, X
    5a5c:	bf a7       	std	Y+47, r27	; 0x2f
    5a5e:	f3 01       	movw	r30, r6
    5a60:	f1 89       	ldd	r31, Z+17	; 0x11
    5a62:	f8 ab       	std	Y+48, r31	; 0x30
    uint32_t fat_size = fs->header.fat_size;
    5a64:	d3 01       	movw	r26, r6
    5a66:	52 96       	adiw	r26, 0x12	; 18
    5a68:	2d 90       	ld	r2, X+
    5a6a:	3d 90       	ld	r3, X+
    5a6c:	4d 90       	ld	r4, X+
    5a6e:	5c 90       	ld	r5, X
    5a70:	55 97       	sbiw	r26, 0x15	; 21
    5a72:	ad c0       	rjmp	.+346    	; 0x5bce <fat_get_fs_free+0x1ee>
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
    5a74:	be ef       	ldi	r27, 0xFE	; 254
    5a76:	2b 16       	cp	r2, r27
    5a78:	bf ef       	ldi	r27, 0xFF	; 255
    5a7a:	3b 06       	cpc	r3, r27
    5a7c:	b0 e0       	ldi	r27, 0x00	; 0
    5a7e:	4b 06       	cpc	r4, r27
    5a80:	b0 e0       	ldi	r27, 0x00	; 0
    5a82:	5b 06       	cpc	r5, r27
    5a84:	28 f0       	brcs	.+10     	; 0x5a90 <fat_get_fs_free+0xb0>
    5a86:	ee ef       	ldi	r30, 0xFE	; 254
    5a88:	ff ef       	ldi	r31, 0xFF	; 255
    5a8a:	f8 a7       	std	Y+40, r31	; 0x28
    5a8c:	ef a3       	std	Y+39, r30	; 0x27
    5a8e:	02 c0       	rjmp	.+4      	; 0x5a94 <fat_get_fs_free+0xb4>
            length = fat_size;
    5a90:	38 a6       	std	Y+40, r3	; 0x28
    5a92:	2f a2       	std	Y+39, r2	; 0x27

        if(!fs->partition->device_read_interval(fat_offset,
    5a94:	d3 01       	movw	r26, r6
    5a96:	ed 91       	ld	r30, X+
    5a98:	fc 91       	ld	r31, X
    5a9a:	a2 81       	ldd	r26, Z+2	; 0x02
    5a9c:	b3 81       	ldd	r27, Z+3	; 0x03
    5a9e:	80 85       	ldd	r24, Z+8	; 0x08
    5aa0:	86 30       	cpi	r24, 0x06	; 6
    5aa2:	19 f0       	breq	.+6      	; 0x5aaa <fat_get_fs_free+0xca>
    5aa4:	ed e4       	ldi	r30, 0x4D	; 77
    5aa6:	fe e2       	ldi	r31, 0x2E	; 46
    5aa8:	02 c0       	rjmp	.+4      	; 0x5aae <fat_get_fs_free+0xce>
    5aaa:	e7 e2       	ldi	r30, 0x27	; 39
    5aac:	fe e2       	ldi	r31, 0x2E	; 46
    5aae:	29 a5       	ldd	r18, Y+41	; 0x29
    5ab0:	3a a5       	ldd	r19, Y+42	; 0x2a
    5ab2:	4b a5       	ldd	r20, Y+43	; 0x2b
    5ab4:	5c a5       	ldd	r21, Y+44	; 0x2c
    5ab6:	6d a5       	ldd	r22, Y+45	; 0x2d
    5ab8:	7e a5       	ldd	r23, Y+46	; 0x2e
    5aba:	8f a5       	ldd	r24, Y+47	; 0x2f
    5abc:	98 a9       	ldd	r25, Y+48	; 0x30
    5abe:	8e 01       	movw	r16, r28
    5ac0:	09 5f       	subi	r16, 0xF9	; 249
    5ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ac4:	ee 24       	eor	r14, r14
    5ac6:	ff 24       	eor	r15, r15
    5ac8:	68 94       	set
    5aca:	e5 f8       	bld	r14, 5
    5acc:	cf a0       	ldd	r12, Y+39	; 0x27
    5ace:	d8 a4       	ldd	r13, Y+40	; 0x28
    5ad0:	5f 01       	movw	r10, r30
    5ad2:	4e 01       	movw	r8, r28
    5ad4:	08 94       	sec
    5ad6:	81 1c       	adc	r8, r1
    5ad8:	91 1c       	adc	r9, r1
    5ada:	fd 01       	movw	r30, r26
    5adc:	09 95       	icall
    5ade:	88 23       	and	r24, r24
    5ae0:	09 f4       	brne	.+2      	; 0x5ae4 <fat_get_fs_free+0x104>
    5ae2:	94 c0       	rjmp	.+296    	; 0x5c0c <fat_get_fs_free+0x22c>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
    5ae4:	cf a0       	ldd	r12, Y+39	; 0x27
    5ae6:	d8 a4       	ldd	r13, Y+40	; 0x28
    5ae8:	56 01       	movw	r10, r12
    5aea:	cc 24       	eor	r12, r12
    5aec:	dd 24       	eor	r13, r13
    5aee:	ee 24       	eor	r14, r14
    5af0:	ff 24       	eor	r15, r15
    5af2:	87 01       	movw	r16, r14
    5af4:	f9 a5       	ldd	r31, Y+41	; 0x29
    5af6:	fa 0d       	add	r31, r10
    5af8:	91 e0       	ldi	r25, 0x01	; 1
    5afa:	b9 a5       	ldd	r27, Y+41	; 0x29
    5afc:	fb 17       	cp	r31, r27
    5afe:	08 f0       	brcs	.+2      	; 0x5b02 <fat_get_fs_free+0x122>
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	8a a5       	ldd	r24, Y+42	; 0x2a
    5b04:	8b 0d       	add	r24, r11
    5b06:	21 e0       	ldi	r18, 0x01	; 1
    5b08:	ea a5       	ldd	r30, Y+42	; 0x2a
    5b0a:	8e 17       	cp	r24, r30
    5b0c:	08 f0       	brcs	.+2      	; 0x5b10 <fat_get_fs_free+0x130>
    5b0e:	20 e0       	ldi	r18, 0x00	; 0
    5b10:	39 2f       	mov	r19, r25
    5b12:	38 0f       	add	r19, r24
    5b14:	91 e0       	ldi	r25, 0x01	; 1
    5b16:	38 17       	cp	r19, r24
    5b18:	08 f0       	brcs	.+2      	; 0x5b1c <fat_get_fs_free+0x13c>
    5b1a:	90 e0       	ldi	r25, 0x00	; 0
    5b1c:	29 2b       	or	r18, r25
    5b1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5b20:	8c 0d       	add	r24, r12
    5b22:	51 e0       	ldi	r21, 0x01	; 1
    5b24:	9b a5       	ldd	r25, Y+43	; 0x2b
    5b26:	89 17       	cp	r24, r25
    5b28:	08 f0       	brcs	.+2      	; 0x5b2c <fat_get_fs_free+0x14c>
    5b2a:	50 e0       	ldi	r21, 0x00	; 0
    5b2c:	42 2f       	mov	r20, r18
    5b2e:	48 0f       	add	r20, r24
    5b30:	91 e0       	ldi	r25, 0x01	; 1
    5b32:	48 17       	cp	r20, r24
    5b34:	08 f0       	brcs	.+2      	; 0x5b38 <fat_get_fs_free+0x158>
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	59 2b       	or	r21, r25
    5b3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    5b3c:	8d 0d       	add	r24, r13
    5b3e:	21 e0       	ldi	r18, 0x01	; 1
    5b40:	ac a5       	ldd	r26, Y+44	; 0x2c
    5b42:	8a 17       	cp	r24, r26
    5b44:	08 f0       	brcs	.+2      	; 0x5b48 <fat_get_fs_free+0x168>
    5b46:	20 e0       	ldi	r18, 0x00	; 0
    5b48:	58 0f       	add	r21, r24
    5b4a:	91 e0       	ldi	r25, 0x01	; 1
    5b4c:	58 17       	cp	r21, r24
    5b4e:	08 f0       	brcs	.+2      	; 0x5b52 <fat_get_fs_free+0x172>
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	29 2b       	or	r18, r25
    5b54:	8d a5       	ldd	r24, Y+45	; 0x2d
    5b56:	8e 0d       	add	r24, r14
    5b58:	71 e0       	ldi	r23, 0x01	; 1
    5b5a:	bd a5       	ldd	r27, Y+45	; 0x2d
    5b5c:	8b 17       	cp	r24, r27
    5b5e:	08 f0       	brcs	.+2      	; 0x5b62 <fat_get_fs_free+0x182>
    5b60:	70 e0       	ldi	r23, 0x00	; 0
    5b62:	62 2f       	mov	r22, r18
    5b64:	68 0f       	add	r22, r24
    5b66:	91 e0       	ldi	r25, 0x01	; 1
    5b68:	68 17       	cp	r22, r24
    5b6a:	08 f0       	brcs	.+2      	; 0x5b6e <fat_get_fs_free+0x18e>
    5b6c:	90 e0       	ldi	r25, 0x00	; 0
    5b6e:	79 2b       	or	r23, r25
    5b70:	8e a5       	ldd	r24, Y+46	; 0x2e
    5b72:	8f 0d       	add	r24, r15
    5b74:	21 e0       	ldi	r18, 0x01	; 1
    5b76:	ee a5       	ldd	r30, Y+46	; 0x2e
    5b78:	8e 17       	cp	r24, r30
    5b7a:	08 f0       	brcs	.+2      	; 0x5b7e <fat_get_fs_free+0x19e>
    5b7c:	20 e0       	ldi	r18, 0x00	; 0
    5b7e:	78 0f       	add	r23, r24
    5b80:	91 e0       	ldi	r25, 0x01	; 1
    5b82:	78 17       	cp	r23, r24
    5b84:	08 f0       	brcs	.+2      	; 0x5b88 <fat_get_fs_free+0x1a8>
    5b86:	90 e0       	ldi	r25, 0x00	; 0
    5b88:	29 2b       	or	r18, r25
    5b8a:	9f a5       	ldd	r25, Y+47	; 0x2f
    5b8c:	90 0f       	add	r25, r16
    5b8e:	e1 e0       	ldi	r30, 0x01	; 1
    5b90:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b92:	98 17       	cp	r25, r24
    5b94:	08 f0       	brcs	.+2      	; 0x5b98 <fat_get_fs_free+0x1b8>
    5b96:	e0 e0       	ldi	r30, 0x00	; 0
    5b98:	82 2f       	mov	r24, r18
    5b9a:	89 0f       	add	r24, r25
    5b9c:	21 e0       	ldi	r18, 0x01	; 1
    5b9e:	89 17       	cp	r24, r25
    5ba0:	08 f0       	brcs	.+2      	; 0x5ba4 <fat_get_fs_free+0x1c4>
    5ba2:	20 e0       	ldi	r18, 0x00	; 0
    5ba4:	e2 2b       	or	r30, r18
    5ba6:	98 a9       	ldd	r25, Y+48	; 0x30
    5ba8:	91 0f       	add	r25, r17
    5baa:	f9 a7       	std	Y+41, r31	; 0x29
    5bac:	3a a7       	std	Y+42, r19	; 0x2a
    5bae:	4b a7       	std	Y+43, r20	; 0x2b
    5bb0:	5c a7       	std	Y+44, r21	; 0x2c
    5bb2:	6d a7       	std	Y+45, r22	; 0x2d
    5bb4:	7e a7       	std	Y+46, r23	; 0x2e
    5bb6:	8f a7       	std	Y+47, r24	; 0x2f
    5bb8:	9e 0f       	add	r25, r30
    5bba:	98 ab       	std	Y+48, r25	; 0x30
        fat_size -= length;
    5bbc:	ef a1       	ldd	r30, Y+39	; 0x27
    5bbe:	f8 a5       	ldd	r31, Y+40	; 0x28
    5bc0:	cf 01       	movw	r24, r30
    5bc2:	a0 e0       	ldi	r26, 0x00	; 0
    5bc4:	b0 e0       	ldi	r27, 0x00	; 0
    5bc6:	28 1a       	sub	r2, r24
    5bc8:	39 0a       	sbc	r3, r25
    5bca:	4a 0a       	sbc	r4, r26
    5bcc:	5b 0a       	sbc	r5, r27
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    5bce:	21 14       	cp	r2, r1
    5bd0:	31 04       	cpc	r3, r1
    5bd2:	41 04       	cpc	r4, r1
    5bd4:	51 04       	cpc	r5, r1
    5bd6:	09 f0       	breq	.+2      	; 0x5bda <fat_get_fs_free+0x1fa>
    5bd8:	4d cf       	rjmp	.-358    	; 0x5a74 <fat_get_fs_free+0x94>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    5bda:	d3 01       	movw	r26, r6
    5bdc:	58 96       	adiw	r26, 0x18	; 24
    5bde:	4d 91       	ld	r20, X+
    5be0:	5c 91       	ld	r21, X
    5be2:	59 97       	sbiw	r26, 0x19	; 25
    5be4:	29 80       	ldd	r2, Y+1	; 0x01
    5be6:	3a 80       	ldd	r3, Y+2	; 0x02
    5be8:	4b 80       	ldd	r4, Y+3	; 0x03
    5bea:	5c 80       	ldd	r5, Y+4	; 0x04
    5bec:	9a 01       	movw	r18, r20
    5bee:	40 e0       	ldi	r20, 0x00	; 0
    5bf0:	50 e0       	ldi	r21, 0x00	; 0
    5bf2:	60 e0       	ldi	r22, 0x00	; 0
    5bf4:	70 e0       	ldi	r23, 0x00	; 0
    5bf6:	80 e0       	ldi	r24, 0x00	; 0
    5bf8:	90 e0       	ldi	r25, 0x00	; 0
    5bfa:	51 01       	movw	r10, r2
    5bfc:	62 01       	movw	r12, r4
    5bfe:	ee 24       	eor	r14, r14
    5c00:	ff 24       	eor	r15, r15
    5c02:	00 e0       	ldi	r16, 0x00	; 0
    5c04:	10 e0       	ldi	r17, 0x00	; 0
    5c06:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    5c0a:	08 c0       	rjmp	.+16     	; 0x5c1c <fat_get_fs_free+0x23c>
    5c0c:	20 e0       	ldi	r18, 0x00	; 0
    5c0e:	30 e0       	ldi	r19, 0x00	; 0
    5c10:	40 e0       	ldi	r20, 0x00	; 0
    5c12:	50 e0       	ldi	r21, 0x00	; 0
    5c14:	60 e0       	ldi	r22, 0x00	; 0
    5c16:	70 e0       	ldi	r23, 0x00	; 0
    5c18:	80 e0       	ldi	r24, 0x00	; 0
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
}
    5c1c:	e0 96       	adiw	r28, 0x30	; 48
    5c1e:	0f b6       	in	r0, 0x3f	; 63
    5c20:	f8 94       	cli
    5c22:	de bf       	out	0x3e, r29	; 62
    5c24:	0f be       	out	0x3f, r0	; 63
    5c26:	cd bf       	out	0x3d, r28	; 61
    5c28:	cf 91       	pop	r28
    5c2a:	df 91       	pop	r29
    5c2c:	1f 91       	pop	r17
    5c2e:	0f 91       	pop	r16
    5c30:	ff 90       	pop	r15
    5c32:	ef 90       	pop	r14
    5c34:	df 90       	pop	r13
    5c36:	cf 90       	pop	r12
    5c38:	bf 90       	pop	r11
    5c3a:	af 90       	pop	r10
    5c3c:	9f 90       	pop	r9
    5c3e:	8f 90       	pop	r8
    5c40:	7f 90       	pop	r7
    5c42:	6f 90       	pop	r6
    5c44:	5f 90       	pop	r5
    5c46:	4f 90       	pop	r4
    5c48:	3f 90       	pop	r3
    5c4a:	2f 90       	pop	r2
    5c4c:	08 95       	ret

00005c4e <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    5c4e:	ef 92       	push	r14
    5c50:	ff 92       	push	r15
    5c52:	cf 93       	push	r28
    5c54:	df 93       	push	r29
    5c56:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    5c58:	f7 01       	movw	r30, r14
    uintptr_t buffer_size = count_arg->buffer_size;
    5c5a:	44 81       	ldd	r20, Z+4	; 0x04
    5c5c:	55 81       	ldd	r21, Z+5	; 0x05
    5c5e:	20 e0       	ldi	r18, 0x00	; 0
    5c60:	30 e0       	ldi	r19, 0x00	; 0
    5c62:	12 c0       	rjmp	.+36     	; 0x5c88 <fat_get_fs_free_16_callback+0x3a>

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    {
        uint16_t cluster = *((uint16_t*) &buffer[0]);
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
    5c64:	88 81       	ld	r24, Y
    5c66:	99 81       	ldd	r25, Y+1	; 0x01
    5c68:	89 2b       	or	r24, r25
    5c6a:	59 f4       	brne	.+22     	; 0x5c82 <fat_get_fs_free_16_callback+0x34>
            ++(count_arg->cluster_count);
    5c6c:	80 81       	ld	r24, Z
    5c6e:	91 81       	ldd	r25, Z+1	; 0x01
    5c70:	a2 81       	ldd	r26, Z+2	; 0x02
    5c72:	b3 81       	ldd	r27, Z+3	; 0x03
    5c74:	01 96       	adiw	r24, 0x01	; 1
    5c76:	a1 1d       	adc	r26, r1
    5c78:	b1 1d       	adc	r27, r1
    5c7a:	80 83       	st	Z, r24
    5c7c:	91 83       	std	Z+1, r25	; 0x01
    5c7e:	a2 83       	std	Z+2, r26	; 0x02
    5c80:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    5c82:	2e 5f       	subi	r18, 0xFE	; 254
    5c84:	3f 4f       	sbci	r19, 0xFF	; 255
    5c86:	22 96       	adiw	r28, 0x02	; 2
    5c88:	24 17       	cp	r18, r20
    5c8a:	35 07       	cpc	r19, r21
    5c8c:	58 f3       	brcs	.-42     	; 0x5c64 <fat_get_fs_free_16_callback+0x16>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
    5c90:	df 91       	pop	r29
    5c92:	cf 91       	pop	r28
    5c94:	ff 90       	pop	r15
    5c96:	ef 90       	pop	r14
    5c98:	08 95       	ret

00005c9a <fat_get_fs_free_32_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT32.
 */
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    5c9a:	ef 92       	push	r14
    5c9c:	ff 92       	push	r15
    5c9e:	cf 93       	push	r28
    5ca0:	df 93       	push	r29
    5ca2:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    5ca4:	f7 01       	movw	r30, r14
    uintptr_t buffer_size = count_arg->buffer_size;
    5ca6:	44 81       	ldd	r20, Z+4	; 0x04
    5ca8:	55 81       	ldd	r21, Z+5	; 0x05
    5caa:	20 e0       	ldi	r18, 0x00	; 0
    5cac:	30 e0       	ldi	r19, 0x00	; 0
    5cae:	16 c0       	rjmp	.+44     	; 0x5cdc <fat_get_fs_free_32_callback+0x42>

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    {
        uint32_t cluster = *((uint32_t*) &buffer[0]);
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
    5cb0:	88 81       	ld	r24, Y
    5cb2:	99 81       	ldd	r25, Y+1	; 0x01
    5cb4:	aa 81       	ldd	r26, Y+2	; 0x02
    5cb6:	bb 81       	ldd	r27, Y+3	; 0x03
    5cb8:	00 97       	sbiw	r24, 0x00	; 0
    5cba:	a1 05       	cpc	r26, r1
    5cbc:	b1 05       	cpc	r27, r1
    5cbe:	59 f4       	brne	.+22     	; 0x5cd6 <fat_get_fs_free_32_callback+0x3c>
            ++(count_arg->cluster_count);
    5cc0:	80 81       	ld	r24, Z
    5cc2:	91 81       	ldd	r25, Z+1	; 0x01
    5cc4:	a2 81       	ldd	r26, Z+2	; 0x02
    5cc6:	b3 81       	ldd	r27, Z+3	; 0x03
    5cc8:	01 96       	adiw	r24, 0x01	; 1
    5cca:	a1 1d       	adc	r26, r1
    5ccc:	b1 1d       	adc	r27, r1
    5cce:	80 83       	st	Z, r24
    5cd0:	91 83       	std	Z+1, r25	; 0x01
    5cd2:	a2 83       	std	Z+2, r26	; 0x02
    5cd4:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    5cd6:	2c 5f       	subi	r18, 0xFC	; 252
    5cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    5cda:	24 96       	adiw	r28, 0x04	; 4
    5cdc:	24 17       	cp	r18, r20
    5cde:	35 07       	cpc	r19, r21
    5ce0:	38 f3       	brcs	.-50     	; 0x5cb0 <fat_get_fs_free_32_callback+0x16>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	df 91       	pop	r29
    5ce6:	cf 91       	pop	r28
    5ce8:	ff 90       	pop	r15
    5cea:	ef 90       	pop	r14
    5cec:	08 95       	ret

00005cee <fat_clear_handles>:
 * Initialize the data structures used to store file system handles
 */
void fat_clear_handles(void)
{
#if !USE_DYNAMIC_MEMORY
	memset(fat_fs_handles, 0, sizeof(fat_fs_handles));
    5cee:	8e e2       	ldi	r24, 0x2E	; 46
    5cf0:	e3 ee       	ldi	r30, 0xE3	; 227
    5cf2:	f3 e0       	ldi	r31, 0x03	; 3
    5cf4:	df 01       	movw	r26, r30
    5cf6:	1d 92       	st	X+, r1
    5cf8:	8a 95       	dec	r24
    5cfa:	e9 f7       	brne	.-6      	; 0x5cf6 <fat_clear_handles+0x8>
	memset(fat_file_handles, 0, sizeof(fat_file_handles));
    5cfc:	8f e3       	ldi	r24, 0x3F	; 63
    5cfe:	e1 e1       	ldi	r30, 0x11	; 17
    5d00:	f4 e0       	ldi	r31, 0x04	; 4
    5d02:	df 01       	movw	r26, r30
    5d04:	1d 92       	st	X+, r1
    5d06:	8a 95       	dec	r24
    5d08:	e9 f7       	brne	.-6      	; 0x5d04 <fat_clear_handles+0x16>
	memset(fat_dir_handles, 0, sizeof(fat_dir_handles));
    5d0a:	82 e7       	ldi	r24, 0x72	; 114
    5d0c:	e0 e5       	ldi	r30, 0x50	; 80
    5d0e:	f4 e0       	ldi	r31, 0x04	; 4
    5d10:	df 01       	movw	r26, r30
    5d12:	1d 92       	st	X+, r1
    5d14:	8a 95       	dec	r24
    5d16:	e9 f7       	brne	.-6      	; 0x5d12 <fat_clear_handles+0x24>
#endif
    5d18:	08 95       	ret

00005d1a <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    5d1a:	2f 92       	push	r2
    5d1c:	3f 92       	push	r3
    5d1e:	4f 92       	push	r4
    5d20:	5f 92       	push	r5
    5d22:	6f 92       	push	r6
    5d24:	7f 92       	push	r7
    5d26:	8f 92       	push	r8
    5d28:	9f 92       	push	r9
    5d2a:	af 92       	push	r10
    5d2c:	bf 92       	push	r11
    5d2e:	cf 92       	push	r12
    5d30:	df 92       	push	r13
    5d32:	ef 92       	push	r14
    5d34:	ff 92       	push	r15
    5d36:	0f 93       	push	r16
    5d38:	1f 93       	push	r17
    5d3a:	df 93       	push	r29
    5d3c:	cf 93       	push	r28
    5d3e:	cd b7       	in	r28, 0x3d	; 61
    5d40:	de b7       	in	r29, 0x3e	; 62
    5d42:	62 97       	sbiw	r28, 0x12	; 18
    5d44:	0f b6       	in	r0, 0x3f	; 63
    5d46:	f8 94       	cli
    5d48:	de bf       	out	0x3e, r29	; 62
    5d4a:	0f be       	out	0x3f, r0	; 63
    5d4c:	cd bf       	out	0x3d, r28	; 61
    5d4e:	9a 8b       	std	Y+18, r25	; 0x12
    5d50:	89 8b       	std	Y+17, r24	; 0x11
    if(cluster_num < 2)
    5d52:	42 30       	cpi	r20, 0x02	; 2
    5d54:	51 05       	cpc	r21, r1
    5d56:	61 05       	cpc	r22, r1
    5d58:	71 05       	cpc	r23, r1
    5d5a:	10 f4       	brcc	.+4      	; 0x5d60 <fat_clear_cluster+0x46>
    5d5c:	80 e0       	ldi	r24, 0x00	; 0
    5d5e:	a2 c0       	rjmp	.+324    	; 0x5ea4 <fat_clear_cluster+0x18a>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    5d60:	89 89       	ldd	r24, Y+17	; 0x11
    5d62:	9a 89       	ldd	r25, Y+18	; 0x12
    5d64:	89 2b       	or	r24, r25
    5d66:	49 f4       	brne	.+18     	; 0x5d7a <fat_clear_cluster+0x60>
    5d68:	20 e0       	ldi	r18, 0x00	; 0
    5d6a:	30 e0       	ldi	r19, 0x00	; 0
    5d6c:	40 e0       	ldi	r20, 0x00	; 0
    5d6e:	50 e0       	ldi	r21, 0x00	; 0
    5d70:	60 e0       	ldi	r22, 0x00	; 0
    5d72:	70 e0       	ldi	r23, 0x00	; 0
    5d74:	10 e0       	ldi	r17, 0x00	; 0
    5d76:	90 e0       	ldi	r25, 0x00	; 0
    5d78:	7b c0       	rjmp	.+246    	; 0x5e70 <fat_clear_cluster+0x156>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    5d7a:	42 50       	subi	r20, 0x02	; 2
    5d7c:	50 40       	sbci	r21, 0x00	; 0
    5d7e:	60 40       	sbci	r22, 0x00	; 0
    5d80:	70 40       	sbci	r23, 0x00	; 0
    5d82:	5a 01       	movw	r10, r20
    5d84:	6b 01       	movw	r12, r22
    5d86:	e9 89       	ldd	r30, Y+17	; 0x11
    5d88:	fa 89       	ldd	r31, Y+18	; 0x12
    5d8a:	20 8c       	ldd	r2, Z+24	; 0x18
    5d8c:	31 8c       	ldd	r3, Z+25	; 0x19
    5d8e:	9a 01       	movw	r18, r20
    5d90:	a6 01       	movw	r20, r12
    5d92:	60 e0       	ldi	r22, 0x00	; 0
    5d94:	70 e0       	ldi	r23, 0x00	; 0
    5d96:	80 e0       	ldi	r24, 0x00	; 0
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	51 01       	movw	r10, r2
    5d9c:	cc 24       	eor	r12, r12
    5d9e:	dd 24       	eor	r13, r13
    5da0:	ee 24       	eor	r14, r14
    5da2:	ff 24       	eor	r15, r15
    5da4:	00 e0       	ldi	r16, 0x00	; 0
    5da6:	10 e0       	ldi	r17, 0x00	; 0
    5da8:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    5dac:	c9 2e       	mov	r12, r25
    5dae:	e9 89       	ldd	r30, Y+17	; 0x11
    5db0:	fa 89       	ldd	r31, Y+18	; 0x12
    5db2:	b2 8d       	ldd	r27, Z+26	; 0x1a
    5db4:	b3 8c       	ldd	r11, Z+27	; 0x1b
    5db6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5db8:	15 8d       	ldd	r17, Z+29	; 0x1d
    5dba:	f6 8c       	ldd	r15, Z+30	; 0x1e
    5dbc:	e7 8c       	ldd	r14, Z+31	; 0x1f
    5dbe:	d0 a0       	ldd	r13, Z+32	; 0x20
    5dc0:	01 a1       	ldd	r16, Z+33	; 0x21
    5dc2:	b2 0f       	add	r27, r18
    5dc4:	e1 e0       	ldi	r30, 0x01	; 1
    5dc6:	b2 17       	cp	r27, r18
    5dc8:	08 f0       	brcs	.+2      	; 0x5dcc <fat_clear_cluster+0xb2>
    5dca:	e0 e0       	ldi	r30, 0x00	; 0
    5dcc:	23 2f       	mov	r18, r19
    5dce:	2b 0d       	add	r18, r11
    5dd0:	f1 e0       	ldi	r31, 0x01	; 1
    5dd2:	23 17       	cp	r18, r19
    5dd4:	08 f0       	brcs	.+2      	; 0x5dd8 <fat_clear_cluster+0xbe>
    5dd6:	f0 e0       	ldi	r31, 0x00	; 0
    5dd8:	3e 2f       	mov	r19, r30
    5dda:	32 0f       	add	r19, r18
    5ddc:	e1 e0       	ldi	r30, 0x01	; 1
    5dde:	32 17       	cp	r19, r18
    5de0:	08 f0       	brcs	.+2      	; 0x5de4 <fat_clear_cluster+0xca>
    5de2:	e0 e0       	ldi	r30, 0x00	; 0
    5de4:	fe 2b       	or	r31, r30
    5de6:	24 2f       	mov	r18, r20
    5de8:	2a 0f       	add	r18, r26
    5dea:	a1 e0       	ldi	r26, 0x01	; 1
    5dec:	24 17       	cp	r18, r20
    5dee:	08 f0       	brcs	.+2      	; 0x5df2 <fat_clear_cluster+0xd8>
    5df0:	a0 e0       	ldi	r26, 0x00	; 0
    5df2:	4f 2f       	mov	r20, r31
    5df4:	42 0f       	add	r20, r18
    5df6:	e1 e0       	ldi	r30, 0x01	; 1
    5df8:	42 17       	cp	r20, r18
    5dfa:	08 f0       	brcs	.+2      	; 0x5dfe <fat_clear_cluster+0xe4>
    5dfc:	e0 e0       	ldi	r30, 0x00	; 0
    5dfe:	ae 2b       	or	r26, r30
    5e00:	25 2f       	mov	r18, r21
    5e02:	21 0f       	add	r18, r17
    5e04:	f1 e0       	ldi	r31, 0x01	; 1
    5e06:	25 17       	cp	r18, r21
    5e08:	08 f0       	brcs	.+2      	; 0x5e0c <fat_clear_cluster+0xf2>
    5e0a:	f0 e0       	ldi	r31, 0x00	; 0
    5e0c:	5a 2f       	mov	r21, r26
    5e0e:	52 0f       	add	r21, r18
    5e10:	e1 e0       	ldi	r30, 0x01	; 1
    5e12:	52 17       	cp	r21, r18
    5e14:	08 f0       	brcs	.+2      	; 0x5e18 <fat_clear_cluster+0xfe>
    5e16:	e0 e0       	ldi	r30, 0x00	; 0
    5e18:	fe 2b       	or	r31, r30
    5e1a:	26 2f       	mov	r18, r22
    5e1c:	2f 0d       	add	r18, r15
    5e1e:	a1 e0       	ldi	r26, 0x01	; 1
    5e20:	26 17       	cp	r18, r22
    5e22:	08 f0       	brcs	.+2      	; 0x5e26 <fat_clear_cluster+0x10c>
    5e24:	a0 e0       	ldi	r26, 0x00	; 0
    5e26:	6f 2f       	mov	r22, r31
    5e28:	62 0f       	add	r22, r18
    5e2a:	e1 e0       	ldi	r30, 0x01	; 1
    5e2c:	62 17       	cp	r22, r18
    5e2e:	08 f0       	brcs	.+2      	; 0x5e32 <fat_clear_cluster+0x118>
    5e30:	e0 e0       	ldi	r30, 0x00	; 0
    5e32:	ae 2b       	or	r26, r30
    5e34:	27 2f       	mov	r18, r23
    5e36:	2e 0d       	add	r18, r14
    5e38:	f1 e0       	ldi	r31, 0x01	; 1
    5e3a:	27 17       	cp	r18, r23
    5e3c:	08 f0       	brcs	.+2      	; 0x5e40 <fat_clear_cluster+0x126>
    5e3e:	f0 e0       	ldi	r31, 0x00	; 0
    5e40:	7a 2f       	mov	r23, r26
    5e42:	72 0f       	add	r23, r18
    5e44:	e1 e0       	ldi	r30, 0x01	; 1
    5e46:	72 17       	cp	r23, r18
    5e48:	08 f0       	brcs	.+2      	; 0x5e4c <fat_clear_cluster+0x132>
    5e4a:	e0 e0       	ldi	r30, 0x00	; 0
    5e4c:	fe 2b       	or	r31, r30
    5e4e:	28 2f       	mov	r18, r24
    5e50:	2d 0d       	add	r18, r13
    5e52:	e1 e0       	ldi	r30, 0x01	; 1
    5e54:	28 17       	cp	r18, r24
    5e56:	08 f0       	brcs	.+2      	; 0x5e5a <fat_clear_cluster+0x140>
    5e58:	e0 e0       	ldi	r30, 0x00	; 0
    5e5a:	8f 2f       	mov	r24, r31
    5e5c:	82 0f       	add	r24, r18
    5e5e:	91 e0       	ldi	r25, 0x01	; 1
    5e60:	82 17       	cp	r24, r18
    5e62:	08 f0       	brcs	.+2      	; 0x5e66 <fat_clear_cluster+0x14c>
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	9e 2b       	or	r25, r30
    5e68:	0c 0d       	add	r16, r12
    5e6a:	2b 2f       	mov	r18, r27
    5e6c:	18 2f       	mov	r17, r24
    5e6e:	90 0f       	add	r25, r16
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    5e70:	de 01       	movw	r26, r28
    5e72:	11 96       	adiw	r26, 0x01	; 1
    5e74:	80 e1       	ldi	r24, 0x10	; 16
    5e76:	fd 01       	movw	r30, r26
    5e78:	11 92       	st	Z+, r1
    5e7a:	8a 95       	dec	r24
    5e7c:	e9 f7       	brne	.-6      	; 0x5e78 <fat_clear_cluster+0x15e>
    return fs->partition->device_write_interval(cluster_offset,
    5e7e:	e9 89       	ldd	r30, Y+17	; 0x11
    5e80:	fa 89       	ldd	r31, Y+18	; 0x12
    5e82:	c0 80       	ld	r12, Z
    5e84:	d1 80       	ldd	r13, Z+1	; 0x01
    5e86:	e0 8c       	ldd	r14, Z+24	; 0x18
    5e88:	f1 8c       	ldd	r15, Z+25	; 0x19
    5e8a:	f6 01       	movw	r30, r12
    5e8c:	86 80       	ldd	r8, Z+6	; 0x06
    5e8e:	97 80       	ldd	r9, Z+7	; 0x07
    5e90:	81 2f       	mov	r24, r17
    5e92:	8d 01       	movw	r16, r26
    5e94:	e2 e5       	ldi	r30, 0x52	; 82
    5e96:	ce 2e       	mov	r12, r30
    5e98:	e7 e2       	ldi	r30, 0x27	; 39
    5e9a:	de 2e       	mov	r13, r30
    5e9c:	aa 24       	eor	r10, r10
    5e9e:	bb 24       	eor	r11, r11
    5ea0:	f4 01       	movw	r30, r8
    5ea2:	09 95       	icall
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    5ea4:	62 96       	adiw	r28, 0x12	; 18
    5ea6:	0f b6       	in	r0, 0x3f	; 63
    5ea8:	f8 94       	cli
    5eaa:	de bf       	out	0x3e, r29	; 62
    5eac:	0f be       	out	0x3f, r0	; 63
    5eae:	cd bf       	out	0x3d, r28	; 61
    5eb0:	cf 91       	pop	r28
    5eb2:	df 91       	pop	r29
    5eb4:	1f 91       	pop	r17
    5eb6:	0f 91       	pop	r16
    5eb8:	ff 90       	pop	r15
    5eba:	ef 90       	pop	r14
    5ebc:	df 90       	pop	r13
    5ebe:	cf 90       	pop	r12
    5ec0:	bf 90       	pop	r11
    5ec2:	af 90       	pop	r10
    5ec4:	9f 90       	pop	r9
    5ec6:	8f 90       	pop	r8
    5ec8:	7f 90       	pop	r7
    5eca:	6f 90       	pop	r6
    5ecc:	5f 90       	pop	r5
    5ece:	4f 90       	pop	r4
    5ed0:	3f 90       	pop	r3
    5ed2:	2f 90       	pop	r2
    5ed4:	08 95       	ret

00005ed6 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    5ed6:	2f 92       	push	r2
    5ed8:	3f 92       	push	r3
    5eda:	4f 92       	push	r4
    5edc:	5f 92       	push	r5
    5ede:	6f 92       	push	r6
    5ee0:	7f 92       	push	r7
    5ee2:	8f 92       	push	r8
    5ee4:	9f 92       	push	r9
    5ee6:	af 92       	push	r10
    5ee8:	bf 92       	push	r11
    5eea:	cf 92       	push	r12
    5eec:	df 92       	push	r13
    5eee:	ef 92       	push	r14
    5ef0:	ff 92       	push	r15
    5ef2:	0f 93       	push	r16
    5ef4:	1f 93       	push	r17
    5ef6:	df 93       	push	r29
    5ef8:	cf 93       	push	r28
    5efa:	cd b7       	in	r28, 0x3d	; 61
    5efc:	de b7       	in	r29, 0x3e	; 62
    5efe:	e7 97       	sbiw	r28, 0x37	; 55
    5f00:	0f b6       	in	r0, 0x3f	; 63
    5f02:	f8 94       	cli
    5f04:	de bf       	out	0x3e, r29	; 62
    5f06:	0f be       	out	0x3f, r0	; 63
    5f08:	cd bf       	out	0x3d, r28	; 61
    5f0a:	9d ab       	std	Y+53, r25	; 0x35
    5f0c:	8c ab       	std	Y+52, r24	; 0x34
    5f0e:	7f ab       	std	Y+55, r23	; 0x37
    5f10:	6e ab       	std	Y+54, r22	; 0x36
    if(!dd || !dir_entry)
    5f12:	00 97       	sbiw	r24, 0x00	; 0
    5f14:	09 f4       	brne	.+2      	; 0x5f18 <fat_read_dir+0x42>
    5f16:	5e c1       	rjmp	.+700    	; 0x61d4 <fat_read_dir+0x2fe>
    5f18:	61 15       	cp	r22, r1
    5f1a:	71 05       	cpc	r23, r1
    5f1c:	09 f4       	brne	.+2      	; 0x5f20 <fat_read_dir+0x4a>
    5f1e:	5a c1       	rjmp	.+692    	; 0x61d4 <fat_read_dir+0x2fe>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    5f20:	dc 01       	movw	r26, r24
    5f22:	0d 90       	ld	r0, X+
    5f24:	bc 91       	ld	r27, X
    5f26:	a0 2d       	mov	r26, r0
    5f28:	bb ab       	std	Y+51, r27	; 0x33
    5f2a:	aa ab       	std	Y+50, r26	; 0x32
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    5f2c:	58 96       	adiw	r26, 0x18	; 24
    5f2e:	ed 91       	ld	r30, X+
    5f30:	fc 91       	ld	r31, X
    5f32:	59 97       	sbiw	r26, 0x19	; 25
    5f34:	f9 ab       	std	Y+49, r31	; 0x31
    5f36:	e8 ab       	std	Y+48, r30	; 0x30
    cluster_t cluster_num = dd->entry_cluster;
    5f38:	dc 01       	movw	r26, r24
    5f3a:	d3 96       	adiw	r26, 0x33	; 51
    5f3c:	2d 91       	ld	r18, X+
    5f3e:	3d 91       	ld	r19, X+
    5f40:	4d 91       	ld	r20, X+
    5f42:	5c 91       	ld	r21, X
    5f44:	d6 97       	sbiw	r26, 0x36	; 54
    5f46:	2c a7       	std	Y+44, r18	; 0x2c
    5f48:	3d a7       	std	Y+45, r19	; 0x2d
    5f4a:	4e a7       	std	Y+46, r20	; 0x2e
    5f4c:	5f a7       	std	Y+47, r21	; 0x2f
    uint16_t cluster_offset = dd->entry_offset;
    5f4e:	d7 96       	adiw	r26, 0x37	; 55
    5f50:	ed 91       	ld	r30, X+
    5f52:	fc 91       	ld	r31, X
    5f54:	d8 97       	sbiw	r26, 0x38	; 56
    5f56:	fb a7       	std	Y+43, r31	; 0x2b
    5f58:	ea a7       	std	Y+42, r30	; 0x2a
    struct fat_read_dir_callback_arg arg;

    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));
    5f5a:	81 e3       	ldi	r24, 0x31	; 49
    5f5c:	db 01       	movw	r26, r22
    5f5e:	1d 92       	st	X+, r1
    5f60:	8a 95       	dec	r24
    5f62:	e9 f7       	brne	.-6      	; 0x5f5e <fat_read_dir+0x88>

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    5f64:	fe 01       	movw	r30, r28
    5f66:	31 96       	adiw	r30, 0x01	; 1
    5f68:	85 e0       	ldi	r24, 0x05	; 5
    5f6a:	df 01       	movw	r26, r30
    5f6c:	1d 92       	st	X+, r1
    5f6e:	8a 95       	dec	r24
    5f70:	e9 f7       	brne	.-6      	; 0x5f6c <fat_read_dir+0x96>
    arg.dir_entry = dir_entry;

    /* check if we read from the root directory */
    if(cluster_num == 0)
    5f72:	21 15       	cp	r18, r1
    5f74:	31 05       	cpc	r19, r1
    5f76:	41 05       	cpc	r20, r1
    5f78:	51 05       	cpc	r21, r1
    5f7a:	09 f0       	breq	.+2      	; 0x5f7e <fat_read_dir+0xa8>
    5f7c:	0a c1       	rjmp	.+532    	; 0x6192 <fat_read_dir+0x2bc>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    5f7e:	aa a9       	ldd	r26, Y+50	; 0x32
    5f80:	bb a9       	ldd	r27, Y+51	; 0x33
    5f82:	ed 91       	ld	r30, X+
    5f84:	fc 91       	ld	r31, X
    5f86:	11 97       	sbiw	r26, 0x01	; 1
    5f88:	80 85       	ldd	r24, Z+8	; 0x08
    5f8a:	8b 30       	cpi	r24, 0x0B	; 11
    5f8c:	59 f4       	brne	.+22     	; 0x5fa4 <fat_read_dir+0xce>
            cluster_num = header->root_dir_cluster;
    5f8e:	9a 96       	adiw	r26, 0x2a	; 42
    5f90:	2d 91       	ld	r18, X+
    5f92:	3d 91       	ld	r19, X+
    5f94:	4d 91       	ld	r20, X+
    5f96:	5c 91       	ld	r21, X
    5f98:	9d 97       	sbiw	r26, 0x2d	; 45
    5f9a:	2c a7       	std	Y+44, r18	; 0x2c
    5f9c:	3d a7       	std	Y+45, r19	; 0x2d
    5f9e:	4e a7       	std	Y+46, r20	; 0x2e
    5fa0:	5f a7       	std	Y+47, r21	; 0x2f
    5fa2:	f7 c0       	rjmp	.+494    	; 0x6192 <fat_read_dir+0x2bc>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    5fa4:	ea a9       	ldd	r30, Y+50	; 0x32
    5fa6:	fb a9       	ldd	r31, Y+51	; 0x33
    5fa8:	02 8c       	ldd	r0, Z+26	; 0x1a
    5faa:	f3 8d       	ldd	r31, Z+27	; 0x1b
    5fac:	e0 2d       	mov	r30, r0
    5fae:	aa a9       	ldd	r26, Y+50	; 0x32
    5fb0:	bb a9       	ldd	r27, Y+51	; 0x33
    5fb2:	92 96       	adiw	r26, 0x22	; 34
    5fb4:	8d 91       	ld	r24, X+
    5fb6:	9c 91       	ld	r25, X
    5fb8:	93 97       	sbiw	r26, 0x23	; 35
    5fba:	e8 1b       	sub	r30, r24
    5fbc:	f9 0b       	sbc	r31, r25
    5fbe:	f9 ab       	std	Y+49, r31	; 0x31
    5fc0:	e8 ab       	std	Y+48, r30	; 0x30
    5fc2:	e7 c0       	rjmp	.+462    	; 0x6192 <fat_read_dir+0x2bc>
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
    5fc4:	4a a5       	ldd	r20, Y+42	; 0x2a
    5fc6:	5b a5       	ldd	r21, Y+43	; 0x2b
    5fc8:	9a 01       	movw	r18, r20
    5fca:	40 e0       	ldi	r20, 0x00	; 0
    5fcc:	50 e0       	ldi	r21, 0x00	; 0
    5fce:	2e a3       	std	Y+38, r18	; 0x26
    5fd0:	3f a3       	std	Y+39, r19	; 0x27
    5fd2:	48 a7       	std	Y+40, r20	; 0x28
    5fd4:	59 a7       	std	Y+41, r21	; 0x29
        if(cluster_num == 0)
    5fd6:	8c a5       	ldd	r24, Y+44	; 0x2c
    5fd8:	9d a5       	ldd	r25, Y+45	; 0x2d
    5fda:	ae a5       	ldd	r26, Y+46	; 0x2e
    5fdc:	bf a5       	ldd	r27, Y+47	; 0x2f
    5fde:	00 97       	sbiw	r24, 0x00	; 0
    5fe0:	a1 05       	cpc	r26, r1
    5fe2:	b1 05       	cpc	r27, r1
    5fe4:	39 f4       	brne	.+14     	; 0x5ff4 <fat_read_dir+0x11e>
            pos += header->root_dir_offset;
    5fe6:	ea a9       	ldd	r30, Y+50	; 0x32
    5fe8:	fb a9       	ldd	r31, Y+51	; 0x33
    5fea:	82 a1       	ldd	r24, Z+34	; 0x22
    5fec:	93 a1       	ldd	r25, Z+35	; 0x23
    5fee:	a4 a1       	ldd	r26, Z+36	; 0x24
    5ff0:	b5 a1       	ldd	r27, Z+37	; 0x25
    5ff2:	73 c0       	rjmp	.+230    	; 0x60da <fat_read_dir+0x204>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    5ff4:	2a a9       	ldd	r18, Y+50	; 0x32
    5ff6:	3b a9       	ldd	r19, Y+51	; 0x33
    5ff8:	21 15       	cp	r18, r1
    5ffa:	31 05       	cpc	r19, r1
    5ffc:	09 f4       	brne	.+2      	; 0x6000 <fat_read_dir+0x12a>
    5ffe:	65 c0       	rjmp	.+202    	; 0x60ca <fat_read_dir+0x1f4>
    6000:	8c a5       	ldd	r24, Y+44	; 0x2c
    6002:	9d a5       	ldd	r25, Y+45	; 0x2d
    6004:	ae a5       	ldd	r26, Y+46	; 0x2e
    6006:	bf a5       	ldd	r27, Y+47	; 0x2f
    6008:	82 30       	cpi	r24, 0x02	; 2
    600a:	91 05       	cpc	r25, r1
    600c:	a1 05       	cpc	r26, r1
    600e:	b1 05       	cpc	r27, r1
    6010:	08 f4       	brcc	.+2      	; 0x6014 <fat_read_dir+0x13e>
    6012:	5b c0       	rjmp	.+182    	; 0x60ca <fat_read_dir+0x1f4>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    6014:	02 97       	sbiw	r24, 0x02	; 2
    6016:	a1 09       	sbc	r26, r1
    6018:	b1 09       	sbc	r27, r1
    601a:	5c 01       	movw	r10, r24
    601c:	6d 01       	movw	r12, r26
    601e:	02 96       	adiw	r24, 0x02	; 2
    6020:	a1 1d       	adc	r26, r1
    6022:	b1 1d       	adc	r27, r1
    6024:	8c a7       	std	Y+44, r24	; 0x2c
    6026:	9d a7       	std	Y+45, r25	; 0x2d
    6028:	ae a7       	std	Y+46, r26	; 0x2e
    602a:	bf a7       	std	Y+47, r27	; 0x2f
    602c:	d9 01       	movw	r26, r18
    602e:	58 96       	adiw	r26, 0x18	; 24
    6030:	2d 90       	ld	r2, X+
    6032:	3c 90       	ld	r3, X
    6034:	59 97       	sbiw	r26, 0x19	; 25
    6036:	95 01       	movw	r18, r10
    6038:	a6 01       	movw	r20, r12
    603a:	60 e0       	ldi	r22, 0x00	; 0
    603c:	70 e0       	ldi	r23, 0x00	; 0
    603e:	80 e0       	ldi	r24, 0x00	; 0
    6040:	90 e0       	ldi	r25, 0x00	; 0
    6042:	51 01       	movw	r10, r2
    6044:	cc 24       	eor	r12, r12
    6046:	dd 24       	eor	r13, r13
    6048:	ee 24       	eor	r14, r14
    604a:	ff 24       	eor	r15, r15
    604c:	00 e0       	ldi	r16, 0x00	; 0
    604e:	10 e0       	ldi	r17, 0x00	; 0
    6050:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    6054:	ea a9       	ldd	r30, Y+50	; 0x32
    6056:	fb a9       	ldd	r31, Y+51	; 0x33
    6058:	a2 8d       	ldd	r26, Z+26	; 0x1a
    605a:	f3 8c       	ldd	r15, Z+27	; 0x1b
    605c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    605e:	05 8d       	ldd	r16, Z+29	; 0x1d
    6060:	d6 8c       	ldd	r13, Z+30	; 0x1e
    6062:	a2 0f       	add	r26, r18
    6064:	f1 e0       	ldi	r31, 0x01	; 1
    6066:	a2 17       	cp	r26, r18
    6068:	08 f0       	brcs	.+2      	; 0x606c <fat_read_dir+0x196>
    606a:	f0 e0       	ldi	r31, 0x00	; 0
    606c:	23 2f       	mov	r18, r19
    606e:	2f 0d       	add	r18, r15
    6070:	e1 e0       	ldi	r30, 0x01	; 1
    6072:	23 17       	cp	r18, r19
    6074:	08 f0       	brcs	.+2      	; 0x6078 <fat_read_dir+0x1a2>
    6076:	e0 e0       	ldi	r30, 0x00	; 0
    6078:	cf 2e       	mov	r12, r31
    607a:	c2 0e       	add	r12, r18
    607c:	31 e0       	ldi	r19, 0x01	; 1
    607e:	c2 16       	cp	r12, r18
    6080:	08 f0       	brcs	.+2      	; 0x6084 <fat_read_dir+0x1ae>
    6082:	30 e0       	ldi	r19, 0x00	; 0
    6084:	e3 2b       	or	r30, r19
    6086:	24 2f       	mov	r18, r20
    6088:	2b 0f       	add	r18, r27
    608a:	f1 e0       	ldi	r31, 0x01	; 1
    608c:	24 17       	cp	r18, r20
    608e:	08 f0       	brcs	.+2      	; 0x6092 <fat_read_dir+0x1bc>
    6090:	f0 e0       	ldi	r31, 0x00	; 0
    6092:	ee 2e       	mov	r14, r30
    6094:	e2 0e       	add	r14, r18
    6096:	31 e0       	ldi	r19, 0x01	; 1
    6098:	e2 16       	cp	r14, r18
    609a:	08 f0       	brcs	.+2      	; 0x609e <fat_read_dir+0x1c8>
    609c:	30 e0       	ldi	r19, 0x00	; 0
    609e:	f3 2b       	or	r31, r19
    60a0:	25 2f       	mov	r18, r21
    60a2:	20 0f       	add	r18, r16
    60a4:	41 e0       	ldi	r20, 0x01	; 1
    60a6:	25 17       	cp	r18, r21
    60a8:	08 f0       	brcs	.+2      	; 0x60ac <fat_read_dir+0x1d6>
    60aa:	40 e0       	ldi	r20, 0x00	; 0
    60ac:	ff 2e       	mov	r15, r31
    60ae:	f2 0e       	add	r15, r18
    60b0:	31 e0       	ldi	r19, 0x01	; 1
    60b2:	f2 16       	cp	r15, r18
    60b4:	08 f0       	brcs	.+2      	; 0x60b8 <fat_read_dir+0x1e2>
    60b6:	30 e0       	ldi	r19, 0x00	; 0
    60b8:	43 2b       	or	r20, r19
    60ba:	26 2f       	mov	r18, r22
    60bc:	2d 0d       	add	r18, r13
    60be:	04 2f       	mov	r16, r20
    60c0:	02 0f       	add	r16, r18
    60c2:	2a 2f       	mov	r18, r26
    60c4:	3c 2d       	mov	r19, r12
    60c6:	a7 01       	movw	r20, r14
    60c8:	04 c0       	rjmp	.+8      	; 0x60d2 <fat_read_dir+0x1fc>
    60ca:	20 e0       	ldi	r18, 0x00	; 0
    60cc:	30 e0       	ldi	r19, 0x00	; 0
    60ce:	40 e0       	ldi	r20, 0x00	; 0
    60d0:	50 e0       	ldi	r21, 0x00	; 0
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);
    60d2:	8e a1       	ldd	r24, Y+38	; 0x26
    60d4:	9f a1       	ldd	r25, Y+39	; 0x27
    60d6:	a8 a5       	ldd	r26, Y+40	; 0x28
    60d8:	b9 a5       	ldd	r27, Y+41	; 0x29
    60da:	82 0f       	add	r24, r18
    60dc:	93 1f       	adc	r25, r19
    60de:	a4 1f       	adc	r26, r20
    60e0:	b5 1f       	adc	r27, r21

        arg.bytes_read = 0;
    60e2:	1c 82       	std	Y+4, r1	; 0x04
    60e4:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    60e6:	ea a9       	ldd	r30, Y+50	; 0x32
    60e8:	fb a9       	ldd	r31, Y+51	; 0x33
    60ea:	20 81       	ld	r18, Z
    60ec:	31 81       	ldd	r19, Z+1	; 0x01
    60ee:	2c 01       	movw	r4, r24
    60f0:	3d 01       	movw	r6, r26
    60f2:	c8 a8       	ldd	r12, Y+48	; 0x30
    60f4:	d9 a8       	ldd	r13, Y+49	; 0x31
    60f6:	4a a5       	ldd	r20, Y+42	; 0x2a
    60f8:	5b a5       	ldd	r21, Y+43	; 0x2b
    60fa:	c4 1a       	sub	r12, r20
    60fc:	d5 0a       	sbc	r13, r21
    60fe:	d9 01       	movw	r26, r18
    6100:	12 96       	adiw	r26, 0x02	; 2
    6102:	ed 91       	ld	r30, X+
    6104:	fc 91       	ld	r31, X
    6106:	13 97       	sbiw	r26, 0x03	; 3
    6108:	92 01       	movw	r18, r4
    610a:	a3 01       	movw	r20, r6
    610c:	60 e0       	ldi	r22, 0x00	; 0
    610e:	70 e0       	ldi	r23, 0x00	; 0
    6110:	80 e0       	ldi	r24, 0x00	; 0
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	8e 01       	movw	r16, r28
    6116:	0a 5f       	subi	r16, 0xFA	; 250
    6118:	1f 4f       	sbci	r17, 0xFF	; 255
    611a:	b0 e2       	ldi	r27, 0x20	; 32
    611c:	eb 2e       	mov	r14, r27
    611e:	f1 2c       	mov	r15, r1
    6120:	a2 ed       	ldi	r26, 0xD2	; 210
    6122:	aa 2e       	mov	r10, r26
    6124:	aa e2       	ldi	r26, 0x2A	; 42
    6126:	ba 2e       	mov	r11, r26
    6128:	4e 01       	movw	r8, r28
    612a:	08 94       	sec
    612c:	81 1c       	adc	r8, r1
    612e:	91 1c       	adc	r9, r1
    6130:	09 95       	icall
    6132:	88 23       	and	r24, r24
    6134:	09 f4       	brne	.+2      	; 0x6138 <fat_read_dir+0x262>
    6136:	4e c0       	rjmp	.+156    	; 0x61d4 <fat_read_dir+0x2fe>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    6138:	8b 81       	ldd	r24, Y+3	; 0x03
    613a:	9c 81       	ldd	r25, Y+4	; 0x04
    613c:	ea a5       	ldd	r30, Y+42	; 0x2a
    613e:	fb a5       	ldd	r31, Y+43	; 0x2b
    6140:	e8 0f       	add	r30, r24
    6142:	f9 1f       	adc	r31, r25
    6144:	fb a7       	std	Y+43, r31	; 0x2b
    6146:	ea a7       	std	Y+42, r30	; 0x2a

        if(cluster_offset >= cluster_size)
    6148:	28 a9       	ldd	r18, Y+48	; 0x30
    614a:	39 a9       	ldd	r19, Y+49	; 0x31
    614c:	e2 17       	cp	r30, r18
    614e:	f3 07       	cpc	r31, r19
    6150:	20 f1       	brcs	.+72     	; 0x619a <fat_read_dir+0x2c4>
        {
            /* we reached the cluster border and switch to the next cluster */
            cluster_offset = 0;

            /* get number of next cluster */
            if(!(cluster_num = fat_get_next_cluster(fs, cluster_num)))
    6152:	8a a9       	ldd	r24, Y+50	; 0x32
    6154:	9b a9       	ldd	r25, Y+51	; 0x33
    6156:	4c a5       	ldd	r20, Y+44	; 0x2c
    6158:	5d a5       	ldd	r21, Y+45	; 0x2d
    615a:	6e a5       	ldd	r22, Y+46	; 0x2e
    615c:	7f a5       	ldd	r23, Y+47	; 0x2f
    615e:	0e 94 4b 21 	call	0x4296	; 0x4296 <fat_get_next_cluster>
    6162:	6c a7       	std	Y+44, r22	; 0x2c
    6164:	7d a7       	std	Y+45, r23	; 0x2d
    6166:	8e a7       	std	Y+46, r24	; 0x2e
    6168:	9f a7       	std	Y+47, r25	; 0x2f
    616a:	1b a6       	std	Y+43, r1	; 0x2b
    616c:	1a a6       	std	Y+42, r1	; 0x2a
    616e:	61 15       	cp	r22, r1
    6170:	71 05       	cpc	r23, r1
    6172:	81 05       	cpc	r24, r1
    6174:	91 05       	cpc	r25, r1
    6176:	89 f4       	brne	.+34     	; 0x619a <fat_read_dir+0x2c4>
            {
                /* directory entry not found, reset directory handle */
                cluster_num = dd->dir_entry.cluster;
    6178:	ac a9       	ldd	r26, Y+52	; 0x34
    617a:	bd a9       	ldd	r27, Y+53	; 0x35
    617c:	93 96       	adiw	r26, 0x23	; 35
    617e:	8d 91       	ld	r24, X+
    6180:	9d 91       	ld	r25, X+
    6182:	0d 90       	ld	r0, X+
    6184:	bc 91       	ld	r27, X
    6186:	a0 2d       	mov	r26, r0
    6188:	8c a7       	std	Y+44, r24	; 0x2c
    618a:	9d a7       	std	Y+45, r25	; 0x2d
    618c:	ae a7       	std	Y+46, r26	; 0x2e
    618e:	bf a7       	std	Y+47, r27	; 0x2f
    6190:	08 c0       	rjmp	.+16     	; 0x61a2 <fat_read_dir+0x2cc>
    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    arg.dir_entry = dir_entry;
    6192:	ee a9       	ldd	r30, Y+54	; 0x36
    6194:	ff a9       	ldd	r31, Y+55	; 0x37
    6196:	fa 83       	std	Y+2, r31	; 0x02
    6198:	e9 83       	std	Y+1, r30	; 0x01
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    619a:	8d 81       	ldd	r24, Y+5	; 0x05
    619c:	88 23       	and	r24, r24
    619e:	09 f4       	brne	.+2      	; 0x61a2 <fat_read_dir+0x2cc>
    61a0:	11 cf       	rjmp	.-478    	; 0x5fc4 <fat_read_dir+0xee>
                break;
            }
        }
    }

    dd->entry_cluster = cluster_num;
    61a2:	2c a5       	ldd	r18, Y+44	; 0x2c
    61a4:	3d a5       	ldd	r19, Y+45	; 0x2d
    61a6:	4e a5       	ldd	r20, Y+46	; 0x2e
    61a8:	5f a5       	ldd	r21, Y+47	; 0x2f
    61aa:	ac a9       	ldd	r26, Y+52	; 0x34
    61ac:	bd a9       	ldd	r27, Y+53	; 0x35
    61ae:	d3 96       	adiw	r26, 0x33	; 51
    61b0:	2d 93       	st	X+, r18
    61b2:	3d 93       	st	X+, r19
    61b4:	4d 93       	st	X+, r20
    61b6:	5c 93       	st	X, r21
    61b8:	d6 97       	sbiw	r26, 0x36	; 54
    dd->entry_offset = cluster_offset;
    61ba:	ea a5       	ldd	r30, Y+42	; 0x2a
    61bc:	fb a5       	ldd	r31, Y+43	; 0x2b
    61be:	d8 96       	adiw	r26, 0x38	; 56
    61c0:	fc 93       	st	X, r31
    61c2:	ee 93       	st	-X, r30
    61c4:	d7 97       	sbiw	r26, 0x37	; 55

    return dir_entry->long_name[0] != '\0' ? 1 : 0;
    61c6:	ae a9       	ldd	r26, Y+54	; 0x36
    61c8:	bf a9       	ldd	r27, Y+55	; 0x37
    61ca:	8c 91       	ld	r24, X
    61cc:	88 23       	and	r24, r24
    61ce:	19 f0       	breq	.+6      	; 0x61d6 <fat_read_dir+0x300>
    61d0:	81 e0       	ldi	r24, 0x01	; 1
    61d2:	01 c0       	rjmp	.+2      	; 0x61d6 <fat_read_dir+0x300>
    61d4:	80 e0       	ldi	r24, 0x00	; 0
}
    61d6:	e7 96       	adiw	r28, 0x37	; 55
    61d8:	0f b6       	in	r0, 0x3f	; 63
    61da:	f8 94       	cli
    61dc:	de bf       	out	0x3e, r29	; 62
    61de:	0f be       	out	0x3f, r0	; 63
    61e0:	cd bf       	out	0x3d, r28	; 61
    61e2:	cf 91       	pop	r28
    61e4:	df 91       	pop	r29
    61e6:	1f 91       	pop	r17
    61e8:	0f 91       	pop	r16
    61ea:	ff 90       	pop	r15
    61ec:	ef 90       	pop	r14
    61ee:	df 90       	pop	r13
    61f0:	cf 90       	pop	r12
    61f2:	bf 90       	pop	r11
    61f4:	af 90       	pop	r10
    61f6:	9f 90       	pop	r9
    61f8:	8f 90       	pop	r8
    61fa:	7f 90       	pop	r7
    61fc:	6f 90       	pop	r6
    61fe:	5f 90       	pop	r5
    6200:	4f 90       	pop	r4
    6202:	3f 90       	pop	r3
    6204:	2f 90       	pop	r2
    6206:	08 95       	ret

00006208 <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    6208:	2f 92       	push	r2
    620a:	3f 92       	push	r3
    620c:	4f 92       	push	r4
    620e:	5f 92       	push	r5
    6210:	6f 92       	push	r6
    6212:	7f 92       	push	r7
    6214:	8f 92       	push	r8
    6216:	9f 92       	push	r9
    6218:	af 92       	push	r10
    621a:	bf 92       	push	r11
    621c:	cf 92       	push	r12
    621e:	df 92       	push	r13
    6220:	ef 92       	push	r14
    6222:	ff 92       	push	r15
    6224:	0f 93       	push	r16
    6226:	1f 93       	push	r17
    6228:	df 93       	push	r29
    622a:	cf 93       	push	r28
    622c:	cd b7       	in	r28, 0x3d	; 61
    622e:	de b7       	in	r29, 0x3e	; 62
    6230:	cd 54       	subi	r28, 0x4D	; 77
    6232:	d0 40       	sbci	r29, 0x00	; 0
    6234:	0f b6       	in	r0, 0x3f	; 63
    6236:	f8 94       	cli
    6238:	de bf       	out	0x3e, r29	; 62
    623a:	0f be       	out	0x3f, r0	; 63
    623c:	cd bf       	out	0x3d, r28	; 61
    623e:	2c 01       	movw	r4, r24
    if(!partition ||
    6240:	00 97       	sbiw	r24, 0x00	; 0
    6242:	09 f4       	brne	.+2      	; 0x6246 <fat_open+0x3e>
    6244:	d9 c3       	rjmp	.+1970   	; 0x69f8 <fat_open+0x7f0>
    6246:	dc 01       	movw	r26, r24
    6248:	14 96       	adiw	r26, 0x04	; 4
    624a:	8d 91       	ld	r24, X+
    624c:	9c 91       	ld	r25, X
    624e:	15 97       	sbiw	r26, 0x05	; 5
    6250:	89 2b       	or	r24, r25
    6252:	09 f4       	brne	.+2      	; 0x6256 <fat_open+0x4e>
    6254:	d1 c3       	rjmp	.+1954   	; 0x69f8 <fat_open+0x7f0>
    6256:	16 96       	adiw	r26, 0x06	; 6
    6258:	8d 91       	ld	r24, X+
    625a:	9c 91       	ld	r25, X
    625c:	17 97       	sbiw	r26, 0x07	; 7
    625e:	89 2b       	or	r24, r25
    6260:	09 f4       	brne	.+2      	; 0x6264 <fat_open+0x5c>
    6262:	ca c3       	rjmp	.+1940   	; 0x69f8 <fat_open+0x7f0>
    6264:	e6 c3       	rjmp	.+1996   	; 0x6a32 <fat_open+0x82a>
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    6266:	e3 ee       	ldi	r30, 0xE3	; 227
    6268:	f3 e0       	ldi	r31, 0x03	; 3
    626a:	8e e2       	ldi	r24, 0x2E	; 46
    626c:	df 01       	movw	r26, r30
    626e:	1d 92       	st	X+, r1
    6270:	8a 95       	dec	r24
    6272:	e9 f7       	brne	.-6      	; 0x626e <fat_open+0x66>

    fs->partition = partition;
    6274:	50 92 e4 03 	sts	0x03E4, r5
    6278:	40 92 e3 03 	sts	0x03E3, r4
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    627c:	f2 01       	movw	r30, r4
    627e:	a1 84       	ldd	r10, Z+9	; 0x09
    6280:	b2 84       	ldd	r11, Z+10	; 0x0a
    6282:	c3 84       	ldd	r12, Z+11	; 0x0b
    6284:	d4 84       	ldd	r13, Z+12	; 0x0c
    6286:	95 01       	movw	r18, r10
    6288:	a6 01       	movw	r20, r12
    628a:	60 e0       	ldi	r22, 0x00	; 0
    628c:	70 e0       	ldi	r23, 0x00	; 0
    628e:	80 e0       	ldi	r24, 0x00	; 0
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	09 e0       	ldi	r16, 0x09	; 9
    6294:	0e 94 16 47 	call	0x8e2c	; 0x8e2c <__ashldi3>
    6298:	2e af       	std	Y+62, r18	; 0x3e
    629a:	3f af       	std	Y+63, r19	; 0x3f
    629c:	21 96       	adiw	r28, 0x01	; 1
    629e:	4f af       	std	Y+63, r20	; 0x3f
    62a0:	21 97       	sbiw	r28, 0x01	; 1
    62a2:	22 96       	adiw	r28, 0x02	; 2
    62a4:	5f af       	std	Y+63, r21	; 0x3f
    62a6:	22 97       	sbiw	r28, 0x02	; 2
    62a8:	23 96       	adiw	r28, 0x03	; 3
    62aa:	6f af       	std	Y+63, r22	; 0x3f
    62ac:	23 97       	sbiw	r28, 0x03	; 3
    62ae:	24 96       	adiw	r28, 0x04	; 4
    62b0:	7f af       	std	Y+63, r23	; 0x3f
    62b2:	24 97       	sbiw	r28, 0x04	; 4
    62b4:	25 96       	adiw	r28, 0x05	; 5
    62b6:	8f af       	std	Y+63, r24	; 0x3f
    62b8:	25 97       	sbiw	r28, 0x05	; 5
    62ba:	26 96       	adiw	r28, 0x06	; 6
    62bc:	9f af       	std	Y+63, r25	; 0x3f
    62be:	26 97       	sbiw	r28, 0x06	; 6
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    62c0:	25 5f       	subi	r18, 0xF5	; 245
    62c2:	31 e0       	ldi	r19, 0x01	; 1
    62c4:	fe ad       	ldd	r31, Y+62	; 0x3e
    62c6:	2f 17       	cp	r18, r31
    62c8:	08 f0       	brcs	.+2      	; 0x62cc <fat_open+0xc4>
    62ca:	30 e0       	ldi	r19, 0x00	; 0
    62cc:	ef ac       	ldd	r14, Y+63	; 0x3f
    62ce:	3e 0d       	add	r19, r14
    62d0:	41 e0       	ldi	r20, 0x01	; 1
    62d2:	3e 15       	cp	r19, r14
    62d4:	08 f0       	brcs	.+2      	; 0x62d8 <fat_open+0xd0>
    62d6:	40 e0       	ldi	r20, 0x00	; 0
    62d8:	21 96       	adiw	r28, 0x01	; 1
    62da:	ff ac       	ldd	r15, Y+63	; 0x3f
    62dc:	21 97       	sbiw	r28, 0x01	; 1
    62de:	4f 0d       	add	r20, r15
    62e0:	51 e0       	ldi	r21, 0x01	; 1
    62e2:	4f 15       	cp	r20, r15
    62e4:	08 f0       	brcs	.+2      	; 0x62e8 <fat_open+0xe0>
    62e6:	50 e0       	ldi	r21, 0x00	; 0
    62e8:	22 96       	adiw	r28, 0x02	; 2
    62ea:	0f ad       	ldd	r16, Y+63	; 0x3f
    62ec:	22 97       	sbiw	r28, 0x02	; 2
    62ee:	50 0f       	add	r21, r16
    62f0:	61 e0       	ldi	r22, 0x01	; 1
    62f2:	50 17       	cp	r21, r16
    62f4:	08 f0       	brcs	.+2      	; 0x62f8 <fat_open+0xf0>
    62f6:	60 e0       	ldi	r22, 0x00	; 0
    62f8:	23 96       	adiw	r28, 0x03	; 3
    62fa:	1f ad       	ldd	r17, Y+63	; 0x3f
    62fc:	23 97       	sbiw	r28, 0x03	; 3
    62fe:	61 0f       	add	r22, r17
    6300:	71 e0       	ldi	r23, 0x01	; 1
    6302:	61 17       	cp	r22, r17
    6304:	08 f0       	brcs	.+2      	; 0x6308 <fat_open+0x100>
    6306:	70 e0       	ldi	r23, 0x00	; 0
    6308:	24 96       	adiw	r28, 0x04	; 4
    630a:	8f ad       	ldd	r24, Y+63	; 0x3f
    630c:	24 97       	sbiw	r28, 0x04	; 4
    630e:	78 0f       	add	r23, r24
    6310:	81 e0       	ldi	r24, 0x01	; 1
    6312:	24 96       	adiw	r28, 0x04	; 4
    6314:	9f ad       	ldd	r25, Y+63	; 0x3f
    6316:	24 97       	sbiw	r28, 0x04	; 4
    6318:	79 17       	cp	r23, r25
    631a:	08 f0       	brcs	.+2      	; 0x631e <fat_open+0x116>
    631c:	80 e0       	ldi	r24, 0x00	; 0
    631e:	25 96       	adiw	r28, 0x05	; 5
    6320:	af ad       	ldd	r26, Y+63	; 0x3f
    6322:	25 97       	sbiw	r28, 0x05	; 5
    6324:	8a 0f       	add	r24, r26
    6326:	91 e0       	ldi	r25, 0x01	; 1
    6328:	8a 17       	cp	r24, r26
    632a:	08 f0       	brcs	.+2      	; 0x632e <fat_open+0x126>
    632c:	90 e0       	ldi	r25, 0x00	; 0
    632e:	d2 01       	movw	r26, r4
    6330:	ed 91       	ld	r30, X+
    6332:	fc 91       	ld	r31, X
    6334:	26 96       	adiw	r28, 0x06	; 6
    6336:	bf ad       	ldd	r27, Y+63	; 0x3f
    6338:	26 97       	sbiw	r28, 0x06	; 6
    633a:	9b 0f       	add	r25, r27
    633c:	8e 01       	movw	r16, r28
    633e:	0f 5f       	subi	r16, 0xFF	; 255
    6340:	1f 4f       	sbci	r17, 0xFF	; 255
    6342:	a5 e2       	ldi	r26, 0x25	; 37
    6344:	ea 2e       	mov	r14, r26
    6346:	f1 2c       	mov	r15, r1
    6348:	09 95       	icall
    634a:	88 23       	and	r24, r24
    634c:	09 f4       	brne	.+2      	; 0x6350 <fat_open+0x148>
    634e:	78 c3       	rjmp	.+1776   	; 0x6a40 <fat_open+0x838>
        return 0;

    uint16_t bytes_per_sector = ltoh16(*((uint16_t*) &buffer[0x00]));
    6350:	29 80       	ldd	r2, Y+1	; 0x01
    6352:	3a 80       	ldd	r3, Y+2	; 0x02
    uint16_t reserved_sectors = ltoh16(*((uint16_t*) &buffer[0x03]));
    6354:	ec 81       	ldd	r30, Y+4	; 0x04
    6356:	fd 81       	ldd	r31, Y+5	; 0x05
    6358:	ff a7       	std	Y+47, r31	; 0x2f
    635a:	ee a7       	std	Y+46, r30	; 0x2e
    uint8_t sectors_per_cluster = buffer[0x02];
    635c:	fb 81       	ldd	r31, Y+3	; 0x03
    635e:	f8 ab       	std	Y+48, r31	; 0x30
    uint8_t fat_copies = buffer[0x05];
    6360:	ee 80       	ldd	r14, Y+6	; 0x06
    6362:	e9 aa       	std	Y+49, r14	; 0x31
    uint16_t max_root_entries = ltoh16(*((uint16_t*) &buffer[0x06]));
    6364:	0f 81       	ldd	r16, Y+7	; 0x07
    6366:	18 85       	ldd	r17, Y+8	; 0x08
    6368:	1b ab       	std	Y+51, r17	; 0x33
    636a:	0a ab       	std	Y+50, r16	; 0x32
    uint16_t sector_count_16 = ltoh16(*((uint16_t*) &buffer[0x08]));
    636c:	89 85       	ldd	r24, Y+9	; 0x09
    636e:	9a 85       	ldd	r25, Y+10	; 0x0a
    uint16_t sectors_per_fat = ltoh16(*((uint16_t*) &buffer[0x0b]));
    6370:	2c 85       	ldd	r18, Y+12	; 0x0c
    6372:	3d 85       	ldd	r19, Y+13	; 0x0d
    6374:	3d ab       	std	Y+53, r19	; 0x35
    6376:	2c ab       	std	Y+52, r18	; 0x34
    uint32_t sector_count = ltoh32(*((uint32_t*) &buffer[0x15]));
    6378:	ae 88       	ldd	r10, Y+22	; 0x16
    637a:	bf 88       	ldd	r11, Y+23	; 0x17
    637c:	c8 8c       	ldd	r12, Y+24	; 0x18
    637e:	d9 8c       	ldd	r13, Y+25	; 0x19
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = ltoh32(*((uint32_t*) &buffer[0x19]));
    6380:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6382:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6384:	6c 8d       	ldd	r22, Y+28	; 0x1c
    6386:	7d 8d       	ldd	r23, Y+29	; 0x1d
    6388:	4e ab       	std	Y+54, r20	; 0x36
    638a:	5f ab       	std	Y+55, r21	; 0x37
    638c:	68 af       	std	Y+56, r22	; 0x38
    638e:	79 af       	std	Y+57, r23	; 0x39
    uint32_t cluster_root_dir = ltoh32(*((uint32_t*) &buffer[0x21]));
    6390:	ea a0       	ldd	r14, Y+34	; 0x22
    6392:	fb a0       	ldd	r15, Y+35	; 0x23
    6394:	0c a1       	ldd	r16, Y+36	; 0x24
    6396:	1d a1       	ldd	r17, Y+37	; 0x25
    6398:	ea ae       	std	Y+58, r14	; 0x3a
    639a:	fb ae       	std	Y+59, r15	; 0x3b
    639c:	0c af       	std	Y+60, r16	; 0x3c
    639e:	1d af       	std	Y+61, r17	; 0x3d
#endif

    if(sector_count == 0)
    63a0:	a1 14       	cp	r10, r1
    63a2:	b1 04       	cpc	r11, r1
    63a4:	c1 04       	cpc	r12, r1
    63a6:	d1 04       	cpc	r13, r1
    63a8:	31 f4       	brne	.+12     	; 0x63b6 <fat_open+0x1ae>
    {
        if(sector_count_16 == 0)
    63aa:	00 97       	sbiw	r24, 0x00	; 0
    63ac:	09 f4       	brne	.+2      	; 0x63b0 <fat_open+0x1a8>
    63ae:	48 c3       	rjmp	.+1680   	; 0x6a40 <fat_open+0x838>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    63b0:	5c 01       	movw	r10, r24
    63b2:	cc 24       	eor	r12, r12
    63b4:	dd 24       	eor	r13, r13
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
    63b6:	0c a9       	ldd	r16, Y+52	; 0x34
    63b8:	1d a9       	ldd	r17, Y+53	; 0x35
    63ba:	01 15       	cp	r16, r1
    63bc:	11 05       	cpc	r17, r1
    63be:	41 f0       	breq	.+16     	; 0x63d0 <fat_open+0x1c8>
        sectors_per_fat32 = sectors_per_fat;
    63c0:	98 01       	movw	r18, r16
    63c2:	40 e0       	ldi	r20, 0x00	; 0
    63c4:	50 e0       	ldi	r21, 0x00	; 0
    63c6:	2e ab       	std	Y+54, r18	; 0x36
    63c8:	3f ab       	std	Y+55, r19	; 0x37
    63ca:	48 af       	std	Y+56, r20	; 0x38
    63cc:	59 af       	std	Y+57, r21	; 0x39
    63ce:	0a c0       	rjmp	.+20     	; 0x63e4 <fat_open+0x1dc>
    else if(sectors_per_fat32 == 0)
    63d0:	6e a9       	ldd	r22, Y+54	; 0x36
    63d2:	7f a9       	ldd	r23, Y+55	; 0x37
    63d4:	88 ad       	ldd	r24, Y+56	; 0x38
    63d6:	99 ad       	ldd	r25, Y+57	; 0x39
    63d8:	61 15       	cp	r22, r1
    63da:	71 05       	cpc	r23, r1
    63dc:	81 05       	cpc	r24, r1
    63de:	91 05       	cpc	r25, r1
    63e0:	09 f4       	brne	.+2      	; 0x63e4 <fat_open+0x1dc>
    63e2:	2e c3       	rjmp	.+1628   	; 0x6a40 <fat_open+0x838>
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    63e4:	ee a5       	ldd	r30, Y+46	; 0x2e
    63e6:	ff a5       	ldd	r31, Y+47	; 0x2f
    63e8:	cf 01       	movw	r24, r30
    63ea:	a0 e0       	ldi	r26, 0x00	; 0
    63ec:	b0 e0       	ldi	r27, 0x00	; 0
    63ee:	86 01       	movw	r16, r12
    63f0:	75 01       	movw	r14, r10
    63f2:	e8 1a       	sub	r14, r24
    63f4:	f9 0a       	sbc	r15, r25
    63f6:	0a 0b       	sbc	r16, r26
    63f8:	1b 0b       	sbc	r17, r27
    63fa:	f9 a9       	ldd	r31, Y+49	; 0x31
    63fc:	2f 2f       	mov	r18, r31
    63fe:	30 e0       	ldi	r19, 0x00	; 0
    6400:	40 e0       	ldi	r20, 0x00	; 0
    6402:	50 e0       	ldi	r21, 0x00	; 0
    6404:	6e a9       	ldd	r22, Y+54	; 0x36
    6406:	7f a9       	ldd	r23, Y+55	; 0x37
    6408:	88 ad       	ldd	r24, Y+56	; 0x38
    640a:	99 ad       	ldd	r25, Y+57	; 0x39
    640c:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    6410:	e6 1a       	sub	r14, r22
    6412:	f7 0a       	sbc	r15, r23
    6414:	08 0b       	sbc	r16, r24
    6416:	19 0b       	sbc	r17, r25
    6418:	c1 01       	movw	r24, r2
    641a:	01 97       	sbiw	r24, 0x01	; 1
    641c:	2a a9       	ldd	r18, Y+50	; 0x32
    641e:	3b a9       	ldd	r19, Y+51	; 0x33
    6420:	45 e0       	ldi	r20, 0x05	; 5
    6422:	22 0f       	add	r18, r18
    6424:	33 1f       	adc	r19, r19
    6426:	4a 95       	dec	r20
    6428:	e1 f7       	brne	.-8      	; 0x6422 <fat_open+0x21a>
    642a:	82 0f       	add	r24, r18
    642c:	93 1f       	adc	r25, r19
    642e:	b1 01       	movw	r22, r2
    6430:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <__udivmodhi4>
    6434:	80 e0       	ldi	r24, 0x00	; 0
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	e6 1a       	sub	r14, r22
    643a:	f7 0a       	sbc	r15, r23
    643c:	08 0b       	sbc	r16, r24
    643e:	19 0b       	sbc	r17, r25
    6440:	68 a9       	ldd	r22, Y+48	; 0x30
    6442:	26 2f       	mov	r18, r22
    6444:	30 e0       	ldi	r19, 0x00	; 0
    6446:	40 e0       	ldi	r20, 0x00	; 0
    6448:	50 e0       	ldi	r21, 0x00	; 0
    644a:	c8 01       	movw	r24, r16
    644c:	b7 01       	movw	r22, r14
    644e:	0e 94 17 4b 	call	0x962e	; 0x962e <__udivmodsi4>
    6452:	39 01       	movw	r6, r18
    6454:	4a 01       	movw	r8, r20
    if(data_cluster_count < 4085)
    6456:	75 ef       	ldi	r23, 0xF5	; 245
    6458:	67 16       	cp	r6, r23
    645a:	7f e0       	ldi	r23, 0x0F	; 15
    645c:	77 06       	cpc	r7, r23
    645e:	70 e0       	ldi	r23, 0x00	; 0
    6460:	87 06       	cpc	r8, r23
    6462:	70 e0       	ldi	r23, 0x00	; 0
    6464:	97 06       	cpc	r9, r23
    6466:	08 f4       	brcc	.+2      	; 0x646a <fat_open+0x262>
    6468:	eb c2       	rjmp	.+1494   	; 0x6a40 <fat_open+0x838>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    646a:	85 ef       	ldi	r24, 0xF5	; 245
    646c:	68 16       	cp	r6, r24
    646e:	8f ef       	ldi	r24, 0xFF	; 255
    6470:	78 06       	cpc	r7, r24
    6472:	80 e0       	ldi	r24, 0x00	; 0
    6474:	88 06       	cpc	r8, r24
    6476:	80 e0       	ldi	r24, 0x00	; 0
    6478:	98 06       	cpc	r9, r24
    647a:	28 f4       	brcc	.+10     	; 0x6486 <fat_open+0x27e>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    647c:	86 e0       	ldi	r24, 0x06	; 6
    647e:	d2 01       	movw	r26, r4
    6480:	18 96       	adiw	r26, 0x08	; 8
    6482:	8c 93       	st	X, r24
    6484:	03 c0       	rjmp	.+6      	; 0x648c <fat_open+0x284>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    6486:	8b e0       	ldi	r24, 0x0B	; 11
    6488:	f2 01       	movw	r30, r4
    648a:	80 87       	std	Z+8, r24	; 0x08

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    648c:	8c e2       	ldi	r24, 0x2C	; 44
    648e:	e5 ee       	ldi	r30, 0xE5	; 229
    6490:	f3 e0       	ldi	r31, 0x03	; 3
    6492:	df 01       	movw	r26, r30
    6494:	1d 92       	st	X+, r1
    6496:	8a 95       	dec	r24
    6498:	e9 f7       	brne	.-6      	; 0x6494 <fat_open+0x28c>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    649a:	71 01       	movw	r14, r2
    649c:	00 e0       	ldi	r16, 0x00	; 0
    649e:	10 e0       	ldi	r17, 0x00	; 0
    64a0:	20 e0       	ldi	r18, 0x00	; 0
    64a2:	30 e0       	ldi	r19, 0x00	; 0
    64a4:	40 e0       	ldi	r20, 0x00	; 0
    64a6:	50 e0       	ldi	r21, 0x00	; 0
    64a8:	2e a2       	std	Y+38, r2	; 0x26
    64aa:	ff a2       	std	Y+39, r15	; 0x27
    64ac:	08 a7       	std	Y+40, r16	; 0x28
    64ae:	19 a7       	std	Y+41, r17	; 0x29
    64b0:	2a a7       	std	Y+42, r18	; 0x2a
    64b2:	3b a7       	std	Y+43, r19	; 0x2b
    64b4:	4c a7       	std	Y+44, r20	; 0x2c
    64b6:	5d a7       	std	Y+45, r21	; 0x2d
    64b8:	95 01       	movw	r18, r10
    64ba:	a6 01       	movw	r20, r12
    64bc:	60 e0       	ldi	r22, 0x00	; 0
    64be:	70 e0       	ldi	r23, 0x00	; 0
    64c0:	80 e0       	ldi	r24, 0x00	; 0
    64c2:	90 e0       	ldi	r25, 0x00	; 0
    64c4:	ae a0       	ldd	r10, Y+38	; 0x26
    64c6:	bf a0       	ldd	r11, Y+39	; 0x27
    64c8:	cc 24       	eor	r12, r12
    64ca:	dd 24       	eor	r13, r13
    64cc:	ee 24       	eor	r14, r14
    64ce:	ff 24       	eor	r15, r15
    64d0:	00 e0       	ldi	r16, 0x00	; 0
    64d2:	10 e0       	ldi	r17, 0x00	; 0
    64d4:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    64d8:	20 93 e5 03 	sts	0x03E5, r18
    64dc:	30 93 e6 03 	sts	0x03E6, r19
    64e0:	40 93 e7 03 	sts	0x03E7, r20
    64e4:	50 93 e8 03 	sts	0x03E8, r21
    64e8:	60 93 e9 03 	sts	0x03E9, r22
    64ec:	70 93 ea 03 	sts	0x03EA, r23
    64f0:	80 93 eb 03 	sts	0x03EB, r24
    64f4:	90 93 ec 03 	sts	0x03EC, r25

    header->fat_offset = /* jump to partition */
    64f8:	0e a5       	ldd	r16, Y+46	; 0x2e
    64fa:	1f a5       	ldd	r17, Y+47	; 0x2f
    64fc:	98 01       	movw	r18, r16
    64fe:	40 e0       	ldi	r20, 0x00	; 0
    6500:	50 e0       	ldi	r21, 0x00	; 0
    6502:	60 e0       	ldi	r22, 0x00	; 0
    6504:	70 e0       	ldi	r23, 0x00	; 0
    6506:	80 e0       	ldi	r24, 0x00	; 0
    6508:	90 e0       	ldi	r25, 0x00	; 0
    650a:	00 e0       	ldi	r16, 0x00	; 0
    650c:	10 e0       	ldi	r17, 0x00	; 0
    650e:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    6512:	a3 2f       	mov	r26, r19
    6514:	b4 2f       	mov	r27, r20
    6516:	15 2f       	mov	r17, r21
    6518:	06 2f       	mov	r16, r22
    651a:	f7 2e       	mov	r15, r23
    651c:	d8 2e       	mov	r13, r24
    651e:	ce ac       	ldd	r12, Y+62	; 0x3e
    6520:	c2 0e       	add	r12, r18
    6522:	f1 e0       	ldi	r31, 0x01	; 1
    6524:	c2 16       	cp	r12, r18
    6526:	08 f0       	brcs	.+2      	; 0x652a <fat_open+0x322>
    6528:	f0 e0       	ldi	r31, 0x00	; 0
    652a:	3f ad       	ldd	r19, Y+63	; 0x3f
    652c:	3a 0f       	add	r19, r26
    652e:	e1 e0       	ldi	r30, 0x01	; 1
    6530:	3a 17       	cp	r19, r26
    6532:	08 f0       	brcs	.+2      	; 0x6536 <fat_open+0x32e>
    6534:	e0 e0       	ldi	r30, 0x00	; 0
    6536:	ef 2e       	mov	r14, r31
    6538:	e3 0e       	add	r14, r19
    653a:	21 e0       	ldi	r18, 0x01	; 1
    653c:	e3 16       	cp	r14, r19
    653e:	08 f0       	brcs	.+2      	; 0x6542 <fat_open+0x33a>
    6540:	20 e0       	ldi	r18, 0x00	; 0
    6542:	e2 2b       	or	r30, r18
    6544:	21 96       	adiw	r28, 0x01	; 1
    6546:	4f ad       	ldd	r20, Y+63	; 0x3f
    6548:	21 97       	sbiw	r28, 0x01	; 1
    654a:	4b 0f       	add	r20, r27
    654c:	31 e0       	ldi	r19, 0x01	; 1
    654e:	4b 17       	cp	r20, r27
    6550:	08 f0       	brcs	.+2      	; 0x6554 <fat_open+0x34c>
    6552:	30 e0       	ldi	r19, 0x00	; 0
    6554:	ae 2f       	mov	r26, r30
    6556:	a4 0f       	add	r26, r20
    6558:	21 e0       	ldi	r18, 0x01	; 1
    655a:	a4 17       	cp	r26, r20
    655c:	08 f0       	brcs	.+2      	; 0x6560 <fat_open+0x358>
    655e:	20 e0       	ldi	r18, 0x00	; 0
    6560:	32 2b       	or	r19, r18
    6562:	22 96       	adiw	r28, 0x02	; 2
    6564:	5f ad       	ldd	r21, Y+63	; 0x3f
    6566:	22 97       	sbiw	r28, 0x02	; 2
    6568:	51 0f       	add	r21, r17
    656a:	41 e0       	ldi	r20, 0x01	; 1
    656c:	51 17       	cp	r21, r17
    656e:	08 f0       	brcs	.+2      	; 0x6572 <fat_open+0x36a>
    6570:	40 e0       	ldi	r20, 0x00	; 0
    6572:	f3 2f       	mov	r31, r19
    6574:	f5 0f       	add	r31, r21
    6576:	21 e0       	ldi	r18, 0x01	; 1
    6578:	f5 17       	cp	r31, r21
    657a:	08 f0       	brcs	.+2      	; 0x657e <fat_open+0x376>
    657c:	20 e0       	ldi	r18, 0x00	; 0
    657e:	42 2b       	or	r20, r18
    6580:	23 96       	adiw	r28, 0x03	; 3
    6582:	6f ad       	ldd	r22, Y+63	; 0x3f
    6584:	23 97       	sbiw	r28, 0x03	; 3
    6586:	60 0f       	add	r22, r16
    6588:	31 e0       	ldi	r19, 0x01	; 1
    658a:	60 17       	cp	r22, r16
    658c:	08 f0       	brcs	.+2      	; 0x6590 <fat_open+0x388>
    658e:	30 e0       	ldi	r19, 0x00	; 0
    6590:	e4 2f       	mov	r30, r20
    6592:	e6 0f       	add	r30, r22
    6594:	21 e0       	ldi	r18, 0x01	; 1
    6596:	e6 17       	cp	r30, r22
    6598:	08 f0       	brcs	.+2      	; 0x659c <fat_open+0x394>
    659a:	20 e0       	ldi	r18, 0x00	; 0
    659c:	32 2b       	or	r19, r18
    659e:	24 96       	adiw	r28, 0x04	; 4
    65a0:	7f ad       	ldd	r23, Y+63	; 0x3f
    65a2:	24 97       	sbiw	r28, 0x04	; 4
    65a4:	7f 0d       	add	r23, r15
    65a6:	41 e0       	ldi	r20, 0x01	; 1
    65a8:	7f 15       	cp	r23, r15
    65aa:	08 f0       	brcs	.+2      	; 0x65ae <fat_open+0x3a6>
    65ac:	40 e0       	ldi	r20, 0x00	; 0
    65ae:	53 2f       	mov	r21, r19
    65b0:	57 0f       	add	r21, r23
    65b2:	21 e0       	ldi	r18, 0x01	; 1
    65b4:	57 17       	cp	r21, r23
    65b6:	08 f0       	brcs	.+2      	; 0x65ba <fat_open+0x3b2>
    65b8:	20 e0       	ldi	r18, 0x00	; 0
    65ba:	42 2b       	or	r20, r18
    65bc:	25 96       	adiw	r28, 0x05	; 5
    65be:	8f ad       	ldd	r24, Y+63	; 0x3f
    65c0:	25 97       	sbiw	r28, 0x05	; 5
    65c2:	8d 0d       	add	r24, r13
    65c4:	21 e0       	ldi	r18, 0x01	; 1
    65c6:	8d 15       	cp	r24, r13
    65c8:	08 f0       	brcs	.+2      	; 0x65cc <fat_open+0x3c4>
    65ca:	20 e0       	ldi	r18, 0x00	; 0
    65cc:	48 0f       	add	r20, r24
    65ce:	31 e0       	ldi	r19, 0x01	; 1
    65d0:	48 17       	cp	r20, r24
    65d2:	08 f0       	brcs	.+2      	; 0x65d6 <fat_open+0x3ce>
    65d4:	30 e0       	ldi	r19, 0x00	; 0
    65d6:	23 2b       	or	r18, r19
    65d8:	26 96       	adiw	r28, 0x06	; 6
    65da:	1f ad       	ldd	r17, Y+63	; 0x3f
    65dc:	26 97       	sbiw	r28, 0x06	; 6
    65de:	91 0f       	add	r25, r17
    65e0:	29 0f       	add	r18, r25
    65e2:	c0 92 ed 03 	sts	0x03ED, r12
    65e6:	e0 92 ee 03 	sts	0x03EE, r14
    65ea:	a0 93 ef 03 	sts	0x03EF, r26
    65ee:	f0 93 f0 03 	sts	0x03F0, r31
    65f2:	e0 93 f1 03 	sts	0x03F1, r30
    65f6:	50 93 f2 03 	sts	0x03F2, r21
    65fa:	40 93 f3 03 	sts	0x03F3, r20
    65fe:	20 93 f4 03 	sts	0x03F4, r18
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    6602:	d2 01       	movw	r26, r4
    6604:	18 96       	adiw	r26, 0x08	; 8
    6606:	8c 91       	ld	r24, X
    6608:	86 30       	cpi	r24, 0x06	; 6
    660a:	29 f0       	breq	.+10     	; 0x6616 <fat_open+0x40e>
    660c:	64 e0       	ldi	r22, 0x04	; 4
    660e:	70 e0       	ldi	r23, 0x00	; 0
    6610:	80 e0       	ldi	r24, 0x00	; 0
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	04 c0       	rjmp	.+8      	; 0x661e <fat_open+0x416>
    6616:	62 e0       	ldi	r22, 0x02	; 2
    6618:	70 e0       	ldi	r23, 0x00	; 0
    661a:	80 e0       	ldi	r24, 0x00	; 0
    661c:	90 e0       	ldi	r25, 0x00	; 0
    661e:	12 e0       	ldi	r17, 0x02	; 2
    6620:	e1 2e       	mov	r14, r17
    6622:	f1 2c       	mov	r15, r1
    6624:	01 2d       	mov	r16, r1
    6626:	11 2d       	mov	r17, r1
    6628:	6e 0c       	add	r6, r14
    662a:	7f 1c       	adc	r7, r15
    662c:	80 1e       	adc	r8, r16
    662e:	91 1e       	adc	r9, r17
    6630:	a4 01       	movw	r20, r8
    6632:	93 01       	movw	r18, r6
    6634:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    6638:	60 93 f5 03 	sts	0x03F5, r22
    663c:	70 93 f6 03 	sts	0x03F6, r23
    6640:	80 93 f7 03 	sts	0x03F7, r24
    6644:	90 93 f8 03 	sts	0x03F8, r25

    header->sector_size = bytes_per_sector;
    6648:	30 92 fa 03 	sts	0x03FA, r3
    664c:	20 92 f9 03 	sts	0x03F9, r2
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    6650:	f8 a8       	ldd	r15, Y+48	; 0x30
    6652:	8f 2d       	mov	r24, r15
    6654:	90 e0       	ldi	r25, 0x00	; 0
    6656:	8c 01       	movw	r16, r24
    6658:	02 9d       	mul	r16, r2
    665a:	c0 01       	movw	r24, r0
    665c:	03 9d       	mul	r16, r3
    665e:	90 0d       	add	r25, r0
    6660:	12 9d       	mul	r17, r2
    6662:	90 0d       	add	r25, r0
    6664:	11 24       	eor	r1, r1
    6666:	90 93 fc 03 	sts	0x03FC, r25
    666a:	80 93 fb 03 	sts	0x03FB, r24

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
    666e:	d2 01       	movw	r26, r4
    6670:	18 96       	adiw	r26, 0x08	; 8
    6672:	8c 91       	ld	r24, X
    6674:	f9 a8       	ldd	r15, Y+49	; 0x31
    6676:	ef 2c       	mov	r14, r15
    6678:	ff 24       	eor	r15, r15
    667a:	00 e0       	ldi	r16, 0x00	; 0
    667c:	10 e0       	ldi	r17, 0x00	; 0
    667e:	20 e0       	ldi	r18, 0x00	; 0
    6680:	30 e0       	ldi	r19, 0x00	; 0
    6682:	40 e0       	ldi	r20, 0x00	; 0
    6684:	50 e0       	ldi	r21, 0x00	; 0
    6686:	27 96       	adiw	r28, 0x07	; 7
    6688:	ef ae       	std	Y+63, r14	; 0x3f
    668a:	27 97       	sbiw	r28, 0x07	; 7
    668c:	28 96       	adiw	r28, 0x08	; 8
    668e:	ff ae       	std	Y+63, r15	; 0x3f
    6690:	28 97       	sbiw	r28, 0x08	; 8
    6692:	29 96       	adiw	r28, 0x09	; 9
    6694:	0f af       	std	Y+63, r16	; 0x3f
    6696:	29 97       	sbiw	r28, 0x09	; 9
    6698:	2a 96       	adiw	r28, 0x0a	; 10
    669a:	1f af       	std	Y+63, r17	; 0x3f
    669c:	2a 97       	sbiw	r28, 0x0a	; 10
    669e:	2b 96       	adiw	r28, 0x0b	; 11
    66a0:	2f af       	std	Y+63, r18	; 0x3f
    66a2:	2b 97       	sbiw	r28, 0x0b	; 11
    66a4:	2c 96       	adiw	r28, 0x0c	; 12
    66a6:	3f af       	std	Y+63, r19	; 0x3f
    66a8:	2c 97       	sbiw	r28, 0x0c	; 12
    66aa:	2d 96       	adiw	r28, 0x0d	; 13
    66ac:	4f af       	std	Y+63, r20	; 0x3f
    66ae:	2d 97       	sbiw	r28, 0x0d	; 13
    66b0:	2e 96       	adiw	r28, 0x0e	; 14
    66b2:	5f af       	std	Y+63, r21	; 0x3f
    66b4:	2e 97       	sbiw	r28, 0x0e	; 14
    66b6:	86 30       	cpi	r24, 0x06	; 6
    66b8:	09 f0       	breq	.+2      	; 0x66bc <fat_open+0x4b4>
    66ba:	fa c0       	rjmp	.+500    	; 0x68b0 <fat_open+0x6a8>
#endif
    {
        header->root_dir_offset = /* jump to fats */
    66bc:	0c a9       	ldd	r16, Y+52	; 0x34
    66be:	1d a9       	ldd	r17, Y+53	; 0x35
    66c0:	2e a1       	ldd	r18, Y+38	; 0x26
    66c2:	3f a1       	ldd	r19, Y+39	; 0x27
    66c4:	40 e0       	ldi	r20, 0x00	; 0
    66c6:	50 e0       	ldi	r21, 0x00	; 0
    66c8:	60 e0       	ldi	r22, 0x00	; 0
    66ca:	70 e0       	ldi	r23, 0x00	; 0
    66cc:	80 e0       	ldi	r24, 0x00	; 0
    66ce:	90 e0       	ldi	r25, 0x00	; 0
    66d0:	58 01       	movw	r10, r16
    66d2:	cc 24       	eor	r12, r12
    66d4:	dd 24       	eor	r13, r13
    66d6:	ee 24       	eor	r14, r14
    66d8:	ff 24       	eor	r15, r15
    66da:	00 e0       	ldi	r16, 0x00	; 0
    66dc:	10 e0       	ldi	r17, 0x00	; 0
    66de:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    66e2:	27 96       	adiw	r28, 0x07	; 7
    66e4:	af ac       	ldd	r10, Y+63	; 0x3f
    66e6:	27 97       	sbiw	r28, 0x07	; 7
    66e8:	bb 24       	eor	r11, r11
    66ea:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    66ee:	f0 90 ed 03 	lds	r15, 0x03ED
    66f2:	e0 91 ee 03 	lds	r30, 0x03EE
    66f6:	b0 91 ef 03 	lds	r27, 0x03EF
    66fa:	10 91 f0 03 	lds	r17, 0x03F0
    66fe:	00 91 f1 03 	lds	r16, 0x03F1
    6702:	a0 90 f2 03 	lds	r10, 0x03F2
    6706:	90 90 f3 03 	lds	r9, 0x03F3
    670a:	a0 91 f4 03 	lds	r26, 0x03F4
    670e:	f2 0e       	add	r15, r18
    6710:	f1 e0       	ldi	r31, 0x01	; 1
    6712:	f2 16       	cp	r15, r18
    6714:	08 f0       	brcs	.+2      	; 0x6718 <fat_open+0x510>
    6716:	f0 e0       	ldi	r31, 0x00	; 0
    6718:	23 2f       	mov	r18, r19
    671a:	2e 0f       	add	r18, r30
    671c:	e1 e0       	ldi	r30, 0x01	; 1
    671e:	23 17       	cp	r18, r19
    6720:	08 f0       	brcs	.+2      	; 0x6724 <fat_open+0x51c>
    6722:	e0 e0       	ldi	r30, 0x00	; 0
    6724:	ef 2e       	mov	r14, r31
    6726:	e2 0e       	add	r14, r18
    6728:	31 e0       	ldi	r19, 0x01	; 1
    672a:	e2 16       	cp	r14, r18
    672c:	08 f0       	brcs	.+2      	; 0x6730 <fat_open+0x528>
    672e:	30 e0       	ldi	r19, 0x00	; 0
    6730:	e3 2b       	or	r30, r19
    6732:	24 2f       	mov	r18, r20
    6734:	2b 0f       	add	r18, r27
    6736:	f1 e0       	ldi	r31, 0x01	; 1
    6738:	24 17       	cp	r18, r20
    673a:	08 f0       	brcs	.+2      	; 0x673e <fat_open+0x536>
    673c:	f0 e0       	ldi	r31, 0x00	; 0
    673e:	de 2e       	mov	r13, r30
    6740:	d2 0e       	add	r13, r18
    6742:	31 e0       	ldi	r19, 0x01	; 1
    6744:	d2 16       	cp	r13, r18
    6746:	08 f0       	brcs	.+2      	; 0x674a <fat_open+0x542>
    6748:	30 e0       	ldi	r19, 0x00	; 0
    674a:	f3 2b       	or	r31, r19
    674c:	25 2f       	mov	r18, r21
    674e:	21 0f       	add	r18, r17
    6750:	41 e0       	ldi	r20, 0x01	; 1
    6752:	25 17       	cp	r18, r21
    6754:	08 f0       	brcs	.+2      	; 0x6758 <fat_open+0x550>
    6756:	40 e0       	ldi	r20, 0x00	; 0
    6758:	cf 2e       	mov	r12, r31
    675a:	c2 0e       	add	r12, r18
    675c:	31 e0       	ldi	r19, 0x01	; 1
    675e:	c2 16       	cp	r12, r18
    6760:	08 f0       	brcs	.+2      	; 0x6764 <fat_open+0x55c>
    6762:	30 e0       	ldi	r19, 0x00	; 0
    6764:	43 2b       	or	r20, r19
    6766:	26 2f       	mov	r18, r22
    6768:	20 0f       	add	r18, r16
    676a:	51 e0       	ldi	r21, 0x01	; 1
    676c:	26 17       	cp	r18, r22
    676e:	08 f0       	brcs	.+2      	; 0x6772 <fat_open+0x56a>
    6770:	50 e0       	ldi	r21, 0x00	; 0
    6772:	b4 2e       	mov	r11, r20
    6774:	b2 0e       	add	r11, r18
    6776:	31 e0       	ldi	r19, 0x01	; 1
    6778:	b2 16       	cp	r11, r18
    677a:	08 f0       	brcs	.+2      	; 0x677e <fat_open+0x576>
    677c:	30 e0       	ldi	r19, 0x00	; 0
    677e:	53 2b       	or	r21, r19
    6780:	27 2f       	mov	r18, r23
    6782:	2a 0d       	add	r18, r10
    6784:	41 e0       	ldi	r20, 0x01	; 1
    6786:	27 17       	cp	r18, r23
    6788:	08 f0       	brcs	.+2      	; 0x678c <fat_open+0x584>
    678a:	40 e0       	ldi	r20, 0x00	; 0
    678c:	a5 2e       	mov	r10, r21
    678e:	a2 0e       	add	r10, r18
    6790:	31 e0       	ldi	r19, 0x01	; 1
    6792:	a2 16       	cp	r10, r18
    6794:	08 f0       	brcs	.+2      	; 0x6798 <fat_open+0x590>
    6796:	30 e0       	ldi	r19, 0x00	; 0
    6798:	43 2b       	or	r20, r19
    679a:	28 2f       	mov	r18, r24
    679c:	29 0d       	add	r18, r9
    679e:	31 e0       	ldi	r19, 0x01	; 1
    67a0:	28 17       	cp	r18, r24
    67a2:	08 f0       	brcs	.+2      	; 0x67a6 <fat_open+0x59e>
    67a4:	30 e0       	ldi	r19, 0x00	; 0
    67a6:	94 2e       	mov	r9, r20
    67a8:	92 0e       	add	r9, r18
    67aa:	81 e0       	ldi	r24, 0x01	; 1
    67ac:	92 16       	cp	r9, r18
    67ae:	08 f0       	brcs	.+2      	; 0x67b2 <fat_open+0x5aa>
    67b0:	80 e0       	ldi	r24, 0x00	; 0
    67b2:	13 2f       	mov	r17, r19
    67b4:	18 2b       	or	r17, r24
    67b6:	a9 0f       	add	r26, r25
    67b8:	1a 0f       	add	r17, r26
    67ba:	f0 92 05 04 	sts	0x0405, r15
    67be:	e0 92 06 04 	sts	0x0406, r14
    67c2:	d0 92 07 04 	sts	0x0407, r13
    67c6:	c0 92 08 04 	sts	0x0408, r12
    67ca:	b0 92 09 04 	sts	0x0409, r11
    67ce:	a0 92 0a 04 	sts	0x040A, r10
    67d2:	90 92 0b 04 	sts	0x040B, r9
    67d6:	10 93 0c 04 	sts	0x040C, r17
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    67da:	2a a9       	ldd	r18, Y+50	; 0x32
    67dc:	3b a9       	ldd	r19, Y+51	; 0x33
    67de:	40 e0       	ldi	r20, 0x00	; 0
    67e0:	50 e0       	ldi	r21, 0x00	; 0
    67e2:	60 e0       	ldi	r22, 0x00	; 0
    67e4:	70 e0       	ldi	r23, 0x00	; 0
    67e6:	80 e0       	ldi	r24, 0x00	; 0
    67e8:	90 e0       	ldi	r25, 0x00	; 0
    67ea:	05 e0       	ldi	r16, 0x05	; 5
    67ec:	0e 94 16 47 	call	0x8e2c	; 0x8e2c <__ashldi3>
    67f0:	2f 0d       	add	r18, r15
    67f2:	e1 e0       	ldi	r30, 0x01	; 1
    67f4:	2f 15       	cp	r18, r15
    67f6:	08 f0       	brcs	.+2      	; 0x67fa <fat_open+0x5f2>
    67f8:	e0 e0       	ldi	r30, 0x00	; 0
    67fa:	3e 0d       	add	r19, r14
    67fc:	f1 e0       	ldi	r31, 0x01	; 1
    67fe:	3e 15       	cp	r19, r14
    6800:	08 f0       	brcs	.+2      	; 0x6804 <fat_open+0x5fc>
    6802:	f0 e0       	ldi	r31, 0x00	; 0
    6804:	be 2f       	mov	r27, r30
    6806:	b3 0f       	add	r27, r19
    6808:	e1 e0       	ldi	r30, 0x01	; 1
    680a:	b3 17       	cp	r27, r19
    680c:	08 f0       	brcs	.+2      	; 0x6810 <fat_open+0x608>
    680e:	e0 e0       	ldi	r30, 0x00	; 0
    6810:	fe 2b       	or	r31, r30
    6812:	4d 0d       	add	r20, r13
    6814:	e1 e0       	ldi	r30, 0x01	; 1
    6816:	4d 15       	cp	r20, r13
    6818:	08 f0       	brcs	.+2      	; 0x681c <fat_open+0x614>
    681a:	e0 e0       	ldi	r30, 0x00	; 0
    681c:	af 2f       	mov	r26, r31
    681e:	a4 0f       	add	r26, r20
    6820:	31 e0       	ldi	r19, 0x01	; 1
    6822:	a4 17       	cp	r26, r20
    6824:	08 f0       	brcs	.+2      	; 0x6828 <fat_open+0x620>
    6826:	30 e0       	ldi	r19, 0x00	; 0
    6828:	e3 2b       	or	r30, r19
    682a:	5c 0d       	add	r21, r12
    682c:	41 e0       	ldi	r20, 0x01	; 1
    682e:	5c 15       	cp	r21, r12
    6830:	08 f0       	brcs	.+2      	; 0x6834 <fat_open+0x62c>
    6832:	40 e0       	ldi	r20, 0x00	; 0
    6834:	fe 2f       	mov	r31, r30
    6836:	f5 0f       	add	r31, r21
    6838:	31 e0       	ldi	r19, 0x01	; 1
    683a:	f5 17       	cp	r31, r21
    683c:	08 f0       	brcs	.+2      	; 0x6840 <fat_open+0x638>
    683e:	30 e0       	ldi	r19, 0x00	; 0
    6840:	43 2b       	or	r20, r19
    6842:	6b 0d       	add	r22, r11
    6844:	51 e0       	ldi	r21, 0x01	; 1
    6846:	6b 15       	cp	r22, r11
    6848:	08 f0       	brcs	.+2      	; 0x684c <fat_open+0x644>
    684a:	50 e0       	ldi	r21, 0x00	; 0
    684c:	e4 2f       	mov	r30, r20
    684e:	e6 0f       	add	r30, r22
    6850:	31 e0       	ldi	r19, 0x01	; 1
    6852:	e6 17       	cp	r30, r22
    6854:	08 f0       	brcs	.+2      	; 0x6858 <fat_open+0x650>
    6856:	30 e0       	ldi	r19, 0x00	; 0
    6858:	53 2b       	or	r21, r19
    685a:	7a 0d       	add	r23, r10
    685c:	41 e0       	ldi	r20, 0x01	; 1
    685e:	7a 15       	cp	r23, r10
    6860:	08 f0       	brcs	.+2      	; 0x6864 <fat_open+0x65c>
    6862:	40 e0       	ldi	r20, 0x00	; 0
    6864:	65 2f       	mov	r22, r21
    6866:	67 0f       	add	r22, r23
    6868:	31 e0       	ldi	r19, 0x01	; 1
    686a:	67 17       	cp	r22, r23
    686c:	08 f0       	brcs	.+2      	; 0x6870 <fat_open+0x668>
    686e:	30 e0       	ldi	r19, 0x00	; 0
    6870:	43 2b       	or	r20, r19
    6872:	89 0d       	add	r24, r9
    6874:	31 e0       	ldi	r19, 0x01	; 1
    6876:	89 15       	cp	r24, r9
    6878:	08 f0       	brcs	.+2      	; 0x687c <fat_open+0x674>
    687a:	30 e0       	ldi	r19, 0x00	; 0
    687c:	54 2f       	mov	r21, r20
    687e:	58 0f       	add	r21, r24
    6880:	41 e0       	ldi	r20, 0x01	; 1
    6882:	58 17       	cp	r21, r24
    6884:	08 f0       	brcs	.+2      	; 0x6888 <fat_open+0x680>
    6886:	40 e0       	ldi	r20, 0x00	; 0
    6888:	34 2b       	or	r19, r20
    688a:	19 0f       	add	r17, r25
    688c:	31 0f       	add	r19, r17
    688e:	20 93 fd 03 	sts	0x03FD, r18
    6892:	b0 93 fe 03 	sts	0x03FE, r27
    6896:	a0 93 ff 03 	sts	0x03FF, r26
    689a:	f0 93 00 04 	sts	0x0400, r31
    689e:	e0 93 01 04 	sts	0x0401, r30
    68a2:	60 93 02 04 	sts	0x0402, r22
    68a6:	50 93 03 04 	sts	0x0403, r21
    68aa:	30 93 04 04 	sts	0x0404, r19
    68ae:	a1 c0       	rjmp	.+322    	; 0x69f2 <fat_open+0x7ea>
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
    68b0:	27 96       	adiw	r28, 0x07	; 7
    68b2:	af ac       	ldd	r10, Y+63	; 0x3f
    68b4:	27 97       	sbiw	r28, 0x07	; 7
    68b6:	2e a1       	ldd	r18, Y+38	; 0x26
    68b8:	3f a1       	ldd	r19, Y+39	; 0x27
    68ba:	40 e0       	ldi	r20, 0x00	; 0
    68bc:	50 e0       	ldi	r21, 0x00	; 0
    68be:	60 e0       	ldi	r22, 0x00	; 0
    68c0:	70 e0       	ldi	r23, 0x00	; 0
    68c2:	80 e0       	ldi	r24, 0x00	; 0
    68c4:	90 e0       	ldi	r25, 0x00	; 0
    68c6:	bb 24       	eor	r11, r11
    68c8:	cc 24       	eor	r12, r12
    68ca:	dd 24       	eor	r13, r13
    68cc:	ee 24       	eor	r14, r14
    68ce:	ff 24       	eor	r15, r15
    68d0:	00 e0       	ldi	r16, 0x00	; 0
    68d2:	10 e0       	ldi	r17, 0x00	; 0
    68d4:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    68d8:	ee a8       	ldd	r14, Y+54	; 0x36
    68da:	ff a8       	ldd	r15, Y+55	; 0x37
    68dc:	08 ad       	ldd	r16, Y+56	; 0x38
    68de:	19 ad       	ldd	r17, Y+57	; 0x39
    68e0:	17 01       	movw	r2, r14
    68e2:	28 01       	movw	r4, r16
    68e4:	57 01       	movw	r10, r14
    68e6:	62 01       	movw	r12, r4
    68e8:	ee 24       	eor	r14, r14
    68ea:	ff 24       	eor	r15, r15
    68ec:	00 e0       	ldi	r16, 0x00	; 0
    68ee:	10 e0       	ldi	r17, 0x00	; 0
    68f0:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    68f4:	a0 91 ed 03 	lds	r26, 0x03ED
    68f8:	e0 91 ee 03 	lds	r30, 0x03EE
    68fc:	10 91 ef 03 	lds	r17, 0x03EF
    6900:	00 91 f0 03 	lds	r16, 0x03F0
    6904:	f0 90 f1 03 	lds	r15, 0x03F1
    6908:	d0 90 f2 03 	lds	r13, 0x03F2
    690c:	c0 90 f3 03 	lds	r12, 0x03F3
    6910:	b0 91 f4 03 	lds	r27, 0x03F4
    6914:	a2 0f       	add	r26, r18
    6916:	f1 e0       	ldi	r31, 0x01	; 1
    6918:	a2 17       	cp	r26, r18
    691a:	08 f0       	brcs	.+2      	; 0x691e <fat_open+0x716>
    691c:	f0 e0       	ldi	r31, 0x00	; 0
    691e:	23 2f       	mov	r18, r19
    6920:	2e 0f       	add	r18, r30
    6922:	e1 e0       	ldi	r30, 0x01	; 1
    6924:	23 17       	cp	r18, r19
    6926:	08 f0       	brcs	.+2      	; 0x692a <fat_open+0x722>
    6928:	e0 e0       	ldi	r30, 0x00	; 0
    692a:	ef 2e       	mov	r14, r31
    692c:	e2 0e       	add	r14, r18
    692e:	31 e0       	ldi	r19, 0x01	; 1
    6930:	e2 16       	cp	r14, r18
    6932:	08 f0       	brcs	.+2      	; 0x6936 <fat_open+0x72e>
    6934:	30 e0       	ldi	r19, 0x00	; 0
    6936:	e3 2b       	or	r30, r19
    6938:	24 2f       	mov	r18, r20
    693a:	21 0f       	add	r18, r17
    693c:	f1 e0       	ldi	r31, 0x01	; 1
    693e:	24 17       	cp	r18, r20
    6940:	08 f0       	brcs	.+2      	; 0x6944 <fat_open+0x73c>
    6942:	f0 e0       	ldi	r31, 0x00	; 0
    6944:	1e 2f       	mov	r17, r30
    6946:	12 0f       	add	r17, r18
    6948:	31 e0       	ldi	r19, 0x01	; 1
    694a:	12 17       	cp	r17, r18
    694c:	08 f0       	brcs	.+2      	; 0x6950 <fat_open+0x748>
    694e:	30 e0       	ldi	r19, 0x00	; 0
    6950:	f3 2b       	or	r31, r19
    6952:	25 2f       	mov	r18, r21
    6954:	20 0f       	add	r18, r16
    6956:	41 e0       	ldi	r20, 0x01	; 1
    6958:	25 17       	cp	r18, r21
    695a:	08 f0       	brcs	.+2      	; 0x695e <fat_open+0x756>
    695c:	40 e0       	ldi	r20, 0x00	; 0
    695e:	ef 2f       	mov	r30, r31
    6960:	e2 0f       	add	r30, r18
    6962:	31 e0       	ldi	r19, 0x01	; 1
    6964:	e2 17       	cp	r30, r18
    6966:	08 f0       	brcs	.+2      	; 0x696a <fat_open+0x762>
    6968:	30 e0       	ldi	r19, 0x00	; 0
    696a:	43 2b       	or	r20, r19
    696c:	26 2f       	mov	r18, r22
    696e:	2f 0d       	add	r18, r15
    6970:	51 e0       	ldi	r21, 0x01	; 1
    6972:	26 17       	cp	r18, r22
    6974:	08 f0       	brcs	.+2      	; 0x6978 <fat_open+0x770>
    6976:	50 e0       	ldi	r21, 0x00	; 0
    6978:	64 2f       	mov	r22, r20
    697a:	62 0f       	add	r22, r18
    697c:	31 e0       	ldi	r19, 0x01	; 1
    697e:	62 17       	cp	r22, r18
    6980:	08 f0       	brcs	.+2      	; 0x6984 <fat_open+0x77c>
    6982:	30 e0       	ldi	r19, 0x00	; 0
    6984:	53 2b       	or	r21, r19
    6986:	27 2f       	mov	r18, r23
    6988:	2d 0d       	add	r18, r13
    698a:	41 e0       	ldi	r20, 0x01	; 1
    698c:	27 17       	cp	r18, r23
    698e:	08 f0       	brcs	.+2      	; 0x6992 <fat_open+0x78a>
    6990:	40 e0       	ldi	r20, 0x00	; 0
    6992:	52 0f       	add	r21, r18
    6994:	31 e0       	ldi	r19, 0x01	; 1
    6996:	52 17       	cp	r21, r18
    6998:	08 f0       	brcs	.+2      	; 0x699c <fat_open+0x794>
    699a:	30 e0       	ldi	r19, 0x00	; 0
    699c:	43 2b       	or	r20, r19
    699e:	28 2f       	mov	r18, r24
    69a0:	2c 0d       	add	r18, r12
    69a2:	31 e0       	ldi	r19, 0x01	; 1
    69a4:	28 17       	cp	r18, r24
    69a6:	08 f0       	brcs	.+2      	; 0x69aa <fat_open+0x7a2>
    69a8:	30 e0       	ldi	r19, 0x00	; 0
    69aa:	42 0f       	add	r20, r18
    69ac:	81 e0       	ldi	r24, 0x01	; 1
    69ae:	42 17       	cp	r20, r18
    69b0:	08 f0       	brcs	.+2      	; 0x69b4 <fat_open+0x7ac>
    69b2:	80 e0       	ldi	r24, 0x00	; 0
    69b4:	38 2b       	or	r19, r24
    69b6:	b9 0f       	add	r27, r25
    69b8:	3b 0f       	add	r19, r27
    69ba:	a0 93 fd 03 	sts	0x03FD, r26
    69be:	e0 92 fe 03 	sts	0x03FE, r14
    69c2:	10 93 ff 03 	sts	0x03FF, r17
    69c6:	e0 93 00 04 	sts	0x0400, r30
    69ca:	60 93 01 04 	sts	0x0401, r22
    69ce:	50 93 02 04 	sts	0x0402, r21
    69d2:	40 93 03 04 	sts	0x0403, r20
    69d6:	30 93 04 04 	sts	0x0404, r19
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
    69da:	0a ad       	ldd	r16, Y+58	; 0x3a
    69dc:	1b ad       	ldd	r17, Y+59	; 0x3b
    69de:	2c ad       	ldd	r18, Y+60	; 0x3c
    69e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    69e2:	00 93 0d 04 	sts	0x040D, r16
    69e6:	10 93 0e 04 	sts	0x040E, r17
    69ea:	20 93 0f 04 	sts	0x040F, r18
    69ee:	30 93 10 04 	sts	0x0410, r19
    69f2:	23 ee       	ldi	r18, 0xE3	; 227
    69f4:	33 e0       	ldi	r19, 0x03	; 3
    69f6:	02 c0       	rjmp	.+4      	; 0x69fc <fat_open+0x7f4>
    69f8:	20 e0       	ldi	r18, 0x00	; 0
    69fa:	30 e0       	ldi	r19, 0x00	; 0
#endif
        return 0;
    }
    
    return fs;
}
    69fc:	c9 01       	movw	r24, r18
    69fe:	c3 5b       	subi	r28, 0xB3	; 179
    6a00:	df 4f       	sbci	r29, 0xFF	; 255
    6a02:	0f b6       	in	r0, 0x3f	; 63
    6a04:	f8 94       	cli
    6a06:	de bf       	out	0x3e, r29	; 62
    6a08:	0f be       	out	0x3f, r0	; 63
    6a0a:	cd bf       	out	0x3d, r28	; 61
    6a0c:	cf 91       	pop	r28
    6a0e:	df 91       	pop	r29
    6a10:	1f 91       	pop	r17
    6a12:	0f 91       	pop	r16
    6a14:	ff 90       	pop	r15
    6a16:	ef 90       	pop	r14
    6a18:	df 90       	pop	r13
    6a1a:	cf 90       	pop	r12
    6a1c:	bf 90       	pop	r11
    6a1e:	af 90       	pop	r10
    6a20:	9f 90       	pop	r9
    6a22:	8f 90       	pop	r8
    6a24:	7f 90       	pop	r7
    6a26:	6f 90       	pop	r6
    6a28:	5f 90       	pop	r5
    6a2a:	4f 90       	pop	r4
    6a2c:	3f 90       	pop	r3
    6a2e:	2f 90       	pop	r2
    6a30:	08 95       	ret
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    6a32:	80 91 e3 03 	lds	r24, 0x03E3
    6a36:	90 91 e4 03 	lds	r25, 0x03E4
    6a3a:	89 2b       	or	r24, r25
    6a3c:	e9 f6       	brne	.-70     	; 0x69f8 <fat_open+0x7f0>
    6a3e:	13 cc       	rjmp	.-2010   	; 0x6266 <fat_open+0x5e>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    6a40:	10 92 e4 03 	sts	0x03E4, r1
    6a44:	10 92 e3 03 	sts	0x03E3, r1
    6a48:	d7 cf       	rjmp	.-82     	; 0x69f8 <fat_open+0x7f0>

00006a4a <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(const struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    6a4a:	2f 92       	push	r2
    6a4c:	3f 92       	push	r3
    6a4e:	4f 92       	push	r4
    6a50:	5f 92       	push	r5
    6a52:	6f 92       	push	r6
    6a54:	7f 92       	push	r7
    6a56:	8f 92       	push	r8
    6a58:	9f 92       	push	r9
    6a5a:	af 92       	push	r10
    6a5c:	bf 92       	push	r11
    6a5e:	cf 92       	push	r12
    6a60:	df 92       	push	r13
    6a62:	ef 92       	push	r14
    6a64:	ff 92       	push	r15
    6a66:	0f 93       	push	r16
    6a68:	1f 93       	push	r17
    6a6a:	df 93       	push	r29
    6a6c:	cf 93       	push	r28
    6a6e:	cd b7       	in	r28, 0x3d	; 61
    6a70:	de b7       	in	r29, 0x3e	; 62
    6a72:	69 97       	sbiw	r28, 0x19	; 25
    6a74:	0f b6       	in	r0, 0x3f	; 63
    6a76:	f8 94       	cli
    6a78:	de bf       	out	0x3e, r29	; 62
    6a7a:	0f be       	out	0x3f, r0	; 63
    6a7c:	cd bf       	out	0x3d, r28	; 61
    6a7e:	9d 87       	std	Y+13, r25	; 0x0d
    6a80:	8c 87       	std	Y+12, r24	; 0x0c
    6a82:	9b 01       	movw	r18, r22
    if(!fs || !dir_entry)
    6a84:	89 2b       	or	r24, r25
    6a86:	09 f4       	brne	.+2      	; 0x6a8a <fat_find_offset_for_dir_entry+0x40>
    6a88:	e2 c2       	rjmp	.+1476   	; 0x704e <fat_find_offset_for_dir_entry+0x604>
    6a8a:	41 15       	cp	r20, r1
    6a8c:	51 05       	cpc	r21, r1
    6a8e:	09 f4       	brne	.+2      	; 0x6a92 <fat_find_offset_for_dir_entry+0x48>
    6a90:	de c2       	rjmp	.+1468   	; 0x704e <fat_find_offset_for_dir_entry+0x604>
        return 0;

    /* search for a place where to write the directory entry to disk */
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    6a92:	da 01       	movw	r26, r20
    6a94:	0d 90       	ld	r0, X+
    6a96:	00 20       	and	r0, r0
    6a98:	e9 f7       	brne	.-6      	; 0x6a94 <fat_find_offset_for_dir_entry+0x4a>
    6a9a:	a4 1b       	sub	r26, r20
    6a9c:	b5 0b       	sbc	r27, r21
    6a9e:	cd 01       	movw	r24, r26
    6aa0:	0b 96       	adiw	r24, 0x0b	; 11
    6aa2:	6d e0       	ldi	r22, 0x0D	; 13
    6aa4:	70 e0       	ldi	r23, 0x00	; 0
    6aa6:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <__udivmodhi4>
    6aaa:	46 2f       	mov	r20, r22
    6aac:	4f 5f       	subi	r20, 0xFF	; 255
    6aae:	4b 87       	std	Y+11, r20	; 0x0b
    uint8_t free_dir_entries_found = 0;
    cluster_t cluster_num = parent->dir_entry.cluster;
    6ab0:	d9 01       	movw	r26, r18
    6ab2:	93 96       	adiw	r26, 0x23	; 35
    6ab4:	8d 91       	ld	r24, X+
    6ab6:	9d 91       	ld	r25, X+
    6ab8:	0d 90       	ld	r0, X+
    6aba:	bc 91       	ld	r27, X
    6abc:	a0 2d       	mov	r26, r0
    6abe:	8e 83       	std	Y+6, r24	; 0x06
    6ac0:	9f 83       	std	Y+7, r25	; 0x07
    6ac2:	a8 87       	std	Y+8, r26	; 0x08
    6ac4:	b9 87       	std	Y+9, r27	; 0x09
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    6ac6:	ac 85       	ldd	r26, Y+12	; 0x0c
    6ac8:	bd 85       	ldd	r27, Y+13	; 0x0d
    6aca:	ed 91       	ld	r30, X+
    6acc:	fc 91       	ld	r31, X
    6ace:	80 85       	ldd	r24, Z+8	; 0x08
#endif

    if(cluster_num == 0)
    6ad0:	2e 81       	ldd	r18, Y+6	; 0x06
    6ad2:	3f 81       	ldd	r19, Y+7	; 0x07
    6ad4:	48 85       	ldd	r20, Y+8	; 0x08
    6ad6:	59 85       	ldd	r21, Y+9	; 0x09
    6ad8:	21 15       	cp	r18, r1
    6ada:	31 05       	cpc	r19, r1
    6adc:	41 05       	cpc	r20, r1
    6ade:	51 05       	cpc	r21, r1
    6ae0:	71 f4       	brne	.+28     	; 0x6afe <fat_find_offset_for_dir_entry+0xb4>
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    6ae2:	8b 30       	cpi	r24, 0x0B	; 11
    6ae4:	29 f5       	brne	.+74     	; 0x6b30 <fat_find_offset_for_dir_entry+0xe6>
        {
            cluster_num = fs->header.root_dir_cluster;
    6ae6:	ac 85       	ldd	r26, Y+12	; 0x0c
    6ae8:	bd 85       	ldd	r27, Y+13	; 0x0d
    6aea:	9a 96       	adiw	r26, 0x2a	; 42
    6aec:	8d 91       	ld	r24, X+
    6aee:	9d 91       	ld	r25, X+
    6af0:	0d 90       	ld	r0, X+
    6af2:	bc 91       	ld	r27, X
    6af4:	a0 2d       	mov	r26, r0
    6af6:	8e 83       	std	Y+6, r24	; 0x06
    6af8:	9f 83       	std	Y+7, r25	; 0x07
    6afa:	a8 87       	std	Y+8, r26	; 0x08
    6afc:	b9 87       	std	Y+9, r27	; 0x09
    6afe:	1e 8a       	std	Y+22, r1	; 0x16
    6b00:	1f 8a       	std	Y+23, r1	; 0x17
    6b02:	18 8e       	std	Y+24, r1	; 0x18
    6b04:	19 8e       	std	Y+25, r1	; 0x19
    6b06:	33 24       	eor	r3, r3
    6b08:	44 24       	eor	r4, r4
    6b0a:	55 24       	eor	r5, r5
    6b0c:	66 24       	eor	r6, r6
    6b0e:	dd 24       	eor	r13, r13
    6b10:	cc 24       	eor	r12, r12
    6b12:	bb 24       	eor	r11, r11
    6b14:	aa 24       	eor	r10, r10
    6b16:	22 24       	eor	r2, r2
    6b18:	99 24       	eor	r9, r9
    6b1a:	88 24       	eor	r8, r8
    6b1c:	77 24       	eor	r7, r7
    6b1e:	1e 86       	std	Y+14, r1	; 0x0e
    6b20:	1f 86       	std	Y+15, r1	; 0x0f
    6b22:	18 8a       	std	Y+16, r1	; 0x10
    6b24:	19 8a       	std	Y+17, r1	; 0x11
    6b26:	1a 8a       	std	Y+18, r1	; 0x12
    6b28:	1b 8a       	std	Y+19, r1	; 0x13
    6b2a:	1c 8a       	std	Y+20, r1	; 0x14
    6b2c:	1d 8a       	std	Y+21, r1	; 0x15
    6b2e:	34 c0       	rjmp	.+104    	; 0x6b98 <fat_find_offset_for_dir_entry+0x14e>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
    6b30:	ec 85       	ldd	r30, Y+12	; 0x0c
    6b32:	fd 85       	ldd	r31, Y+13	; 0x0d
    6b34:	d2 a0       	ldd	r13, Z+34	; 0x22
    6b36:	c3 a0       	ldd	r12, Z+35	; 0x23
    6b38:	b4 a0       	ldd	r11, Z+36	; 0x24
    6b3a:	a5 a0       	ldd	r10, Z+37	; 0x25
    6b3c:	26 a0       	ldd	r2, Z+38	; 0x26
    6b3e:	97 a0       	ldd	r9, Z+39	; 0x27
    6b40:	80 a4       	ldd	r8, Z+40	; 0x28
    6b42:	71 a4       	ldd	r7, Z+41	; 0x29
            offset_to = fs->header.cluster_zero_offset;
    6b44:	f2 8d       	ldd	r31, Z+26	; 0x1a
    6b46:	fe 87       	std	Y+14, r31	; 0x0e
    6b48:	ac 85       	ldd	r26, Y+12	; 0x0c
    6b4a:	bd 85       	ldd	r27, Y+13	; 0x0d
    6b4c:	5b 96       	adiw	r26, 0x1b	; 27
    6b4e:	bc 91       	ld	r27, X
    6b50:	bf 87       	std	Y+15, r27	; 0x0f
    6b52:	ec 85       	ldd	r30, Y+12	; 0x0c
    6b54:	fd 85       	ldd	r31, Y+13	; 0x0d
    6b56:	f4 8d       	ldd	r31, Z+28	; 0x1c
    6b58:	f8 8b       	std	Y+16, r31	; 0x10
    6b5a:	ac 85       	ldd	r26, Y+12	; 0x0c
    6b5c:	bd 85       	ldd	r27, Y+13	; 0x0d
    6b5e:	5d 96       	adiw	r26, 0x1d	; 29
    6b60:	bc 91       	ld	r27, X
    6b62:	b9 8b       	std	Y+17, r27	; 0x11
    6b64:	ec 85       	ldd	r30, Y+12	; 0x0c
    6b66:	fd 85       	ldd	r31, Y+13	; 0x0d
    6b68:	f6 8d       	ldd	r31, Z+30	; 0x1e
    6b6a:	fa 8b       	std	Y+18, r31	; 0x12
    6b6c:	ac 85       	ldd	r26, Y+12	; 0x0c
    6b6e:	bd 85       	ldd	r27, Y+13	; 0x0d
    6b70:	5f 96       	adiw	r26, 0x1f	; 31
    6b72:	bc 91       	ld	r27, X
    6b74:	bb 8b       	std	Y+19, r27	; 0x13
    6b76:	ec 85       	ldd	r30, Y+12	; 0x0c
    6b78:	fd 85       	ldd	r31, Y+13	; 0x0d
    6b7a:	f0 a1       	ldd	r31, Z+32	; 0x20
    6b7c:	fc 8b       	std	Y+20, r31	; 0x14
    6b7e:	ac 85       	ldd	r26, Y+12	; 0x0c
    6b80:	bd 85       	ldd	r27, Y+13	; 0x0d
    6b82:	91 96       	adiw	r26, 0x21	; 33
    6b84:	bc 91       	ld	r27, X
    6b86:	bd 8b       	std	Y+21, r27	; 0x15
    6b88:	de 8a       	std	Y+22, r13	; 0x16
    6b8a:	cf 8a       	std	Y+23, r12	; 0x17
    6b8c:	b8 8e       	std	Y+24, r11	; 0x18
    6b8e:	a9 8e       	std	Y+25, r10	; 0x19
    6b90:	32 2c       	mov	r3, r2
    6b92:	49 2c       	mov	r4, r9
    6b94:	58 2c       	mov	r5, r8
    6b96:	67 2c       	mov	r6, r7
    6b98:	1a 86       	std	Y+10, r1	; 0x0a
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    6b9a:	ee 85       	ldd	r30, Y+14	; 0x0e
    6b9c:	de 16       	cp	r13, r30
    6b9e:	09 f0       	breq	.+2      	; 0x6ba2 <fat_find_offset_for_dir_entry+0x158>
    6ba0:	d1 c1       	rjmp	.+930    	; 0x6f44 <fat_find_offset_for_dir_entry+0x4fa>
    6ba2:	ff 85       	ldd	r31, Y+15	; 0x0f
    6ba4:	cf 16       	cp	r12, r31
    6ba6:	09 f0       	breq	.+2      	; 0x6baa <fat_find_offset_for_dir_entry+0x160>
    6ba8:	cd c1       	rjmp	.+922    	; 0x6f44 <fat_find_offset_for_dir_entry+0x4fa>
    6baa:	28 89       	ldd	r18, Y+16	; 0x10
    6bac:	b2 16       	cp	r11, r18
    6bae:	09 f0       	breq	.+2      	; 0x6bb2 <fat_find_offset_for_dir_entry+0x168>
    6bb0:	c9 c1       	rjmp	.+914    	; 0x6f44 <fat_find_offset_for_dir_entry+0x4fa>
    6bb2:	39 89       	ldd	r19, Y+17	; 0x11
    6bb4:	a3 16       	cp	r10, r19
    6bb6:	09 f0       	breq	.+2      	; 0x6bba <fat_find_offset_for_dir_entry+0x170>
    6bb8:	c5 c1       	rjmp	.+906    	; 0x6f44 <fat_find_offset_for_dir_entry+0x4fa>
    6bba:	4a 89       	ldd	r20, Y+18	; 0x12
    6bbc:	24 16       	cp	r2, r20
    6bbe:	09 f0       	breq	.+2      	; 0x6bc2 <fat_find_offset_for_dir_entry+0x178>
    6bc0:	c1 c1       	rjmp	.+898    	; 0x6f44 <fat_find_offset_for_dir_entry+0x4fa>
    6bc2:	5b 89       	ldd	r21, Y+19	; 0x13
    6bc4:	95 16       	cp	r9, r21
    6bc6:	09 f0       	breq	.+2      	; 0x6bca <fat_find_offset_for_dir_entry+0x180>
    6bc8:	bd c1       	rjmp	.+890    	; 0x6f44 <fat_find_offset_for_dir_entry+0x4fa>
    6bca:	8c 89       	ldd	r24, Y+20	; 0x14
    6bcc:	88 16       	cp	r8, r24
    6bce:	09 f0       	breq	.+2      	; 0x6bd2 <fat_find_offset_for_dir_entry+0x188>
    6bd0:	b9 c1       	rjmp	.+882    	; 0x6f44 <fat_find_offset_for_dir_entry+0x4fa>
    6bd2:	9d 89       	ldd	r25, Y+21	; 0x15
    6bd4:	79 16       	cp	r7, r25
    6bd6:	09 f0       	breq	.+2      	; 0x6bda <fat_find_offset_for_dir_entry+0x190>
    6bd8:	b5 c1       	rjmp	.+874    	; 0x6f44 <fat_find_offset_for_dir_entry+0x4fa>
        {
            if(cluster_num == 0)
    6bda:	2e 81       	ldd	r18, Y+6	; 0x06
    6bdc:	3f 81       	ldd	r19, Y+7	; 0x07
    6bde:	48 85       	ldd	r20, Y+8	; 0x08
    6be0:	59 85       	ldd	r21, Y+9	; 0x09
    6be2:	21 15       	cp	r18, r1
    6be4:	31 05       	cpc	r19, r1
    6be6:	41 05       	cpc	r20, r1
    6be8:	51 05       	cpc	r21, r1
    6bea:	09 f4       	brne	.+2      	; 0x6bee <fat_find_offset_for_dir_entry+0x1a4>
    6bec:	30 c2       	rjmp	.+1120   	; 0x704e <fat_find_offset_for_dir_entry+0x604>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    6bee:	8d 2d       	mov	r24, r13
    6bf0:	8c 29       	or	r24, r12
    6bf2:	8b 29       	or	r24, r11
    6bf4:	8a 29       	or	r24, r10
    6bf6:	82 29       	or	r24, r2
    6bf8:	89 29       	or	r24, r9
    6bfa:	88 29       	or	r24, r8
    6bfc:	87 29       	or	r24, r7
    6bfe:	09 f4       	brne	.+2      	; 0x6c02 <fat_find_offset_for_dir_entry+0x1b8>
    6c00:	ba c0       	rjmp	.+372    	; 0x6d76 <fat_find_offset_for_dir_entry+0x32c>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    6c02:	8c 85       	ldd	r24, Y+12	; 0x0c
    6c04:	9d 85       	ldd	r25, Y+13	; 0x0d
    6c06:	ba 01       	movw	r22, r20
    6c08:	a9 01       	movw	r20, r18
    6c0a:	0e 94 4b 21 	call	0x4296	; 0x4296 <fat_get_next_cluster>
                if(!cluster_next)
    6c0e:	61 15       	cp	r22, r1
    6c10:	71 05       	cpc	r23, r1
    6c12:	81 05       	cpc	r24, r1
    6c14:	91 05       	cpc	r25, r1
    6c16:	09 f0       	breq	.+2      	; 0x6c1a <fat_find_offset_for_dir_entry+0x1d0>
    6c18:	aa c0       	rjmp	.+340    	; 0x6d6e <fat_find_offset_for_dir_entry+0x324>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    6c1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    6c1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    6c1e:	4e 81       	ldd	r20, Y+6	; 0x06
    6c20:	5f 81       	ldd	r21, Y+7	; 0x07
    6c22:	68 85       	ldd	r22, Y+8	; 0x08
    6c24:	79 85       	ldd	r23, Y+9	; 0x09
    6c26:	01 e0       	ldi	r16, 0x01	; 1
    6c28:	10 e0       	ldi	r17, 0x00	; 0
    6c2a:	20 e0       	ldi	r18, 0x00	; 0
    6c2c:	30 e0       	ldi	r19, 0x00	; 0
    6c2e:	0e 94 25 24 	call	0x484a	; 0x484a <fat_append_clusters>
    6c32:	6a 83       	std	Y+2, r22	; 0x02
    6c34:	7b 83       	std	Y+3, r23	; 0x03
    6c36:	8c 83       	std	Y+4, r24	; 0x04
    6c38:	9d 83       	std	Y+5, r25	; 0x05
                    if(!cluster_next)
    6c3a:	61 15       	cp	r22, r1
    6c3c:	71 05       	cpc	r23, r1
    6c3e:	81 05       	cpc	r24, r1
    6c40:	91 05       	cpc	r25, r1
    6c42:	09 f4       	brne	.+2      	; 0x6c46 <fat_find_offset_for_dir_entry+0x1fc>
    6c44:	04 c2       	rjmp	.+1032   	; 0x704e <fat_find_offset_for_dir_entry+0x604>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    6c46:	dc 01       	movw	r26, r24
    6c48:	cb 01       	movw	r24, r22
    6c4a:	02 97       	sbiw	r24, 0x02	; 2
    6c4c:	a1 09       	sbc	r26, r1
    6c4e:	b1 09       	sbc	r27, r1
    6c50:	5c 01       	movw	r10, r24
    6c52:	6d 01       	movw	r12, r26
    6c54:	02 96       	adiw	r24, 0x02	; 2
    6c56:	a1 1d       	adc	r26, r1
    6c58:	b1 1d       	adc	r27, r1
    6c5a:	8a 83       	std	Y+2, r24	; 0x02
    6c5c:	9b 83       	std	Y+3, r25	; 0x03
    6c5e:	ac 83       	std	Y+4, r26	; 0x04
    6c60:	bd 83       	std	Y+5, r27	; 0x05
    6c62:	ac 85       	ldd	r26, Y+12	; 0x0c
    6c64:	bd 85       	ldd	r27, Y+13	; 0x0d
    6c66:	58 96       	adiw	r26, 0x18	; 24
    6c68:	2d 90       	ld	r2, X+
    6c6a:	3c 90       	ld	r3, X
    6c6c:	59 97       	sbiw	r26, 0x19	; 25
    6c6e:	95 01       	movw	r18, r10
    6c70:	a6 01       	movw	r20, r12
    6c72:	60 e0       	ldi	r22, 0x00	; 0
    6c74:	70 e0       	ldi	r23, 0x00	; 0
    6c76:	80 e0       	ldi	r24, 0x00	; 0
    6c78:	90 e0       	ldi	r25, 0x00	; 0
    6c7a:	51 01       	movw	r10, r2
    6c7c:	cc 24       	eor	r12, r12
    6c7e:	dd 24       	eor	r13, r13
    6c80:	ee 24       	eor	r14, r14
    6c82:	ff 24       	eor	r15, r15
    6c84:	00 e0       	ldi	r16, 0x00	; 0
    6c86:	10 e0       	ldi	r17, 0x00	; 0
    6c88:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    6c8c:	c9 2e       	mov	r12, r25
    6c8e:	ec 85       	ldd	r30, Y+12	; 0x0c
    6c90:	fd 85       	ldd	r31, Y+13	; 0x0d
    6c92:	b2 8d       	ldd	r27, Z+26	; 0x1a
    6c94:	b3 8c       	ldd	r11, Z+27	; 0x1b
    6c96:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6c98:	05 8d       	ldd	r16, Z+29	; 0x1d
    6c9a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    6c9c:	e7 8c       	ldd	r14, Z+31	; 0x1f
    6c9e:	d0 a0       	ldd	r13, Z+32	; 0x20
    6ca0:	11 a1       	ldd	r17, Z+33	; 0x21
    6ca2:	b2 0f       	add	r27, r18
    6ca4:	e1 e0       	ldi	r30, 0x01	; 1
    6ca6:	b2 17       	cp	r27, r18
    6ca8:	08 f0       	brcs	.+2      	; 0x6cac <fat_find_offset_for_dir_entry+0x262>
    6caa:	e0 e0       	ldi	r30, 0x00	; 0
    6cac:	23 2f       	mov	r18, r19
    6cae:	2b 0d       	add	r18, r11
    6cb0:	f1 e0       	ldi	r31, 0x01	; 1
    6cb2:	23 17       	cp	r18, r19
    6cb4:	08 f0       	brcs	.+2      	; 0x6cb8 <fat_find_offset_for_dir_entry+0x26e>
    6cb6:	f0 e0       	ldi	r31, 0x00	; 0
    6cb8:	3e 2f       	mov	r19, r30
    6cba:	32 0f       	add	r19, r18
    6cbc:	e1 e0       	ldi	r30, 0x01	; 1
    6cbe:	32 17       	cp	r19, r18
    6cc0:	08 f0       	brcs	.+2      	; 0x6cc4 <fat_find_offset_for_dir_entry+0x27a>
    6cc2:	e0 e0       	ldi	r30, 0x00	; 0
    6cc4:	fe 2b       	or	r31, r30
    6cc6:	24 2f       	mov	r18, r20
    6cc8:	2a 0f       	add	r18, r26
    6cca:	a1 e0       	ldi	r26, 0x01	; 1
    6ccc:	24 17       	cp	r18, r20
    6cce:	08 f0       	brcs	.+2      	; 0x6cd2 <fat_find_offset_for_dir_entry+0x288>
    6cd0:	a0 e0       	ldi	r26, 0x00	; 0
    6cd2:	4f 2f       	mov	r20, r31
    6cd4:	42 0f       	add	r20, r18
    6cd6:	e1 e0       	ldi	r30, 0x01	; 1
    6cd8:	42 17       	cp	r20, r18
    6cda:	08 f0       	brcs	.+2      	; 0x6cde <fat_find_offset_for_dir_entry+0x294>
    6cdc:	e0 e0       	ldi	r30, 0x00	; 0
    6cde:	ae 2b       	or	r26, r30
    6ce0:	25 2f       	mov	r18, r21
    6ce2:	20 0f       	add	r18, r16
    6ce4:	f1 e0       	ldi	r31, 0x01	; 1
    6ce6:	25 17       	cp	r18, r21
    6ce8:	08 f0       	brcs	.+2      	; 0x6cec <fat_find_offset_for_dir_entry+0x2a2>
    6cea:	f0 e0       	ldi	r31, 0x00	; 0
    6cec:	5a 2f       	mov	r21, r26
    6cee:	52 0f       	add	r21, r18
    6cf0:	e1 e0       	ldi	r30, 0x01	; 1
    6cf2:	52 17       	cp	r21, r18
    6cf4:	08 f0       	brcs	.+2      	; 0x6cf8 <fat_find_offset_for_dir_entry+0x2ae>
    6cf6:	e0 e0       	ldi	r30, 0x00	; 0
    6cf8:	fe 2b       	or	r31, r30
    6cfa:	26 2f       	mov	r18, r22
    6cfc:	2f 0d       	add	r18, r15
    6cfe:	a1 e0       	ldi	r26, 0x01	; 1
    6d00:	26 17       	cp	r18, r22
    6d02:	08 f0       	brcs	.+2      	; 0x6d06 <fat_find_offset_for_dir_entry+0x2bc>
    6d04:	a0 e0       	ldi	r26, 0x00	; 0
    6d06:	6f 2f       	mov	r22, r31
    6d08:	62 0f       	add	r22, r18
    6d0a:	e1 e0       	ldi	r30, 0x01	; 1
    6d0c:	62 17       	cp	r22, r18
    6d0e:	08 f0       	brcs	.+2      	; 0x6d12 <fat_find_offset_for_dir_entry+0x2c8>
    6d10:	e0 e0       	ldi	r30, 0x00	; 0
    6d12:	ae 2b       	or	r26, r30
    6d14:	27 2f       	mov	r18, r23
    6d16:	2e 0d       	add	r18, r14
    6d18:	f1 e0       	ldi	r31, 0x01	; 1
    6d1a:	27 17       	cp	r18, r23
    6d1c:	08 f0       	brcs	.+2      	; 0x6d20 <fat_find_offset_for_dir_entry+0x2d6>
    6d1e:	f0 e0       	ldi	r31, 0x00	; 0
    6d20:	7a 2f       	mov	r23, r26
    6d22:	72 0f       	add	r23, r18
    6d24:	e1 e0       	ldi	r30, 0x01	; 1
    6d26:	72 17       	cp	r23, r18
    6d28:	08 f0       	brcs	.+2      	; 0x6d2c <fat_find_offset_for_dir_entry+0x2e2>
    6d2a:	e0 e0       	ldi	r30, 0x00	; 0
    6d2c:	fe 2b       	or	r31, r30
    6d2e:	28 2f       	mov	r18, r24
    6d30:	2d 0d       	add	r18, r13
    6d32:	e1 e0       	ldi	r30, 0x01	; 1
    6d34:	28 17       	cp	r18, r24
    6d36:	08 f0       	brcs	.+2      	; 0x6d3a <fat_find_offset_for_dir_entry+0x2f0>
    6d38:	e0 e0       	ldi	r30, 0x00	; 0
    6d3a:	8f 2f       	mov	r24, r31
    6d3c:	82 0f       	add	r24, r18
    6d3e:	91 e0       	ldi	r25, 0x01	; 1
    6d40:	82 17       	cp	r24, r18
    6d42:	08 f0       	brcs	.+2      	; 0x6d46 <fat_find_offset_for_dir_entry+0x2fc>
    6d44:	90 e0       	ldi	r25, 0x00	; 0
    6d46:	6e 2e       	mov	r6, r30
    6d48:	69 2a       	or	r6, r25
    6d4a:	1c 0d       	add	r17, r12
    6d4c:	be 8b       	std	Y+22, r27	; 0x16
    6d4e:	3f 8b       	std	Y+23, r19	; 0x17
    6d50:	48 8f       	std	Y+24, r20	; 0x18
    6d52:	59 8f       	std	Y+25, r21	; 0x19
    6d54:	36 2e       	mov	r3, r22
    6d56:	47 2e       	mov	r4, r23
    6d58:	58 2e       	mov	r5, r24
    6d5a:	61 0e       	add	r6, r17
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    6d5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    6d5e:	9d 85       	ldd	r25, Y+13	; 0x0d
    6d60:	4a 81       	ldd	r20, Y+2	; 0x02
    6d62:	5b 81       	ldd	r21, Y+3	; 0x03
    6d64:	6c 81       	ldd	r22, Y+4	; 0x04
    6d66:	7d 81       	ldd	r23, Y+5	; 0x05
    6d68:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <fat_clear_cluster>
    6d6c:	78 c1       	rjmp	.+752    	; 0x705e <fat_find_offset_for_dir_entry+0x614>

                    break;
    6d6e:	6e 83       	std	Y+6, r22	; 0x06
    6d70:	7f 83       	std	Y+7, r23	; 0x07
    6d72:	88 87       	std	Y+8, r24	; 0x08
    6d74:	99 87       	std	Y+9, r25	; 0x09
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    6d76:	2e 81       	ldd	r18, Y+6	; 0x06
    6d78:	3f 81       	ldd	r19, Y+7	; 0x07
    6d7a:	48 85       	ldd	r20, Y+8	; 0x08
    6d7c:	59 85       	ldd	r21, Y+9	; 0x09
    6d7e:	22 30       	cpi	r18, 0x02	; 2
    6d80:	31 05       	cpc	r19, r1
    6d82:	41 05       	cpc	r20, r1
    6d84:	51 05       	cpc	r21, r1
    6d86:	48 f4       	brcc	.+18     	; 0x6d9a <fat_find_offset_for_dir_entry+0x350>
    6d88:	dd 24       	eor	r13, r13
    6d8a:	cc 24       	eor	r12, r12
    6d8c:	bb 24       	eor	r11, r11
    6d8e:	aa 24       	eor	r10, r10
    6d90:	22 24       	eor	r2, r2
    6d92:	99 24       	eor	r9, r9
    6d94:	88 24       	eor	r8, r8
    6d96:	77 24       	eor	r7, r7
    6d98:	8d c0       	rjmp	.+282    	; 0x6eb4 <fat_find_offset_for_dir_entry+0x46a>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    6d9a:	8e 81       	ldd	r24, Y+6	; 0x06
    6d9c:	9f 81       	ldd	r25, Y+7	; 0x07
    6d9e:	a8 85       	ldd	r26, Y+8	; 0x08
    6da0:	b9 85       	ldd	r27, Y+9	; 0x09
    6da2:	02 97       	sbiw	r24, 0x02	; 2
    6da4:	a1 09       	sbc	r26, r1
    6da6:	b1 09       	sbc	r27, r1
    6da8:	5c 01       	movw	r10, r24
    6daa:	6d 01       	movw	r12, r26
    6dac:	02 96       	adiw	r24, 0x02	; 2
    6dae:	a1 1d       	adc	r26, r1
    6db0:	b1 1d       	adc	r27, r1
    6db2:	8e 83       	std	Y+6, r24	; 0x06
    6db4:	9f 83       	std	Y+7, r25	; 0x07
    6db6:	a8 87       	std	Y+8, r26	; 0x08
    6db8:	b9 87       	std	Y+9, r27	; 0x09
    6dba:	ac 85       	ldd	r26, Y+12	; 0x0c
    6dbc:	bd 85       	ldd	r27, Y+13	; 0x0d
    6dbe:	58 96       	adiw	r26, 0x18	; 24
    6dc0:	2d 90       	ld	r2, X+
    6dc2:	3c 90       	ld	r3, X
    6dc4:	59 97       	sbiw	r26, 0x19	; 25
    6dc6:	95 01       	movw	r18, r10
    6dc8:	a6 01       	movw	r20, r12
    6dca:	60 e0       	ldi	r22, 0x00	; 0
    6dcc:	70 e0       	ldi	r23, 0x00	; 0
    6dce:	80 e0       	ldi	r24, 0x00	; 0
    6dd0:	90 e0       	ldi	r25, 0x00	; 0
    6dd2:	51 01       	movw	r10, r2
    6dd4:	cc 24       	eor	r12, r12
    6dd6:	dd 24       	eor	r13, r13
    6dd8:	ee 24       	eor	r14, r14
    6dda:	ff 24       	eor	r15, r15
    6ddc:	00 e0       	ldi	r16, 0x00	; 0
    6dde:	10 e0       	ldi	r17, 0x00	; 0
    6de0:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    6de4:	c9 2e       	mov	r12, r25
    6de6:	ec 85       	ldd	r30, Y+12	; 0x0c
    6de8:	fd 85       	ldd	r31, Y+13	; 0x0d
    6dea:	b2 8d       	ldd	r27, Z+26	; 0x1a
    6dec:	b3 8c       	ldd	r11, Z+27	; 0x1b
    6dee:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6df0:	05 8d       	ldd	r16, Z+29	; 0x1d
    6df2:	f6 8c       	ldd	r15, Z+30	; 0x1e
    6df4:	e7 8c       	ldd	r14, Z+31	; 0x1f
    6df6:	d0 a0       	ldd	r13, Z+32	; 0x20
    6df8:	11 a1       	ldd	r17, Z+33	; 0x21
    6dfa:	b2 0f       	add	r27, r18
    6dfc:	e1 e0       	ldi	r30, 0x01	; 1
    6dfe:	b2 17       	cp	r27, r18
    6e00:	08 f0       	brcs	.+2      	; 0x6e04 <fat_find_offset_for_dir_entry+0x3ba>
    6e02:	e0 e0       	ldi	r30, 0x00	; 0
    6e04:	23 2f       	mov	r18, r19
    6e06:	2b 0d       	add	r18, r11
    6e08:	f1 e0       	ldi	r31, 0x01	; 1
    6e0a:	23 17       	cp	r18, r19
    6e0c:	08 f0       	brcs	.+2      	; 0x6e10 <fat_find_offset_for_dir_entry+0x3c6>
    6e0e:	f0 e0       	ldi	r31, 0x00	; 0
    6e10:	3e 2f       	mov	r19, r30
    6e12:	32 0f       	add	r19, r18
    6e14:	e1 e0       	ldi	r30, 0x01	; 1
    6e16:	32 17       	cp	r19, r18
    6e18:	08 f0       	brcs	.+2      	; 0x6e1c <fat_find_offset_for_dir_entry+0x3d2>
    6e1a:	e0 e0       	ldi	r30, 0x00	; 0
    6e1c:	fe 2b       	or	r31, r30
    6e1e:	24 2f       	mov	r18, r20
    6e20:	2a 0f       	add	r18, r26
    6e22:	a1 e0       	ldi	r26, 0x01	; 1
    6e24:	24 17       	cp	r18, r20
    6e26:	08 f0       	brcs	.+2      	; 0x6e2a <fat_find_offset_for_dir_entry+0x3e0>
    6e28:	a0 e0       	ldi	r26, 0x00	; 0
    6e2a:	4f 2f       	mov	r20, r31
    6e2c:	42 0f       	add	r20, r18
    6e2e:	e1 e0       	ldi	r30, 0x01	; 1
    6e30:	42 17       	cp	r20, r18
    6e32:	08 f0       	brcs	.+2      	; 0x6e36 <fat_find_offset_for_dir_entry+0x3ec>
    6e34:	e0 e0       	ldi	r30, 0x00	; 0
    6e36:	ae 2b       	or	r26, r30
    6e38:	25 2f       	mov	r18, r21
    6e3a:	20 0f       	add	r18, r16
    6e3c:	f1 e0       	ldi	r31, 0x01	; 1
    6e3e:	25 17       	cp	r18, r21
    6e40:	08 f0       	brcs	.+2      	; 0x6e44 <fat_find_offset_for_dir_entry+0x3fa>
    6e42:	f0 e0       	ldi	r31, 0x00	; 0
    6e44:	5a 2f       	mov	r21, r26
    6e46:	52 0f       	add	r21, r18
    6e48:	e1 e0       	ldi	r30, 0x01	; 1
    6e4a:	52 17       	cp	r21, r18
    6e4c:	08 f0       	brcs	.+2      	; 0x6e50 <fat_find_offset_for_dir_entry+0x406>
    6e4e:	e0 e0       	ldi	r30, 0x00	; 0
    6e50:	fe 2b       	or	r31, r30
    6e52:	26 2f       	mov	r18, r22
    6e54:	2f 0d       	add	r18, r15
    6e56:	a1 e0       	ldi	r26, 0x01	; 1
    6e58:	26 17       	cp	r18, r22
    6e5a:	08 f0       	brcs	.+2      	; 0x6e5e <fat_find_offset_for_dir_entry+0x414>
    6e5c:	a0 e0       	ldi	r26, 0x00	; 0
    6e5e:	6f 2f       	mov	r22, r31
    6e60:	62 0f       	add	r22, r18
    6e62:	e1 e0       	ldi	r30, 0x01	; 1
    6e64:	62 17       	cp	r22, r18
    6e66:	08 f0       	brcs	.+2      	; 0x6e6a <fat_find_offset_for_dir_entry+0x420>
    6e68:	e0 e0       	ldi	r30, 0x00	; 0
    6e6a:	ae 2b       	or	r26, r30
    6e6c:	27 2f       	mov	r18, r23
    6e6e:	2e 0d       	add	r18, r14
    6e70:	f1 e0       	ldi	r31, 0x01	; 1
    6e72:	27 17       	cp	r18, r23
    6e74:	08 f0       	brcs	.+2      	; 0x6e78 <fat_find_offset_for_dir_entry+0x42e>
    6e76:	f0 e0       	ldi	r31, 0x00	; 0
    6e78:	7a 2f       	mov	r23, r26
    6e7a:	72 0f       	add	r23, r18
    6e7c:	e1 e0       	ldi	r30, 0x01	; 1
    6e7e:	72 17       	cp	r23, r18
    6e80:	08 f0       	brcs	.+2      	; 0x6e84 <fat_find_offset_for_dir_entry+0x43a>
    6e82:	e0 e0       	ldi	r30, 0x00	; 0
    6e84:	fe 2b       	or	r31, r30
    6e86:	28 2f       	mov	r18, r24
    6e88:	2d 0d       	add	r18, r13
    6e8a:	e1 e0       	ldi	r30, 0x01	; 1
    6e8c:	28 17       	cp	r18, r24
    6e8e:	08 f0       	brcs	.+2      	; 0x6e92 <fat_find_offset_for_dir_entry+0x448>
    6e90:	e0 e0       	ldi	r30, 0x00	; 0
    6e92:	8f 2f       	mov	r24, r31
    6e94:	82 0f       	add	r24, r18
    6e96:	91 e0       	ldi	r25, 0x01	; 1
    6e98:	82 17       	cp	r24, r18
    6e9a:	08 f0       	brcs	.+2      	; 0x6e9e <fat_find_offset_for_dir_entry+0x454>
    6e9c:	90 e0       	ldi	r25, 0x00	; 0
    6e9e:	7e 2e       	mov	r7, r30
    6ea0:	79 2a       	or	r7, r25
    6ea2:	1c 0d       	add	r17, r12
    6ea4:	db 2e       	mov	r13, r27
    6ea6:	c3 2e       	mov	r12, r19
    6ea8:	b4 2e       	mov	r11, r20
    6eaa:	a5 2e       	mov	r10, r21
    6eac:	26 2e       	mov	r2, r22
    6eae:	97 2e       	mov	r9, r23
    6eb0:	88 2e       	mov	r8, r24
    6eb2:	71 0e       	add	r7, r17
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
    6eb4:	ac 85       	ldd	r26, Y+12	; 0x0c
    6eb6:	bd 85       	ldd	r27, Y+13	; 0x0d
    6eb8:	58 96       	adiw	r26, 0x18	; 24
    6eba:	8d 91       	ld	r24, X+
    6ebc:	9c 91       	ld	r25, X
    6ebe:	59 97       	sbiw	r26, 0x19	; 25
    6ec0:	9c 01       	movw	r18, r24
    6ec2:	fd 2d       	mov	r31, r13
    6ec4:	f8 0f       	add	r31, r24
    6ec6:	e1 e0       	ldi	r30, 0x01	; 1
    6ec8:	fd 15       	cp	r31, r13
    6eca:	08 f0       	brcs	.+2      	; 0x6ece <fat_find_offset_for_dir_entry+0x484>
    6ecc:	e0 e0       	ldi	r30, 0x00	; 0
    6ece:	8c 2d       	mov	r24, r12
    6ed0:	83 0f       	add	r24, r19
    6ed2:	21 e0       	ldi	r18, 0x01	; 1
    6ed4:	8c 15       	cp	r24, r12
    6ed6:	08 f0       	brcs	.+2      	; 0x6eda <fat_find_offset_for_dir_entry+0x490>
    6ed8:	20 e0       	ldi	r18, 0x00	; 0
    6eda:	6e 2f       	mov	r22, r30
    6edc:	68 0f       	add	r22, r24
    6ede:	91 e0       	ldi	r25, 0x01	; 1
    6ee0:	68 17       	cp	r22, r24
    6ee2:	08 f0       	brcs	.+2      	; 0x6ee6 <fat_find_offset_for_dir_entry+0x49c>
    6ee4:	90 e0       	ldi	r25, 0x00	; 0
    6ee6:	92 2b       	or	r25, r18
    6ee8:	9b 0d       	add	r25, r11
    6eea:	81 e0       	ldi	r24, 0x01	; 1
    6eec:	9b 15       	cp	r25, r11
    6eee:	08 f0       	brcs	.+2      	; 0x6ef2 <fat_find_offset_for_dir_entry+0x4a8>
    6ef0:	80 e0       	ldi	r24, 0x00	; 0
    6ef2:	58 2f       	mov	r21, r24
    6ef4:	5a 0d       	add	r21, r10
    6ef6:	81 e0       	ldi	r24, 0x01	; 1
    6ef8:	5a 15       	cp	r21, r10
    6efa:	08 f0       	brcs	.+2      	; 0x6efe <fat_find_offset_for_dir_entry+0x4b4>
    6efc:	80 e0       	ldi	r24, 0x00	; 0
    6efe:	48 2f       	mov	r20, r24
    6f00:	42 0d       	add	r20, r2
    6f02:	81 e0       	ldi	r24, 0x01	; 1
    6f04:	42 15       	cp	r20, r2
    6f06:	08 f0       	brcs	.+2      	; 0x6f0a <fat_find_offset_for_dir_entry+0x4c0>
    6f08:	80 e0       	ldi	r24, 0x00	; 0
    6f0a:	38 2f       	mov	r19, r24
    6f0c:	39 0d       	add	r19, r9
    6f0e:	81 e0       	ldi	r24, 0x01	; 1
    6f10:	39 15       	cp	r19, r9
    6f12:	08 f0       	brcs	.+2      	; 0x6f16 <fat_find_offset_for_dir_entry+0x4cc>
    6f14:	80 e0       	ldi	r24, 0x00	; 0
    6f16:	88 0d       	add	r24, r8
    6f18:	21 e0       	ldi	r18, 0x01	; 1
    6f1a:	88 15       	cp	r24, r8
    6f1c:	08 f0       	brcs	.+2      	; 0x6f20 <fat_find_offset_for_dir_entry+0x4d6>
    6f1e:	20 e0       	ldi	r18, 0x00	; 0
    6f20:	fe 87       	std	Y+14, r31	; 0x0e
    6f22:	6f 87       	std	Y+15, r22	; 0x0f
    6f24:	98 8b       	std	Y+16, r25	; 0x10
    6f26:	59 8b       	std	Y+17, r21	; 0x11
    6f28:	4a 8b       	std	Y+18, r20	; 0x12
    6f2a:	3b 8b       	std	Y+19, r19	; 0x13
    6f2c:	8c 8b       	std	Y+20, r24	; 0x14
    6f2e:	27 0d       	add	r18, r7
    6f30:	2d 8b       	std	Y+21, r18	; 0x15
    6f32:	de 8a       	std	Y+22, r13	; 0x16
    6f34:	cf 8a       	std	Y+23, r12	; 0x17
    6f36:	b8 8e       	std	Y+24, r11	; 0x18
    6f38:	a9 8e       	std	Y+25, r10	; 0x19
    6f3a:	32 2c       	mov	r3, r2
    6f3c:	49 2c       	mov	r4, r9
    6f3e:	58 2c       	mov	r5, r8
    6f40:	67 2c       	mov	r6, r7
    6f42:	1a 86       	std	Y+10, r1	; 0x0a
            free_dir_entries_found = 0;
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    6f44:	ac 85       	ldd	r26, Y+12	; 0x0c
    6f46:	bd 85       	ldd	r27, Y+13	; 0x0d
    6f48:	ed 91       	ld	r30, X+
    6f4a:	fc 91       	ld	r31, X
    6f4c:	01 90       	ld	r0, Z+
    6f4e:	f0 81       	ld	r31, Z
    6f50:	e0 2d       	mov	r30, r0
    6f52:	2d 2d       	mov	r18, r13
    6f54:	3c 2d       	mov	r19, r12
    6f56:	4b 2d       	mov	r20, r11
    6f58:	5a 2d       	mov	r21, r10
    6f5a:	62 2d       	mov	r22, r2
    6f5c:	79 2d       	mov	r23, r9
    6f5e:	88 2d       	mov	r24, r8
    6f60:	97 2d       	mov	r25, r7
    6f62:	8e 01       	movw	r16, r28
    6f64:	0f 5f       	subi	r16, 0xFF	; 255
    6f66:	1f 4f       	sbci	r17, 0xFF	; 255
    6f68:	b1 e0       	ldi	r27, 0x01	; 1
    6f6a:	eb 2e       	mov	r14, r27
    6f6c:	f1 2c       	mov	r15, r1
    6f6e:	09 95       	icall
    6f70:	88 23       	and	r24, r24
    6f72:	09 f4       	brne	.+2      	; 0x6f76 <fat_find_offset_for_dir_entry+0x52c>
    6f74:	6c c0       	rjmp	.+216    	; 0x704e <fat_find_offset_for_dir_entry+0x604>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    6f76:	89 81       	ldd	r24, Y+1	; 0x01
    6f78:	85 3e       	cpi	r24, 0xE5	; 229
    6f7a:	11 f0       	breq	.+4      	; 0x6f80 <fat_find_offset_for_dir_entry+0x536>
    6f7c:	88 23       	and	r24, r24
    6f7e:	b9 f5       	brne	.+110    	; 0x6fee <fat_find_offset_for_dir_entry+0x5a4>
        {
            /* check if we have the needed number of available entries */
            ++free_dir_entries_found;
    6f80:	ba 85       	ldd	r27, Y+10	; 0x0a
    6f82:	bf 5f       	subi	r27, 0xFF	; 255
    6f84:	ba 87       	std	Y+10, r27	; 0x0a
            if(free_dir_entries_found >= free_dir_entries_needed)
    6f86:	eb 85       	ldd	r30, Y+11	; 0x0b
    6f88:	be 17       	cp	r27, r30
    6f8a:	08 f0       	brcs	.+2      	; 0x6f8e <fat_find_offset_for_dir_entry+0x544>
    6f8c:	68 c0       	rjmp	.+208    	; 0x705e <fat_find_offset_for_dir_entry+0x614>
                break;

            offset += 32;
    6f8e:	7d 2d       	mov	r23, r13
    6f90:	70 5e       	subi	r23, 0xE0	; 224
    6f92:	81 e0       	ldi	r24, 0x01	; 1
    6f94:	7d 15       	cp	r23, r13
    6f96:	08 f0       	brcs	.+2      	; 0x6f9a <fat_find_offset_for_dir_entry+0x550>
    6f98:	80 e0       	ldi	r24, 0x00	; 0
    6f9a:	68 2f       	mov	r22, r24
    6f9c:	6c 0d       	add	r22, r12
    6f9e:	81 e0       	ldi	r24, 0x01	; 1
    6fa0:	6c 15       	cp	r22, r12
    6fa2:	08 f0       	brcs	.+2      	; 0x6fa6 <fat_find_offset_for_dir_entry+0x55c>
    6fa4:	80 e0       	ldi	r24, 0x00	; 0
    6fa6:	58 2f       	mov	r21, r24
    6fa8:	5b 0d       	add	r21, r11
    6faa:	81 e0       	ldi	r24, 0x01	; 1
    6fac:	5b 15       	cp	r21, r11
    6fae:	08 f0       	brcs	.+2      	; 0x6fb2 <fat_find_offset_for_dir_entry+0x568>
    6fb0:	80 e0       	ldi	r24, 0x00	; 0
    6fb2:	48 2f       	mov	r20, r24
    6fb4:	4a 0d       	add	r20, r10
    6fb6:	81 e0       	ldi	r24, 0x01	; 1
    6fb8:	4a 15       	cp	r20, r10
    6fba:	08 f0       	brcs	.+2      	; 0x6fbe <fat_find_offset_for_dir_entry+0x574>
    6fbc:	80 e0       	ldi	r24, 0x00	; 0
    6fbe:	38 2f       	mov	r19, r24
    6fc0:	32 0d       	add	r19, r2
    6fc2:	81 e0       	ldi	r24, 0x01	; 1
    6fc4:	32 15       	cp	r19, r2
    6fc6:	08 f0       	brcs	.+2      	; 0x6fca <fat_find_offset_for_dir_entry+0x580>
    6fc8:	80 e0       	ldi	r24, 0x00	; 0
    6fca:	28 2f       	mov	r18, r24
    6fcc:	29 0d       	add	r18, r9
    6fce:	81 e0       	ldi	r24, 0x01	; 1
    6fd0:	29 15       	cp	r18, r9
    6fd2:	08 f0       	brcs	.+2      	; 0x6fd6 <fat_find_offset_for_dir_entry+0x58c>
    6fd4:	80 e0       	ldi	r24, 0x00	; 0
    6fd6:	88 0d       	add	r24, r8
    6fd8:	91 e0       	ldi	r25, 0x01	; 1
    6fda:	88 15       	cp	r24, r8
    6fdc:	08 f0       	brcs	.+2      	; 0x6fe0 <fat_find_offset_for_dir_entry+0x596>
    6fde:	90 e0       	ldi	r25, 0x00	; 0
    6fe0:	6b 01       	movw	r12, r22
    6fe2:	5a 01       	movw	r10, r20
    6fe4:	23 2e       	mov	r2, r19
    6fe6:	92 2e       	mov	r9, r18
    6fe8:	88 2e       	mov	r8, r24
    6fea:	79 0e       	add	r7, r25
    6fec:	d6 cd       	rjmp	.-1108   	; 0x6b9a <fat_find_offset_for_dir_entry+0x150>
        }
        else
        {
            offset += 32;
    6fee:	7d 2d       	mov	r23, r13
    6ff0:	70 5e       	subi	r23, 0xE0	; 224
    6ff2:	81 e0       	ldi	r24, 0x01	; 1
    6ff4:	7d 15       	cp	r23, r13
    6ff6:	08 f0       	brcs	.+2      	; 0x6ffa <fat_find_offset_for_dir_entry+0x5b0>
    6ff8:	80 e0       	ldi	r24, 0x00	; 0
    6ffa:	68 2f       	mov	r22, r24
    6ffc:	6c 0d       	add	r22, r12
    6ffe:	81 e0       	ldi	r24, 0x01	; 1
    7000:	6c 15       	cp	r22, r12
    7002:	08 f0       	brcs	.+2      	; 0x7006 <fat_find_offset_for_dir_entry+0x5bc>
    7004:	80 e0       	ldi	r24, 0x00	; 0
    7006:	58 2f       	mov	r21, r24
    7008:	5b 0d       	add	r21, r11
    700a:	81 e0       	ldi	r24, 0x01	; 1
    700c:	5b 15       	cp	r21, r11
    700e:	08 f0       	brcs	.+2      	; 0x7012 <fat_find_offset_for_dir_entry+0x5c8>
    7010:	80 e0       	ldi	r24, 0x00	; 0
    7012:	48 2f       	mov	r20, r24
    7014:	4a 0d       	add	r20, r10
    7016:	81 e0       	ldi	r24, 0x01	; 1
    7018:	4a 15       	cp	r20, r10
    701a:	08 f0       	brcs	.+2      	; 0x701e <fat_find_offset_for_dir_entry+0x5d4>
    701c:	80 e0       	ldi	r24, 0x00	; 0
    701e:	38 2f       	mov	r19, r24
    7020:	32 0d       	add	r19, r2
    7022:	81 e0       	ldi	r24, 0x01	; 1
    7024:	32 15       	cp	r19, r2
    7026:	08 f0       	brcs	.+2      	; 0x702a <fat_find_offset_for_dir_entry+0x5e0>
    7028:	80 e0       	ldi	r24, 0x00	; 0
    702a:	28 2f       	mov	r18, r24
    702c:	29 0d       	add	r18, r9
    702e:	81 e0       	ldi	r24, 0x01	; 1
    7030:	29 15       	cp	r18, r9
    7032:	08 f0       	brcs	.+2      	; 0x7036 <fat_find_offset_for_dir_entry+0x5ec>
    7034:	80 e0       	ldi	r24, 0x00	; 0
    7036:	88 0d       	add	r24, r8
    7038:	91 e0       	ldi	r25, 0x01	; 1
    703a:	88 15       	cp	r24, r8
    703c:	08 f0       	brcs	.+2      	; 0x7040 <fat_find_offset_for_dir_entry+0x5f6>
    703e:	90 e0       	ldi	r25, 0x00	; 0
    7040:	6b 01       	movw	r12, r22
    7042:	5a 01       	movw	r10, r20
    7044:	23 2e       	mov	r2, r19
    7046:	92 2e       	mov	r9, r18
    7048:	88 2e       	mov	r8, r24
    704a:	79 0e       	add	r7, r25
    704c:	9d cd       	rjmp	.-1222   	; 0x6b88 <fat_find_offset_for_dir_entry+0x13e>
    704e:	1e 8a       	std	Y+22, r1	; 0x16
    7050:	1f 8a       	std	Y+23, r1	; 0x17
    7052:	18 8e       	std	Y+24, r1	; 0x18
    7054:	19 8e       	std	Y+25, r1	; 0x19
    7056:	33 24       	eor	r3, r3
    7058:	44 24       	eor	r4, r4
    705a:	55 24       	eor	r5, r5
    705c:	66 24       	eor	r6, r6
            free_dir_entries_found = 0;
        }
    }

    return dir_entry_offset;
}
    705e:	2e 89       	ldd	r18, Y+22	; 0x16
    7060:	3f 89       	ldd	r19, Y+23	; 0x17
    7062:	48 8d       	ldd	r20, Y+24	; 0x18
    7064:	59 8d       	ldd	r21, Y+25	; 0x19
    7066:	63 2d       	mov	r22, r3
    7068:	74 2d       	mov	r23, r4
    706a:	85 2d       	mov	r24, r5
    706c:	96 2d       	mov	r25, r6
    706e:	69 96       	adiw	r28, 0x19	; 25
    7070:	0f b6       	in	r0, 0x3f	; 63
    7072:	f8 94       	cli
    7074:	de bf       	out	0x3e, r29	; 62
    7076:	0f be       	out	0x3f, r0	; 63
    7078:	cd bf       	out	0x3d, r28	; 61
    707a:	cf 91       	pop	r28
    707c:	df 91       	pop	r29
    707e:	1f 91       	pop	r17
    7080:	0f 91       	pop	r16
    7082:	ff 90       	pop	r15
    7084:	ef 90       	pop	r14
    7086:	df 90       	pop	r13
    7088:	cf 90       	pop	r12
    708a:	bf 90       	pop	r11
    708c:	af 90       	pop	r10
    708e:	9f 90       	pop	r9
    7090:	8f 90       	pop	r8
    7092:	7f 90       	pop	r7
    7094:	6f 90       	pop	r6
    7096:	5f 90       	pop	r5
    7098:	4f 90       	pop	r4
    709a:	3f 90       	pop	r3
    709c:	2f 90       	pop	r2
    709e:	08 95       	ret

000070a0 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    70a0:	2f 92       	push	r2
    70a2:	3f 92       	push	r3
    70a4:	4f 92       	push	r4
    70a6:	5f 92       	push	r5
    70a8:	6f 92       	push	r6
    70aa:	7f 92       	push	r7
    70ac:	8f 92       	push	r8
    70ae:	9f 92       	push	r9
    70b0:	af 92       	push	r10
    70b2:	bf 92       	push	r11
    70b4:	cf 92       	push	r12
    70b6:	df 92       	push	r13
    70b8:	ef 92       	push	r14
    70ba:	ff 92       	push	r15
    70bc:	0f 93       	push	r16
    70be:	1f 93       	push	r17
    70c0:	df 93       	push	r29
    70c2:	cf 93       	push	r28
    70c4:	cd b7       	in	r28, 0x3d	; 61
    70c6:	de b7       	in	r29, 0x3e	; 62
    70c8:	a5 97       	sbiw	r28, 0x25	; 37
    70ca:	0f b6       	in	r0, 0x3f	; 63
    70cc:	f8 94       	cli
    70ce:	de bf       	out	0x3e, r29	; 62
    70d0:	0f be       	out	0x3f, r0	; 63
    70d2:	cd bf       	out	0x3d, r28	; 61
    70d4:	fc 01       	movw	r30, r24
    70d6:	6b 01       	movw	r12, r22
    if(!fs || !dir_entry)
    70d8:	00 97       	sbiw	r24, 0x00	; 0
    70da:	09 f4       	brne	.+2      	; 0x70de <fat_write_dir_entry+0x3e>
    70dc:	b3 c1       	rjmp	.+870    	; 0x7444 <fat_write_dir_entry+0x3a4>
    70de:	61 15       	cp	r22, r1
    70e0:	71 05       	cpc	r23, r1
    70e2:	09 f4       	brne	.+2      	; 0x70e6 <fat_write_dir_entry+0x46>
    70e4:	af c1       	rjmp	.+862    	; 0x7444 <fat_write_dir_entry+0x3a4>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    70e6:	01 90       	ld	r0, Z+
    70e8:	f0 81       	ld	r31, Z
    70ea:	e0 2d       	mov	r30, r0
    70ec:	84 81       	ldd	r24, Z+4	; 0x04
    70ee:	95 81       	ldd	r25, Z+5	; 0x05
    70f0:	9b a3       	std	Y+35, r25	; 0x23
    70f2:	8a a3       	std	Y+34, r24	; 0x22
    offset_t offset = dir_entry->entry_offset;
    70f4:	db 01       	movw	r26, r22
    70f6:	99 96       	adiw	r26, 0x29	; 41
    70f8:	2c 90       	ld	r2, X
    70fa:	99 97       	sbiw	r26, 0x29	; 41
    70fc:	9a 96       	adiw	r26, 0x2a	; 42
    70fe:	bc 91       	ld	r27, X
    7100:	bc a3       	std	Y+36, r27	; 0x24
    7102:	fb 01       	movw	r30, r22
    7104:	73 a4       	ldd	r7, Z+43	; 0x2b
    7106:	64 a4       	ldd	r6, Z+44	; 0x2c
    7108:	55 a4       	ldd	r5, Z+45	; 0x2d
    710a:	46 a4       	ldd	r4, Z+46	; 0x2e
    710c:	37 a4       	ldd	r3, Z+47	; 0x2f
    710e:	f0 a9       	ldd	r31, Z+48	; 0x30
    7110:	fd a3       	std	Y+37, r31	; 0x25
    const char* name = dir_entry->long_name;
    7112:	06 2f       	mov	r16, r22
    7114:	fd 2c       	mov	r15, r13
    uint8_t name_len = strlen(name);
    7116:	fb 01       	movw	r30, r22
    7118:	01 90       	ld	r0, Z+
    711a:	00 20       	and	r0, r0
    711c:	e9 f7       	brne	.-6      	; 0x7118 <fat_write_dir_entry+0x78>
    711e:	31 97       	sbiw	r30, 0x01	; 1
    7120:	1e 2f       	mov	r17, r30
    7122:	16 1b       	sub	r17, r22
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    7124:	81 2f       	mov	r24, r17
    7126:	90 e0       	ldi	r25, 0x00	; 0
    7128:	0c 96       	adiw	r24, 0x0c	; 12
    712a:	6d e0       	ldi	r22, 0x0D	; 13
    712c:	70 e0       	ldi	r23, 0x00	; 0
    712e:	0e 94 04 4b 	call	0x9608	; 0x9608 <__divmodhi4>
    7132:	69 a3       	std	Y+33, r22	; 0x21
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    7134:	ce 01       	movw	r24, r28
    7136:	01 96       	adiw	r24, 0x01	; 1
    7138:	60 e2       	ldi	r22, 0x20	; 32
    713a:	70 e0       	ldi	r23, 0x00	; 0
    713c:	4b e0       	ldi	r20, 0x0B	; 11
    713e:	50 e0       	ldi	r21, 0x00	; 0
    7140:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <memset>
    char* name_ext = strrchr(name, '.');
    7144:	c6 01       	movw	r24, r12
    7146:	6e e2       	ldi	r22, 0x2E	; 46
    7148:	70 e0       	ldi	r23, 0x00	; 0
    714a:	0e 94 1d 48 	call	0x903a	; 0x903a <strrchr>
    714e:	fc 01       	movw	r30, r24
    if(name_ext && *++name_ext)
    7150:	00 97       	sbiw	r24, 0x00	; 0
    7152:	e1 f0       	breq	.+56     	; 0x718c <fat_write_dir_entry+0xec>
    7154:	9c 01       	movw	r18, r24
    7156:	2f 5f       	subi	r18, 0xFF	; 255
    7158:	3f 4f       	sbci	r19, 0xFF	; 255
    715a:	81 81       	ldd	r24, Z+1	; 0x01
    715c:	88 23       	and	r24, r24
    715e:	b1 f0       	breq	.+44     	; 0x718c <fat_write_dir_entry+0xec>
    {
        uint8_t name_ext_len = strlen(name_ext);
    7160:	d9 01       	movw	r26, r18
    7162:	0d 90       	ld	r0, X+
    7164:	00 20       	and	r0, r0
    7166:	e9 f7       	brne	.-6      	; 0x7162 <fat_write_dir_entry+0xc2>
    7168:	11 97       	sbiw	r26, 0x01	; 1
    716a:	a2 1b       	sub	r26, r18
    716c:	b3 0b       	sbc	r27, r19
        name_len -= name_ext_len + 1;
    716e:	8a 2f       	mov	r24, r26
    7170:	80 95       	com	r24
    7172:	18 0f       	add	r17, r24

        if(name_ext_len > 3)
            name_ext_len = 3;
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    7174:	be 01       	movw	r22, r28
    7176:	67 5f       	subi	r22, 0xF7	; 247
    7178:	7f 4f       	sbci	r23, 0xFF	; 255
    717a:	4a 2f       	mov	r20, r26
    717c:	a4 30       	cpi	r26, 0x04	; 4
    717e:	08 f0       	brcs	.+2      	; 0x7182 <fat_write_dir_entry+0xe2>
    7180:	43 e0       	ldi	r20, 0x03	; 3
    7182:	cb 01       	movw	r24, r22
    7184:	b9 01       	movw	r22, r18
    7186:	50 e0       	ldi	r21, 0x00	; 0
    7188:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <memcpy>
    718c:	ce 01       	movw	r24, r28
    718e:	01 96       	adiw	r24, 0x01	; 1
    }
    
    if(name_len <= 8)
    7190:	19 30       	cpi	r17, 0x09	; 9
    7192:	a0 f4       	brcc	.+40     	; 0x71bc <fat_write_dir_entry+0x11c>
    {
        memcpy(buffer, name, name_len);
    7194:	60 2f       	mov	r22, r16
    7196:	7f 2d       	mov	r23, r15
    7198:	41 2f       	mov	r20, r17
    719a:	50 e0       	ldi	r21, 0x00	; 0
    719c:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    71a0:	d6 01       	movw	r26, r12
    71a2:	8c 91       	ld	r24, X
    71a4:	8e 32       	cpi	r24, 0x2E	; 46
    71a6:	41 f5       	brne	.+80     	; 0x71f8 <fat_write_dir_entry+0x158>
    71a8:	11 96       	adiw	r26, 0x01	; 1
    71aa:	8c 91       	ld	r24, X
    71ac:	11 97       	sbiw	r26, 0x01	; 1
    71ae:	8e 32       	cpi	r24, 0x2E	; 46
    71b0:	11 f4       	brne	.+4      	; 0x71b6 <fat_write_dir_entry+0x116>
    71b2:	12 96       	adiw	r26, 0x02	; 2
    71b4:	8c 91       	ld	r24, X
    71b6:	88 23       	and	r24, r24
    71b8:	f1 f0       	breq	.+60     	; 0x71f6 <fat_write_dir_entry+0x156>
    71ba:	1e c0       	rjmp	.+60     	; 0x71f8 <fat_write_dir_entry+0x158>
          )
            lfn_entry_count = 0;
    }
    else
    {
        memcpy(buffer, name, 8);
    71bc:	dc 01       	movw	r26, r24
    71be:	80 2f       	mov	r24, r16
    71c0:	9f 2d       	mov	r25, r15
    71c2:	9c 01       	movw	r18, r24
    71c4:	f9 01       	movw	r30, r18
    71c6:	88 e0       	ldi	r24, 0x08	; 8
    71c8:	01 90       	ld	r0, Z+
    71ca:	0d 92       	st	X+, r0
    71cc:	81 50       	subi	r24, 0x01	; 1
    71ce:	e1 f7       	brne	.-8      	; 0x71c8 <fat_write_dir_entry+0x128>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    71d0:	f6 01       	movw	r30, r12
    71d2:	81 a1       	ldd	r24, Z+33	; 0x21
    71d4:	98 2f       	mov	r25, r24
    71d6:	92 95       	swap	r25
    71d8:	9f 70       	andi	r25, 0x0F	; 15

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    71da:	80 3a       	cpi	r24, 0xA0	; 160
    71dc:	10 f4       	brcc	.+4      	; 0x71e2 <fat_write_dir_entry+0x142>
    71de:	90 5d       	subi	r25, 0xD0	; 208
    71e0:	01 c0       	rjmp	.+2      	; 0x71e4 <fat_write_dir_entry+0x144>
    71e2:	9f 59       	subi	r25, 0x9F	; 159
        num &= 0x0f;
    71e4:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    71e6:	8a 30       	cpi	r24, 0x0A	; 10
    71e8:	10 f4       	brcc	.+4      	; 0x71ee <fat_write_dir_entry+0x14e>
    71ea:	80 5d       	subi	r24, 0xD0	; 208
    71ec:	01 c0       	rjmp	.+2      	; 0x71f0 <fat_write_dir_entry+0x150>
    71ee:	8f 59       	subi	r24, 0x9F	; 159
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    71f0:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    71f2:	88 87       	std	Y+8, r24	; 0x08
    71f4:	01 c0       	rjmp	.+2      	; 0x71f8 <fat_write_dir_entry+0x158>
    71f6:	19 a2       	std	Y+33, r1	; 0x21
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    71f8:	89 81       	ldd	r24, Y+1	; 0x01
    71fa:	85 3e       	cpi	r24, 0xE5	; 229
    71fc:	11 f4       	brne	.+4      	; 0x7202 <fat_write_dir_entry+0x162>
        buffer[0] = 0x05;
    71fe:	85 e0       	ldi	r24, 0x05	; 5
    7200:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    7202:	85 e1       	ldi	r24, 0x15	; 21
    7204:	fe 01       	movw	r30, r28
    7206:	3c 96       	adiw	r30, 0x0c	; 12
    7208:	df 01       	movw	r26, r30
    720a:	1d 92       	st	X+, r1
    720c:	8a 95       	dec	r24
    720e:	e9 f7       	brne	.-6      	; 0x720a <fat_write_dir_entry+0x16a>
    buffer[0x0b] = dir_entry->attributes;
    7210:	f6 01       	movw	r30, r12
    7212:	80 a1       	ldd	r24, Z+32	; 0x20
    7214:	8c 87       	std	Y+12, r24	; 0x0c
#if FAT_DATETIME_SUPPORT
    *((uint16_t*) &buffer[0x16]) = htol16(dir_entry->modification_time);
    *((uint16_t*) &buffer[0x18]) = htol16(dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    *((uint16_t*) &buffer[0x14]) = htol16((uint16_t) (dir_entry->cluster >> 16));
    7216:	21 a1       	ldd	r18, Z+33	; 0x21
    7218:	32 a1       	ldd	r19, Z+34	; 0x22
    721a:	43 a1       	ldd	r20, Z+35	; 0x23
    721c:	54 a1       	ldd	r21, Z+36	; 0x24
    721e:	ca 01       	movw	r24, r20
    7220:	aa 27       	eor	r26, r26
    7222:	bb 27       	eor	r27, r27
    7224:	9e 8b       	std	Y+22, r25	; 0x16
    7226:	8d 8b       	std	Y+21, r24	; 0x15
#endif
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    7228:	3c 8f       	std	Y+28, r19	; 0x1c
    722a:	2b 8f       	std	Y+27, r18	; 0x1b
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);
    722c:	85 a1       	ldd	r24, Z+37	; 0x25
    722e:	96 a1       	ldd	r25, Z+38	; 0x26
    7230:	a7 a1       	ldd	r26, Z+39	; 0x27
    7232:	b0 a5       	ldd	r27, Z+40	; 0x28
    7234:	8d 8f       	std	Y+29, r24	; 0x1d
    7236:	9e 8f       	std	Y+30, r25	; 0x1e
    7238:	af 8f       	std	Y+31, r26	; 0x1f
    723a:	b8 a3       	std	Y+32, r27	; 0x20

    /* write to disk */
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    723c:	f9 a1       	ldd	r31, Y+33	; 0x21
    723e:	8f 2f       	mov	r24, r31
    7240:	90 e0       	ldi	r25, 0x00	; 0
    7242:	a5 e0       	ldi	r26, 0x05	; 5
    7244:	88 0f       	add	r24, r24
    7246:	99 1f       	adc	r25, r25
    7248:	aa 95       	dec	r26
    724a:	e1 f7       	brne	.-8      	; 0x7244 <fat_write_dir_entry+0x1a4>
    724c:	9c 01       	movw	r18, r24
    724e:	40 e0       	ldi	r20, 0x00	; 0
    7250:	50 e0       	ldi	r21, 0x00	; 0
    7252:	60 e0       	ldi	r22, 0x00	; 0
    7254:	70 e0       	ldi	r23, 0x00	; 0
    7256:	80 e0       	ldi	r24, 0x00	; 0
    7258:	90 e0       	ldi	r25, 0x00	; 0
    725a:	b2 2e       	mov	r11, r18
    725c:	b2 0c       	add	r11, r2
    725e:	a1 e0       	ldi	r26, 0x01	; 1
    7260:	b2 16       	cp	r11, r18
    7262:	08 f0       	brcs	.+2      	; 0x7266 <fat_write_dir_entry+0x1c6>
    7264:	a0 e0       	ldi	r26, 0x00	; 0
    7266:	ec a1       	ldd	r30, Y+36	; 0x24
    7268:	e3 0f       	add	r30, r19
    726a:	f1 e0       	ldi	r31, 0x01	; 1
    726c:	e3 17       	cp	r30, r19
    726e:	08 f0       	brcs	.+2      	; 0x7272 <fat_write_dir_entry+0x1d2>
    7270:	f0 e0       	ldi	r31, 0x00	; 0
    7272:	ea 2e       	mov	r14, r26
    7274:	ee 0e       	add	r14, r30
    7276:	a1 e0       	ldi	r26, 0x01	; 1
    7278:	ee 16       	cp	r14, r30
    727a:	08 f0       	brcs	.+2      	; 0x727e <fat_write_dir_entry+0x1de>
    727c:	a0 e0       	ldi	r26, 0x00	; 0
    727e:	fa 2b       	or	r31, r26
    7280:	e1 e0       	ldi	r30, 0x01	; 1
    7282:	74 16       	cp	r7, r20
    7284:	08 f0       	brcs	.+2      	; 0x7288 <fat_write_dir_entry+0x1e8>
    7286:	e0 e0       	ldi	r30, 0x00	; 0
    7288:	ff 2e       	mov	r15, r31
    728a:	f7 0c       	add	r15, r7
    728c:	f1 e0       	ldi	r31, 0x01	; 1
    728e:	f7 14       	cp	r15, r7
    7290:	08 f0       	brcs	.+2      	; 0x7294 <fat_write_dir_entry+0x1f4>
    7292:	f0 e0       	ldi	r31, 0x00	; 0
    7294:	ef 2b       	or	r30, r31
    7296:	f1 e0       	ldi	r31, 0x01	; 1
    7298:	65 16       	cp	r6, r21
    729a:	08 f0       	brcs	.+2      	; 0x729e <fat_write_dir_entry+0x1fe>
    729c:	f0 e0       	ldi	r31, 0x00	; 0
    729e:	0e 2f       	mov	r16, r30
    72a0:	06 0d       	add	r16, r6
    72a2:	e1 e0       	ldi	r30, 0x01	; 1
    72a4:	06 15       	cp	r16, r6
    72a6:	08 f0       	brcs	.+2      	; 0x72aa <fat_write_dir_entry+0x20a>
    72a8:	e0 e0       	ldi	r30, 0x00	; 0
    72aa:	fe 2b       	or	r31, r30
    72ac:	e1 e0       	ldi	r30, 0x01	; 1
    72ae:	56 16       	cp	r5, r22
    72b0:	08 f0       	brcs	.+2      	; 0x72b4 <fat_write_dir_entry+0x214>
    72b2:	e0 e0       	ldi	r30, 0x00	; 0
    72b4:	1f 2f       	mov	r17, r31
    72b6:	15 0d       	add	r17, r5
    72b8:	f1 e0       	ldi	r31, 0x01	; 1
    72ba:	15 15       	cp	r17, r5
    72bc:	08 f0       	brcs	.+2      	; 0x72c0 <fat_write_dir_entry+0x220>
    72be:	f0 e0       	ldi	r31, 0x00	; 0
    72c0:	ef 2b       	or	r30, r31
    72c2:	f1 e0       	ldi	r31, 0x01	; 1
    72c4:	47 16       	cp	r4, r23
    72c6:	08 f0       	brcs	.+2      	; 0x72ca <fat_write_dir_entry+0x22a>
    72c8:	f0 e0       	ldi	r31, 0x00	; 0
    72ca:	be 2f       	mov	r27, r30
    72cc:	b4 0d       	add	r27, r4
    72ce:	e1 e0       	ldi	r30, 0x01	; 1
    72d0:	b4 15       	cp	r27, r4
    72d2:	08 f0       	brcs	.+2      	; 0x72d6 <fat_write_dir_entry+0x236>
    72d4:	e0 e0       	ldi	r30, 0x00	; 0
    72d6:	fe 2b       	or	r31, r30
    72d8:	a1 e0       	ldi	r26, 0x01	; 1
    72da:	38 16       	cp	r3, r24
    72dc:	08 f0       	brcs	.+2      	; 0x72e0 <fat_write_dir_entry+0x240>
    72de:	a0 e0       	ldi	r26, 0x00	; 0
    72e0:	8f 2f       	mov	r24, r31
    72e2:	83 0d       	add	r24, r3
    72e4:	e1 e0       	ldi	r30, 0x01	; 1
    72e6:	83 15       	cp	r24, r3
    72e8:	08 f0       	brcs	.+2      	; 0x72ec <fat_write_dir_entry+0x24c>
    72ea:	e0 e0       	ldi	r30, 0x00	; 0
    72ec:	ae 2b       	or	r26, r30
    72ee:	2b 2d       	mov	r18, r11
    72f0:	3e 2d       	mov	r19, r14
    72f2:	4f 2d       	mov	r20, r15
    72f4:	50 2f       	mov	r21, r16
    72f6:	61 2f       	mov	r22, r17
    72f8:	7b 2f       	mov	r23, r27
    72fa:	9d a1       	ldd	r25, Y+37	; 0x25
    72fc:	9a 0f       	add	r25, r26
    72fe:	8e 01       	movw	r16, r28
    7300:	0f 5f       	subi	r16, 0xFF	; 255
    7302:	1f 4f       	sbci	r17, 0xFF	; 255
    7304:	f0 e2       	ldi	r31, 0x20	; 32
    7306:	ef 2e       	mov	r14, r31
    7308:	f1 2c       	mov	r15, r1
    730a:	aa a1       	ldd	r26, Y+34	; 0x22
    730c:	bb a1       	ldd	r27, Y+35	; 0x23
    730e:	fd 01       	movw	r30, r26
    7310:	09 95       	icall
    7312:	88 23       	and	r24, r24
    7314:	09 f4       	brne	.+2      	; 0x7318 <fat_write_dir_entry+0x278>
    7316:	96 c0       	rjmp	.+300    	; 0x7444 <fat_write_dir_entry+0x3a4>
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    7318:	b9 80       	ldd	r11, Y+1	; 0x01
    731a:	fe 01       	movw	r30, r28
    731c:	32 96       	adiw	r30, 0x02	; 2
    for(uint8_t i = 1; i < 11; ++i)
    731e:	9e 01       	movw	r18, r28
    7320:	24 5f       	subi	r18, 0xF4	; 244
    7322:	3f 4f       	sbci	r19, 0xFF	; 255
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    7324:	8b 2d       	mov	r24, r11
    7326:	86 95       	lsr	r24
    7328:	b7 94       	ror	r11
    732a:	bb 24       	eor	r11, r11
    732c:	b7 94       	ror	r11
    732e:	b8 2a       	or	r11, r24
    7330:	81 91       	ld	r24, Z+
    7332:	b8 0e       	add	r11, r24
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
    7334:	e2 17       	cp	r30, r18
    7336:	f3 07       	cpc	r31, r19
    7338:	a9 f7       	brne	.-22     	; 0x7324 <fat_write_dir_entry+0x284>
    733a:	a9 a0       	ldd	r10, Y+33	; 0x21
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    733c:	4e 01       	movw	r8, r28
    733e:	08 94       	sec
    7340:	81 1c       	adc	r8, r1
    7342:	91 1c       	adc	r9, r1
    7344:	7a c0       	rjmp	.+244    	; 0x743a <fat_write_dir_entry+0x39a>
    7346:	c4 01       	movw	r24, r8
    7348:	6f ef       	ldi	r22, 0xFF	; 255
    734a:	70 e0       	ldi	r23, 0x00	; 0
    734c:	40 e2       	ldi	r20, 0x20	; 32
    734e:	50 e0       	ldi	r21, 0x00	; 0
    7350:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    7354:	ed e0       	ldi	r30, 0x0D	; 13
    7356:	ae 9e       	mul	r10, r30
    7358:	d0 01       	movw	r26, r0
    735a:	11 24       	eor	r1, r1
    735c:	1d 97       	sbiw	r26, 0x0d	; 13
    735e:	ac 0d       	add	r26, r12
    7360:	bd 1d       	adc	r27, r13
    7362:	91 e0       	ldi	r25, 0x01	; 1
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    7364:	f4 01       	movw	r30, r8
    7366:	e9 0f       	add	r30, r25
    7368:	f1 1d       	adc	r31, r1
    736a:	8c 91       	ld	r24, X
    736c:	80 83       	st	Z, r24
    736e:	89 2f       	mov	r24, r25
    7370:	8f 5f       	subi	r24, 0xFF	; 255
            buffer[i++] = 0;
    7372:	f4 01       	movw	r30, r8
    7374:	e8 0f       	add	r30, r24
    7376:	f1 1d       	adc	r31, r1
    7378:	10 82       	st	Z, r1
    737a:	9e 5f       	subi	r25, 0xFE	; 254

            switch(i)
    737c:	9b 30       	cpi	r25, 0x0B	; 11
    737e:	19 f0       	breq	.+6      	; 0x7386 <fat_write_dir_entry+0x2e6>
    7380:	9a 31       	cpi	r25, 0x1A	; 26
    7382:	21 f4       	brne	.+8      	; 0x738c <fat_write_dir_entry+0x2ec>
    7384:	02 c0       	rjmp	.+4      	; 0x738a <fat_write_dir_entry+0x2ea>
    7386:	9e e0       	ldi	r25, 0x0E	; 14
    7388:	01 c0       	rjmp	.+2      	; 0x738c <fat_write_dir_entry+0x2ec>
    738a:	9c e1       	ldi	r25, 0x1C	; 28
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    738c:	8c 91       	ld	r24, X
    738e:	88 23       	and	r24, r24
    7390:	21 f0       	breq	.+8      	; 0x739a <fat_write_dir_entry+0x2fa>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    7392:	9f 31       	cpi	r25, 0x1F	; 31
    7394:	10 f4       	brcc	.+4      	; 0x739a <fat_write_dir_entry+0x2fa>
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    7396:	11 96       	adiw	r26, 0x01	; 1
    7398:	e5 cf       	rjmp	.-54     	; 0x7364 <fat_write_dir_entry+0x2c4>
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    739a:	a9 82       	std	Y+1, r10	; 0x01
        if(lfn_entry == lfn_entry_count)
    739c:	f9 a1       	ldd	r31, Y+33	; 0x21
    739e:	af 16       	cp	r10, r31
    73a0:	19 f4       	brne	.+6      	; 0x73a8 <fat_write_dir_entry+0x308>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    73a2:	8a 2d       	mov	r24, r10
    73a4:	80 64       	ori	r24, 0x40	; 64
    73a6:	89 83       	std	Y+1, r24	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    73a8:	2f e0       	ldi	r18, 0x0F	; 15
    73aa:	2c 87       	std	Y+12, r18	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    73ac:	be 86       	std	Y+14, r11	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    73ae:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    73b0:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    73b2:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    73b4:	22 2d       	mov	r18, r2
    73b6:	3c a1       	ldd	r19, Y+36	; 0x24
    73b8:	47 2d       	mov	r20, r7
    73ba:	56 2d       	mov	r21, r6
    73bc:	65 2d       	mov	r22, r5
    73be:	74 2d       	mov	r23, r4
    73c0:	83 2d       	mov	r24, r3
    73c2:	9d a1       	ldd	r25, Y+37	; 0x25
    73c4:	84 01       	movw	r16, r8
    73c6:	e0 e2       	ldi	r30, 0x20	; 32
    73c8:	ee 2e       	mov	r14, r30
    73ca:	f1 2c       	mov	r15, r1
    73cc:	aa a1       	ldd	r26, Y+34	; 0x22
    73ce:	bb a1       	ldd	r27, Y+35	; 0x23
    73d0:	fd 01       	movw	r30, r26
    73d2:	09 95       	icall
    
        offset += sizeof(buffer);
    73d4:	72 2d       	mov	r23, r2
    73d6:	70 5e       	subi	r23, 0xE0	; 224
    73d8:	81 e0       	ldi	r24, 0x01	; 1
    73da:	72 15       	cp	r23, r2
    73dc:	08 f0       	brcs	.+2      	; 0x73e0 <fat_write_dir_entry+0x340>
    73de:	80 e0       	ldi	r24, 0x00	; 0
    73e0:	6c a1       	ldd	r22, Y+36	; 0x24
    73e2:	68 0f       	add	r22, r24
    73e4:	81 e0       	ldi	r24, 0x01	; 1
    73e6:	bc a1       	ldd	r27, Y+36	; 0x24
    73e8:	6b 17       	cp	r22, r27
    73ea:	08 f0       	brcs	.+2      	; 0x73ee <fat_write_dir_entry+0x34e>
    73ec:	80 e0       	ldi	r24, 0x00	; 0
    73ee:	58 2f       	mov	r21, r24
    73f0:	57 0d       	add	r21, r7
    73f2:	81 e0       	ldi	r24, 0x01	; 1
    73f4:	57 15       	cp	r21, r7
    73f6:	08 f0       	brcs	.+2      	; 0x73fa <fat_write_dir_entry+0x35a>
    73f8:	80 e0       	ldi	r24, 0x00	; 0
    73fa:	48 2f       	mov	r20, r24
    73fc:	46 0d       	add	r20, r6
    73fe:	81 e0       	ldi	r24, 0x01	; 1
    7400:	46 15       	cp	r20, r6
    7402:	08 f0       	brcs	.+2      	; 0x7406 <fat_write_dir_entry+0x366>
    7404:	80 e0       	ldi	r24, 0x00	; 0
    7406:	38 2f       	mov	r19, r24
    7408:	35 0d       	add	r19, r5
    740a:	81 e0       	ldi	r24, 0x01	; 1
    740c:	35 15       	cp	r19, r5
    740e:	08 f0       	brcs	.+2      	; 0x7412 <fat_write_dir_entry+0x372>
    7410:	80 e0       	ldi	r24, 0x00	; 0
    7412:	28 2f       	mov	r18, r24
    7414:	24 0d       	add	r18, r4
    7416:	81 e0       	ldi	r24, 0x01	; 1
    7418:	24 15       	cp	r18, r4
    741a:	08 f0       	brcs	.+2      	; 0x741e <fat_write_dir_entry+0x37e>
    741c:	80 e0       	ldi	r24, 0x00	; 0
    741e:	83 0d       	add	r24, r3
    7420:	91 e0       	ldi	r25, 0x01	; 1
    7422:	83 15       	cp	r24, r3
    7424:	08 f0       	brcs	.+2      	; 0x7428 <fat_write_dir_entry+0x388>
    7426:	90 e0       	ldi	r25, 0x00	; 0
    7428:	27 2e       	mov	r2, r23
    742a:	6c a3       	std	Y+36, r22	; 0x24
    742c:	3a 01       	movw	r6, r20
    742e:	29 01       	movw	r4, r18
    7430:	38 2e       	mov	r3, r24
    7432:	ed a1       	ldd	r30, Y+37	; 0x25
    7434:	e9 0f       	add	r30, r25
    7436:	ed a3       	std	Y+37, r30	; 0x25
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    7438:	aa 94       	dec	r10
    743a:	aa 20       	and	r10, r10
    743c:	09 f0       	breq	.+2      	; 0x7440 <fat_write_dir_entry+0x3a0>
    743e:	83 cf       	rjmp	.-250    	; 0x7346 <fat_write_dir_entry+0x2a6>
    7440:	81 e0       	ldi	r24, 0x01	; 1
    7442:	01 c0       	rjmp	.+2      	; 0x7446 <fat_write_dir_entry+0x3a6>
    7444:	80 e0       	ldi	r24, 0x00	; 0
    
        offset += sizeof(buffer);
    }
    
    return 1;
}
    7446:	a5 96       	adiw	r28, 0x25	; 37
    7448:	0f b6       	in	r0, 0x3f	; 63
    744a:	f8 94       	cli
    744c:	de bf       	out	0x3e, r29	; 62
    744e:	0f be       	out	0x3f, r0	; 63
    7450:	cd bf       	out	0x3d, r28	; 61
    7452:	cf 91       	pop	r28
    7454:	df 91       	pop	r29
    7456:	1f 91       	pop	r17
    7458:	0f 91       	pop	r16
    745a:	ff 90       	pop	r15
    745c:	ef 90       	pop	r14
    745e:	df 90       	pop	r13
    7460:	cf 90       	pop	r12
    7462:	bf 90       	pop	r11
    7464:	af 90       	pop	r10
    7466:	9f 90       	pop	r9
    7468:	8f 90       	pop	r8
    746a:	7f 90       	pop	r7
    746c:	6f 90       	pop	r6
    746e:	5f 90       	pop	r5
    7470:	4f 90       	pop	r4
    7472:	3f 90       	pop	r3
    7474:	2f 90       	pop	r2
    7476:	08 95       	ret

00007478 <fat_create_dir>:
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    7478:	2f 92       	push	r2
    747a:	3f 92       	push	r3
    747c:	4f 92       	push	r4
    747e:	5f 92       	push	r5
    7480:	6f 92       	push	r6
    7482:	7f 92       	push	r7
    7484:	8f 92       	push	r8
    7486:	9f 92       	push	r9
    7488:	af 92       	push	r10
    748a:	bf 92       	push	r11
    748c:	cf 92       	push	r12
    748e:	df 92       	push	r13
    7490:	ef 92       	push	r14
    7492:	ff 92       	push	r15
    7494:	0f 93       	push	r16
    7496:	1f 93       	push	r17
    7498:	df 93       	push	r29
    749a:	cf 93       	push	r28
    749c:	cd b7       	in	r28, 0x3d	; 61
    749e:	de b7       	in	r29, 0x3e	; 62
    74a0:	2e 97       	sbiw	r28, 0x0e	; 14
    74a2:	0f b6       	in	r0, 0x3f	; 63
    74a4:	f8 94       	cli
    74a6:	de bf       	out	0x3e, r29	; 62
    74a8:	0f be       	out	0x3f, r0	; 63
    74aa:	cd bf       	out	0x3d, r28	; 61
    74ac:	98 87       	std	Y+8, r25	; 0x08
    74ae:	8f 83       	std	Y+7, r24	; 0x07
    74b0:	7a 87       	std	Y+10, r23	; 0x0a
    74b2:	69 87       	std	Y+9, r22	; 0x09
    74b4:	5e 87       	std	Y+14, r21	; 0x0e
    74b6:	4d 87       	std	Y+13, r20	; 0x0d
    if(!parent || !dir || !dir[0] || !dir_entry)
    74b8:	89 2b       	or	r24, r25
    74ba:	09 f4       	brne	.+2      	; 0x74be <fat_create_dir+0x46>
    74bc:	ac c1       	rjmp	.+856    	; 0x7816 <fat_create_dir+0x39e>
    74be:	61 15       	cp	r22, r1
    74c0:	71 05       	cpc	r23, r1
    74c2:	09 f4       	brne	.+2      	; 0x74c6 <fat_create_dir+0x4e>
    74c4:	a8 c1       	rjmp	.+848    	; 0x7816 <fat_create_dir+0x39e>
    74c6:	db 01       	movw	r26, r22
    74c8:	8c 91       	ld	r24, X
    74ca:	88 23       	and	r24, r24
    74cc:	09 f4       	brne	.+2      	; 0x74d0 <fat_create_dir+0x58>
    74ce:	a3 c1       	rjmp	.+838    	; 0x7816 <fat_create_dir+0x39e>
    74d0:	45 2b       	or	r20, r21
    74d2:	b1 f4       	brne	.+44     	; 0x7500 <fat_create_dir+0x88>
    74d4:	a0 c1       	rjmp	.+832    	; 0x7816 <fat_create_dir+0x39e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    74d6:	89 85       	ldd	r24, Y+9	; 0x09
    74d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    74da:	6b 85       	ldd	r22, Y+11	; 0x0b
    74dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    74de:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <strcmp>
    74e2:	00 97       	sbiw	r24, 0x00	; 0
    74e4:	89 f4       	brne	.+34     	; 0x7508 <fat_create_dir+0x90>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    74e6:	ef 81       	ldd	r30, Y+7	; 0x07
    74e8:	f8 85       	ldd	r31, Y+8	; 0x08
    74ea:	83 a1       	ldd	r24, Z+35	; 0x23
    74ec:	94 a1       	ldd	r25, Z+36	; 0x24
    74ee:	a5 a1       	ldd	r26, Z+37	; 0x25
    74f0:	b6 a1       	ldd	r27, Z+38	; 0x26
    74f2:	83 ab       	std	Z+51, r24	; 0x33
    74f4:	94 ab       	std	Z+52, r25	; 0x34
    74f6:	a5 ab       	std	Z+53, r26	; 0x35
    74f8:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    74fa:	10 ae       	std	Z+56, r1	; 0x38
    74fc:	17 aa       	std	Z+55, r1	; 0x37
    74fe:	8b c1       	rjmp	.+790    	; 0x7816 <fat_create_dir+0x39e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    7500:	fd 85       	ldd	r31, Y+13	; 0x0d
    7502:	fb 87       	std	Y+11, r31	; 0x0b
    7504:	8e 85       	ldd	r24, Y+14	; 0x0e
    7506:	8c 87       	std	Y+12, r24	; 0x0c
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    7508:	8f 81       	ldd	r24, Y+7	; 0x07
    750a:	98 85       	ldd	r25, Y+8	; 0x08
    750c:	6d 85       	ldd	r22, Y+13	; 0x0d
    750e:	7e 85       	ldd	r23, Y+14	; 0x0e
    7510:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <fat_read_dir>
    7514:	88 23       	and	r24, r24
    7516:	f9 f6       	brne	.-66     	; 0x74d6 <fat_create_dir+0x5e>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    7518:	af 81       	ldd	r26, Y+7	; 0x07
    751a:	b8 85       	ldd	r27, Y+8	; 0x08
    751c:	0d 90       	ld	r0, X+
    751e:	bc 91       	ld	r27, X
    7520:	a0 2d       	mov	r26, r0
    7522:	be 83       	std	Y+6, r27	; 0x06
    7524:	ad 83       	std	Y+5, r26	; 0x05

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    7526:	cd 01       	movw	r24, r26
    7528:	40 e0       	ldi	r20, 0x00	; 0
    752a:	50 e0       	ldi	r21, 0x00	; 0
    752c:	60 e0       	ldi	r22, 0x00	; 0
    752e:	70 e0       	ldi	r23, 0x00	; 0
    7530:	01 e0       	ldi	r16, 0x01	; 1
    7532:	10 e0       	ldi	r17, 0x00	; 0
    7534:	20 e0       	ldi	r18, 0x00	; 0
    7536:	30 e0       	ldi	r19, 0x00	; 0
    7538:	0e 94 25 24 	call	0x484a	; 0x484a <fat_append_clusters>
    753c:	69 83       	std	Y+1, r22	; 0x01
    753e:	7a 83       	std	Y+2, r23	; 0x02
    7540:	8b 83       	std	Y+3, r24	; 0x03
    7542:	9c 83       	std	Y+4, r25	; 0x04
    if(!dir_cluster)
    7544:	61 15       	cp	r22, r1
    7546:	71 05       	cpc	r23, r1
    7548:	81 05       	cpc	r24, r1
    754a:	91 05       	cpc	r25, r1
    754c:	09 f4       	brne	.+2      	; 0x7550 <fat_create_dir+0xd8>
    754e:	63 c1       	rjmp	.+710    	; 0x7816 <fat_create_dir+0x39e>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    7550:	8d 81       	ldd	r24, Y+5	; 0x05
    7552:	9e 81       	ldd	r25, Y+6	; 0x06
    7554:	49 81       	ldd	r20, Y+1	; 0x01
    7556:	5a 81       	ldd	r21, Y+2	; 0x02
    7558:	6b 81       	ldd	r22, Y+3	; 0x03
    755a:	7c 81       	ldd	r23, Y+4	; 0x04
    755c:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <fat_clear_cluster>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    7560:	81 e3       	ldi	r24, 0x31	; 49
    7562:	ed 85       	ldd	r30, Y+13	; 0x0d
    7564:	fe 85       	ldd	r31, Y+14	; 0x0e
    7566:	11 92       	st	Z+, r1
    7568:	8a 95       	dec	r24
    756a:	e9 f7       	brne	.-6      	; 0x7566 <fat_create_dir+0xee>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    756c:	80 e1       	ldi	r24, 0x10	; 16
    756e:	ad 85       	ldd	r26, Y+13	; 0x0d
    7570:	be 85       	ldd	r27, Y+14	; 0x0e
    7572:	90 96       	adiw	r26, 0x20	; 32
    7574:	8c 93       	st	X, r24

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    7576:	89 81       	ldd	r24, Y+1	; 0x01
    7578:	9a 81       	ldd	r25, Y+2	; 0x02
    757a:	ab 81       	ldd	r26, Y+3	; 0x03
    757c:	bc 81       	ldd	r27, Y+4	; 0x04
    757e:	02 97       	sbiw	r24, 0x02	; 2
    7580:	a1 09       	sbc	r26, r1
    7582:	b1 09       	sbc	r27, r1
    7584:	5c 01       	movw	r10, r24
    7586:	6d 01       	movw	r12, r26
    7588:	02 96       	adiw	r24, 0x02	; 2
    758a:	a1 1d       	adc	r26, r1
    758c:	b1 1d       	adc	r27, r1
    758e:	89 83       	std	Y+1, r24	; 0x01
    7590:	9a 83       	std	Y+2, r25	; 0x02
    7592:	ab 83       	std	Y+3, r26	; 0x03
    7594:	bc 83       	std	Y+4, r27	; 0x04
    7596:	ad 81       	ldd	r26, Y+5	; 0x05
    7598:	be 81       	ldd	r27, Y+6	; 0x06
    759a:	58 96       	adiw	r26, 0x18	; 24
    759c:	2d 90       	ld	r2, X+
    759e:	3c 90       	ld	r3, X
    75a0:	59 97       	sbiw	r26, 0x19	; 25
    75a2:	95 01       	movw	r18, r10
    75a4:	a6 01       	movw	r20, r12
    75a6:	60 e0       	ldi	r22, 0x00	; 0
    75a8:	70 e0       	ldi	r23, 0x00	; 0
    75aa:	80 e0       	ldi	r24, 0x00	; 0
    75ac:	90 e0       	ldi	r25, 0x00	; 0
    75ae:	51 01       	movw	r10, r2
    75b0:	cc 24       	eor	r12, r12
    75b2:	dd 24       	eor	r13, r13
    75b4:	ee 24       	eor	r14, r14
    75b6:	ff 24       	eor	r15, r15
    75b8:	00 e0       	ldi	r16, 0x00	; 0
    75ba:	10 e0       	ldi	r17, 0x00	; 0
    75bc:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    75c0:	ed 81       	ldd	r30, Y+5	; 0x05
    75c2:	fe 81       	ldd	r31, Y+6	; 0x06
    75c4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    75c6:	e3 8c       	ldd	r14, Z+27	; 0x1b
    75c8:	14 8d       	ldd	r17, Z+28	; 0x1c
    75ca:	05 8d       	ldd	r16, Z+29	; 0x1d
    75cc:	f6 8c       	ldd	r15, Z+30	; 0x1e
    75ce:	d7 8c       	ldd	r13, Z+31	; 0x1f
    75d0:	c0 a0       	ldd	r12, Z+32	; 0x20
    75d2:	b1 a1       	ldd	r27, Z+33	; 0x21
    75d4:	a2 0f       	add	r26, r18
    75d6:	f1 e0       	ldi	r31, 0x01	; 1
    75d8:	a2 17       	cp	r26, r18
    75da:	08 f0       	brcs	.+2      	; 0x75de <fat_create_dir+0x166>
    75dc:	f0 e0       	ldi	r31, 0x00	; 0
    75de:	23 2f       	mov	r18, r19
    75e0:	2e 0d       	add	r18, r14
    75e2:	e1 e0       	ldi	r30, 0x01	; 1
    75e4:	23 17       	cp	r18, r19
    75e6:	08 f0       	brcs	.+2      	; 0x75ea <fat_create_dir+0x172>
    75e8:	e0 e0       	ldi	r30, 0x00	; 0
    75ea:	ef 2e       	mov	r14, r31
    75ec:	e2 0e       	add	r14, r18
    75ee:	31 e0       	ldi	r19, 0x01	; 1
    75f0:	e2 16       	cp	r14, r18
    75f2:	08 f0       	brcs	.+2      	; 0x75f6 <fat_create_dir+0x17e>
    75f4:	30 e0       	ldi	r19, 0x00	; 0
    75f6:	e3 2b       	or	r30, r19
    75f8:	24 2f       	mov	r18, r20
    75fa:	21 0f       	add	r18, r17
    75fc:	f1 e0       	ldi	r31, 0x01	; 1
    75fe:	24 17       	cp	r18, r20
    7600:	08 f0       	brcs	.+2      	; 0x7604 <fat_create_dir+0x18c>
    7602:	f0 e0       	ldi	r31, 0x00	; 0
    7604:	1e 2f       	mov	r17, r30
    7606:	12 0f       	add	r17, r18
    7608:	31 e0       	ldi	r19, 0x01	; 1
    760a:	12 17       	cp	r17, r18
    760c:	08 f0       	brcs	.+2      	; 0x7610 <fat_create_dir+0x198>
    760e:	30 e0       	ldi	r19, 0x00	; 0
    7610:	f3 2b       	or	r31, r19
    7612:	25 2f       	mov	r18, r21
    7614:	20 0f       	add	r18, r16
    7616:	41 e0       	ldi	r20, 0x01	; 1
    7618:	25 17       	cp	r18, r21
    761a:	08 f0       	brcs	.+2      	; 0x761e <fat_create_dir+0x1a6>
    761c:	40 e0       	ldi	r20, 0x00	; 0
    761e:	0f 2f       	mov	r16, r31
    7620:	02 0f       	add	r16, r18
    7622:	31 e0       	ldi	r19, 0x01	; 1
    7624:	02 17       	cp	r16, r18
    7626:	08 f0       	brcs	.+2      	; 0x762a <fat_create_dir+0x1b2>
    7628:	30 e0       	ldi	r19, 0x00	; 0
    762a:	43 2b       	or	r20, r19
    762c:	26 2f       	mov	r18, r22
    762e:	2f 0d       	add	r18, r15
    7630:	51 e0       	ldi	r21, 0x01	; 1
    7632:	26 17       	cp	r18, r22
    7634:	08 f0       	brcs	.+2      	; 0x7638 <fat_create_dir+0x1c0>
    7636:	50 e0       	ldi	r21, 0x00	; 0
    7638:	64 2f       	mov	r22, r20
    763a:	62 0f       	add	r22, r18
    763c:	31 e0       	ldi	r19, 0x01	; 1
    763e:	62 17       	cp	r22, r18
    7640:	08 f0       	brcs	.+2      	; 0x7644 <fat_create_dir+0x1cc>
    7642:	30 e0       	ldi	r19, 0x00	; 0
    7644:	53 2b       	or	r21, r19
    7646:	27 2f       	mov	r18, r23
    7648:	2d 0d       	add	r18, r13
    764a:	41 e0       	ldi	r20, 0x01	; 1
    764c:	27 17       	cp	r18, r23
    764e:	08 f0       	brcs	.+2      	; 0x7652 <fat_create_dir+0x1da>
    7650:	40 e0       	ldi	r20, 0x00	; 0
    7652:	52 0f       	add	r21, r18
    7654:	31 e0       	ldi	r19, 0x01	; 1
    7656:	52 17       	cp	r21, r18
    7658:	08 f0       	brcs	.+2      	; 0x765c <fat_create_dir+0x1e4>
    765a:	30 e0       	ldi	r19, 0x00	; 0
    765c:	43 2b       	or	r20, r19
    765e:	28 2f       	mov	r18, r24
    7660:	2c 0d       	add	r18, r12
    7662:	31 e0       	ldi	r19, 0x01	; 1
    7664:	28 17       	cp	r18, r24
    7666:	08 f0       	brcs	.+2      	; 0x766a <fat_create_dir+0x1f2>
    7668:	30 e0       	ldi	r19, 0x00	; 0
    766a:	42 0f       	add	r20, r18
    766c:	81 e0       	ldi	r24, 0x01	; 1
    766e:	42 17       	cp	r20, r18
    7670:	08 f0       	brcs	.+2      	; 0x7674 <fat_create_dir+0x1fc>
    7672:	80 e0       	ldi	r24, 0x00	; 0
    7674:	38 2b       	or	r19, r24
    7676:	b9 0f       	add	r27, r25
    7678:	3b 0f       	add	r19, r27
    767a:	ed 85       	ldd	r30, Y+13	; 0x0d
    767c:	fe 85       	ldd	r31, Y+14	; 0x0e
    767e:	a1 a7       	std	Z+41, r26	; 0x29
    7680:	e2 a6       	std	Z+42, r14	; 0x2a
    7682:	13 a7       	std	Z+43, r17	; 0x2b
    7684:	04 a7       	std	Z+44, r16	; 0x2c
    7686:	65 a7       	std	Z+45, r22	; 0x2d
    7688:	56 a7       	std	Z+46, r21	; 0x2e
    768a:	47 a7       	std	Z+47, r20	; 0x2f
    768c:	30 ab       	std	Z+48, r19	; 0x30
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
    768e:	8e e2       	ldi	r24, 0x2E	; 46
    7690:	80 83       	st	Z, r24
    dir_entry->cluster = dir_cluster;
    7692:	89 81       	ldd	r24, Y+1	; 0x01
    7694:	9a 81       	ldd	r25, Y+2	; 0x02
    7696:	ab 81       	ldd	r26, Y+3	; 0x03
    7698:	bc 81       	ldd	r27, Y+4	; 0x04
    769a:	ed 85       	ldd	r30, Y+13	; 0x0d
    769c:	fe 85       	ldd	r31, Y+14	; 0x0e
    769e:	81 a3       	std	Z+33, r24	; 0x21
    76a0:	92 a3       	std	Z+34, r25	; 0x22
    76a2:	a3 a3       	std	Z+35, r26	; 0x23
    76a4:	b4 a3       	std	Z+36, r27	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    76a6:	8d 81       	ldd	r24, Y+5	; 0x05
    76a8:	9e 81       	ldd	r25, Y+6	; 0x06
    76aa:	bf 01       	movw	r22, r30
    76ac:	0e 94 50 38 	call	0x70a0	; 0x70a0 <fat_write_dir_entry>
    76b0:	88 23       	and	r24, r24
    76b2:	09 f4       	brne	.+2      	; 0x76b6 <fat_create_dir+0x23e>
    76b4:	a8 c0       	rjmp	.+336    	; 0x7806 <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
    76b6:	ad 85       	ldd	r26, Y+13	; 0x0d
    76b8:	be 85       	ldd	r27, Y+14	; 0x0e
    76ba:	99 96       	adiw	r26, 0x29	; 41
    76bc:	8c 91       	ld	r24, X
    76be:	99 97       	sbiw	r26, 0x29	; 41
    76c0:	9a 96       	adiw	r26, 0x2a	; 42
    76c2:	2c 91       	ld	r18, X
    76c4:	9a 97       	sbiw	r26, 0x2a	; 42
    76c6:	9b 96       	adiw	r26, 0x2b	; 43
    76c8:	3c 91       	ld	r19, X
    76ca:	9b 97       	sbiw	r26, 0x2b	; 43
    76cc:	9c 96       	adiw	r26, 0x2c	; 44
    76ce:	4c 91       	ld	r20, X
    76d0:	9c 97       	sbiw	r26, 0x2c	; 44
    76d2:	9d 96       	adiw	r26, 0x2d	; 45
    76d4:	6c 91       	ld	r22, X
    76d6:	9d 97       	sbiw	r26, 0x2d	; 45
    76d8:	9e 96       	adiw	r26, 0x2e	; 46
    76da:	fc 90       	ld	r15, X
    76dc:	9e 97       	sbiw	r26, 0x2e	; 46
    76de:	9f 96       	adiw	r26, 0x2f	; 47
    76e0:	ac 91       	ld	r26, X
    76e2:	ed 85       	ldd	r30, Y+13	; 0x0d
    76e4:	fe 85       	ldd	r31, Y+14	; 0x0e
    76e6:	10 a9       	ldd	r17, Z+48	; 0x30
    76e8:	b8 2f       	mov	r27, r24
    76ea:	b0 5e       	subi	r27, 0xE0	; 224
    76ec:	91 e0       	ldi	r25, 0x01	; 1
    76ee:	b8 17       	cp	r27, r24
    76f0:	08 f0       	brcs	.+2      	; 0x76f4 <fat_create_dir+0x27c>
    76f2:	90 e0       	ldi	r25, 0x00	; 0
    76f4:	09 2f       	mov	r16, r25
    76f6:	02 0f       	add	r16, r18
    76f8:	81 e0       	ldi	r24, 0x01	; 1
    76fa:	02 17       	cp	r16, r18
    76fc:	08 f0       	brcs	.+2      	; 0x7700 <fat_create_dir+0x288>
    76fe:	80 e0       	ldi	r24, 0x00	; 0
    7700:	78 2f       	mov	r23, r24
    7702:	73 0f       	add	r23, r19
    7704:	81 e0       	ldi	r24, 0x01	; 1
    7706:	73 17       	cp	r23, r19
    7708:	08 f0       	brcs	.+2      	; 0x770c <fat_create_dir+0x294>
    770a:	80 e0       	ldi	r24, 0x00	; 0
    770c:	58 2f       	mov	r21, r24
    770e:	54 0f       	add	r21, r20
    7710:	81 e0       	ldi	r24, 0x01	; 1
    7712:	54 17       	cp	r21, r20
    7714:	08 f0       	brcs	.+2      	; 0x7718 <fat_create_dir+0x2a0>
    7716:	80 e0       	ldi	r24, 0x00	; 0
    7718:	38 2f       	mov	r19, r24
    771a:	36 0f       	add	r19, r22
    771c:	81 e0       	ldi	r24, 0x01	; 1
    771e:	36 17       	cp	r19, r22
    7720:	08 f0       	brcs	.+2      	; 0x7724 <fat_create_dir+0x2ac>
    7722:	80 e0       	ldi	r24, 0x00	; 0
    7724:	28 2f       	mov	r18, r24
    7726:	2f 0d       	add	r18, r15
    7728:	81 e0       	ldi	r24, 0x01	; 1
    772a:	2f 15       	cp	r18, r15
    772c:	08 f0       	brcs	.+2      	; 0x7730 <fat_create_dir+0x2b8>
    772e:	80 e0       	ldi	r24, 0x00	; 0
    7730:	98 2f       	mov	r25, r24
    7732:	9a 0f       	add	r25, r26
    7734:	81 e0       	ldi	r24, 0x01	; 1
    7736:	9a 17       	cp	r25, r26
    7738:	08 f0       	brcs	.+2      	; 0x773c <fat_create_dir+0x2c4>
    773a:	80 e0       	ldi	r24, 0x00	; 0
    773c:	81 0f       	add	r24, r17
    773e:	ed 85       	ldd	r30, Y+13	; 0x0d
    7740:	fe 85       	ldd	r31, Y+14	; 0x0e
    7742:	b1 a7       	std	Z+41, r27	; 0x29
    7744:	02 a7       	std	Z+42, r16	; 0x2a
    7746:	73 a7       	std	Z+43, r23	; 0x2b
    7748:	54 a7       	std	Z+44, r21	; 0x2c
    774a:	35 a7       	std	Z+45, r19	; 0x2d
    774c:	26 a7       	std	Z+46, r18	; 0x2e
    774e:	97 a7       	std	Z+47, r25	; 0x2f
    7750:	80 ab       	std	Z+48, r24	; 0x30
    dir_entry->long_name[1] = '.';
    7752:	8e e2       	ldi	r24, 0x2E	; 46
    7754:	81 83       	std	Z+1, r24	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    7756:	ef 81       	ldd	r30, Y+7	; 0x07
    7758:	f8 85       	ldd	r31, Y+8	; 0x08
    775a:	83 a1       	ldd	r24, Z+35	; 0x23
    775c:	94 a1       	ldd	r25, Z+36	; 0x24
    775e:	a5 a1       	ldd	r26, Z+37	; 0x25
    7760:	b6 a1       	ldd	r27, Z+38	; 0x26
    7762:	ed 85       	ldd	r30, Y+13	; 0x0d
    7764:	fe 85       	ldd	r31, Y+14	; 0x0e
    7766:	81 a3       	std	Z+33, r24	; 0x21
    7768:	92 a3       	std	Z+34, r25	; 0x22
    776a:	a3 a3       	std	Z+35, r26	; 0x23
    776c:	b4 a3       	std	Z+36, r27	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    776e:	8d 81       	ldd	r24, Y+5	; 0x05
    7770:	9e 81       	ldd	r25, Y+6	; 0x06
    7772:	bf 01       	movw	r22, r30
    7774:	0e 94 50 38 	call	0x70a0	; 0x70a0 <fat_write_dir_entry>
    7778:	88 23       	and	r24, r24
    777a:	09 f4       	brne	.+2      	; 0x777e <fat_create_dir+0x306>
    777c:	44 c0       	rjmp	.+136    	; 0x7806 <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    777e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7780:	9c 85       	ldd	r25, Y+12	; 0x0c
    7782:	69 85       	ldd	r22, Y+9	; 0x09
    7784:	7a 85       	ldd	r23, Y+10	; 0x0a
    7786:	4f e1       	ldi	r20, 0x1F	; 31
    7788:	50 e0       	ldi	r21, 0x00	; 0
    778a:	0e 94 0e 48 	call	0x901c	; 0x901c <strncpy>
    dir_entry->cluster = dir_cluster;
    778e:	89 81       	ldd	r24, Y+1	; 0x01
    7790:	9a 81       	ldd	r25, Y+2	; 0x02
    7792:	ab 81       	ldd	r26, Y+3	; 0x03
    7794:	bc 81       	ldd	r27, Y+4	; 0x04
    7796:	ed 85       	ldd	r30, Y+13	; 0x0d
    7798:	fe 85       	ldd	r31, Y+14	; 0x0e
    779a:	81 a3       	std	Z+33, r24	; 0x21
    779c:	92 a3       	std	Z+34, r25	; 0x22
    779e:	a3 a3       	std	Z+35, r26	; 0x23
    77a0:	b4 a3       	std	Z+36, r27	; 0x24

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    77a2:	8d 81       	ldd	r24, Y+5	; 0x05
    77a4:	9e 81       	ldd	r25, Y+6	; 0x06
    77a6:	6f 81       	ldd	r22, Y+7	; 0x07
    77a8:	78 85       	ldd	r23, Y+8	; 0x08
    77aa:	af 01       	movw	r20, r30
    77ac:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <fat_find_offset_for_dir_entry>
    77b0:	ad 85       	ldd	r26, Y+13	; 0x0d
    77b2:	be 85       	ldd	r27, Y+14	; 0x0e
    77b4:	99 96       	adiw	r26, 0x29	; 41
    77b6:	2c 93       	st	X, r18
    77b8:	99 97       	sbiw	r26, 0x29	; 41
    77ba:	9a 96       	adiw	r26, 0x2a	; 42
    77bc:	3c 93       	st	X, r19
    77be:	9a 97       	sbiw	r26, 0x2a	; 42
    77c0:	9b 96       	adiw	r26, 0x2b	; 43
    77c2:	4c 93       	st	X, r20
    77c4:	9b 97       	sbiw	r26, 0x2b	; 43
    77c6:	9c 96       	adiw	r26, 0x2c	; 44
    77c8:	5c 93       	st	X, r21
    77ca:	9c 97       	sbiw	r26, 0x2c	; 44
    77cc:	9d 96       	adiw	r26, 0x2d	; 45
    77ce:	6c 93       	st	X, r22
    77d0:	9d 97       	sbiw	r26, 0x2d	; 45
    77d2:	9e 96       	adiw	r26, 0x2e	; 46
    77d4:	7c 93       	st	X, r23
    77d6:	9e 97       	sbiw	r26, 0x2e	; 46
    77d8:	9f 96       	adiw	r26, 0x2f	; 47
    77da:	8c 93       	st	X, r24
    77dc:	9f 97       	sbiw	r26, 0x2f	; 47
    77de:	d0 96       	adiw	r26, 0x30	; 48
    77e0:	9c 93       	st	X, r25
    77e2:	23 2b       	or	r18, r19
    77e4:	24 2b       	or	r18, r20
    77e6:	25 2b       	or	r18, r21
    77e8:	26 2b       	or	r18, r22
    77ea:	27 2b       	or	r18, r23
    77ec:	28 2b       	or	r18, r24
    77ee:	29 2b       	or	r18, r25
    77f0:	51 f0       	breq	.+20     	; 0x7806 <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    77f2:	8d 81       	ldd	r24, Y+5	; 0x05
    77f4:	9e 81       	ldd	r25, Y+6	; 0x06
    77f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    77f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    77fa:	0e 94 50 38 	call	0x70a0	; 0x70a0 <fat_write_dir_entry>
    77fe:	88 23       	and	r24, r24
    7800:	11 f0       	breq	.+4      	; 0x7806 <fat_create_dir+0x38e>
    7802:	81 e0       	ldi	r24, 0x01	; 1
    7804:	09 c0       	rjmp	.+18     	; 0x7818 <fat_create_dir+0x3a0>
    {
        fat_free_clusters(fs, dir_cluster);
    7806:	8d 81       	ldd	r24, Y+5	; 0x05
    7808:	9e 81       	ldd	r25, Y+6	; 0x06
    780a:	49 81       	ldd	r20, Y+1	; 0x01
    780c:	5a 81       	ldd	r21, Y+2	; 0x02
    780e:	6b 81       	ldd	r22, Y+3	; 0x03
    7810:	7c 81       	ldd	r23, Y+4	; 0x04
    7812:	0e 94 69 22 	call	0x44d2	; 0x44d2 <fat_free_clusters>
        return 0;
    7816:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    7818:	2e 96       	adiw	r28, 0x0e	; 14
    781a:	0f b6       	in	r0, 0x3f	; 63
    781c:	f8 94       	cli
    781e:	de bf       	out	0x3e, r29	; 62
    7820:	0f be       	out	0x3f, r0	; 63
    7822:	cd bf       	out	0x3d, r28	; 61
    7824:	cf 91       	pop	r28
    7826:	df 91       	pop	r29
    7828:	1f 91       	pop	r17
    782a:	0f 91       	pop	r16
    782c:	ff 90       	pop	r15
    782e:	ef 90       	pop	r14
    7830:	df 90       	pop	r13
    7832:	cf 90       	pop	r12
    7834:	bf 90       	pop	r11
    7836:	af 90       	pop	r10
    7838:	9f 90       	pop	r9
    783a:	8f 90       	pop	r8
    783c:	7f 90       	pop	r7
    783e:	6f 90       	pop	r6
    7840:	5f 90       	pop	r5
    7842:	4f 90       	pop	r4
    7844:	3f 90       	pop	r3
    7846:	2f 90       	pop	r2
    7848:	08 95       	ret

0000784a <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    784a:	af 92       	push	r10
    784c:	bf 92       	push	r11
    784e:	cf 92       	push	r12
    7850:	df 92       	push	r13
    7852:	ef 92       	push	r14
    7854:	ff 92       	push	r15
    7856:	0f 93       	push	r16
    7858:	1f 93       	push	r17
    785a:	cf 93       	push	r28
    785c:	df 93       	push	r29
    785e:	8c 01       	movw	r16, r24
    7860:	7b 01       	movw	r14, r22
    7862:	ea 01       	movw	r28, r20
    if(!parent || !file || !file[0] || !dir_entry)
    7864:	00 97       	sbiw	r24, 0x00	; 0
    7866:	09 f4       	brne	.+2      	; 0x786a <fat_create_file+0x20>
    7868:	54 c0       	rjmp	.+168    	; 0x7912 <fat_create_file+0xc8>
    786a:	61 15       	cp	r22, r1
    786c:	71 05       	cpc	r23, r1
    786e:	09 f4       	brne	.+2      	; 0x7872 <fat_create_file+0x28>
    7870:	50 c0       	rjmp	.+160    	; 0x7912 <fat_create_file+0xc8>
    7872:	fb 01       	movw	r30, r22
    7874:	80 81       	ld	r24, Z
    7876:	88 23       	and	r24, r24
    7878:	09 f4       	brne	.+2      	; 0x787c <fat_create_file+0x32>
    787a:	4b c0       	rjmp	.+150    	; 0x7912 <fat_create_file+0xc8>
    787c:	41 15       	cp	r20, r1
    787e:	51 05       	cpc	r21, r1
    7880:	09 f4       	brne	.+2      	; 0x7884 <fat_create_file+0x3a>
    7882:	47 c0       	rjmp	.+142    	; 0x7912 <fat_create_file+0xc8>
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    7884:	b4 2e       	mov	r11, r20
    7886:	ad 2e       	mov	r10, r29
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    7888:	c8 01       	movw	r24, r16
    788a:	be 01       	movw	r22, r28
    788c:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <fat_read_dir>
    7890:	88 23       	and	r24, r24
    7892:	99 f0       	breq	.+38     	; 0x78ba <fat_create_file+0x70>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    7894:	c7 01       	movw	r24, r14
    7896:	6b 2d       	mov	r22, r11
    7898:	7a 2d       	mov	r23, r10
    789a:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <strcmp>
    789e:	00 97       	sbiw	r24, 0x00	; 0
    78a0:	99 f7       	brne	.-26     	; 0x7888 <fat_create_file+0x3e>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    78a2:	f8 01       	movw	r30, r16
    78a4:	83 a1       	ldd	r24, Z+35	; 0x23
    78a6:	94 a1       	ldd	r25, Z+36	; 0x24
    78a8:	a5 a1       	ldd	r26, Z+37	; 0x25
    78aa:	b6 a1       	ldd	r27, Z+38	; 0x26
    78ac:	83 ab       	std	Z+51, r24	; 0x33
    78ae:	94 ab       	std	Z+52, r25	; 0x34
    78b0:	a5 ab       	std	Z+53, r26	; 0x35
    78b2:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    78b4:	10 ae       	std	Z+56, r1	; 0x38
    78b6:	17 aa       	std	Z+55, r1	; 0x37
    78b8:	2c c0       	rjmp	.+88     	; 0x7912 <fat_create_file+0xc8>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    78ba:	f8 01       	movw	r30, r16
    78bc:	c0 80       	ld	r12, Z
    78be:	d1 80       	ldd	r13, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    78c0:	81 e3       	ldi	r24, 0x31	; 49
    78c2:	fe 01       	movw	r30, r28
    78c4:	11 92       	st	Z+, r1
    78c6:	8a 95       	dec	r24
    78c8:	e9 f7       	brne	.-6      	; 0x78c4 <fat_create_file+0x7a>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    78ca:	8b 2d       	mov	r24, r11
    78cc:	9a 2d       	mov	r25, r10
    78ce:	b7 01       	movw	r22, r14
    78d0:	4f e1       	ldi	r20, 0x1F	; 31
    78d2:	50 e0       	ldi	r21, 0x00	; 0
    78d4:	0e 94 0e 48 	call	0x901c	; 0x901c <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    78d8:	c6 01       	movw	r24, r12
    78da:	b8 01       	movw	r22, r16
    78dc:	ae 01       	movw	r20, r28
    78de:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <fat_find_offset_for_dir_entry>
    78e2:	29 a7       	std	Y+41, r18	; 0x29
    78e4:	3a a7       	std	Y+42, r19	; 0x2a
    78e6:	4b a7       	std	Y+43, r20	; 0x2b
    78e8:	5c a7       	std	Y+44, r21	; 0x2c
    78ea:	6d a7       	std	Y+45, r22	; 0x2d
    78ec:	7e a7       	std	Y+46, r23	; 0x2e
    78ee:	8f a7       	std	Y+47, r24	; 0x2f
    78f0:	98 ab       	std	Y+48, r25	; 0x30
    78f2:	23 2b       	or	r18, r19
    78f4:	24 2b       	or	r18, r20
    78f6:	25 2b       	or	r18, r21
    78f8:	26 2b       	or	r18, r22
    78fa:	27 2b       	or	r18, r23
    78fc:	28 2b       	or	r18, r24
    78fe:	29 2b       	or	r18, r25
    7900:	41 f0       	breq	.+16     	; 0x7912 <fat_create_file+0xc8>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    7902:	c6 01       	movw	r24, r12
    7904:	be 01       	movw	r22, r28
    7906:	0e 94 50 38 	call	0x70a0	; 0x70a0 <fat_write_dir_entry>
    790a:	88 23       	and	r24, r24
    790c:	19 f0       	breq	.+6      	; 0x7914 <fat_create_file+0xca>
    790e:	81 e0       	ldi	r24, 0x01	; 1
    7910:	01 c0       	rjmp	.+2      	; 0x7914 <fat_create_file+0xca>
    7912:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    
    return 1;
}
    7914:	df 91       	pop	r29
    7916:	cf 91       	pop	r28
    7918:	1f 91       	pop	r17
    791a:	0f 91       	pop	r16
    791c:	ff 90       	pop	r15
    791e:	ef 90       	pop	r14
    7920:	df 90       	pop	r13
    7922:	cf 90       	pop	r12
    7924:	bf 90       	pop	r11
    7926:	af 90       	pop	r10
    7928:	08 95       	ret

0000792a <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    792a:	2f 92       	push	r2
    792c:	3f 92       	push	r3
    792e:	4f 92       	push	r4
    7930:	5f 92       	push	r5
    7932:	6f 92       	push	r6
    7934:	7f 92       	push	r7
    7936:	8f 92       	push	r8
    7938:	9f 92       	push	r9
    793a:	af 92       	push	r10
    793c:	bf 92       	push	r11
    793e:	cf 92       	push	r12
    7940:	df 92       	push	r13
    7942:	ef 92       	push	r14
    7944:	ff 92       	push	r15
    7946:	0f 93       	push	r16
    7948:	1f 93       	push	r17
    794a:	df 93       	push	r29
    794c:	cf 93       	push	r28
    794e:	cd b7       	in	r28, 0x3d	; 61
    7950:	de b7       	in	r29, 0x3e	; 62
    7952:	62 97       	sbiw	r28, 0x12	; 18
    7954:	0f b6       	in	r0, 0x3f	; 63
    7956:	f8 94       	cli
    7958:	de bf       	out	0x3e, r29	; 62
    795a:	0f be       	out	0x3f, r0	; 63
    795c:	cd bf       	out	0x3d, r28	; 61
    795e:	1c 01       	movw	r2, r24
    7960:	4b 87       	std	Y+11, r20	; 0x0b
    7962:	5c 87       	std	Y+12, r21	; 0x0c
    7964:	6d 87       	std	Y+13, r22	; 0x0d
    7966:	7e 87       	std	Y+14, r23	; 0x0e
    if(!fd)
    7968:	00 97       	sbiw	r24, 0x00	; 0
    796a:	09 f4       	brne	.+2      	; 0x796e <fat_resize_file+0x44>
    796c:	15 c2       	rjmp	.+1066   	; 0x7d98 <fat_resize_file+0x46e>
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    796e:	dc 01       	movw	r26, r24
    7970:	93 96       	adiw	r26, 0x23	; 35
    7972:	cd 90       	ld	r12, X+
    7974:	dd 90       	ld	r13, X+
    7976:	ed 90       	ld	r14, X+
    7978:	fc 90       	ld	r15, X
    797a:	96 97       	sbiw	r26, 0x26	; 38
    uint16_t cluster_size = fd->fs->header.cluster_size;
    797c:	ed 91       	ld	r30, X+
    797e:	fc 91       	ld	r31, X
    7980:	20 8d       	ldd	r18, Z+24	; 0x18
    7982:	31 8d       	ldd	r19, Z+25	; 0x19
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    7984:	c1 14       	cp	r12, r1
    7986:	d1 04       	cpc	r13, r1
    7988:	e1 04       	cpc	r14, r1
    798a:	f1 04       	cpc	r15, r1
    798c:	99 f0       	breq	.+38     	; 0x79b4 <fat_resize_file+0x8a>
    798e:	4b 84       	ldd	r4, Y+11	; 0x0b
    7990:	5c 84       	ldd	r5, Y+12	; 0x0c
    7992:	6d 84       	ldd	r6, Y+13	; 0x0d
    7994:	7e 84       	ldd	r7, Y+14	; 0x0e
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    7996:	49 01       	movw	r8, r18
    7998:	aa 24       	eor	r10, r10
    799a:	bb 24       	eor	r11, r11
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    799c:	22 27       	eor	r18, r18
    799e:	33 27       	eor	r19, r19
    79a0:	a9 01       	movw	r20, r18
    79a2:	28 19       	sub	r18, r8
    79a4:	39 09       	sbc	r19, r9
    79a6:	4a 09       	sbc	r20, r10
    79a8:	5b 09       	sbc	r21, r11
    79aa:	2f 87       	std	Y+15, r18	; 0x0f
    79ac:	38 8b       	std	Y+16, r19	; 0x10
    79ae:	49 8b       	std	Y+17, r20	; 0x11
    79b0:	5a 8b       	std	Y+18, r21	; 0x12
    79b2:	20 c0       	rjmp	.+64     	; 0x79f4 <fat_resize_file+0xca>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    79b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    79b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    79b8:	ad 85       	ldd	r26, Y+13	; 0x0d
    79ba:	be 85       	ldd	r27, Y+14	; 0x0e
    79bc:	00 97       	sbiw	r24, 0x00	; 0
    79be:	a1 05       	cpc	r26, r1
    79c0:	b1 05       	cpc	r27, r1
    79c2:	09 f4       	brne	.+2      	; 0x79c6 <fat_resize_file+0x9c>
    79c4:	97 c1       	rjmp	.+814    	; 0x7cf4 <fat_resize_file+0x3ca>
    79c6:	e3 cf       	rjmp	.-58     	; 0x798e <fat_resize_file+0x64>

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    79c8:	d1 01       	movw	r26, r2
    79ca:	8d 91       	ld	r24, X+
    79cc:	9c 91       	ld	r25, X
    79ce:	b7 01       	movw	r22, r14
    79d0:	a6 01       	movw	r20, r12
    79d2:	0e 94 4b 21 	call	0x4296	; 0x4296 <fat_get_next_cluster>
            if(cluster_num_next)
    79d6:	61 15       	cp	r22, r1
    79d8:	71 05       	cpc	r23, r1
    79da:	81 05       	cpc	r24, r1
    79dc:	91 05       	cpc	r25, r1
    79de:	81 f0       	breq	.+32     	; 0x7a00 <fat_resize_file+0xd6>
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    79e0:	2f 85       	ldd	r18, Y+15	; 0x0f
    79e2:	38 89       	ldd	r19, Y+16	; 0x10
    79e4:	49 89       	ldd	r20, Y+17	; 0x11
    79e6:	5a 89       	ldd	r21, Y+18	; 0x12
    79e8:	42 0e       	add	r4, r18
    79ea:	53 1e       	adc	r5, r19
    79ec:	64 1e       	adc	r6, r20
    79ee:	75 1e       	adc	r7, r21
    79f0:	6b 01       	movw	r12, r22
    79f2:	7c 01       	movw	r14, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    79f4:	84 14       	cp	r8, r4
    79f6:	95 04       	cpc	r9, r5
    79f8:	a6 04       	cpc	r10, r6
    79fa:	b7 04       	cpc	r11, r7
    79fc:	28 f3       	brcs	.-54     	; 0x79c8 <fat_resize_file+0x9e>
    79fe:	e6 c1       	rjmp	.+972    	; 0x7dcc <fat_resize_file+0x4a2>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    7a00:	c3 01       	movw	r24, r6
    7a02:	b2 01       	movw	r22, r4
    7a04:	68 0d       	add	r22, r8
    7a06:	79 1d       	adc	r23, r9
    7a08:	8a 1d       	adc	r24, r10
    7a0a:	9b 1d       	adc	r25, r11
    7a0c:	61 50       	subi	r22, 0x01	; 1
    7a0e:	70 40       	sbci	r23, 0x00	; 0
    7a10:	80 40       	sbci	r24, 0x00	; 0
    7a12:	90 40       	sbci	r25, 0x00	; 0
    7a14:	a5 01       	movw	r20, r10
    7a16:	94 01       	movw	r18, r8
    7a18:	0e 94 17 4b 	call	0x962e	; 0x962e <__udivmodsi4>
    7a1c:	89 01       	movw	r16, r18
    7a1e:	9a 01       	movw	r18, r20
    7a20:	d1 01       	movw	r26, r2
    7a22:	8d 91       	ld	r24, X+
    7a24:	9c 91       	ld	r25, X
    7a26:	b7 01       	movw	r22, r14
    7a28:	a6 01       	movw	r20, r12
    7a2a:	0e 94 25 24 	call	0x484a	; 0x484a <fat_append_clusters>
            if(!cluster_new_chain)
    7a2e:	61 15       	cp	r22, r1
    7a30:	71 05       	cpc	r23, r1
    7a32:	81 05       	cpc	r24, r1
    7a34:	91 05       	cpc	r25, r1
    7a36:	09 f4       	brne	.+2      	; 0x7a3a <fat_resize_file+0x110>
    7a38:	af c1       	rjmp	.+862    	; 0x7d98 <fat_resize_file+0x46e>
                return 0;

            if(!cluster_num)
    7a3a:	c1 14       	cp	r12, r1
    7a3c:	d1 04       	cpc	r13, r1
    7a3e:	e1 04       	cpc	r14, r1
    7a40:	f1 04       	cpc	r15, r1
    7a42:	39 f4       	brne	.+14     	; 0x7a52 <fat_resize_file+0x128>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    7a44:	f1 01       	movw	r30, r2
    7a46:	63 a3       	std	Z+35, r22	; 0x23
    7a48:	74 a3       	std	Z+36, r23	; 0x24
    7a4a:	85 a3       	std	Z+37, r24	; 0x25
    7a4c:	96 a3       	std	Z+38, r25	; 0x26
    7a4e:	6b 01       	movw	r12, r22
    7a50:	7c 01       	movw	r14, r24
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    7a52:	2b 85       	ldd	r18, Y+11	; 0x0b
    7a54:	3c 85       	ldd	r19, Y+12	; 0x0c
    7a56:	4d 85       	ldd	r20, Y+13	; 0x0d
    7a58:	5e 85       	ldd	r21, Y+14	; 0x0e
    7a5a:	d1 01       	movw	r26, r2
    7a5c:	97 96       	adiw	r26, 0x27	; 39
    7a5e:	2d 93       	st	X+, r18
    7a60:	3d 93       	st	X+, r19
    7a62:	4d 93       	st	X+, r20
    7a64:	5c 93       	st	X, r21
    7a66:	9a 97       	sbiw	r26, 0x2a	; 42
        if(size == 0)
    7a68:	21 15       	cp	r18, r1
    7a6a:	31 05       	cpc	r19, r1
    7a6c:	41 05       	cpc	r20, r1
    7a6e:	51 05       	cpc	r21, r1
    7a70:	29 f4       	brne	.+10     	; 0x7a7c <fat_resize_file+0x152>
            fd->dir_entry.cluster = 0;
    7a72:	f1 01       	movw	r30, r2
    7a74:	13 a2       	std	Z+35, r1	; 0x23
    7a76:	14 a2       	std	Z+36, r1	; 0x24
    7a78:	15 a2       	std	Z+37, r1	; 0x25
    7a7a:	16 a2       	std	Z+38, r1	; 0x26
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    7a7c:	f1 01       	movw	r30, r2
    7a7e:	81 91       	ld	r24, Z+
    7a80:	91 91       	ld	r25, Z+
    7a82:	bf 01       	movw	r22, r30
    7a84:	0e 94 50 38 	call	0x70a0	; 0x70a0 <fat_write_dir_entry>
    7a88:	88 23       	and	r24, r24
    7a8a:	09 f4       	brne	.+2      	; 0x7a8e <fat_resize_file+0x164>
    7a8c:	85 c1       	rjmp	.+778    	; 0x7d98 <fat_resize_file+0x46e>
            return 0;

        if(size == 0)
    7a8e:	2b 85       	ldd	r18, Y+11	; 0x0b
    7a90:	3c 85       	ldd	r19, Y+12	; 0x0c
    7a92:	4d 85       	ldd	r20, Y+13	; 0x0d
    7a94:	5e 85       	ldd	r21, Y+14	; 0x0e
    7a96:	21 15       	cp	r18, r1
    7a98:	31 05       	cpc	r19, r1
    7a9a:	41 05       	cpc	r20, r1
    7a9c:	51 05       	cpc	r21, r1
    7a9e:	31 f4       	brne	.+12     	; 0x7aac <fat_resize_file+0x182>
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    7aa0:	d1 01       	movw	r26, r2
    7aa2:	8d 91       	ld	r24, X+
    7aa4:	9c 91       	ld	r25, X
    7aa6:	b7 01       	movw	r22, r14
    7aa8:	a6 01       	movw	r20, r12
    7aaa:	22 c1       	rjmp	.+580    	; 0x7cf0 <fat_resize_file+0x3c6>
        }
        else if(size_new <= cluster_size)
    7aac:	84 14       	cp	r8, r4
    7aae:	95 04       	cpc	r9, r5
    7ab0:	a6 04       	cpc	r10, r6
    7ab2:	b7 04       	cpc	r11, r7
    7ab4:	08 f4       	brcc	.+2      	; 0x7ab8 <fat_resize_file+0x18e>
    7ab6:	1e c1       	rjmp	.+572    	; 0x7cf4 <fat_resize_file+0x3ca>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    7ab8:	f1 01       	movw	r30, r2
    7aba:	a0 80       	ld	r10, Z
    7abc:	b1 80       	ldd	r11, Z+1	; 0x01
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    7abe:	a1 14       	cp	r10, r1
    7ac0:	b1 04       	cpc	r11, r1
    7ac2:	09 f4       	brne	.+2      	; 0x7ac6 <fat_resize_file+0x19c>
    7ac4:	17 c1       	rjmp	.+558    	; 0x7cf4 <fat_resize_file+0x3ca>
    7ac6:	f2 e0       	ldi	r31, 0x02	; 2
    7ac8:	cf 16       	cp	r12, r31
    7aca:	d1 04       	cpc	r13, r1
    7acc:	e1 04       	cpc	r14, r1
    7ace:	f1 04       	cpc	r15, r1
    7ad0:	08 f4       	brcc	.+2      	; 0x7ad4 <fat_resize_file+0x1aa>
    7ad2:	10 c1       	rjmp	.+544    	; 0x7cf4 <fat_resize_file+0x3ca>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    7ad4:	c5 01       	movw	r24, r10
    7ad6:	b7 01       	movw	r22, r14
    7ad8:	a6 01       	movw	r20, r12
    7ada:	0e 94 4b 21 	call	0x4296	; 0x4296 <fat_get_next_cluster>
    7ade:	6f 83       	std	Y+7, r22	; 0x07
    7ae0:	78 87       	std	Y+8, r23	; 0x08
    7ae2:	89 87       	std	Y+9, r24	; 0x09
    7ae4:	9a 87       	std	Y+10, r25	; 0x0a

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    7ae6:	d5 01       	movw	r26, r10
    7ae8:	8d 90       	ld	r8, X+
    7aea:	9c 90       	ld	r9, X
    7aec:	f4 01       	movw	r30, r8
    7aee:	80 85       	ldd	r24, Z+8	; 0x08
    7af0:	8b 30       	cpi	r24, 0x0B	; 11
    7af2:	09 f0       	breq	.+2      	; 0x7af6 <fat_resize_file+0x1cc>
    7af4:	7b c0       	rjmp	.+246    	; 0x7bec <fat_resize_file+0x2c2>
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
    7af6:	8f ef       	ldi	r24, 0xFF	; 255
    7af8:	9f ef       	ldi	r25, 0xFF	; 255
    7afa:	af ef       	ldi	r26, 0xFF	; 255
    7afc:	bf e0       	ldi	r27, 0x0F	; 15
    7afe:	8b 83       	std	Y+3, r24	; 0x03
    7b00:	9c 83       	std	Y+4, r25	; 0x04
    7b02:	ad 83       	std	Y+5, r26	; 0x05
    7b04:	be 83       	std	Y+6, r27	; 0x06
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    7b06:	b2 e0       	ldi	r27, 0x02	; 2
    7b08:	cc 0c       	add	r12, r12
    7b0a:	dd 1c       	adc	r13, r13
    7b0c:	ee 1c       	adc	r14, r14
    7b0e:	ff 1c       	adc	r15, r15
    7b10:	ba 95       	dec	r27
    7b12:	d1 f7       	brne	.-12     	; 0x7b08 <fat_resize_file+0x1de>
    7b14:	b7 01       	movw	r22, r14
    7b16:	a6 01       	movw	r20, r12
    7b18:	80 e0       	ldi	r24, 0x00	; 0
    7b1a:	90 e0       	ldi	r25, 0x00	; 0
    7b1c:	a0 e0       	ldi	r26, 0x00	; 0
    7b1e:	b0 e0       	ldi	r27, 0x00	; 0
    7b20:	f5 01       	movw	r30, r10
    7b22:	22 85       	ldd	r18, Z+10	; 0x0a
    7b24:	13 85       	ldd	r17, Z+11	; 0x0b
    7b26:	04 85       	ldd	r16, Z+12	; 0x0c
    7b28:	c5 84       	ldd	r12, Z+13	; 0x0d
    7b2a:	f6 84       	ldd	r15, Z+14	; 0x0e
    7b2c:	e7 84       	ldd	r14, Z+15	; 0x0f
    7b2e:	d0 88       	ldd	r13, Z+16	; 0x10
    7b30:	51 88       	ldd	r5, Z+17	; 0x11
    7b32:	24 0f       	add	r18, r20
    7b34:	31 e0       	ldi	r19, 0x01	; 1
    7b36:	24 17       	cp	r18, r20
    7b38:	08 f0       	brcs	.+2      	; 0x7b3c <fat_resize_file+0x212>
    7b3a:	30 e0       	ldi	r19, 0x00	; 0
    7b3c:	e1 2f       	mov	r30, r17
    7b3e:	e5 0f       	add	r30, r21
    7b40:	11 e0       	ldi	r17, 0x01	; 1
    7b42:	e5 17       	cp	r30, r21
    7b44:	08 f0       	brcs	.+2      	; 0x7b48 <fat_resize_file+0x21e>
    7b46:	10 e0       	ldi	r17, 0x00	; 0
    7b48:	3e 0f       	add	r19, r30
    7b4a:	f1 e0       	ldi	r31, 0x01	; 1
    7b4c:	3e 17       	cp	r19, r30
    7b4e:	08 f0       	brcs	.+2      	; 0x7b52 <fat_resize_file+0x228>
    7b50:	f0 e0       	ldi	r31, 0x00	; 0
    7b52:	1f 2b       	or	r17, r31
    7b54:	e6 2f       	mov	r30, r22
    7b56:	e0 0f       	add	r30, r16
    7b58:	01 e0       	ldi	r16, 0x01	; 1
    7b5a:	e6 17       	cp	r30, r22
    7b5c:	08 f0       	brcs	.+2      	; 0x7b60 <fat_resize_file+0x236>
    7b5e:	00 e0       	ldi	r16, 0x00	; 0
    7b60:	61 2e       	mov	r6, r17
    7b62:	6e 0e       	add	r6, r30
    7b64:	f1 e0       	ldi	r31, 0x01	; 1
    7b66:	6e 16       	cp	r6, r30
    7b68:	08 f0       	brcs	.+2      	; 0x7b6c <fat_resize_file+0x242>
    7b6a:	f0 e0       	ldi	r31, 0x00	; 0
    7b6c:	0f 2b       	or	r16, r31
    7b6e:	e7 2f       	mov	r30, r23
    7b70:	ec 0d       	add	r30, r12
    7b72:	f1 e0       	ldi	r31, 0x01	; 1
    7b74:	e7 17       	cp	r30, r23
    7b76:	08 f0       	brcs	.+2      	; 0x7b7a <fat_resize_file+0x250>
    7b78:	f0 e0       	ldi	r31, 0x00	; 0
    7b7a:	70 2e       	mov	r7, r16
    7b7c:	7e 0e       	add	r7, r30
    7b7e:	11 e0       	ldi	r17, 0x01	; 1
    7b80:	7e 16       	cp	r7, r30
    7b82:	08 f0       	brcs	.+2      	; 0x7b86 <fat_resize_file+0x25c>
    7b84:	10 e0       	ldi	r17, 0x00	; 0
    7b86:	f1 2b       	or	r31, r17
    7b88:	e1 e0       	ldi	r30, 0x01	; 1
    7b8a:	f8 16       	cp	r15, r24
    7b8c:	08 f0       	brcs	.+2      	; 0x7b90 <fat_resize_file+0x266>
    7b8e:	e0 e0       	ldi	r30, 0x00	; 0
    7b90:	cf 2e       	mov	r12, r31
    7b92:	cf 0c       	add	r12, r15
    7b94:	f1 e0       	ldi	r31, 0x01	; 1
    7b96:	cf 14       	cp	r12, r15
    7b98:	08 f0       	brcs	.+2      	; 0x7b9c <fat_resize_file+0x272>
    7b9a:	f0 e0       	ldi	r31, 0x00	; 0
    7b9c:	ef 2b       	or	r30, r31
    7b9e:	f1 e0       	ldi	r31, 0x01	; 1
    7ba0:	e9 16       	cp	r14, r25
    7ba2:	08 f0       	brcs	.+2      	; 0x7ba6 <fat_resize_file+0x27c>
    7ba4:	f0 e0       	ldi	r31, 0x00	; 0
    7ba6:	0e 2f       	mov	r16, r30
    7ba8:	0e 0d       	add	r16, r14
    7baa:	e1 e0       	ldi	r30, 0x01	; 1
    7bac:	0e 15       	cp	r16, r14
    7bae:	08 f0       	brcs	.+2      	; 0x7bb2 <fat_resize_file+0x288>
    7bb0:	e0 e0       	ldi	r30, 0x00	; 0
    7bb2:	fe 2b       	or	r31, r30
    7bb4:	11 e0       	ldi	r17, 0x01	; 1
    7bb6:	da 16       	cp	r13, r26
    7bb8:	08 f0       	brcs	.+2      	; 0x7bbc <fat_resize_file+0x292>
    7bba:	10 e0       	ldi	r17, 0x00	; 0
    7bbc:	8f 2f       	mov	r24, r31
    7bbe:	8d 0d       	add	r24, r13
    7bc0:	e1 e0       	ldi	r30, 0x01	; 1
    7bc2:	8d 15       	cp	r24, r13
    7bc4:	08 f0       	brcs	.+2      	; 0x7bc8 <fat_resize_file+0x29e>
    7bc6:	e0 e0       	ldi	r30, 0x00	; 0
    7bc8:	1e 2b       	or	r17, r30
    7bca:	d4 01       	movw	r26, r8
    7bcc:	14 96       	adiw	r26, 0x04	; 4
    7bce:	ed 91       	ld	r30, X+
    7bd0:	fc 91       	ld	r31, X
    7bd2:	15 97       	sbiw	r26, 0x05	; 5
    7bd4:	a3 01       	movw	r20, r6
    7bd6:	6c 2d       	mov	r22, r12
    7bd8:	70 2f       	mov	r23, r16
    7bda:	91 2f       	mov	r25, r17
    7bdc:	95 0d       	add	r25, r5
    7bde:	8e 01       	movw	r16, r28
    7be0:	0d 5f       	subi	r16, 0xFD	; 253
    7be2:	1f 4f       	sbci	r17, 0xFF	; 255
    7be4:	a4 e0       	ldi	r26, 0x04	; 4
    7be6:	ea 2e       	mov	r14, r26
    7be8:	f1 2c       	mov	r15, r1
    7bea:	73 c0       	rjmp	.+230    	; 0x7cd2 <fat_resize_file+0x3a8>
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    7bec:	8f ef       	ldi	r24, 0xFF	; 255
    7bee:	9f ef       	ldi	r25, 0xFF	; 255
    7bf0:	9a 83       	std	Y+2, r25	; 0x02
    7bf2:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    7bf4:	cc 0c       	add	r12, r12
    7bf6:	dd 1c       	adc	r13, r13
    7bf8:	ee 1c       	adc	r14, r14
    7bfa:	ff 1c       	adc	r15, r15
    7bfc:	b7 01       	movw	r22, r14
    7bfe:	a6 01       	movw	r20, r12
    7c00:	80 e0       	ldi	r24, 0x00	; 0
    7c02:	90 e0       	ldi	r25, 0x00	; 0
    7c04:	a0 e0       	ldi	r26, 0x00	; 0
    7c06:	b0 e0       	ldi	r27, 0x00	; 0
    7c08:	f5 01       	movw	r30, r10
    7c0a:	22 85       	ldd	r18, Z+10	; 0x0a
    7c0c:	13 85       	ldd	r17, Z+11	; 0x0b
    7c0e:	04 85       	ldd	r16, Z+12	; 0x0c
    7c10:	c5 84       	ldd	r12, Z+13	; 0x0d
    7c12:	f6 84       	ldd	r15, Z+14	; 0x0e
    7c14:	e7 84       	ldd	r14, Z+15	; 0x0f
    7c16:	d0 88       	ldd	r13, Z+16	; 0x10
    7c18:	51 88       	ldd	r5, Z+17	; 0x11
    7c1a:	24 0f       	add	r18, r20
    7c1c:	31 e0       	ldi	r19, 0x01	; 1
    7c1e:	24 17       	cp	r18, r20
    7c20:	08 f0       	brcs	.+2      	; 0x7c24 <fat_resize_file+0x2fa>
    7c22:	30 e0       	ldi	r19, 0x00	; 0
    7c24:	e1 2f       	mov	r30, r17
    7c26:	e5 0f       	add	r30, r21
    7c28:	11 e0       	ldi	r17, 0x01	; 1
    7c2a:	e5 17       	cp	r30, r21
    7c2c:	08 f0       	brcs	.+2      	; 0x7c30 <fat_resize_file+0x306>
    7c2e:	10 e0       	ldi	r17, 0x00	; 0
    7c30:	3e 0f       	add	r19, r30
    7c32:	f1 e0       	ldi	r31, 0x01	; 1
    7c34:	3e 17       	cp	r19, r30
    7c36:	08 f0       	brcs	.+2      	; 0x7c3a <fat_resize_file+0x310>
    7c38:	f0 e0       	ldi	r31, 0x00	; 0
    7c3a:	1f 2b       	or	r17, r31
    7c3c:	e6 2f       	mov	r30, r22
    7c3e:	e0 0f       	add	r30, r16
    7c40:	01 e0       	ldi	r16, 0x01	; 1
    7c42:	e6 17       	cp	r30, r22
    7c44:	08 f0       	brcs	.+2      	; 0x7c48 <fat_resize_file+0x31e>
    7c46:	00 e0       	ldi	r16, 0x00	; 0
    7c48:	61 2e       	mov	r6, r17
    7c4a:	6e 0e       	add	r6, r30
    7c4c:	f1 e0       	ldi	r31, 0x01	; 1
    7c4e:	6e 16       	cp	r6, r30
    7c50:	08 f0       	brcs	.+2      	; 0x7c54 <fat_resize_file+0x32a>
    7c52:	f0 e0       	ldi	r31, 0x00	; 0
    7c54:	0f 2b       	or	r16, r31
    7c56:	e7 2f       	mov	r30, r23
    7c58:	ec 0d       	add	r30, r12
    7c5a:	f1 e0       	ldi	r31, 0x01	; 1
    7c5c:	e7 17       	cp	r30, r23
    7c5e:	08 f0       	brcs	.+2      	; 0x7c62 <fat_resize_file+0x338>
    7c60:	f0 e0       	ldi	r31, 0x00	; 0
    7c62:	70 2e       	mov	r7, r16
    7c64:	7e 0e       	add	r7, r30
    7c66:	11 e0       	ldi	r17, 0x01	; 1
    7c68:	7e 16       	cp	r7, r30
    7c6a:	08 f0       	brcs	.+2      	; 0x7c6e <fat_resize_file+0x344>
    7c6c:	10 e0       	ldi	r17, 0x00	; 0
    7c6e:	f1 2b       	or	r31, r17
    7c70:	e1 e0       	ldi	r30, 0x01	; 1
    7c72:	f8 16       	cp	r15, r24
    7c74:	08 f0       	brcs	.+2      	; 0x7c78 <fat_resize_file+0x34e>
    7c76:	e0 e0       	ldi	r30, 0x00	; 0
    7c78:	cf 2e       	mov	r12, r31
    7c7a:	cf 0c       	add	r12, r15
    7c7c:	f1 e0       	ldi	r31, 0x01	; 1
    7c7e:	cf 14       	cp	r12, r15
    7c80:	08 f0       	brcs	.+2      	; 0x7c84 <fat_resize_file+0x35a>
    7c82:	f0 e0       	ldi	r31, 0x00	; 0
    7c84:	ef 2b       	or	r30, r31
    7c86:	f1 e0       	ldi	r31, 0x01	; 1
    7c88:	e9 16       	cp	r14, r25
    7c8a:	08 f0       	brcs	.+2      	; 0x7c8e <fat_resize_file+0x364>
    7c8c:	f0 e0       	ldi	r31, 0x00	; 0
    7c8e:	0e 2f       	mov	r16, r30
    7c90:	0e 0d       	add	r16, r14
    7c92:	e1 e0       	ldi	r30, 0x01	; 1
    7c94:	0e 15       	cp	r16, r14
    7c96:	08 f0       	brcs	.+2      	; 0x7c9a <fat_resize_file+0x370>
    7c98:	e0 e0       	ldi	r30, 0x00	; 0
    7c9a:	fe 2b       	or	r31, r30
    7c9c:	11 e0       	ldi	r17, 0x01	; 1
    7c9e:	da 16       	cp	r13, r26
    7ca0:	08 f0       	brcs	.+2      	; 0x7ca4 <fat_resize_file+0x37a>
    7ca2:	10 e0       	ldi	r17, 0x00	; 0
    7ca4:	8f 2f       	mov	r24, r31
    7ca6:	8d 0d       	add	r24, r13
    7ca8:	e1 e0       	ldi	r30, 0x01	; 1
    7caa:	8d 15       	cp	r24, r13
    7cac:	08 f0       	brcs	.+2      	; 0x7cb0 <fat_resize_file+0x386>
    7cae:	e0 e0       	ldi	r30, 0x00	; 0
    7cb0:	1e 2b       	or	r17, r30
    7cb2:	d4 01       	movw	r26, r8
    7cb4:	14 96       	adiw	r26, 0x04	; 4
    7cb6:	ed 91       	ld	r30, X+
    7cb8:	fc 91       	ld	r31, X
    7cba:	15 97       	sbiw	r26, 0x05	; 5
    7cbc:	a3 01       	movw	r20, r6
    7cbe:	6c 2d       	mov	r22, r12
    7cc0:	70 2f       	mov	r23, r16
    7cc2:	91 2f       	mov	r25, r17
    7cc4:	95 0d       	add	r25, r5
    7cc6:	8e 01       	movw	r16, r28
    7cc8:	0f 5f       	subi	r16, 0xFF	; 255
    7cca:	1f 4f       	sbci	r17, 0xFF	; 255
    7ccc:	a2 e0       	ldi	r26, 0x02	; 2
    7cce:	ea 2e       	mov	r14, r26
    7cd0:	f1 2c       	mov	r15, r1
    7cd2:	09 95       	icall
    7cd4:	88 23       	and	r24, r24
    7cd6:	71 f0       	breq	.+28     	; 0x7cf4 <fat_resize_file+0x3ca>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    7cd8:	2f 81       	ldd	r18, Y+7	; 0x07
    7cda:	38 85       	ldd	r19, Y+8	; 0x08
    7cdc:	49 85       	ldd	r20, Y+9	; 0x09
    7cde:	5a 85       	ldd	r21, Y+10	; 0x0a
    7ce0:	21 15       	cp	r18, r1
    7ce2:	31 05       	cpc	r19, r1
    7ce4:	41 05       	cpc	r20, r1
    7ce6:	51 05       	cpc	r21, r1
    7ce8:	29 f0       	breq	.+10     	; 0x7cf4 <fat_resize_file+0x3ca>
        return fat_free_clusters(fs, cluster_num_next);
    7cea:	c5 01       	movw	r24, r10
    7cec:	ba 01       	movw	r22, r20
    7cee:	a9 01       	movw	r20, r18
    7cf0:	0e 94 69 22 	call	0x44d2	; 0x44d2 <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    7cf4:	8b 85       	ldd	r24, Y+11	; 0x0b
    7cf6:	9c 85       	ldd	r25, Y+12	; 0x0c
    7cf8:	ad 85       	ldd	r26, Y+13	; 0x0d
    7cfa:	be 85       	ldd	r27, Y+14	; 0x0e
    7cfc:	8c 01       	movw	r16, r24
    7cfe:	9d 01       	movw	r18, r26
    7d00:	40 e0       	ldi	r20, 0x00	; 0
    7d02:	50 e0       	ldi	r21, 0x00	; 0
    7d04:	60 e0       	ldi	r22, 0x00	; 0
    7d06:	70 e0       	ldi	r23, 0x00	; 0
    7d08:	d1 01       	movw	r26, r2
    7d0a:	da 96       	adiw	r26, 0x3a	; 58
    7d0c:	8c 91       	ld	r24, X
    7d0e:	da 97       	sbiw	r26, 0x3a	; 58
    7d10:	78 17       	cp	r23, r24
    7d12:	80 f1       	brcs	.+96     	; 0x7d74 <fat_resize_file+0x44a>
    7d14:	87 17       	cp	r24, r23
    7d16:	f1 f5       	brne	.+124    	; 0x7d94 <fat_resize_file+0x46a>
    7d18:	d9 96       	adiw	r26, 0x39	; 57
    7d1a:	8c 91       	ld	r24, X
    7d1c:	d9 97       	sbiw	r26, 0x39	; 57
    7d1e:	68 17       	cp	r22, r24
    7d20:	48 f1       	brcs	.+82     	; 0x7d74 <fat_resize_file+0x44a>
    7d22:	86 17       	cp	r24, r22
    7d24:	b9 f5       	brne	.+110    	; 0x7d94 <fat_resize_file+0x46a>
    7d26:	d8 96       	adiw	r26, 0x38	; 56
    7d28:	8c 91       	ld	r24, X
    7d2a:	d8 97       	sbiw	r26, 0x38	; 56
    7d2c:	58 17       	cp	r21, r24
    7d2e:	10 f1       	brcs	.+68     	; 0x7d74 <fat_resize_file+0x44a>
    7d30:	85 17       	cp	r24, r21
    7d32:	81 f5       	brne	.+96     	; 0x7d94 <fat_resize_file+0x46a>
    7d34:	d7 96       	adiw	r26, 0x37	; 55
    7d36:	8c 91       	ld	r24, X
    7d38:	d7 97       	sbiw	r26, 0x37	; 55
    7d3a:	48 17       	cp	r20, r24
    7d3c:	d8 f0       	brcs	.+54     	; 0x7d74 <fat_resize_file+0x44a>
    7d3e:	84 17       	cp	r24, r20
    7d40:	49 f5       	brne	.+82     	; 0x7d94 <fat_resize_file+0x46a>
    7d42:	d6 96       	adiw	r26, 0x36	; 54
    7d44:	8c 91       	ld	r24, X
    7d46:	d6 97       	sbiw	r26, 0x36	; 54
    7d48:	38 17       	cp	r19, r24
    7d4a:	a0 f0       	brcs	.+40     	; 0x7d74 <fat_resize_file+0x44a>
    7d4c:	83 17       	cp	r24, r19
    7d4e:	11 f5       	brne	.+68     	; 0x7d94 <fat_resize_file+0x46a>
    7d50:	d5 96       	adiw	r26, 0x35	; 53
    7d52:	8c 91       	ld	r24, X
    7d54:	d5 97       	sbiw	r26, 0x35	; 53
    7d56:	28 17       	cp	r18, r24
    7d58:	68 f0       	brcs	.+26     	; 0x7d74 <fat_resize_file+0x44a>
    7d5a:	82 17       	cp	r24, r18
    7d5c:	d9 f4       	brne	.+54     	; 0x7d94 <fat_resize_file+0x46a>
    7d5e:	d4 96       	adiw	r26, 0x34	; 52
    7d60:	8c 91       	ld	r24, X
    7d62:	d4 97       	sbiw	r26, 0x34	; 52
    7d64:	18 17       	cp	r17, r24
    7d66:	30 f0       	brcs	.+12     	; 0x7d74 <fat_resize_file+0x44a>
    7d68:	81 17       	cp	r24, r17
    7d6a:	a1 f4       	brne	.+40     	; 0x7d94 <fat_resize_file+0x46a>
    7d6c:	d3 96       	adiw	r26, 0x33	; 51
    7d6e:	8c 91       	ld	r24, X
    7d70:	08 17       	cp	r16, r24
    7d72:	80 f4       	brcc	.+32     	; 0x7d94 <fat_resize_file+0x46a>
    {
        fd->pos = size;
    7d74:	f1 01       	movw	r30, r2
    7d76:	03 ab       	std	Z+51, r16	; 0x33
    7d78:	14 ab       	std	Z+52, r17	; 0x34
    7d7a:	25 ab       	std	Z+53, r18	; 0x35
    7d7c:	36 ab       	std	Z+54, r19	; 0x36
    7d7e:	17 aa       	std	Z+55, r1	; 0x37
    7d80:	10 ae       	std	Z+56, r1	; 0x38
    7d82:	11 ae       	std	Z+57, r1	; 0x39
    7d84:	12 ae       	std	Z+58, r1	; 0x3a
        fd->pos_cluster = 0;
    7d86:	d1 01       	movw	r26, r2
    7d88:	db 96       	adiw	r26, 0x3b	; 59
    7d8a:	1d 92       	st	X+, r1
    7d8c:	1d 92       	st	X+, r1
    7d8e:	1d 92       	st	X+, r1
    7d90:	1c 92       	st	X, r1
    7d92:	de 97       	sbiw	r26, 0x3e	; 62
    7d94:	81 e0       	ldi	r24, 0x01	; 1
    7d96:	01 c0       	rjmp	.+2      	; 0x7d9a <fat_resize_file+0x470>
    7d98:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    7d9a:	62 96       	adiw	r28, 0x12	; 18
    7d9c:	0f b6       	in	r0, 0x3f	; 63
    7d9e:	f8 94       	cli
    7da0:	de bf       	out	0x3e, r29	; 62
    7da2:	0f be       	out	0x3f, r0	; 63
    7da4:	cd bf       	out	0x3d, r28	; 61
    7da6:	cf 91       	pop	r28
    7da8:	df 91       	pop	r29
    7daa:	1f 91       	pop	r17
    7dac:	0f 91       	pop	r16
    7dae:	ff 90       	pop	r15
    7db0:	ef 90       	pop	r14
    7db2:	df 90       	pop	r13
    7db4:	cf 90       	pop	r12
    7db6:	bf 90       	pop	r11
    7db8:	af 90       	pop	r10
    7dba:	9f 90       	pop	r9
    7dbc:	8f 90       	pop	r8
    7dbe:	7f 90       	pop	r7
    7dc0:	6f 90       	pop	r6
    7dc2:	5f 90       	pop	r5
    7dc4:	4f 90       	pop	r4
    7dc6:	3f 90       	pop	r3
    7dc8:	2f 90       	pop	r2
    7dca:	08 95       	ret
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    7dcc:	c1 14       	cp	r12, r1
    7dce:	d1 04       	cpc	r13, r1
    7dd0:	e1 04       	cpc	r14, r1
    7dd2:	f1 04       	cpc	r15, r1
    7dd4:	09 f4       	brne	.+2      	; 0x7dd8 <fat_resize_file+0x4ae>
    7dd6:	14 ce       	rjmp	.-984    	; 0x7a00 <fat_resize_file+0xd6>
    7dd8:	3c ce       	rjmp	.-904    	; 0x7a52 <fat_resize_file+0x128>

00007dda <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    7dda:	cf 92       	push	r12
    7ddc:	df 92       	push	r13
    7dde:	ef 92       	push	r14
    7de0:	ff 92       	push	r15
    7de2:	0f 93       	push	r16
    7de4:	1f 93       	push	r17
    7de6:	cf 93       	push	r28
    7de8:	df 93       	push	r29
    7dea:	ec 01       	movw	r28, r24
    7dec:	6b 01       	movw	r12, r22
    if(!fd || !offset)
    7dee:	00 97       	sbiw	r24, 0x00	; 0
    7df0:	09 f4       	brne	.+2      	; 0x7df4 <fat_seek_file+0x1a>
    7df2:	51 c0       	rjmp	.+162    	; 0x7e96 <fat_seek_file+0xbc>
    7df4:	61 15       	cp	r22, r1
    7df6:	71 05       	cpc	r23, r1
    7df8:	09 f4       	brne	.+2      	; 0x7dfc <fat_seek_file+0x22>
    7dfa:	4d c0       	rjmp	.+154    	; 0x7e96 <fat_seek_file+0xbc>
        return 0;

    uint32_t new_pos = fd->pos;
    7dfc:	2b a9       	ldd	r18, Y+51	; 0x33
    7dfe:	3c a9       	ldd	r19, Y+52	; 0x34
    7e00:	5d a9       	ldd	r21, Y+53	; 0x35
    7e02:	6e a9       	ldd	r22, Y+54	; 0x36
    switch(whence)
    7e04:	41 30       	cpi	r20, 0x01	; 1
    7e06:	61 f0       	breq	.+24     	; 0x7e20 <fat_seek_file+0x46>
    7e08:	41 30       	cpi	r20, 0x01	; 1
    7e0a:	20 f0       	brcs	.+8      	; 0x7e14 <fat_seek_file+0x3a>
    7e0c:	42 30       	cpi	r20, 0x02	; 2
    7e0e:	09 f0       	breq	.+2      	; 0x7e12 <fat_seek_file+0x38>
    7e10:	42 c0       	rjmp	.+132    	; 0x7e96 <fat_seek_file+0xbc>
    7e12:	0f c0       	rjmp	.+30     	; 0x7e32 <fat_seek_file+0x58>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    7e14:	f6 01       	movw	r30, r12
    7e16:	e0 80       	ld	r14, Z
    7e18:	f1 80       	ldd	r15, Z+1	; 0x01
    7e1a:	02 81       	ldd	r16, Z+2	; 0x02
    7e1c:	13 81       	ldd	r17, Z+3	; 0x03
    7e1e:	16 c0       	rjmp	.+44     	; 0x7e4c <fat_seek_file+0x72>
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
    7e20:	c9 01       	movw	r24, r18
    7e22:	a5 2f       	mov	r26, r21
    7e24:	b6 2f       	mov	r27, r22
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    7e26:	f6 01       	movw	r30, r12
    7e28:	e0 80       	ld	r14, Z
    7e2a:	f1 80       	ldd	r15, Z+1	; 0x01
    7e2c:	02 81       	ldd	r16, Z+2	; 0x02
    7e2e:	13 81       	ldd	r17, Z+3	; 0x03
    7e30:	09 c0       	rjmp	.+18     	; 0x7e44 <fat_seek_file+0x6a>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    7e32:	f6 01       	movw	r30, r12
    7e34:	e0 80       	ld	r14, Z
    7e36:	f1 80       	ldd	r15, Z+1	; 0x01
    7e38:	02 81       	ldd	r16, Z+2	; 0x02
    7e3a:	13 81       	ldd	r17, Z+3	; 0x03
    7e3c:	8f a1       	ldd	r24, Y+39	; 0x27
    7e3e:	98 a5       	ldd	r25, Y+40	; 0x28
    7e40:	a9 a5       	ldd	r26, Y+41	; 0x29
    7e42:	ba a5       	ldd	r27, Y+42	; 0x2a
    7e44:	e8 0e       	add	r14, r24
    7e46:	f9 1e       	adc	r15, r25
    7e48:	0a 1f       	adc	r16, r26
    7e4a:	1b 1f       	adc	r17, r27
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    7e4c:	8f a1       	ldd	r24, Y+39	; 0x27
    7e4e:	98 a5       	ldd	r25, Y+40	; 0x28
    7e50:	a9 a5       	ldd	r26, Y+41	; 0x29
    7e52:	ba a5       	ldd	r27, Y+42	; 0x2a
    7e54:	8e 15       	cp	r24, r14
    7e56:	9f 05       	cpc	r25, r15
    7e58:	a0 07       	cpc	r26, r16
    7e5a:	b1 07       	cpc	r27, r17
    7e5c:	38 f4       	brcc	.+14     	; 0x7e6c <fat_seek_file+0x92>
    7e5e:	ce 01       	movw	r24, r28
    7e60:	b8 01       	movw	r22, r16
    7e62:	a7 01       	movw	r20, r14
    7e64:	0e 94 95 3c 	call	0x792a	; 0x792a <fat_resize_file>
    7e68:	88 23       	and	r24, r24
    7e6a:	a9 f0       	breq	.+42     	; 0x7e96 <fat_seek_file+0xbc>
       && !fat_resize_file(fd, new_pos)
#endif
       )
        return 0;

    fd->pos = new_pos;
    7e6c:	a8 01       	movw	r20, r16
    7e6e:	97 01       	movw	r18, r14
    7e70:	eb aa       	std	Y+51, r14	; 0x33
    7e72:	3c ab       	std	Y+52, r19	; 0x34
    7e74:	4d ab       	std	Y+53, r20	; 0x35
    7e76:	5e ab       	std	Y+54, r21	; 0x36
    7e78:	1f aa       	std	Y+55, r1	; 0x37
    7e7a:	18 ae       	std	Y+56, r1	; 0x38
    7e7c:	19 ae       	std	Y+57, r1	; 0x39
    7e7e:	1a ae       	std	Y+58, r1	; 0x3a
    fd->pos_cluster = 0;
    7e80:	1b ae       	std	Y+59, r1	; 0x3b
    7e82:	1c ae       	std	Y+60, r1	; 0x3c
    7e84:	1d ae       	std	Y+61, r1	; 0x3d
    7e86:	1e ae       	std	Y+62, r1	; 0x3e

    *offset = (int32_t) new_pos;
    7e88:	f6 01       	movw	r30, r12
    7e8a:	e0 82       	st	Z, r14
    7e8c:	f1 82       	std	Z+1, r15	; 0x01
    7e8e:	02 83       	std	Z+2, r16	; 0x02
    7e90:	13 83       	std	Z+3, r17	; 0x03
    7e92:	81 e0       	ldi	r24, 0x01	; 1
    7e94:	01 c0       	rjmp	.+2      	; 0x7e98 <fat_seek_file+0xbe>
    return 1;
    7e96:	80 e0       	ldi	r24, 0x00	; 0
}
    7e98:	df 91       	pop	r29
    7e9a:	cf 91       	pop	r28
    7e9c:	1f 91       	pop	r17
    7e9e:	0f 91       	pop	r16
    7ea0:	ff 90       	pop	r15
    7ea2:	ef 90       	pop	r14
    7ea4:	df 90       	pop	r13
    7ea6:	cf 90       	pop	r12
    7ea8:	08 95       	ret

00007eaa <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    7eaa:	2f 92       	push	r2
    7eac:	3f 92       	push	r3
    7eae:	4f 92       	push	r4
    7eb0:	5f 92       	push	r5
    7eb2:	6f 92       	push	r6
    7eb4:	7f 92       	push	r7
    7eb6:	8f 92       	push	r8
    7eb8:	9f 92       	push	r9
    7eba:	af 92       	push	r10
    7ebc:	bf 92       	push	r11
    7ebe:	cf 92       	push	r12
    7ec0:	df 92       	push	r13
    7ec2:	ef 92       	push	r14
    7ec4:	ff 92       	push	r15
    7ec6:	0f 93       	push	r16
    7ec8:	1f 93       	push	r17
    7eca:	df 93       	push	r29
    7ecc:	cf 93       	push	r28
    7ece:	cd b7       	in	r28, 0x3d	; 61
    7ed0:	de b7       	in	r29, 0x3e	; 62
    7ed2:	66 97       	sbiw	r28, 0x16	; 22
    7ed4:	0f b6       	in	r0, 0x3f	; 63
    7ed6:	f8 94       	cli
    7ed8:	de bf       	out	0x3e, r29	; 62
    7eda:	0f be       	out	0x3f, r0	; 63
    7edc:	cd bf       	out	0x3d, r28	; 61
    7ede:	9e 8b       	std	Y+22, r25	; 0x16
    7ee0:	8d 8b       	std	Y+21, r24	; 0x15
    7ee2:	7e 87       	std	Y+14, r23	; 0x0e
    7ee4:	6d 87       	std	Y+13, r22	; 0x0d
    7ee6:	58 8b       	std	Y+16, r21	; 0x10
    7ee8:	4f 87       	std	Y+15, r20	; 0x0f
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    7eea:	00 97       	sbiw	r24, 0x00	; 0
    7eec:	09 f4       	brne	.+2      	; 0x7ef0 <fat_write_file+0x46>
    7eee:	8e c3       	rjmp	.+1820   	; 0x860c <fat_write_file+0x762>
    7ef0:	67 2b       	or	r22, r23
    7ef2:	09 f4       	brne	.+2      	; 0x7ef6 <fat_write_file+0x4c>
    7ef4:	8b c3       	rjmp	.+1814   	; 0x860c <fat_write_file+0x762>
    7ef6:	45 2b       	or	r20, r21
    7ef8:	09 f4       	brne	.+2      	; 0x7efc <fat_write_file+0x52>
    7efa:	88 c3       	rjmp	.+1808   	; 0x860c <fat_write_file+0x762>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    7efc:	dc 01       	movw	r26, r24
    7efe:	d3 96       	adiw	r26, 0x33	; 51
    7f00:	8c 90       	ld	r8, X
    7f02:	d3 97       	sbiw	r26, 0x33	; 51
    7f04:	d4 96       	adiw	r26, 0x34	; 52
    7f06:	9c 90       	ld	r9, X
    7f08:	d4 97       	sbiw	r26, 0x34	; 52
    7f0a:	d5 96       	adiw	r26, 0x35	; 53
    7f0c:	ac 90       	ld	r10, X
    7f0e:	d5 97       	sbiw	r26, 0x35	; 53
    7f10:	d6 96       	adiw	r26, 0x36	; 54
    7f12:	bc 90       	ld	r11, X
    7f14:	d6 97       	sbiw	r26, 0x36	; 54
    7f16:	d7 96       	adiw	r26, 0x37	; 55
    7f18:	cc 90       	ld	r12, X
    7f1a:	d7 97       	sbiw	r26, 0x37	; 55
    7f1c:	d8 96       	adiw	r26, 0x38	; 56
    7f1e:	dc 90       	ld	r13, X
    7f20:	d8 97       	sbiw	r26, 0x38	; 56
    7f22:	d9 96       	adiw	r26, 0x39	; 57
    7f24:	ec 90       	ld	r14, X
    7f26:	d9 97       	sbiw	r26, 0x39	; 57
    7f28:	da 96       	adiw	r26, 0x3a	; 58
    7f2a:	fc 90       	ld	r15, X
    7f2c:	fc 01       	movw	r30, r24
    7f2e:	87 a1       	ldd	r24, Z+39	; 0x27
    7f30:	90 a5       	ldd	r25, Z+40	; 0x28
    7f32:	a1 a5       	ldd	r26, Z+41	; 0x29
    7f34:	b2 a5       	ldd	r27, Z+42	; 0x2a
    7f36:	9c 01       	movw	r18, r24
    7f38:	ad 01       	movw	r20, r26
    7f3a:	60 e0       	ldi	r22, 0x00	; 0
    7f3c:	70 e0       	ldi	r23, 0x00	; 0
    7f3e:	80 e0       	ldi	r24, 0x00	; 0
    7f40:	90 e0       	ldi	r25, 0x00	; 0
    7f42:	9f 15       	cp	r25, r15
    7f44:	08 f4       	brcc	.+2      	; 0x7f48 <fat_write_file+0x9e>
    7f46:	62 c3       	rjmp	.+1732   	; 0x860c <fat_write_file+0x762>
    7f48:	f9 16       	cp	r15, r25
    7f4a:	09 f5       	brne	.+66     	; 0x7f8e <fat_write_file+0xe4>
    7f4c:	8e 15       	cp	r24, r14
    7f4e:	08 f4       	brcc	.+2      	; 0x7f52 <fat_write_file+0xa8>
    7f50:	5d c3       	rjmp	.+1722   	; 0x860c <fat_write_file+0x762>
    7f52:	e8 16       	cp	r14, r24
    7f54:	e1 f4       	brne	.+56     	; 0x7f8e <fat_write_file+0xe4>
    7f56:	7d 15       	cp	r23, r13
    7f58:	08 f4       	brcc	.+2      	; 0x7f5c <fat_write_file+0xb2>
    7f5a:	58 c3       	rjmp	.+1712   	; 0x860c <fat_write_file+0x762>
    7f5c:	d7 16       	cp	r13, r23
    7f5e:	b9 f4       	brne	.+46     	; 0x7f8e <fat_write_file+0xe4>
    7f60:	6c 15       	cp	r22, r12
    7f62:	08 f4       	brcc	.+2      	; 0x7f66 <fat_write_file+0xbc>
    7f64:	53 c3       	rjmp	.+1702   	; 0x860c <fat_write_file+0x762>
    7f66:	c6 16       	cp	r12, r22
    7f68:	91 f4       	brne	.+36     	; 0x7f8e <fat_write_file+0xe4>
    7f6a:	5b 15       	cp	r21, r11
    7f6c:	08 f4       	brcc	.+2      	; 0x7f70 <fat_write_file+0xc6>
    7f6e:	4e c3       	rjmp	.+1692   	; 0x860c <fat_write_file+0x762>
    7f70:	b5 16       	cp	r11, r21
    7f72:	69 f4       	brne	.+26     	; 0x7f8e <fat_write_file+0xe4>
    7f74:	4a 15       	cp	r20, r10
    7f76:	08 f4       	brcc	.+2      	; 0x7f7a <fat_write_file+0xd0>
    7f78:	49 c3       	rjmp	.+1682   	; 0x860c <fat_write_file+0x762>
    7f7a:	a4 16       	cp	r10, r20
    7f7c:	41 f4       	brne	.+16     	; 0x7f8e <fat_write_file+0xe4>
    7f7e:	39 15       	cp	r19, r9
    7f80:	08 f4       	brcc	.+2      	; 0x7f84 <fat_write_file+0xda>
    7f82:	44 c3       	rjmp	.+1672   	; 0x860c <fat_write_file+0x762>
    7f84:	93 16       	cp	r9, r19
    7f86:	19 f4       	brne	.+6      	; 0x7f8e <fat_write_file+0xe4>
    7f88:	28 15       	cp	r18, r8
    7f8a:	08 f4       	brcc	.+2      	; 0x7f8e <fat_write_file+0xe4>
    7f8c:	3f c3       	rjmp	.+1662   	; 0x860c <fat_write_file+0x762>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    7f8e:	ad 89       	ldd	r26, Y+21	; 0x15
    7f90:	be 89       	ldd	r27, Y+22	; 0x16
    7f92:	2d 91       	ld	r18, X+
    7f94:	3c 91       	ld	r19, X
    7f96:	11 97       	sbiw	r26, 0x01	; 1
    7f98:	f9 01       	movw	r30, r18
    7f9a:	00 8c       	ldd	r0, Z+24	; 0x18
    7f9c:	f1 8d       	ldd	r31, Z+25	; 0x19
    7f9e:	e0 2d       	mov	r30, r0
    7fa0:	fc 87       	std	Y+12, r31	; 0x0c
    7fa2:	eb 87       	std	Y+11, r30	; 0x0b
    cluster_t cluster_num = fd->pos_cluster;
    7fa4:	db 96       	adiw	r26, 0x3b	; 59
    7fa6:	8d 91       	ld	r24, X+
    7fa8:	9d 91       	ld	r25, X+
    7faa:	0d 90       	ld	r0, X+
    7fac:	bc 91       	ld	r27, X
    7fae:	a0 2d       	mov	r26, r0
    7fb0:	8f 83       	std	Y+7, r24	; 0x07
    7fb2:	98 87       	std	Y+8, r25	; 0x08
    7fb4:	a9 87       	std	Y+9, r26	; 0x09
    7fb6:	ba 87       	std	Y+10, r27	; 0x0a
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    7fb8:	00 97       	sbiw	r24, 0x00	; 0
    7fba:	a1 05       	cpc	r26, r1
    7fbc:	b1 05       	cpc	r27, r1
    7fbe:	09 f0       	breq	.+2      	; 0x7fc2 <fat_write_file+0x118>
    7fc0:	ae c0       	rjmp	.+348    	; 0x811e <fat_write_file+0x274>
    {
        cluster_num = fd->dir_entry.cluster;
    7fc2:	ad 89       	ldd	r26, Y+21	; 0x15
    7fc4:	be 89       	ldd	r27, Y+22	; 0x16
    7fc6:	93 96       	adiw	r26, 0x23	; 35
    7fc8:	8d 91       	ld	r24, X+
    7fca:	9d 91       	ld	r25, X+
    7fcc:	0d 90       	ld	r0, X+
    7fce:	bc 91       	ld	r27, X
    7fd0:	a0 2d       	mov	r26, r0
    7fd2:	8f 83       	std	Y+7, r24	; 0x07
    7fd4:	98 87       	std	Y+8, r25	; 0x08
    7fd6:	a9 87       	std	Y+9, r26	; 0x09
    7fd8:	ba 87       	std	Y+10, r27	; 0x0a
        
        if(!cluster_num)
    7fda:	00 97       	sbiw	r24, 0x00	; 0
    7fdc:	a1 05       	cpc	r26, r1
    7fde:	b1 05       	cpc	r27, r1
    7fe0:	29 f5       	brne	.+74     	; 0x802c <fat_write_file+0x182>
        {
            if(!fd->pos)
    7fe2:	88 2d       	mov	r24, r8
    7fe4:	89 29       	or	r24, r9
    7fe6:	8a 29       	or	r24, r10
    7fe8:	8b 29       	or	r24, r11
    7fea:	8c 29       	or	r24, r12
    7fec:	8d 29       	or	r24, r13
    7fee:	8e 29       	or	r24, r14
    7ff0:	8f 29       	or	r24, r15
    7ff2:	09 f0       	breq	.+2      	; 0x7ff6 <fat_write_file+0x14c>
    7ff4:	0b c3       	rjmp	.+1558   	; 0x860c <fat_write_file+0x762>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    7ff6:	c9 01       	movw	r24, r18
    7ff8:	40 e0       	ldi	r20, 0x00	; 0
    7ffa:	50 e0       	ldi	r21, 0x00	; 0
    7ffc:	60 e0       	ldi	r22, 0x00	; 0
    7ffe:	70 e0       	ldi	r23, 0x00	; 0
    8000:	01 e0       	ldi	r16, 0x01	; 1
    8002:	10 e0       	ldi	r17, 0x00	; 0
    8004:	20 e0       	ldi	r18, 0x00	; 0
    8006:	30 e0       	ldi	r19, 0x00	; 0
    8008:	0e 94 25 24 	call	0x484a	; 0x484a <fat_append_clusters>
    800c:	6f 83       	std	Y+7, r22	; 0x07
    800e:	78 87       	std	Y+8, r23	; 0x08
    8010:	89 87       	std	Y+9, r24	; 0x09
    8012:	9a 87       	std	Y+10, r25	; 0x0a
    8014:	ed 89       	ldd	r30, Y+21	; 0x15
    8016:	fe 89       	ldd	r31, Y+22	; 0x16
    8018:	63 a3       	std	Z+35, r22	; 0x23
    801a:	74 a3       	std	Z+36, r23	; 0x24
    801c:	85 a3       	std	Z+37, r24	; 0x25
    801e:	96 a3       	std	Z+38, r25	; 0x26
                if(!cluster_num)
    8020:	61 15       	cp	r22, r1
    8022:	71 05       	cpc	r23, r1
    8024:	81 05       	cpc	r24, r1
    8026:	91 05       	cpc	r25, r1
    8028:	09 f4       	brne	.+2      	; 0x802c <fat_write_file+0x182>
    802a:	f0 c2       	rjmp	.+1504   	; 0x860c <fat_write_file+0x762>
            {
                return -1;
            }
        }

        if(fd->pos)
    802c:	ad 89       	ldd	r26, Y+21	; 0x15
    802e:	be 89       	ldd	r27, Y+22	; 0x16
    8030:	d3 96       	adiw	r26, 0x33	; 51
    8032:	6c 91       	ld	r22, X
    8034:	d3 97       	sbiw	r26, 0x33	; 51
    8036:	d4 96       	adiw	r26, 0x34	; 52
    8038:	7c 91       	ld	r23, X
    803a:	d4 97       	sbiw	r26, 0x34	; 52
    803c:	d5 96       	adiw	r26, 0x35	; 53
    803e:	ec 91       	ld	r30, X
    8040:	d5 97       	sbiw	r26, 0x35	; 53
    8042:	d6 96       	adiw	r26, 0x36	; 54
    8044:	fc 91       	ld	r31, X
    8046:	d6 97       	sbiw	r26, 0x36	; 54
    8048:	d7 96       	adiw	r26, 0x37	; 55
    804a:	9c 91       	ld	r25, X
    804c:	d7 97       	sbiw	r26, 0x37	; 55
    804e:	d8 96       	adiw	r26, 0x38	; 56
    8050:	2c 91       	ld	r18, X
    8052:	d8 97       	sbiw	r26, 0x38	; 56
    8054:	d9 96       	adiw	r26, 0x39	; 57
    8056:	3c 91       	ld	r19, X
    8058:	d9 97       	sbiw	r26, 0x39	; 57
    805a:	da 96       	adiw	r26, 0x3a	; 58
    805c:	4c 91       	ld	r20, X
    805e:	86 2f       	mov	r24, r22
    8060:	87 2b       	or	r24, r23
    8062:	8e 2b       	or	r24, r30
    8064:	8f 2b       	or	r24, r31
    8066:	89 2b       	or	r24, r25
    8068:	82 2b       	or	r24, r18
    806a:	83 2b       	or	r24, r19
    806c:	84 2b       	or	r24, r20
    806e:	09 f4       	brne	.+2      	; 0x8072 <fat_write_file+0x1c8>
    8070:	56 c0       	rjmp	.+172    	; 0x811e <fat_write_file+0x274>
        {
            uint32_t pos = fd->pos;
    8072:	9b 01       	movw	r18, r22
    8074:	af 01       	movw	r20, r30
    8076:	c9 01       	movw	r24, r18
    8078:	da 01       	movw	r26, r20
    807a:	2c 01       	movw	r4, r24
    807c:	3d 01       	movw	r6, r26
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    807e:	4b 85       	ldd	r20, Y+11	; 0x0b
    8080:	5c 85       	ldd	r21, Y+12	; 0x0c
    8082:	9a 01       	movw	r18, r20
    8084:	40 e0       	ldi	r20, 0x00	; 0
    8086:	50 e0       	ldi	r21, 0x00	; 0
    8088:	29 8b       	std	Y+17, r18	; 0x11
    808a:	3a 8b       	std	Y+18, r19	; 0x12
    808c:	4b 8b       	std	Y+19, r20	; 0x13
    808e:	5c 8b       	std	Y+20, r21	; 0x14
    8090:	3c c0       	rjmp	.+120    	; 0x810a <fat_write_file+0x260>
            {
                pos -= cluster_size;
    8092:	89 89       	ldd	r24, Y+17	; 0x11
    8094:	9a 89       	ldd	r25, Y+18	; 0x12
    8096:	ab 89       	ldd	r26, Y+19	; 0x13
    8098:	bc 89       	ldd	r27, Y+20	; 0x14
    809a:	48 1a       	sub	r4, r24
    809c:	59 0a       	sbc	r5, r25
    809e:	6a 0a       	sbc	r6, r26
    80a0:	7b 0a       	sbc	r7, r27
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    80a2:	ad 89       	ldd	r26, Y+21	; 0x15
    80a4:	be 89       	ldd	r27, Y+22	; 0x16
    80a6:	8d 91       	ld	r24, X+
    80a8:	9c 91       	ld	r25, X
    80aa:	4f 81       	ldd	r20, Y+7	; 0x07
    80ac:	58 85       	ldd	r21, Y+8	; 0x08
    80ae:	69 85       	ldd	r22, Y+9	; 0x09
    80b0:	7a 85       	ldd	r23, Y+10	; 0x0a
    80b2:	0e 94 4b 21 	call	0x4296	; 0x4296 <fat_get_next_cluster>
                if(!cluster_num_next && pos == 0)
    80b6:	61 15       	cp	r22, r1
    80b8:	71 05       	cpc	r23, r1
    80ba:	81 05       	cpc	r24, r1
    80bc:	91 05       	cpc	r25, r1
    80be:	29 f0       	breq	.+10     	; 0x80ca <fat_write_file+0x220>
    80c0:	6f 83       	std	Y+7, r22	; 0x07
    80c2:	78 87       	std	Y+8, r23	; 0x08
    80c4:	89 87       	std	Y+9, r24	; 0x09
    80c6:	9a 87       	std	Y+10, r25	; 0x0a
    80c8:	20 c0       	rjmp	.+64     	; 0x810a <fat_write_file+0x260>
    80ca:	41 14       	cp	r4, r1
    80cc:	51 04       	cpc	r5, r1
    80ce:	61 04       	cpc	r6, r1
    80d0:	71 04       	cpc	r7, r1
    80d2:	09 f0       	breq	.+2      	; 0x80d6 <fat_write_file+0x22c>
    80d4:	9b c2       	rjmp	.+1334   	; 0x860c <fat_write_file+0x762>
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    80d6:	ed 89       	ldd	r30, Y+21	; 0x15
    80d8:	fe 89       	ldd	r31, Y+22	; 0x16
    80da:	80 81       	ld	r24, Z
    80dc:	91 81       	ldd	r25, Z+1	; 0x01
    80de:	4f 81       	ldd	r20, Y+7	; 0x07
    80e0:	58 85       	ldd	r21, Y+8	; 0x08
    80e2:	69 85       	ldd	r22, Y+9	; 0x09
    80e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    80e6:	01 e0       	ldi	r16, 0x01	; 1
    80e8:	10 e0       	ldi	r17, 0x00	; 0
    80ea:	20 e0       	ldi	r18, 0x00	; 0
    80ec:	30 e0       	ldi	r19, 0x00	; 0
    80ee:	0e 94 25 24 	call	0x484a	; 0x484a <fat_append_clusters>
    80f2:	ab 01       	movw	r20, r22
    80f4:	bc 01       	movw	r22, r24
                if(!cluster_num_next)
    80f6:	41 15       	cp	r20, r1
    80f8:	51 05       	cpc	r21, r1
    80fa:	61 05       	cpc	r22, r1
    80fc:	71 05       	cpc	r23, r1
    80fe:	09 f4       	brne	.+2      	; 0x8102 <fat_write_file+0x258>
    8100:	85 c2       	rjmp	.+1290   	; 0x860c <fat_write_file+0x762>
    8102:	4f 83       	std	Y+7, r20	; 0x07
    8104:	58 87       	std	Y+8, r21	; 0x08
    8106:	69 87       	std	Y+9, r22	; 0x09
    8108:	7a 87       	std	Y+10, r23	; 0x0a

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    810a:	29 89       	ldd	r18, Y+17	; 0x11
    810c:	3a 89       	ldd	r19, Y+18	; 0x12
    810e:	4b 89       	ldd	r20, Y+19	; 0x13
    8110:	5c 89       	ldd	r21, Y+20	; 0x14
    8112:	42 16       	cp	r4, r18
    8114:	53 06       	cpc	r5, r19
    8116:	64 06       	cpc	r6, r20
    8118:	75 06       	cpc	r7, r21
    811a:	08 f0       	brcs	.+2      	; 0x811e <fat_write_file+0x274>
    811c:	ba cf       	rjmp	.-140    	; 0x8092 <fat_write_file+0x1e8>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    811e:	4b 85       	ldd	r20, Y+11	; 0x0b
    8120:	5c 85       	ldd	r21, Y+12	; 0x0c
    8122:	41 50       	subi	r20, 0x01	; 1
    8124:	50 40       	sbci	r21, 0x00	; 0
    8126:	5c 87       	std	Y+12, r21	; 0x0c
    8128:	4b 87       	std	Y+11, r20	; 0x0b
    812a:	48 21       	and	r20, r8
    812c:	59 21       	and	r21, r9
    812e:	5c 83       	std	Y+4, r21	; 0x04
    8130:	4b 83       	std	Y+3, r20	; 0x03
    8132:	8b 85       	ldd	r24, Y+11	; 0x0b
    8134:	9c 85       	ldd	r25, Y+12	; 0x0c
    8136:	01 96       	adiw	r24, 0x01	; 1
    8138:	9c 87       	std	Y+12, r25	; 0x0c
    813a:	8b 87       	std	Y+11, r24	; 0x0b
    813c:	af 85       	ldd	r26, Y+15	; 0x0f
    813e:	b8 89       	ldd	r27, Y+16	; 0x10
    8140:	be 83       	std	Y+6, r27	; 0x06
    8142:	ad 83       	std	Y+5, r26	; 0x05
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    8144:	ed 89       	ldd	r30, Y+21	; 0x15
    8146:	fe 89       	ldd	r31, Y+22	; 0x16
    8148:	01 90       	ld	r0, Z+
    814a:	f0 81       	ld	r31, Z
    814c:	e0 2d       	mov	r30, r0
    814e:	fa 83       	std	Y+2, r31	; 0x02
    8150:	e9 83       	std	Y+1, r30	; 0x01
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    8152:	30 97       	sbiw	r30, 0x00	; 0
    8154:	09 f4       	brne	.+2      	; 0x8158 <fat_write_file+0x2ae>
    8156:	8e c0       	rjmp	.+284    	; 0x8274 <fat_write_file+0x3ca>
    8158:	2f 81       	ldd	r18, Y+7	; 0x07
    815a:	38 85       	ldd	r19, Y+8	; 0x08
    815c:	49 85       	ldd	r20, Y+9	; 0x09
    815e:	5a 85       	ldd	r21, Y+10	; 0x0a
    8160:	22 30       	cpi	r18, 0x02	; 2
    8162:	31 05       	cpc	r19, r1
    8164:	41 05       	cpc	r20, r1
    8166:	51 05       	cpc	r21, r1
    8168:	08 f4       	brcc	.+2      	; 0x816c <fat_write_file+0x2c2>
    816a:	84 c0       	rjmp	.+264    	; 0x8274 <fat_write_file+0x3ca>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    816c:	22 50       	subi	r18, 0x02	; 2
    816e:	30 40       	sbci	r19, 0x00	; 0
    8170:	40 40       	sbci	r20, 0x00	; 0
    8172:	50 40       	sbci	r21, 0x00	; 0
    8174:	59 01       	movw	r10, r18
    8176:	6a 01       	movw	r12, r20
    8178:	2e 5f       	subi	r18, 0xFE	; 254
    817a:	3f 4f       	sbci	r19, 0xFF	; 255
    817c:	4f 4f       	sbci	r20, 0xFF	; 255
    817e:	5f 4f       	sbci	r21, 0xFF	; 255
    8180:	2f 83       	std	Y+7, r18	; 0x07
    8182:	38 87       	std	Y+8, r19	; 0x08
    8184:	49 87       	std	Y+9, r20	; 0x09
    8186:	5a 87       	std	Y+10, r21	; 0x0a
    8188:	20 8c       	ldd	r2, Z+24	; 0x18
    818a:	31 8c       	ldd	r3, Z+25	; 0x19
    818c:	95 01       	movw	r18, r10
    818e:	a6 01       	movw	r20, r12
    8190:	60 e0       	ldi	r22, 0x00	; 0
    8192:	70 e0       	ldi	r23, 0x00	; 0
    8194:	80 e0       	ldi	r24, 0x00	; 0
    8196:	90 e0       	ldi	r25, 0x00	; 0
    8198:	51 01       	movw	r10, r2
    819a:	cc 24       	eor	r12, r12
    819c:	dd 24       	eor	r13, r13
    819e:	ee 24       	eor	r14, r14
    81a0:	ff 24       	eor	r15, r15
    81a2:	00 e0       	ldi	r16, 0x00	; 0
    81a4:	10 e0       	ldi	r17, 0x00	; 0
    81a6:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <__muldi3>
    81aa:	e9 81       	ldd	r30, Y+1	; 0x01
    81ac:	fa 81       	ldd	r31, Y+2	; 0x02
    81ae:	b2 8d       	ldd	r27, Z+26	; 0x1a
    81b0:	f3 8c       	ldd	r15, Z+27	; 0x1b
    81b2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    81b4:	05 8d       	ldd	r16, Z+29	; 0x1d
    81b6:	d6 8c       	ldd	r13, Z+30	; 0x1e
    81b8:	c7 8c       	ldd	r12, Z+31	; 0x1f
    81ba:	b0 a0       	ldd	r11, Z+32	; 0x20
    81bc:	11 a1       	ldd	r17, Z+33	; 0x21
    81be:	b2 0f       	add	r27, r18
    81c0:	f1 e0       	ldi	r31, 0x01	; 1
    81c2:	b2 17       	cp	r27, r18
    81c4:	08 f0       	brcs	.+2      	; 0x81c8 <fat_write_file+0x31e>
    81c6:	f0 e0       	ldi	r31, 0x00	; 0
    81c8:	23 2f       	mov	r18, r19
    81ca:	2f 0d       	add	r18, r15
    81cc:	e1 e0       	ldi	r30, 0x01	; 1
    81ce:	23 17       	cp	r18, r19
    81d0:	08 f0       	brcs	.+2      	; 0x81d4 <fat_write_file+0x32a>
    81d2:	e0 e0       	ldi	r30, 0x00	; 0
    81d4:	ef 2e       	mov	r14, r31
    81d6:	e2 0e       	add	r14, r18
    81d8:	31 e0       	ldi	r19, 0x01	; 1
    81da:	e2 16       	cp	r14, r18
    81dc:	08 f0       	brcs	.+2      	; 0x81e0 <fat_write_file+0x336>
    81de:	30 e0       	ldi	r19, 0x00	; 0
    81e0:	e3 2b       	or	r30, r19
    81e2:	24 2f       	mov	r18, r20
    81e4:	2a 0f       	add	r18, r26
    81e6:	f1 e0       	ldi	r31, 0x01	; 1
    81e8:	24 17       	cp	r18, r20
    81ea:	08 f0       	brcs	.+2      	; 0x81ee <fat_write_file+0x344>
    81ec:	f0 e0       	ldi	r31, 0x00	; 0
    81ee:	fe 2e       	mov	r15, r30
    81f0:	f2 0e       	add	r15, r18
    81f2:	31 e0       	ldi	r19, 0x01	; 1
    81f4:	f2 16       	cp	r15, r18
    81f6:	08 f0       	brcs	.+2      	; 0x81fa <fat_write_file+0x350>
    81f8:	30 e0       	ldi	r19, 0x00	; 0
    81fa:	f3 2b       	or	r31, r19
    81fc:	25 2f       	mov	r18, r21
    81fe:	20 0f       	add	r18, r16
    8200:	41 e0       	ldi	r20, 0x01	; 1
    8202:	25 17       	cp	r18, r21
    8204:	08 f0       	brcs	.+2      	; 0x8208 <fat_write_file+0x35e>
    8206:	40 e0       	ldi	r20, 0x00	; 0
    8208:	f2 0f       	add	r31, r18
    820a:	31 e0       	ldi	r19, 0x01	; 1
    820c:	f2 17       	cp	r31, r18
    820e:	08 f0       	brcs	.+2      	; 0x8212 <fat_write_file+0x368>
    8210:	30 e0       	ldi	r19, 0x00	; 0
    8212:	43 2b       	or	r20, r19
    8214:	26 2f       	mov	r18, r22
    8216:	2d 0d       	add	r18, r13
    8218:	51 e0       	ldi	r21, 0x01	; 1
    821a:	26 17       	cp	r18, r22
    821c:	08 f0       	brcs	.+2      	; 0x8220 <fat_write_file+0x376>
    821e:	50 e0       	ldi	r21, 0x00	; 0
    8220:	e4 2f       	mov	r30, r20
    8222:	e2 0f       	add	r30, r18
    8224:	31 e0       	ldi	r19, 0x01	; 1
    8226:	e2 17       	cp	r30, r18
    8228:	08 f0       	brcs	.+2      	; 0x822c <fat_write_file+0x382>
    822a:	30 e0       	ldi	r19, 0x00	; 0
    822c:	53 2b       	or	r21, r19
    822e:	27 2f       	mov	r18, r23
    8230:	2c 0d       	add	r18, r12
    8232:	41 e0       	ldi	r20, 0x01	; 1
    8234:	27 17       	cp	r18, r23
    8236:	08 f0       	brcs	.+2      	; 0x823a <fat_write_file+0x390>
    8238:	40 e0       	ldi	r20, 0x00	; 0
    823a:	52 0f       	add	r21, r18
    823c:	31 e0       	ldi	r19, 0x01	; 1
    823e:	52 17       	cp	r21, r18
    8240:	08 f0       	brcs	.+2      	; 0x8244 <fat_write_file+0x39a>
    8242:	30 e0       	ldi	r19, 0x00	; 0
    8244:	43 2b       	or	r20, r19
    8246:	28 2f       	mov	r18, r24
    8248:	2b 0d       	add	r18, r11
    824a:	31 e0       	ldi	r19, 0x01	; 1
    824c:	28 17       	cp	r18, r24
    824e:	08 f0       	brcs	.+2      	; 0x8252 <fat_write_file+0x3a8>
    8250:	30 e0       	ldi	r19, 0x00	; 0
    8252:	42 0f       	add	r20, r18
    8254:	81 e0       	ldi	r24, 0x01	; 1
    8256:	42 17       	cp	r20, r18
    8258:	08 f0       	brcs	.+2      	; 0x825c <fat_write_file+0x3b2>
    825a:	80 e0       	ldi	r24, 0x00	; 0
    825c:	a3 2f       	mov	r26, r19
    825e:	a8 2b       	or	r26, r24
    8260:	19 0f       	add	r17, r25
    8262:	2b 2f       	mov	r18, r27
    8264:	9e 2d       	mov	r25, r14
    8266:	6f 2d       	mov	r22, r15
    8268:	7f 2f       	mov	r23, r31
    826a:	4e 2e       	mov	r4, r30
    826c:	25 2e       	mov	r2, r21
    826e:	b4 2f       	mov	r27, r20
    8270:	a1 0f       	add	r26, r17
    8272:	08 c0       	rjmp	.+16     	; 0x8284 <fat_write_file+0x3da>
    8274:	20 e0       	ldi	r18, 0x00	; 0
    8276:	90 e0       	ldi	r25, 0x00	; 0
    8278:	60 e0       	ldi	r22, 0x00	; 0
    827a:	70 e0       	ldi	r23, 0x00	; 0
    827c:	44 24       	eor	r4, r4
    827e:	22 24       	eor	r2, r2
    8280:	b0 e0       	ldi	r27, 0x00	; 0
    8282:	a0 e0       	ldi	r26, 0x00	; 0
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t write_length = cluster_size - first_cluster_offset;
    8284:	8b 84       	ldd	r8, Y+11	; 0x0b
    8286:	9c 84       	ldd	r9, Y+12	; 0x0c
    8288:	4b 81       	ldd	r20, Y+3	; 0x03
    828a:	5c 81       	ldd	r21, Y+4	; 0x04
    828c:	84 1a       	sub	r8, r20
    828e:	95 0a       	sbc	r9, r21
    8290:	ed 81       	ldd	r30, Y+5	; 0x05
    8292:	fe 81       	ldd	r31, Y+6	; 0x06
    8294:	e8 15       	cp	r30, r8
    8296:	f9 05       	cpc	r31, r9
    8298:	08 f4       	brcc	.+2      	; 0x829c <fat_write_file+0x3f2>
    829a:	4f 01       	movw	r8, r30
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    829c:	e9 81       	ldd	r30, Y+1	; 0x01
    829e:	fa 81       	ldd	r31, Y+2	; 0x02
    82a0:	60 80       	ld	r6, Z
    82a2:	71 80       	ldd	r7, Z+1	; 0x01
    82a4:	4b 81       	ldd	r20, Y+3	; 0x03
    82a6:	5c 81       	ldd	r21, Y+4	; 0x04
    82a8:	5a 01       	movw	r10, r20
    82aa:	cc 24       	eor	r12, r12
    82ac:	dd 24       	eor	r13, r13
    82ae:	ee 24       	eor	r14, r14
    82b0:	ff 24       	eor	r15, r15
    82b2:	87 01       	movw	r16, r14
    82b4:	52 2e       	mov	r5, r18
    82b6:	54 0e       	add	r5, r20
    82b8:	31 e0       	ldi	r19, 0x01	; 1
    82ba:	52 16       	cp	r5, r18
    82bc:	08 f0       	brcs	.+2      	; 0x82c0 <fat_write_file+0x416>
    82be:	30 e0       	ldi	r19, 0x00	; 0
    82c0:	89 2f       	mov	r24, r25
    82c2:	8b 0d       	add	r24, r11
    82c4:	41 e0       	ldi	r20, 0x01	; 1
    82c6:	89 17       	cp	r24, r25
    82c8:	08 f0       	brcs	.+2      	; 0x82cc <fat_write_file+0x422>
    82ca:	40 e0       	ldi	r20, 0x00	; 0
    82cc:	38 0f       	add	r19, r24
    82ce:	91 e0       	ldi	r25, 0x01	; 1
    82d0:	38 17       	cp	r19, r24
    82d2:	08 f0       	brcs	.+2      	; 0x82d6 <fat_write_file+0x42c>
    82d4:	90 e0       	ldi	r25, 0x00	; 0
    82d6:	49 2b       	or	r20, r25
    82d8:	86 2f       	mov	r24, r22
    82da:	8c 0d       	add	r24, r12
    82dc:	51 e0       	ldi	r21, 0x01	; 1
    82de:	86 17       	cp	r24, r22
    82e0:	08 f0       	brcs	.+2      	; 0x82e4 <fat_write_file+0x43a>
    82e2:	50 e0       	ldi	r21, 0x00	; 0
    82e4:	48 0f       	add	r20, r24
    82e6:	91 e0       	ldi	r25, 0x01	; 1
    82e8:	48 17       	cp	r20, r24
    82ea:	08 f0       	brcs	.+2      	; 0x82ee <fat_write_file+0x444>
    82ec:	90 e0       	ldi	r25, 0x00	; 0
    82ee:	59 2b       	or	r21, r25
    82f0:	87 2f       	mov	r24, r23
    82f2:	8d 0d       	add	r24, r13
    82f4:	61 e0       	ldi	r22, 0x01	; 1
    82f6:	87 17       	cp	r24, r23
    82f8:	08 f0       	brcs	.+2      	; 0x82fc <fat_write_file+0x452>
    82fa:	60 e0       	ldi	r22, 0x00	; 0
    82fc:	58 0f       	add	r21, r24
    82fe:	91 e0       	ldi	r25, 0x01	; 1
    8300:	58 17       	cp	r21, r24
    8302:	08 f0       	brcs	.+2      	; 0x8306 <fat_write_file+0x45c>
    8304:	90 e0       	ldi	r25, 0x00	; 0
    8306:	69 2b       	or	r22, r25
    8308:	84 2d       	mov	r24, r4
    830a:	8e 0d       	add	r24, r14
    830c:	71 e0       	ldi	r23, 0x01	; 1
    830e:	84 15       	cp	r24, r4
    8310:	08 f0       	brcs	.+2      	; 0x8314 <fat_write_file+0x46a>
    8312:	70 e0       	ldi	r23, 0x00	; 0
    8314:	68 0f       	add	r22, r24
    8316:	91 e0       	ldi	r25, 0x01	; 1
    8318:	68 17       	cp	r22, r24
    831a:	08 f0       	brcs	.+2      	; 0x831e <fat_write_file+0x474>
    831c:	90 e0       	ldi	r25, 0x00	; 0
    831e:	79 2b       	or	r23, r25
    8320:	92 2d       	mov	r25, r2
    8322:	9f 0d       	add	r25, r15
    8324:	81 e0       	ldi	r24, 0x01	; 1
    8326:	92 15       	cp	r25, r2
    8328:	08 f0       	brcs	.+2      	; 0x832c <fat_write_file+0x482>
    832a:	80 e0       	ldi	r24, 0x00	; 0
    832c:	79 0f       	add	r23, r25
    832e:	e1 e0       	ldi	r30, 0x01	; 1
    8330:	79 17       	cp	r23, r25
    8332:	08 f0       	brcs	.+2      	; 0x8336 <fat_write_file+0x48c>
    8334:	e0 e0       	ldi	r30, 0x00	; 0
    8336:	8e 2b       	or	r24, r30
    8338:	eb 2f       	mov	r30, r27
    833a:	e0 0f       	add	r30, r16
    833c:	91 e0       	ldi	r25, 0x01	; 1
    833e:	eb 17       	cp	r30, r27
    8340:	08 f0       	brcs	.+2      	; 0x8344 <fat_write_file+0x49a>
    8342:	90 e0       	ldi	r25, 0x00	; 0
    8344:	8e 0f       	add	r24, r30
    8346:	f1 e0       	ldi	r31, 0x01	; 1
    8348:	8e 17       	cp	r24, r30
    834a:	08 f0       	brcs	.+2      	; 0x834e <fat_write_file+0x4a4>
    834c:	f0 e0       	ldi	r31, 0x00	; 0
    834e:	9f 2b       	or	r25, r31
    8350:	a1 0f       	add	r26, r17
    8352:	f3 01       	movw	r30, r6
    8354:	c4 80       	ldd	r12, Z+4	; 0x04
    8356:	d5 80       	ldd	r13, Z+5	; 0x05
    8358:	25 2d       	mov	r18, r5
    835a:	9a 0f       	add	r25, r26
    835c:	0d 85       	ldd	r16, Y+13	; 0x0d
    835e:	1e 85       	ldd	r17, Y+14	; 0x0e
    8360:	74 01       	movw	r14, r8
    8362:	f6 01       	movw	r30, r12
    8364:	09 95       	icall
    8366:	88 23       	and	r24, r24
    8368:	09 f4       	brne	.+2      	; 0x836c <fat_write_file+0x4c2>
    836a:	e5 c0       	rjmp	.+458    	; 0x8536 <fat_write_file+0x68c>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
    836c:	2d 81       	ldd	r18, Y+5	; 0x05
    836e:	3e 81       	ldd	r19, Y+6	; 0x06
    8370:	28 19       	sub	r18, r8
    8372:	39 09       	sbc	r19, r9
    8374:	3e 83       	std	Y+6, r19	; 0x06
    8376:	2d 83       	std	Y+5, r18	; 0x05
        fd->pos += write_length;
    8378:	94 01       	movw	r18, r8
    837a:	40 e0       	ldi	r20, 0x00	; 0
    837c:	50 e0       	ldi	r21, 0x00	; 0
    837e:	60 e0       	ldi	r22, 0x00	; 0
    8380:	70 e0       	ldi	r23, 0x00	; 0
    8382:	80 e0       	ldi	r24, 0x00	; 0
    8384:	90 e0       	ldi	r25, 0x00	; 0
    8386:	ad 89       	ldd	r26, Y+21	; 0x15
    8388:	be 89       	ldd	r27, Y+22	; 0x16
    838a:	d3 96       	adiw	r26, 0x33	; 51
    838c:	1c 91       	ld	r17, X
    838e:	d3 97       	sbiw	r26, 0x33	; 51
    8390:	d4 96       	adiw	r26, 0x34	; 52
    8392:	dc 90       	ld	r13, X
    8394:	d4 97       	sbiw	r26, 0x34	; 52
    8396:	d5 96       	adiw	r26, 0x35	; 53
    8398:	bc 91       	ld	r27, X
    839a:	ed 89       	ldd	r30, Y+21	; 0x15
    839c:	fe 89       	ldd	r31, Y+22	; 0x16
    839e:	06 a9       	ldd	r16, Z+54	; 0x36
    83a0:	e7 a8       	ldd	r14, Z+55	; 0x37
    83a2:	a0 ac       	ldd	r10, Z+56	; 0x38
    83a4:	71 ac       	ldd	r7, Z+57	; 0x39
    83a6:	f2 ac       	ldd	r15, Z+58	; 0x3a
    83a8:	18 0d       	add	r17, r8
    83aa:	f1 e0       	ldi	r31, 0x01	; 1
    83ac:	18 15       	cp	r17, r8
    83ae:	08 f0       	brcs	.+2      	; 0x83b2 <fat_write_file+0x508>
    83b0:	f0 e0       	ldi	r31, 0x00	; 0
    83b2:	ed 2d       	mov	r30, r13
    83b4:	e3 0f       	add	r30, r19
    83b6:	a1 e0       	ldi	r26, 0x01	; 1
    83b8:	e3 17       	cp	r30, r19
    83ba:	08 f0       	brcs	.+2      	; 0x83be <fat_write_file+0x514>
    83bc:	a0 e0       	ldi	r26, 0x00	; 0
    83be:	bf 2e       	mov	r11, r31
    83c0:	be 0e       	add	r11, r30
    83c2:	f1 e0       	ldi	r31, 0x01	; 1
    83c4:	be 16       	cp	r11, r30
    83c6:	08 f0       	brcs	.+2      	; 0x83ca <fat_write_file+0x520>
    83c8:	f0 e0       	ldi	r31, 0x00	; 0
    83ca:	af 2b       	or	r26, r31
    83cc:	e4 2f       	mov	r30, r20
    83ce:	eb 0f       	add	r30, r27
    83d0:	b1 e0       	ldi	r27, 0x01	; 1
    83d2:	e4 17       	cp	r30, r20
    83d4:	08 f0       	brcs	.+2      	; 0x83d8 <fat_write_file+0x52e>
    83d6:	b0 e0       	ldi	r27, 0x00	; 0
    83d8:	ca 2e       	mov	r12, r26
    83da:	ce 0e       	add	r12, r30
    83dc:	f1 e0       	ldi	r31, 0x01	; 1
    83de:	ce 16       	cp	r12, r30
    83e0:	08 f0       	brcs	.+2      	; 0x83e4 <fat_write_file+0x53a>
    83e2:	f0 e0       	ldi	r31, 0x00	; 0
    83e4:	bf 2b       	or	r27, r31
    83e6:	e5 2f       	mov	r30, r21
    83e8:	e0 0f       	add	r30, r16
    83ea:	a1 e0       	ldi	r26, 0x01	; 1
    83ec:	e5 17       	cp	r30, r21
    83ee:	08 f0       	brcs	.+2      	; 0x83f2 <fat_write_file+0x548>
    83f0:	a0 e0       	ldi	r26, 0x00	; 0
    83f2:	db 2e       	mov	r13, r27
    83f4:	de 0e       	add	r13, r30
    83f6:	f1 e0       	ldi	r31, 0x01	; 1
    83f8:	de 16       	cp	r13, r30
    83fa:	08 f0       	brcs	.+2      	; 0x83fe <fat_write_file+0x554>
    83fc:	f0 e0       	ldi	r31, 0x00	; 0
    83fe:	af 2b       	or	r26, r31
    8400:	e6 2f       	mov	r30, r22
    8402:	ee 0d       	add	r30, r14
    8404:	b1 e0       	ldi	r27, 0x01	; 1
    8406:	e6 17       	cp	r30, r22
    8408:	08 f0       	brcs	.+2      	; 0x840c <fat_write_file+0x562>
    840a:	b0 e0       	ldi	r27, 0x00	; 0
    840c:	ea 2e       	mov	r14, r26
    840e:	ee 0e       	add	r14, r30
    8410:	f1 e0       	ldi	r31, 0x01	; 1
    8412:	ee 16       	cp	r14, r30
    8414:	08 f0       	brcs	.+2      	; 0x8418 <fat_write_file+0x56e>
    8416:	f0 e0       	ldi	r31, 0x00	; 0
    8418:	bf 2b       	or	r27, r31
    841a:	e7 2f       	mov	r30, r23
    841c:	ea 0d       	add	r30, r10
    841e:	a1 e0       	ldi	r26, 0x01	; 1
    8420:	e7 17       	cp	r30, r23
    8422:	08 f0       	brcs	.+2      	; 0x8426 <fat_write_file+0x57c>
    8424:	a0 e0       	ldi	r26, 0x00	; 0
    8426:	0b 2f       	mov	r16, r27
    8428:	0e 0f       	add	r16, r30
    842a:	f1 e0       	ldi	r31, 0x01	; 1
    842c:	0e 17       	cp	r16, r30
    842e:	08 f0       	brcs	.+2      	; 0x8432 <fat_write_file+0x588>
    8430:	f0 e0       	ldi	r31, 0x00	; 0
    8432:	af 2b       	or	r26, r31
    8434:	e8 2f       	mov	r30, r24
    8436:	e7 0d       	add	r30, r7
    8438:	f1 e0       	ldi	r31, 0x01	; 1
    843a:	e8 17       	cp	r30, r24
    843c:	08 f0       	brcs	.+2      	; 0x8440 <fat_write_file+0x596>
    843e:	f0 e0       	ldi	r31, 0x00	; 0
    8440:	aa 2e       	mov	r10, r26
    8442:	ae 0e       	add	r10, r30
    8444:	a1 e0       	ldi	r26, 0x01	; 1
    8446:	ae 16       	cp	r10, r30
    8448:	08 f0       	brcs	.+2      	; 0x844c <fat_write_file+0x5a2>
    844a:	a0 e0       	ldi	r26, 0x00	; 0
    844c:	fa 2b       	or	r31, r26
    844e:	f9 0e       	add	r15, r25
    8450:	ff 0d       	add	r31, r15
    8452:	ad 89       	ldd	r26, Y+21	; 0x15
    8454:	be 89       	ldd	r27, Y+22	; 0x16
    8456:	d3 96       	adiw	r26, 0x33	; 51
    8458:	1c 93       	st	X, r17
    845a:	d3 97       	sbiw	r26, 0x33	; 51
    845c:	d4 96       	adiw	r26, 0x34	; 52
    845e:	bc 92       	st	X, r11
    8460:	d4 97       	sbiw	r26, 0x34	; 52
    8462:	d5 96       	adiw	r26, 0x35	; 53
    8464:	cc 92       	st	X, r12
    8466:	d5 97       	sbiw	r26, 0x35	; 53
    8468:	d6 96       	adiw	r26, 0x36	; 54
    846a:	dc 92       	st	X, r13
    846c:	d6 97       	sbiw	r26, 0x36	; 54
    846e:	d7 96       	adiw	r26, 0x37	; 55
    8470:	ec 92       	st	X, r14
    8472:	d7 97       	sbiw	r26, 0x37	; 55
    8474:	d8 96       	adiw	r26, 0x38	; 56
    8476:	0c 93       	st	X, r16
    8478:	d8 97       	sbiw	r26, 0x38	; 56
    847a:	d9 96       	adiw	r26, 0x39	; 57
    847c:	ac 92       	st	X, r10
    847e:	d9 97       	sbiw	r26, 0x39	; 57
    8480:	da 96       	adiw	r26, 0x3a	; 58
    8482:	fc 93       	st	X, r31
    8484:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + write_length >= cluster_size)
    8486:	8b 81       	ldd	r24, Y+3	; 0x03
    8488:	9c 81       	ldd	r25, Y+4	; 0x04
    848a:	88 0d       	add	r24, r8
    848c:	99 1d       	adc	r25, r9
    848e:	eb 85       	ldd	r30, Y+11	; 0x0b
    8490:	fc 85       	ldd	r31, Y+12	; 0x0c
    8492:	8e 17       	cp	r24, r30
    8494:	9f 07       	cpc	r25, r31
    8496:	c0 f1       	brcs	.+112    	; 0x8508 <fat_write_file+0x65e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    8498:	8d 91       	ld	r24, X+
    849a:	9c 91       	ld	r25, X
    849c:	4f 81       	ldd	r20, Y+7	; 0x07
    849e:	58 85       	ldd	r21, Y+8	; 0x08
    84a0:	69 85       	ldd	r22, Y+9	; 0x09
    84a2:	7a 85       	ldd	r23, Y+10	; 0x0a
    84a4:	0e 94 4b 21 	call	0x4296	; 0x4296 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    84a8:	61 15       	cp	r22, r1
    84aa:	71 05       	cpc	r23, r1
    84ac:	81 05       	cpc	r24, r1
    84ae:	91 05       	cpc	r25, r1
    84b0:	29 f0       	breq	.+10     	; 0x84bc <fat_write_file+0x612>
    84b2:	6f 83       	std	Y+7, r22	; 0x07
    84b4:	78 87       	std	Y+8, r23	; 0x08
    84b6:	89 87       	std	Y+9, r24	; 0x09
    84b8:	9a 87       	std	Y+10, r25	; 0x0a
    84ba:	24 c0       	rjmp	.+72     	; 0x8504 <fat_write_file+0x65a>
    84bc:	2d 81       	ldd	r18, Y+5	; 0x05
    84be:	3e 81       	ldd	r19, Y+6	; 0x06
    84c0:	23 2b       	or	r18, r19
    84c2:	a9 f0       	breq	.+42     	; 0x84ee <fat_write_file+0x644>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    84c4:	ad 89       	ldd	r26, Y+21	; 0x15
    84c6:	be 89       	ldd	r27, Y+22	; 0x16
    84c8:	8d 91       	ld	r24, X+
    84ca:	9c 91       	ld	r25, X
    84cc:	4f 81       	ldd	r20, Y+7	; 0x07
    84ce:	58 85       	ldd	r21, Y+8	; 0x08
    84d0:	69 85       	ldd	r22, Y+9	; 0x09
    84d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    84d4:	01 e0       	ldi	r16, 0x01	; 1
    84d6:	10 e0       	ldi	r17, 0x00	; 0
    84d8:	20 e0       	ldi	r18, 0x00	; 0
    84da:	30 e0       	ldi	r19, 0x00	; 0
    84dc:	0e 94 25 24 	call	0x484a	; 0x484a <fat_append_clusters>
    84e0:	ab 01       	movw	r20, r22
    84e2:	bc 01       	movw	r22, r24
            if(!cluster_num_next)
    84e4:	41 15       	cp	r20, r1
    84e6:	51 05       	cpc	r21, r1
    84e8:	61 05       	cpc	r22, r1
    84ea:	71 05       	cpc	r23, r1
    84ec:	39 f4       	brne	.+14     	; 0x84fc <fat_write_file+0x652>
            {
                fd->pos_cluster = 0;
    84ee:	ed 89       	ldd	r30, Y+21	; 0x15
    84f0:	fe 89       	ldd	r31, Y+22	; 0x16
    84f2:	13 ae       	std	Z+59, r1	; 0x3b
    84f4:	14 ae       	std	Z+60, r1	; 0x3c
    84f6:	15 ae       	std	Z+61, r1	; 0x3d
    84f8:	16 ae       	std	Z+62, r1	; 0x3e
    84fa:	1d c0       	rjmp	.+58     	; 0x8536 <fat_write_file+0x68c>
                break;
    84fc:	4f 83       	std	Y+7, r20	; 0x07
    84fe:	58 87       	std	Y+8, r21	; 0x08
    8500:	69 87       	std	Y+9, r22	; 0x09
    8502:	7a 87       	std	Y+10, r23	; 0x0a
    8504:	1c 82       	std	Y+4, r1	; 0x04
    8506:	1b 82       	std	Y+3, r1	; 0x03

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    8508:	2f 81       	ldd	r18, Y+7	; 0x07
    850a:	38 85       	ldd	r19, Y+8	; 0x08
    850c:	49 85       	ldd	r20, Y+9	; 0x09
    850e:	5a 85       	ldd	r21, Y+10	; 0x0a
    8510:	ad 89       	ldd	r26, Y+21	; 0x15
    8512:	be 89       	ldd	r27, Y+22	; 0x16
    8514:	db 96       	adiw	r26, 0x3b	; 59
    8516:	2d 93       	st	X+, r18
    8518:	3d 93       	st	X+, r19
    851a:	4d 93       	st	X+, r20
    851c:	5c 93       	st	X, r21
    851e:	de 97       	sbiw	r26, 0x3e	; 62

    } while(buffer_left > 0); /* check if we are done */
    8520:	ed 81       	ldd	r30, Y+5	; 0x05
    8522:	fe 81       	ldd	r31, Y+6	; 0x06
    8524:	ef 2b       	or	r30, r31
    8526:	39 f0       	breq	.+14     	; 0x8536 <fat_write_file+0x68c>
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
    8528:	2d 85       	ldd	r18, Y+13	; 0x0d
    852a:	3e 85       	ldd	r19, Y+14	; 0x0e
    852c:	28 0d       	add	r18, r8
    852e:	39 1d       	adc	r19, r9
    8530:	3e 87       	std	Y+14, r19	; 0x0e
    8532:	2d 87       	std	Y+13, r18	; 0x0d
    8534:	07 ce       	rjmp	.-1010   	; 0x8144 <fat_write_file+0x29a>
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    8536:	ad 89       	ldd	r26, Y+21	; 0x15
    8538:	be 89       	ldd	r27, Y+22	; 0x16
    853a:	d3 96       	adiw	r26, 0x33	; 51
    853c:	7c 91       	ld	r23, X
    853e:	d3 97       	sbiw	r26, 0x33	; 51
    8540:	d4 96       	adiw	r26, 0x34	; 52
    8542:	4c 91       	ld	r20, X
    8544:	d4 97       	sbiw	r26, 0x34	; 52
    8546:	d5 96       	adiw	r26, 0x35	; 53
    8548:	5c 91       	ld	r21, X
    854a:	d5 97       	sbiw	r26, 0x35	; 53
    854c:	d6 96       	adiw	r26, 0x36	; 54
    854e:	6c 91       	ld	r22, X
    8550:	d6 97       	sbiw	r26, 0x36	; 54
    8552:	d7 96       	adiw	r26, 0x37	; 55
    8554:	3c 91       	ld	r19, X
    8556:	d7 97       	sbiw	r26, 0x37	; 55
    8558:	d8 96       	adiw	r26, 0x38	; 56
    855a:	2c 91       	ld	r18, X
    855c:	d8 97       	sbiw	r26, 0x38	; 56
    855e:	d9 96       	adiw	r26, 0x39	; 57
    8560:	9c 91       	ld	r25, X
    8562:	d9 97       	sbiw	r26, 0x39	; 57
    8564:	da 96       	adiw	r26, 0x3a	; 58
    8566:	8c 91       	ld	r24, X
    8568:	da 97       	sbiw	r26, 0x3a	; 58
    856a:	97 96       	adiw	r26, 0x27	; 39
    856c:	6d 90       	ld	r6, X+
    856e:	7d 90       	ld	r7, X+
    8570:	8d 90       	ld	r8, X+
    8572:	9c 90       	ld	r9, X
    8574:	9a 97       	sbiw	r26, 0x2a	; 42
    8576:	64 01       	movw	r12, r8
    8578:	53 01       	movw	r10, r6
    857a:	ee 24       	eor	r14, r14
    857c:	ff 24       	eor	r15, r15
    857e:	87 01       	movw	r16, r14
    8580:	18 17       	cp	r17, r24
    8582:	e0 f0       	brcs	.+56     	; 0x85bc <fat_write_file+0x712>
    8584:	81 17       	cp	r24, r17
    8586:	d9 f5       	brne	.+118    	; 0x85fe <fat_write_file+0x754>
    8588:	09 17       	cp	r16, r25
    858a:	c0 f0       	brcs	.+48     	; 0x85bc <fat_write_file+0x712>
    858c:	90 17       	cp	r25, r16
    858e:	b9 f5       	brne	.+110    	; 0x85fe <fat_write_file+0x754>
    8590:	f2 16       	cp	r15, r18
    8592:	a0 f0       	brcs	.+40     	; 0x85bc <fat_write_file+0x712>
    8594:	2f 15       	cp	r18, r15
    8596:	99 f5       	brne	.+102    	; 0x85fe <fat_write_file+0x754>
    8598:	e3 16       	cp	r14, r19
    859a:	80 f0       	brcs	.+32     	; 0x85bc <fat_write_file+0x712>
    859c:	3e 15       	cp	r19, r14
    859e:	79 f5       	brne	.+94     	; 0x85fe <fat_write_file+0x754>
    85a0:	d6 16       	cp	r13, r22
    85a2:	60 f0       	brcs	.+24     	; 0x85bc <fat_write_file+0x712>
    85a4:	6d 15       	cp	r22, r13
    85a6:	59 f5       	brne	.+86     	; 0x85fe <fat_write_file+0x754>
    85a8:	c5 16       	cp	r12, r21
    85aa:	40 f0       	brcs	.+16     	; 0x85bc <fat_write_file+0x712>
    85ac:	5c 15       	cp	r21, r12
    85ae:	39 f5       	brne	.+78     	; 0x85fe <fat_write_file+0x754>
    85b0:	b4 16       	cp	r11, r20
    85b2:	20 f0       	brcs	.+8      	; 0x85bc <fat_write_file+0x712>
    85b4:	4b 15       	cp	r20, r11
    85b6:	19 f5       	brne	.+70     	; 0x85fe <fat_write_file+0x754>
    85b8:	67 16       	cp	r6, r23
    85ba:	08 f5       	brcc	.+66     	; 0x85fe <fat_write_file+0x754>
    {
        uint32_t size_old = fd->dir_entry.file_size;

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    85bc:	ed 89       	ldd	r30, Y+21	; 0x15
    85be:	fe 89       	ldd	r31, Y+22	; 0x16
    85c0:	77 a3       	std	Z+39, r23	; 0x27
    85c2:	40 a7       	std	Z+40, r20	; 0x28
    85c4:	51 a7       	std	Z+41, r21	; 0x29
    85c6:	62 a7       	std	Z+42, r22	; 0x2a
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    85c8:	81 91       	ld	r24, Z+
    85ca:	91 91       	ld	r25, Z+
    85cc:	bf 01       	movw	r22, r30
    85ce:	0e 94 50 38 	call	0x70a0	; 0x70a0 <fat_write_dir_entry>
    85d2:	88 23       	and	r24, r24
    85d4:	a1 f4       	brne	.+40     	; 0x85fe <fat_write_file+0x754>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    85d6:	ad 89       	ldd	r26, Y+21	; 0x15
    85d8:	be 89       	ldd	r27, Y+22	; 0x16
    85da:	d3 96       	adiw	r26, 0x33	; 51
    85dc:	0d 90       	ld	r0, X+
    85de:	bc 91       	ld	r27, X
    85e0:	a0 2d       	mov	r26, r0
    85e2:	a6 19       	sub	r26, r6
    85e4:	b7 09       	sbc	r27, r7
    85e6:	be 83       	std	Y+6, r27	; 0x06
    85e8:	ad 83       	std	Y+5, r26	; 0x05
            fd->pos = size_old;
    85ea:	ed 89       	ldd	r30, Y+21	; 0x15
    85ec:	fe 89       	ldd	r31, Y+22	; 0x16
    85ee:	a3 aa       	std	Z+51, r10	; 0x33
    85f0:	b4 aa       	std	Z+52, r11	; 0x34
    85f2:	c5 aa       	std	Z+53, r12	; 0x35
    85f4:	d6 aa       	std	Z+54, r13	; 0x36
    85f6:	17 aa       	std	Z+55, r1	; 0x37
    85f8:	10 ae       	std	Z+56, r1	; 0x38
    85fa:	11 ae       	std	Z+57, r1	; 0x39
    85fc:	12 ae       	std	Z+58, r1	; 0x3a
        }
    }

    return buffer_len - buffer_left;
    85fe:	4f 85       	ldd	r20, Y+15	; 0x0f
    8600:	58 89       	ldd	r21, Y+16	; 0x10
    8602:	2d 81       	ldd	r18, Y+5	; 0x05
    8604:	3e 81       	ldd	r19, Y+6	; 0x06
    8606:	42 1b       	sub	r20, r18
    8608:	53 0b       	sbc	r21, r19
    860a:	02 c0       	rjmp	.+4      	; 0x8610 <fat_write_file+0x766>
    860c:	4f ef       	ldi	r20, 0xFF	; 255
    860e:	5f ef       	ldi	r21, 0xFF	; 255
}
    8610:	ca 01       	movw	r24, r20
    8612:	66 96       	adiw	r28, 0x16	; 22
    8614:	0f b6       	in	r0, 0x3f	; 63
    8616:	f8 94       	cli
    8618:	de bf       	out	0x3e, r29	; 62
    861a:	0f be       	out	0x3f, r0	; 63
    861c:	cd bf       	out	0x3d, r28	; 61
    861e:	cf 91       	pop	r28
    8620:	df 91       	pop	r29
    8622:	1f 91       	pop	r17
    8624:	0f 91       	pop	r16
    8626:	ff 90       	pop	r15
    8628:	ef 90       	pop	r14
    862a:	df 90       	pop	r13
    862c:	cf 90       	pop	r12
    862e:	bf 90       	pop	r11
    8630:	af 90       	pop	r10
    8632:	9f 90       	pop	r9
    8634:	8f 90       	pop	r8
    8636:	7f 90       	pop	r7
    8638:	6f 90       	pop	r6
    863a:	5f 90       	pop	r5
    863c:	4f 90       	pop	r4
    863e:	3f 90       	pop	r3
    8640:	2f 90       	pop	r2
    8642:	08 95       	ret

00008644 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    8644:	cf 93       	push	r28
    8646:	df 93       	push	r29
    8648:	ac 01       	movw	r20, r24
    864a:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    864c:	00 97       	sbiw	r24, 0x00	; 0
    864e:	a9 f1       	breq	.+106    	; 0x86ba <fat_open_dir+0x76>
    8650:	61 15       	cp	r22, r1
    8652:	71 05       	cpc	r23, r1
    8654:	91 f1       	breq	.+100    	; 0x86ba <fat_open_dir+0x76>
    8656:	90 96       	adiw	r26, 0x20	; 32
    8658:	8c 91       	ld	r24, X
    865a:	90 97       	sbiw	r26, 0x20	; 32
    865c:	84 ff       	sbrs	r24, 4
    865e:	2d c0       	rjmp	.+90     	; 0x86ba <fat_open_dir+0x76>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    8660:	80 91 50 04 	lds	r24, 0x0450
    8664:	90 91 51 04 	lds	r25, 0x0451
    8668:	89 2b       	or	r24, r25
    866a:	19 f4       	brne	.+6      	; 0x8672 <fat_open_dir+0x2e>
    866c:	e0 e5       	ldi	r30, 0x50	; 80
    866e:	f4 e0       	ldi	r31, 0x04	; 4
    8670:	08 c0       	rjmp	.+16     	; 0x8682 <fat_open_dir+0x3e>
    8672:	80 91 89 04 	lds	r24, 0x0489
    8676:	90 91 8a 04 	lds	r25, 0x048A
    867a:	89 2b       	or	r24, r25
    867c:	f1 f4       	brne	.+60     	; 0x86ba <fat_open_dir+0x76>
    867e:	e9 e8       	ldi	r30, 0x89	; 137
    8680:	f4 e0       	ldi	r31, 0x04	; 4
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    8682:	9f 01       	movw	r18, r30
    8684:	2e 5f       	subi	r18, 0xFE	; 254
    8686:	3f 4f       	sbci	r19, 0xFF	; 255
    8688:	bd 01       	movw	r22, r26
    868a:	81 e3       	ldi	r24, 0x31	; 49
    868c:	eb 01       	movw	r28, r22
    868e:	09 90       	ld	r0, Y+
    8690:	be 01       	movw	r22, r28
    8692:	e9 01       	movw	r28, r18
    8694:	09 92       	st	Y+, r0
    8696:	9e 01       	movw	r18, r28
    8698:	81 50       	subi	r24, 0x01	; 1
    869a:	c1 f7       	brne	.-16     	; 0x868c <fat_open_dir+0x48>
    dd->fs = fs;
    869c:	51 83       	std	Z+1, r21	; 0x01
    869e:	40 83       	st	Z, r20
    dd->entry_cluster = dir_entry->cluster;
    86a0:	91 96       	adiw	r26, 0x21	; 33
    86a2:	8d 91       	ld	r24, X+
    86a4:	9d 91       	ld	r25, X+
    86a6:	0d 90       	ld	r0, X+
    86a8:	bc 91       	ld	r27, X
    86aa:	a0 2d       	mov	r26, r0
    86ac:	83 ab       	std	Z+51, r24	; 0x33
    86ae:	94 ab       	std	Z+52, r25	; 0x34
    86b0:	a5 ab       	std	Z+53, r26	; 0x35
    86b2:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    86b4:	10 ae       	std	Z+56, r1	; 0x38
    86b6:	17 aa       	std	Z+55, r1	; 0x37
    86b8:	02 c0       	rjmp	.+4      	; 0x86be <fat_open_dir+0x7a>

    return dd;
    86ba:	e0 e0       	ldi	r30, 0x00	; 0
    86bc:	f0 e0       	ldi	r31, 0x00	; 0
}
    86be:	cf 01       	movw	r24, r30
    86c0:	df 91       	pop	r29
    86c2:	cf 91       	pop	r28
    86c4:	08 95       	ret

000086c6 <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    86c6:	cf 93       	push	r28
    86c8:	df 93       	push	r29
    86ca:	9c 01       	movw	r18, r24
    86cc:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    86ce:	00 97       	sbiw	r24, 0x00	; 0
    86d0:	41 f0       	breq	.+16     	; 0x86e2 <fat_open_file+0x1c>
    86d2:	61 15       	cp	r22, r1
    86d4:	71 05       	cpc	r23, r1
    86d6:	29 f0       	breq	.+10     	; 0x86e2 <fat_open_file+0x1c>
    86d8:	90 96       	adiw	r26, 0x20	; 32
    86da:	8c 91       	ld	r24, X
    86dc:	90 97       	sbiw	r26, 0x20	; 32
    86de:	84 ff       	sbrs	r24, 4
    86e0:	33 c0       	rjmp	.+102    	; 0x8748 <fat_open_file+0x82>
    86e2:	20 e0       	ldi	r18, 0x00	; 0
    86e4:	30 e0       	ldi	r19, 0x00	; 0
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
    86e6:	c9 01       	movw	r24, r18
    86e8:	df 91       	pop	r29
    86ea:	cf 91       	pop	r28
    86ec:	08 95       	ret
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    86ee:	c3 e1       	ldi	r28, 0x13	; 19
    86f0:	d4 e0       	ldi	r29, 0x04	; 4
    86f2:	fd 01       	movw	r30, r26
    86f4:	81 e3       	ldi	r24, 0x31	; 49
    86f6:	01 90       	ld	r0, Z+
    86f8:	09 92       	st	Y+, r0
    86fa:	81 50       	subi	r24, 0x01	; 1
    86fc:	e1 f7       	brne	.-8      	; 0x86f6 <fat_open_file+0x30>
    fd->fs = fs;
    86fe:	30 93 12 04 	sts	0x0412, r19
    8702:	20 93 11 04 	sts	0x0411, r18
    fd->pos = 0;
    8706:	10 92 44 04 	sts	0x0444, r1
    870a:	10 92 45 04 	sts	0x0445, r1
    870e:	10 92 46 04 	sts	0x0446, r1
    8712:	10 92 47 04 	sts	0x0447, r1
    8716:	10 92 48 04 	sts	0x0448, r1
    871a:	10 92 49 04 	sts	0x0449, r1
    871e:	10 92 4a 04 	sts	0x044A, r1
    8722:	10 92 4b 04 	sts	0x044B, r1
    fd->pos_cluster = dir_entry->cluster;
    8726:	91 96       	adiw	r26, 0x21	; 33
    8728:	8d 91       	ld	r24, X+
    872a:	9d 91       	ld	r25, X+
    872c:	0d 90       	ld	r0, X+
    872e:	bc 91       	ld	r27, X
    8730:	a0 2d       	mov	r26, r0
    8732:	80 93 4c 04 	sts	0x044C, r24
    8736:	90 93 4d 04 	sts	0x044D, r25
    873a:	a0 93 4e 04 	sts	0x044E, r26
    873e:	b0 93 4f 04 	sts	0x044F, r27
    8742:	21 e1       	ldi	r18, 0x11	; 17
    8744:	34 e0       	ldi	r19, 0x04	; 4
    8746:	cf cf       	rjmp	.-98     	; 0x86e6 <fat_open_file+0x20>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    8748:	80 91 11 04 	lds	r24, 0x0411
    874c:	90 91 12 04 	lds	r25, 0x0412
    8750:	89 2b       	or	r24, r25
    8752:	39 f6       	brne	.-114    	; 0x86e2 <fat_open_file+0x1c>
    8754:	cc cf       	rjmp	.-104    	; 0x86ee <fat_open_file+0x28>

00008756 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    8756:	6f 92       	push	r6
    8758:	7f 92       	push	r7
    875a:	8f 92       	push	r8
    875c:	9f 92       	push	r9
    875e:	af 92       	push	r10
    8760:	bf 92       	push	r11
    8762:	cf 92       	push	r12
    8764:	df 92       	push	r13
    8766:	ef 92       	push	r14
    8768:	ff 92       	push	r15
    876a:	0f 93       	push	r16
    876c:	1f 93       	push	r17
    876e:	cf 93       	push	r28
    8770:	df 93       	push	r29
    8772:	4c 01       	movw	r8, r24
    8774:	eb 01       	movw	r28, r22
    8776:	7a 01       	movw	r14, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    8778:	00 97       	sbiw	r24, 0x00	; 0
    877a:	09 f4       	brne	.+2      	; 0x877e <fat_get_dir_entry_of_path+0x28>
    877c:	67 c0       	rjmp	.+206    	; 0x884c <fat_get_dir_entry_of_path+0xf6>
    877e:	61 15       	cp	r22, r1
    8780:	71 05       	cpc	r23, r1
    8782:	09 f4       	brne	.+2      	; 0x8786 <fat_get_dir_entry_of_path+0x30>
    8784:	63 c0       	rjmp	.+198    	; 0x884c <fat_get_dir_entry_of_path+0xf6>
    8786:	88 81       	ld	r24, Y
    8788:	88 23       	and	r24, r24
    878a:	09 f4       	brne	.+2      	; 0x878e <fat_get_dir_entry_of_path+0x38>
    878c:	5f c0       	rjmp	.+190    	; 0x884c <fat_get_dir_entry_of_path+0xf6>
    878e:	41 15       	cp	r20, r1
    8790:	51 05       	cpc	r21, r1
    8792:	09 f4       	brne	.+2      	; 0x8796 <fat_get_dir_entry_of_path+0x40>
    8794:	5b c0       	rjmp	.+182    	; 0x884c <fat_get_dir_entry_of_path+0xf6>
        return 0;

    if(path[0] == '/')
    8796:	8f 32       	cpi	r24, 0x2F	; 47
    8798:	09 f4       	brne	.+2      	; 0x879c <fat_get_dir_entry_of_path+0x46>
        ++path;
    879a:	21 96       	adiw	r28, 0x01	; 1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    879c:	81 e3       	ldi	r24, 0x31	; 49
    879e:	f7 01       	movw	r30, r14
    87a0:	11 92       	st	Z+, r1
    87a2:	8a 95       	dec	r24
    87a4:	e9 f7       	brne	.-6      	; 0x87a0 <fat_get_dir_entry_of_path+0x4a>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    87a6:	80 e1       	ldi	r24, 0x10	; 16
    87a8:	f7 01       	movw	r30, r14
    87aa:	80 a3       	std	Z+32, r24	; 0x20
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    87ac:	37 01       	movw	r6, r14
    87ae:	01 c0       	rjmp	.+2      	; 0x87b2 <fat_get_dir_entry_of_path+0x5c>
    87b0:	e5 01       	movw	r28, r10
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    87b2:	88 81       	ld	r24, Y
    87b4:	88 23       	and	r24, r24
    87b6:	09 f4       	brne	.+2      	; 0x87ba <fat_get_dir_entry_of_path+0x64>
    87b8:	4b c0       	rjmp	.+150    	; 0x8850 <fat_get_dir_entry_of_path+0xfa>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    87ba:	c4 01       	movw	r24, r8
    87bc:	b7 01       	movw	r22, r14
    87be:	0e 94 22 43 	call	0x8644	; 0x8644 <fat_open_dir>
    87c2:	6c 01       	movw	r12, r24
        if(!dd)
    87c4:	00 97       	sbiw	r24, 0x00	; 0
    87c6:	09 f4       	brne	.+2      	; 0x87ca <fat_get_dir_entry_of_path+0x74>
    87c8:	41 c0       	rjmp	.+130    	; 0x884c <fat_get_dir_entry_of_path+0xf6>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    87ca:	ce 01       	movw	r24, r28
    87cc:	6f e2       	ldi	r22, 0x2F	; 47
    87ce:	70 e0       	ldi	r23, 0x00	; 0
    87d0:	0e 94 e5 47 	call	0x8fca	; 0x8fca <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    87d4:	00 97       	sbiw	r24, 0x00	; 0
    87d6:	39 f0       	breq	.+14     	; 0x87e6 <fat_get_dir_entry_of_path+0x90>
        {
            length_to_sep = sub_path - path;
    87d8:	48 2f       	mov	r20, r24
    87da:	4c 1b       	sub	r20, r28
            ++sub_path;
    87dc:	5c 01       	movw	r10, r24
    87de:	08 94       	sec
    87e0:	a1 1c       	adc	r10, r1
    87e2:	b1 1c       	adc	r11, r1
    87e4:	2a c0       	rjmp	.+84     	; 0x883a <fat_get_dir_entry_of_path+0xe4>
        }
        else
        {
            length_to_sep = strlen(path);
    87e6:	fe 01       	movw	r30, r28
    87e8:	01 90       	ld	r0, Z+
    87ea:	00 20       	and	r0, r0
    87ec:	e9 f7       	brne	.-6      	; 0x87e8 <fat_get_dir_entry_of_path+0x92>
    87ee:	31 97       	sbiw	r30, 0x01	; 1
    87f0:	4e 2f       	mov	r20, r30
    87f2:	4c 1b       	sub	r20, r28
            sub_path = path + length_to_sep;
    87f4:	5e 01       	movw	r10, r28
    87f6:	a4 0e       	add	r10, r20
    87f8:	b1 1c       	adc	r11, r1
    87fa:	1f c0       	rjmp	.+62     	; 0x883a <fat_get_dir_entry_of_path+0xe4>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    87fc:	f3 01       	movw	r30, r6
    87fe:	01 90       	ld	r0, Z+
    8800:	00 20       	and	r0, r0
    8802:	e9 f7       	brne	.-6      	; 0x87fe <fat_get_dir_entry_of_path+0xa8>
    8804:	31 97       	sbiw	r30, 0x01	; 1
    8806:	e6 19       	sub	r30, r6
    8808:	f7 09       	sbc	r31, r7
    880a:	e0 17       	cp	r30, r16
    880c:	f1 07       	cpc	r31, r17
    880e:	b9 f4       	brne	.+46     	; 0x883e <fat_get_dir_entry_of_path+0xe8>
    8810:	ce 01       	movw	r24, r28
    8812:	b3 01       	movw	r22, r6
    8814:	a8 01       	movw	r20, r16
    8816:	0e 94 00 48 	call	0x9000	; 0x9000 <strncmp>
    881a:	00 97       	sbiw	r24, 0x00	; 0
    881c:	81 f4       	brne	.+32     	; 0x883e <fat_get_dir_entry_of_path+0xe8>
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    881e:	f6 01       	movw	r30, r12
    8820:	11 82       	std	Z+1, r1	; 0x01
    8822:	10 82       	st	Z, r1
                continue;

            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
    8824:	0c 0f       	add	r16, r28
    8826:	1d 1f       	adc	r17, r29
    8828:	f8 01       	movw	r30, r16
    882a:	80 81       	ld	r24, Z
    882c:	88 23       	and	r24, r24
    882e:	81 f0       	breq	.+32     	; 0x8850 <fat_get_dir_entry_of_path+0xfa>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    8830:	f7 01       	movw	r30, r14
    8832:	80 a1       	ldd	r24, Z+32	; 0x20
    8834:	84 fd       	sbrc	r24, 4
    8836:	bc cf       	rjmp	.-136    	; 0x87b0 <fat_get_dir_entry_of_path+0x5a>
    8838:	09 c0       	rjmp	.+18     	; 0x884c <fat_get_dir_entry_of_path+0xf6>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    883a:	04 2f       	mov	r16, r20
    883c:	10 e0       	ldi	r17, 0x00	; 0
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    883e:	c6 01       	movw	r24, r12
    8840:	b7 01       	movw	r22, r14
    8842:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <fat_read_dir>
    8846:	88 23       	and	r24, r24
    8848:	c9 f6       	brne	.-78     	; 0x87fc <fat_get_dir_entry_of_path+0xa6>
    884a:	12 c0       	rjmp	.+36     	; 0x8870 <fat_get_dir_entry_of_path+0x11a>
    884c:	80 e0       	ldi	r24, 0x00	; 0
    884e:	01 c0       	rjmp	.+2      	; 0x8852 <fat_get_dir_entry_of_path+0xfc>
    8850:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    8852:	df 91       	pop	r29
    8854:	cf 91       	pop	r28
    8856:	1f 91       	pop	r17
    8858:	0f 91       	pop	r16
    885a:	ff 90       	pop	r15
    885c:	ef 90       	pop	r14
    885e:	df 90       	pop	r13
    8860:	cf 90       	pop	r12
    8862:	bf 90       	pop	r11
    8864:	af 90       	pop	r10
    8866:	9f 90       	pop	r9
    8868:	8f 90       	pop	r8
    886a:	7f 90       	pop	r7
    886c:	6f 90       	pop	r6
    886e:	08 95       	ret
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    8870:	f6 01       	movw	r30, r12
    8872:	11 82       	std	Z+1, r1	; 0x01
    8874:	10 82       	st	Z, r1
    8876:	9d cf       	rjmp	.-198    	; 0x87b2 <fat_get_dir_entry_of_path+0x5c>

00008878 <uart_init>:

void uart_init(uint8_t uart_speed)
{
	//Assume 14.7456MHz
	uint16_t new_ubrr = 191; //Default is 9600bps
	if(uart_speed == 0) new_ubrr = 767; //2400
    8878:	88 23       	and	r24, r24
    887a:	61 f1       	breq	.+88     	; 0x88d4 <uart_init+0x5c>
	if(uart_speed == 1) new_ubrr = 191; //9600
    887c:	81 30       	cpi	r24, 0x01	; 1
    887e:	19 f4       	brne	.+6      	; 0x8886 <uart_init+0xe>
    8880:	2f eb       	ldi	r18, 0xBF	; 191
    8882:	30 e0       	ldi	r19, 0x00	; 0
    8884:	1c c0       	rjmp	.+56     	; 0x88be <uart_init+0x46>
	if(uart_speed == 2) new_ubrr = 31; //57600
    8886:	82 30       	cpi	r24, 0x02	; 2
    8888:	19 f4       	brne	.+6      	; 0x8890 <uart_init+0x18>
    888a:	2f e1       	ldi	r18, 0x1F	; 31
    888c:	30 e0       	ldi	r19, 0x00	; 0
    888e:	17 c0       	rjmp	.+46     	; 0x88be <uart_init+0x46>
	if(uart_speed == 3) new_ubrr = 15; //115200
    8890:	83 30       	cpi	r24, 0x03	; 3
    8892:	19 f1       	breq	.+70     	; 0x88da <uart_init+0x62>
	if(uart_speed == 4) new_ubrr = 383; //4800
    8894:	84 30       	cpi	r24, 0x04	; 4
    8896:	19 f4       	brne	.+6      	; 0x889e <uart_init+0x26>
    8898:	2f e7       	ldi	r18, 0x7F	; 127
    889a:	31 e0       	ldi	r19, 0x01	; 1
    889c:	10 c0       	rjmp	.+32     	; 0x88be <uart_init+0x46>
    889e:	2f eb       	ldi	r18, 0xBF	; 191
    88a0:	30 e0       	ldi	r19, 0x00	; 0
	if(uart_speed == 5) new_ubrr = 95; //19200
    88a2:	85 30       	cpi	r24, 0x05	; 5
    88a4:	19 f4       	brne	.+6      	; 0x88ac <uart_init+0x34>
    88a6:	2f e5       	ldi	r18, 0x5F	; 95
    88a8:	30 e0       	ldi	r19, 0x00	; 0
    88aa:	09 c0       	rjmp	.+18     	; 0x88be <uart_init+0x46>
	if(uart_speed == 6) new_ubrr = 47; //38400
    88ac:	86 30       	cpi	r24, 0x06	; 6
    88ae:	19 f4       	brne	.+6      	; 0x88b6 <uart_init+0x3e>
    88b0:	2f e2       	ldi	r18, 0x2F	; 47
    88b2:	30 e0       	ldi	r19, 0x00	; 0
    88b4:	04 c0       	rjmp	.+8      	; 0x88be <uart_init+0x46>
	if(uart_speed == 7) new_ubrr = 7;  //230400
    88b6:	87 30       	cpi	r24, 0x07	; 7
    88b8:	11 f4       	brne	.+4      	; 0x88be <uart_init+0x46>
    88ba:	27 e0       	ldi	r18, 0x07	; 7
    88bc:	30 e0       	ldi	r19, 0x00	; 0

	UCSR0A = (1<<U2X0); //Double the UART transfer rate
    88be:	82 e0       	ldi	r24, 0x02	; 2
    88c0:	80 93 c0 00 	sts	0x00C0, r24
	//Slightly more accurate UBRR calculation
	UBRR0L = new_ubrr;
    88c4:	20 93 c4 00 	sts	0x00C4, r18
	UBRR0H = new_ubrr >> 8;
    88c8:	30 93 c5 00 	sts	0x00C5, r19

#if !USE_SLEEP
    UCSRB = (1 << RXEN) | (1 << TXEN);
#else
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    88cc:	88 e9       	ldi	r24, 0x98	; 152
    88ce:	80 93 c1 00 	sts	0x00C1, r24
#endif

}
    88d2:	08 95       	ret
    88d4:	2f ef       	ldi	r18, 0xFF	; 255
    88d6:	32 e0       	ldi	r19, 0x02	; 2
    88d8:	f2 cf       	rjmp	.-28     	; 0x88be <uart_init+0x46>
    88da:	2f e0       	ldi	r18, 0x0F	; 15
    88dc:	30 e0       	ldi	r19, 0x00	; 0
    88de:	ef cf       	rjmp	.-34     	; 0x88be <uart_init+0x46>

000088e0 <uart_putc>:

void uart_putc(uint8_t c)
{
    88e0:	1f 93       	push	r17
    88e2:	18 2f       	mov	r17, r24
    if(c == '\n')
    88e4:	8a 30       	cpi	r24, 0x0A	; 10
    88e6:	19 f4       	brne	.+6      	; 0x88ee <uart_putc+0xe>
        uart_putc('\r');
    88e8:	8d e0       	ldi	r24, 0x0D	; 13
    88ea:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>

    /* wait until transmit buffer is empty */
    while(!(UCSRA & (1 << UDRE)));
    88ee:	80 91 c0 00 	lds	r24, 0x00C0
    88f2:	85 ff       	sbrs	r24, 5
    88f4:	fc cf       	rjmp	.-8      	; 0x88ee <uart_putc+0xe>

    /* send next byte */
    UDR = c;
    88f6:	10 93 c6 00 	sts	0x00C6, r17
}
    88fa:	1f 91       	pop	r17
    88fc:	08 95       	ret

000088fe <uart_putc_hex>:

void uart_putc_hex(uint8_t b)
{
    88fe:	1f 93       	push	r17
    8900:	18 2f       	mov	r17, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
    8902:	82 95       	swap	r24
    8904:	8f 70       	andi	r24, 0x0F	; 15
    8906:	8a 30       	cpi	r24, 0x0A	; 10
    8908:	10 f4       	brcc	.+4      	; 0x890e <uart_putc_hex+0x10>
        uart_putc((b >> 4) + '0');
    890a:	80 5d       	subi	r24, 0xD0	; 208
    890c:	01 c0       	rjmp	.+2      	; 0x8910 <uart_putc_hex+0x12>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
    890e:	89 5a       	subi	r24, 0xA9	; 169
    8910:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
    8914:	81 2f       	mov	r24, r17
    8916:	90 e0       	ldi	r25, 0x00	; 0
    8918:	8f 70       	andi	r24, 0x0F	; 15
    891a:	90 70       	andi	r25, 0x00	; 0
    891c:	21 2f       	mov	r18, r17
    891e:	2f 70       	andi	r18, 0x0F	; 15
    8920:	0a 97       	sbiw	r24, 0x0a	; 10
    8922:	1c f4       	brge	.+6      	; 0x892a <uart_putc_hex+0x2c>
        uart_putc((b & 0x0f) + '0');
    8924:	82 2f       	mov	r24, r18
    8926:	80 5d       	subi	r24, 0xD0	; 208
    8928:	02 c0       	rjmp	.+4      	; 0x892e <uart_putc_hex+0x30>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
    892a:	82 2f       	mov	r24, r18
    892c:	89 5a       	subi	r24, 0xA9	; 169
    892e:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
}
    8932:	1f 91       	pop	r17
    8934:	08 95       	ret

00008936 <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
    8936:	1f 93       	push	r17
    8938:	18 2f       	mov	r17, r24
    uart_putc_hex((uint8_t) (w >> 8));
    893a:	89 2f       	mov	r24, r25
    893c:	0e 94 7f 44 	call	0x88fe	; 0x88fe <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
    8940:	81 2f       	mov	r24, r17
    8942:	0e 94 7f 44 	call	0x88fe	; 0x88fe <uart_putc_hex>
}
    8946:	1f 91       	pop	r17
    8948:	08 95       	ret

0000894a <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    894a:	ef 92       	push	r14
    894c:	ff 92       	push	r15
    894e:	0f 93       	push	r16
    8950:	1f 93       	push	r17
    8952:	7b 01       	movw	r14, r22
    8954:	8c 01       	movw	r16, r24
    uart_putw_hex((uint16_t) (dw >> 16));
    8956:	c8 01       	movw	r24, r16
    8958:	aa 27       	eor	r26, r26
    895a:	bb 27       	eor	r27, r27
    895c:	0e 94 9b 44 	call	0x8936	; 0x8936 <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
    8960:	c7 01       	movw	r24, r14
    8962:	0e 94 9b 44 	call	0x8936	; 0x8936 <uart_putw_hex>
}
    8966:	1f 91       	pop	r17
    8968:	0f 91       	pop	r16
    896a:	ff 90       	pop	r15
    896c:	ef 90       	pop	r14
    896e:	08 95       	ret

00008970 <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    8970:	cf 92       	push	r12
    8972:	df 92       	push	r13
    8974:	ff 92       	push	r15
    8976:	0f 93       	push	r16
    8978:	1f 93       	push	r17
    897a:	cf 93       	push	r28
    897c:	df 93       	push	r29
    897e:	6c 01       	movw	r12, r24
    8980:	c0 e1       	ldi	r28, 0x10	; 16
    8982:	d7 e2       	ldi	r29, 0x27	; 39
    8984:	40 e0       	ldi	r20, 0x00	; 0
    8986:	00 e0       	ldi	r16, 0x00	; 0
    8988:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
    898a:	c6 01       	movw	r24, r12
    898c:	be 01       	movw	r22, r28
    898e:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <__udivmodhi4>
    8992:	f6 2e       	mov	r15, r22
        if(b > 0 || started || num == 1)
    8994:	66 23       	and	r22, r22
    8996:	29 f4       	brne	.+10     	; 0x89a2 <uart_putw_dec+0x32>
    8998:	44 23       	and	r20, r20
    899a:	19 f4       	brne	.+6      	; 0x89a2 <uart_putw_dec+0x32>
    899c:	c1 30       	cpi	r28, 0x01	; 1
    899e:	d1 05       	cpc	r29, r1
    89a0:	29 f4       	brne	.+10     	; 0x89ac <uart_putw_dec+0x3c>
        {
            uart_putc('0' + b);
    89a2:	8f 2d       	mov	r24, r15
    89a4:	80 5d       	subi	r24, 0xD0	; 208
    89a6:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    89aa:	41 e0       	ldi	r20, 0x01	; 1
            started = 1;
        }
        w -= b * num;

        num /= 10;
    89ac:	ce 01       	movw	r24, r28
    89ae:	6a e0       	ldi	r22, 0x0A	; 10
    89b0:	70 e0       	ldi	r23, 0x00	; 0
    89b2:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <__udivmodhi4>
    89b6:	0f 5f       	subi	r16, 0xFF	; 255
    89b8:	1f 4f       	sbci	r17, 0xFF	; 255
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    89ba:	05 30       	cpi	r16, 0x05	; 5
    89bc:	11 05       	cpc	r17, r1
    89be:	71 f0       	breq	.+28     	; 0x89dc <uart_putw_dec+0x6c>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;
    89c0:	8f 2d       	mov	r24, r15
    89c2:	90 e0       	ldi	r25, 0x00	; 0
    89c4:	9c 01       	movw	r18, r24
    89c6:	2c 9f       	mul	r18, r28
    89c8:	c0 01       	movw	r24, r0
    89ca:	2d 9f       	mul	r18, r29
    89cc:	90 0d       	add	r25, r0
    89ce:	3c 9f       	mul	r19, r28
    89d0:	90 0d       	add	r25, r0
    89d2:	11 24       	eor	r1, r1
    89d4:	c8 1a       	sub	r12, r24
    89d6:	d9 0a       	sbc	r13, r25
    89d8:	eb 01       	movw	r28, r22
    89da:	d7 cf       	rjmp	.-82     	; 0x898a <uart_putw_dec+0x1a>

        num /= 10;
    }
}
    89dc:	df 91       	pop	r29
    89de:	cf 91       	pop	r28
    89e0:	1f 91       	pop	r17
    89e2:	0f 91       	pop	r16
    89e4:	ff 90       	pop	r15
    89e6:	df 90       	pop	r13
    89e8:	cf 90       	pop	r12
    89ea:	08 95       	ret

000089ec <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    89ec:	4f 92       	push	r4
    89ee:	5f 92       	push	r5
    89f0:	6f 92       	push	r6
    89f2:	7f 92       	push	r7
    89f4:	8f 92       	push	r8
    89f6:	9f 92       	push	r9
    89f8:	af 92       	push	r10
    89fa:	bf 92       	push	r11
    89fc:	cf 92       	push	r12
    89fe:	df 92       	push	r13
    8a00:	ef 92       	push	r14
    8a02:	ff 92       	push	r15
    8a04:	0f 93       	push	r16
    8a06:	1f 93       	push	r17
    8a08:	cf 93       	push	r28
    8a0a:	df 93       	push	r29
    8a0c:	5b 01       	movw	r10, r22
    8a0e:	6c 01       	movw	r12, r24
    8a10:	e1 2c       	mov	r14, r1
    8a12:	9a ec       	ldi	r25, 0xCA	; 202
    8a14:	f9 2e       	mov	r15, r25
    8a16:	9a e9       	ldi	r25, 0x9A	; 154
    8a18:	09 2f       	mov	r16, r25
    8a1a:	9b e3       	ldi	r25, 0x3B	; 59
    8a1c:	19 2f       	mov	r17, r25
    8a1e:	44 24       	eor	r4, r4
    8a20:	c0 e0       	ldi	r28, 0x00	; 0
    8a22:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
    8a24:	c6 01       	movw	r24, r12
    8a26:	b5 01       	movw	r22, r10
    8a28:	a8 01       	movw	r20, r16
    8a2a:	97 01       	movw	r18, r14
    8a2c:	0e 94 17 4b 	call	0x962e	; 0x962e <__udivmodsi4>
    8a30:	92 2e       	mov	r9, r18
        if(b > 0 || started || num == 1)
    8a32:	22 23       	and	r18, r18
    8a34:	41 f4       	brne	.+16     	; 0x8a46 <uart_putdw_dec+0x5a>
    8a36:	44 20       	and	r4, r4
    8a38:	31 f4       	brne	.+12     	; 0x8a46 <uart_putdw_dec+0x5a>
    8a3a:	81 e0       	ldi	r24, 0x01	; 1
    8a3c:	e8 16       	cp	r14, r24
    8a3e:	f1 04       	cpc	r15, r1
    8a40:	01 05       	cpc	r16, r1
    8a42:	11 05       	cpc	r17, r1
    8a44:	31 f4       	brne	.+12     	; 0x8a52 <uart_putdw_dec+0x66>
        {
            uart_putc('0' + b);
    8a46:	89 2d       	mov	r24, r9
    8a48:	80 5d       	subi	r24, 0xD0	; 208
    8a4a:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    8a4e:	44 24       	eor	r4, r4
    8a50:	43 94       	inc	r4
            started = 1;
        }
        dw -= b * num;

        num /= 10;
    8a52:	c8 01       	movw	r24, r16
    8a54:	b7 01       	movw	r22, r14
    8a56:	2a e0       	ldi	r18, 0x0A	; 10
    8a58:	30 e0       	ldi	r19, 0x00	; 0
    8a5a:	40 e0       	ldi	r20, 0x00	; 0
    8a5c:	50 e0       	ldi	r21, 0x00	; 0
    8a5e:	0e 94 17 4b 	call	0x962e	; 0x962e <__udivmodsi4>
    8a62:	82 2e       	mov	r8, r18
    8a64:	73 2e       	mov	r7, r19
    8a66:	64 2e       	mov	r6, r20
    8a68:	55 2e       	mov	r5, r21
    8a6a:	21 96       	adiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    8a6c:	ca 30       	cpi	r28, 0x0A	; 10
    8a6e:	d1 05       	cpc	r29, r1
    8a70:	a9 f0       	breq	.+42     	; 0x8a9c <uart_putdw_dec+0xb0>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;
    8a72:	69 2d       	mov	r22, r9
    8a74:	70 e0       	ldi	r23, 0x00	; 0
    8a76:	80 e0       	ldi	r24, 0x00	; 0
    8a78:	90 e0       	ldi	r25, 0x00	; 0
    8a7a:	a8 01       	movw	r20, r16
    8a7c:	97 01       	movw	r18, r14
    8a7e:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    8a82:	a6 1a       	sub	r10, r22
    8a84:	b7 0a       	sbc	r11, r23
    8a86:	c8 0a       	sbc	r12, r24
    8a88:	d9 0a       	sbc	r13, r25
    8a8a:	28 2d       	mov	r18, r8
    8a8c:	37 2d       	mov	r19, r7
    8a8e:	46 2d       	mov	r20, r6
    8a90:	55 2d       	mov	r21, r5
    8a92:	c9 01       	movw	r24, r18
    8a94:	da 01       	movw	r26, r20
    8a96:	7c 01       	movw	r14, r24
    8a98:	8d 01       	movw	r16, r26
    8a9a:	c4 cf       	rjmp	.-120    	; 0x8a24 <uart_putdw_dec+0x38>

        num /= 10;
    }
}
    8a9c:	df 91       	pop	r29
    8a9e:	cf 91       	pop	r28
    8aa0:	1f 91       	pop	r17
    8aa2:	0f 91       	pop	r16
    8aa4:	ff 90       	pop	r15
    8aa6:	ef 90       	pop	r14
    8aa8:	df 90       	pop	r13
    8aaa:	cf 90       	pop	r12
    8aac:	bf 90       	pop	r11
    8aae:	af 90       	pop	r10
    8ab0:	9f 90       	pop	r9
    8ab2:	8f 90       	pop	r8
    8ab4:	7f 90       	pop	r7
    8ab6:	6f 90       	pop	r6
    8ab8:	5f 90       	pop	r5
    8aba:	4f 90       	pop	r4
    8abc:	08 95       	ret

00008abe <uart_puts>:

void uart_puts(const char* str)
{
    8abe:	cf 93       	push	r28
    8ac0:	df 93       	push	r29
    8ac2:	ec 01       	movw	r28, r24
    8ac4:	03 c0       	rjmp	.+6      	; 0x8acc <uart_puts+0xe>
    while(*str)
        uart_putc(*str++);
    8ac6:	21 96       	adiw	r28, 0x01	; 1
    8ac8:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    }
}

void uart_puts(const char* str)
{
    while(*str)
    8acc:	88 81       	ld	r24, Y
    8ace:	88 23       	and	r24, r24
    8ad0:	d1 f7       	brne	.-12     	; 0x8ac6 <uart_puts+0x8>
        uart_putc(*str++);
}
    8ad2:	df 91       	pop	r29
    8ad4:	cf 91       	pop	r28
    8ad6:	08 95       	ret

00008ad8 <uart_puts_p>:

void uart_puts_p(PGM_P str)
{
    8ad8:	cf 93       	push	r28
    8ada:	df 93       	push	r29
    8adc:	ec 01       	movw	r28, r24
    8ade:	fe 01       	movw	r30, r28
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
    8ae0:	21 96       	adiw	r28, 0x01	; 1
    8ae2:	84 91       	lpm	r24, Z+
        if(!b)
    8ae4:	88 23       	and	r24, r24
    8ae6:	19 f0       	breq	.+6      	; 0x8aee <uart_puts_p+0x16>
            break;

        uart_putc(b);
    8ae8:	0e 94 70 44 	call	0x88e0	; 0x88e0 <uart_putc>
    8aec:	f8 cf       	rjmp	.-16     	; 0x8ade <uart_puts_p+0x6>
    }
}
    8aee:	df 91       	pop	r29
    8af0:	cf 91       	pop	r28
    8af2:	08 95       	ret

00008af4 <uart_getc>:
{
    /* wait until receive buffer is full */
#if USE_SLEEP

	//During append file, we are disabling the RX interrupt, so we need to bring it back
	UCSR0B |= (1<<RXCIE0); //Enable receive interrupts
    8af4:	80 91 c1 00 	lds	r24, 0x00C1
    8af8:	80 68       	ori	r24, 0x80	; 128
    8afa:	80 93 c1 00 	sts	0x00C1, r24

  sei();
    8afe:	78 94       	sei
	sleep_mode();
    8b00:	83 b7       	in	r24, 0x33	; 51
    8b02:	81 60       	ori	r24, 0x01	; 1
    8b04:	83 bf       	out	0x33, r24	; 51
    8b06:	88 95       	sleep
    8b08:	83 b7       	in	r24, 0x33	; 51
    8b0a:	8e 7f       	andi	r24, 0xFE	; 254
    8b0c:	83 bf       	out	0x33, r24	; 51
	cli();
    8b0e:	f8 94       	cli
	
	//Now that we've woken up, we assume that the UART ISR has done its job and loaded UDR into the buffer
	//We need to look at the last used spot in the buffer which is read_spot - 1
	char b;
	if(read_spot == 0)
    8b10:	80 91 c5 04 	lds	r24, 0x04C5
    8b14:	90 91 c6 04 	lds	r25, 0x04C6
    8b18:	89 2b       	or	r24, r25
    8b1a:	19 f4       	brne	.+6      	; 0x8b22 <uart_getc+0x2e>
		b = input_buffer[sizeof(input_buffer) - 1];
    8b1c:	80 91 cc 0c 	lds	r24, 0x0CCC
    8b20:	07 c0       	rjmp	.+14     	; 0x8b30 <uart_getc+0x3c>
	else
		b = input_buffer[read_spot - 1];
    8b22:	e0 91 c5 04 	lds	r30, 0x04C5
    8b26:	f0 91 c6 04 	lds	r31, 0x04C6
    8b2a:	e4 53       	subi	r30, 0x34	; 52
    8b2c:	fb 4f       	sbci	r31, 0xFB	; 251
    8b2e:	80 81       	ld	r24, Z

    if(b == '\r')
    8b30:	8d 30       	cpi	r24, 0x0D	; 13
    8b32:	09 f4       	brne	.+2      	; 0x8b36 <uart_getc+0x42>
    8b34:	8a e0       	ldi	r24, 0x0A	; 10
        b = '\n';

    return b;
#endif

}
    8b36:	08 95       	ret

00008b38 <__muldi3>:
    8b38:	a0 e3       	ldi	r26, 0x30	; 48
    8b3a:	b0 e0       	ldi	r27, 0x00	; 0
    8b3c:	e2 ea       	ldi	r30, 0xA2	; 162
    8b3e:	f5 e4       	ldi	r31, 0x45	; 69
    8b40:	0c 94 39 4b 	jmp	0x9672	; 0x9672 <__prologue_saves__>
    8b44:	a8 e0       	ldi	r26, 0x08	; 8
    8b46:	4e 01       	movw	r8, r28
    8b48:	08 94       	sec
    8b4a:	81 1c       	adc	r8, r1
    8b4c:	91 1c       	adc	r9, r1
    8b4e:	f4 01       	movw	r30, r8
    8b50:	ba 2f       	mov	r27, r26
    8b52:	11 92       	st	Z+, r1
    8b54:	ba 95       	dec	r27
    8b56:	e9 f7       	brne	.-6      	; 0x8b52 <__muldi3+0x1a>
    8b58:	29 83       	std	Y+1, r18	; 0x01
    8b5a:	3a 83       	std	Y+2, r19	; 0x02
    8b5c:	4b 83       	std	Y+3, r20	; 0x03
    8b5e:	5c 83       	std	Y+4, r21	; 0x04
    8b60:	6d 83       	std	Y+5, r22	; 0x05
    8b62:	7e 83       	std	Y+6, r23	; 0x06
    8b64:	8f 83       	std	Y+7, r24	; 0x07
    8b66:	98 87       	std	Y+8, r25	; 0x08
    8b68:	ce 01       	movw	r24, r28
    8b6a:	09 96       	adiw	r24, 0x09	; 9
    8b6c:	fc 01       	movw	r30, r24
    8b6e:	11 92       	st	Z+, r1
    8b70:	aa 95       	dec	r26
    8b72:	e9 f7       	brne	.-6      	; 0x8b6e <__muldi3+0x36>
    8b74:	a9 86       	std	Y+9, r10	; 0x09
    8b76:	ba 86       	std	Y+10, r11	; 0x0a
    8b78:	cb 86       	std	Y+11, r12	; 0x0b
    8b7a:	dc 86       	std	Y+12, r13	; 0x0c
    8b7c:	ed 86       	std	Y+13, r14	; 0x0d
    8b7e:	fe 86       	std	Y+14, r15	; 0x0e
    8b80:	0f 87       	std	Y+15, r16	; 0x0f
    8b82:	18 8b       	std	Y+16, r17	; 0x10
    8b84:	29 81       	ldd	r18, Y+1	; 0x01
    8b86:	3a 81       	ldd	r19, Y+2	; 0x02
    8b88:	4b 81       	ldd	r20, Y+3	; 0x03
    8b8a:	5c 81       	ldd	r21, Y+4	; 0x04
    8b8c:	2d a7       	std	Y+45, r18	; 0x2d
    8b8e:	3e a7       	std	Y+46, r19	; 0x2e
    8b90:	4f a7       	std	Y+47, r20	; 0x2f
    8b92:	58 ab       	std	Y+48, r21	; 0x30
    8b94:	79 01       	movw	r14, r18
    8b96:	8a 01       	movw	r16, r20
    8b98:	8f ef       	ldi	r24, 0xFF	; 255
    8b9a:	9f ef       	ldi	r25, 0xFF	; 255
    8b9c:	a0 e0       	ldi	r26, 0x00	; 0
    8b9e:	b0 e0       	ldi	r27, 0x00	; 0
    8ba0:	e8 22       	and	r14, r24
    8ba2:	f9 22       	and	r15, r25
    8ba4:	0a 23       	and	r16, r26
    8ba6:	1b 23       	and	r17, r27
    8ba8:	1a 01       	movw	r2, r20
    8baa:	44 24       	eor	r4, r4
    8bac:	55 24       	eor	r5, r5
    8bae:	29 85       	ldd	r18, Y+9	; 0x09
    8bb0:	3a 85       	ldd	r19, Y+10	; 0x0a
    8bb2:	4b 85       	ldd	r20, Y+11	; 0x0b
    8bb4:	5c 85       	ldd	r21, Y+12	; 0x0c
    8bb6:	29 a7       	std	Y+41, r18	; 0x29
    8bb8:	3a a7       	std	Y+42, r19	; 0x2a
    8bba:	4b a7       	std	Y+43, r20	; 0x2b
    8bbc:	5c a7       	std	Y+44, r21	; 0x2c
    8bbe:	59 01       	movw	r10, r18
    8bc0:	6a 01       	movw	r12, r20
    8bc2:	a8 22       	and	r10, r24
    8bc4:	b9 22       	and	r11, r25
    8bc6:	ca 22       	and	r12, r26
    8bc8:	db 22       	and	r13, r27
    8bca:	3a 01       	movw	r6, r20
    8bcc:	88 24       	eor	r8, r8
    8bce:	99 24       	eor	r9, r9
    8bd0:	c6 01       	movw	r24, r12
    8bd2:	b5 01       	movw	r22, r10
    8bd4:	a8 01       	movw	r20, r16
    8bd6:	97 01       	movw	r18, r14
    8bd8:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    8bdc:	6d a3       	std	Y+37, r22	; 0x25
    8bde:	7e a3       	std	Y+38, r23	; 0x26
    8be0:	8f a3       	std	Y+39, r24	; 0x27
    8be2:	98 a7       	std	Y+40, r25	; 0x28
    8be4:	c4 01       	movw	r24, r8
    8be6:	b3 01       	movw	r22, r6
    8be8:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    8bec:	69 a3       	std	Y+33, r22	; 0x21
    8bee:	7a a3       	std	Y+34, r23	; 0x22
    8bf0:	8b a3       	std	Y+35, r24	; 0x23
    8bf2:	9c a3       	std	Y+36, r25	; 0x24
    8bf4:	c6 01       	movw	r24, r12
    8bf6:	b5 01       	movw	r22, r10
    8bf8:	a2 01       	movw	r20, r4
    8bfa:	91 01       	movw	r18, r2
    8bfc:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    8c00:	7b 01       	movw	r14, r22
    8c02:	8c 01       	movw	r16, r24
    8c04:	c4 01       	movw	r24, r8
    8c06:	b3 01       	movw	r22, r6
    8c08:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    8c0c:	5b 01       	movw	r10, r22
    8c0e:	6c 01       	movw	r12, r24
    8c10:	89 a1       	ldd	r24, Y+33	; 0x21
    8c12:	9a a1       	ldd	r25, Y+34	; 0x22
    8c14:	ab a1       	ldd	r26, Y+35	; 0x23
    8c16:	bc a1       	ldd	r27, Y+36	; 0x24
    8c18:	8e 0d       	add	r24, r14
    8c1a:	9f 1d       	adc	r25, r15
    8c1c:	a0 1f       	adc	r26, r16
    8c1e:	b1 1f       	adc	r27, r17
    8c20:	89 a3       	std	Y+33, r24	; 0x21
    8c22:	9a a3       	std	Y+34, r25	; 0x22
    8c24:	ab a3       	std	Y+35, r26	; 0x23
    8c26:	bc a3       	std	Y+36, r27	; 0x24
    8c28:	2d a1       	ldd	r18, Y+37	; 0x25
    8c2a:	3e a1       	ldd	r19, Y+38	; 0x26
    8c2c:	4f a1       	ldd	r20, Y+39	; 0x27
    8c2e:	58 a5       	ldd	r21, Y+40	; 0x28
    8c30:	ca 01       	movw	r24, r20
    8c32:	aa 27       	eor	r26, r26
    8c34:	bb 27       	eor	r27, r27
    8c36:	29 a1       	ldd	r18, Y+33	; 0x21
    8c38:	3a a1       	ldd	r19, Y+34	; 0x22
    8c3a:	4b a1       	ldd	r20, Y+35	; 0x23
    8c3c:	5c a1       	ldd	r21, Y+36	; 0x24
    8c3e:	28 0f       	add	r18, r24
    8c40:	39 1f       	adc	r19, r25
    8c42:	4a 1f       	adc	r20, r26
    8c44:	5b 1f       	adc	r21, r27
    8c46:	29 a3       	std	Y+33, r18	; 0x21
    8c48:	3a a3       	std	Y+34, r19	; 0x22
    8c4a:	4b a3       	std	Y+35, r20	; 0x23
    8c4c:	5c a3       	std	Y+36, r21	; 0x24
    8c4e:	2e 15       	cp	r18, r14
    8c50:	3f 05       	cpc	r19, r15
    8c52:	40 07       	cpc	r20, r16
    8c54:	51 07       	cpc	r21, r17
    8c56:	40 f4       	brcc	.+16     	; 0x8c68 <__muldi3+0x130>
    8c58:	80 e0       	ldi	r24, 0x00	; 0
    8c5a:	90 e0       	ldi	r25, 0x00	; 0
    8c5c:	a1 e0       	ldi	r26, 0x01	; 1
    8c5e:	b0 e0       	ldi	r27, 0x00	; 0
    8c60:	a8 0e       	add	r10, r24
    8c62:	b9 1e       	adc	r11, r25
    8c64:	ca 1e       	adc	r12, r26
    8c66:	db 1e       	adc	r13, r27
    8c68:	89 a1       	ldd	r24, Y+33	; 0x21
    8c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    8c6c:	ab a1       	ldd	r26, Y+35	; 0x23
    8c6e:	bc a1       	ldd	r27, Y+36	; 0x24
    8c70:	9d 01       	movw	r18, r26
    8c72:	44 27       	eor	r20, r20
    8c74:	55 27       	eor	r21, r21
    8c76:	2a 0d       	add	r18, r10
    8c78:	3b 1d       	adc	r19, r11
    8c7a:	4c 1d       	adc	r20, r12
    8c7c:	5d 1d       	adc	r21, r13
    8c7e:	2d 8f       	std	Y+29, r18	; 0x1d
    8c80:	3e 8f       	std	Y+30, r19	; 0x1e
    8c82:	4f 8f       	std	Y+31, r20	; 0x1f
    8c84:	58 a3       	std	Y+32, r21	; 0x20
    8c86:	6c 01       	movw	r12, r24
    8c88:	bb 24       	eor	r11, r11
    8c8a:	aa 24       	eor	r10, r10
    8c8c:	8d a1       	ldd	r24, Y+37	; 0x25
    8c8e:	9e a1       	ldd	r25, Y+38	; 0x26
    8c90:	af a1       	ldd	r26, Y+39	; 0x27
    8c92:	b8 a5       	ldd	r27, Y+40	; 0x28
    8c94:	a0 70       	andi	r26, 0x00	; 0
    8c96:	b0 70       	andi	r27, 0x00	; 0
    8c98:	a8 0e       	add	r10, r24
    8c9a:	b9 1e       	adc	r11, r25
    8c9c:	ca 1e       	adc	r12, r26
    8c9e:	db 1e       	adc	r13, r27
    8ca0:	a9 8e       	std	Y+25, r10	; 0x19
    8ca2:	ba 8e       	std	Y+26, r11	; 0x1a
    8ca4:	cb 8e       	std	Y+27, r12	; 0x1b
    8ca6:	dc 8e       	std	Y+28, r13	; 0x1c
    8ca8:	9a 8c       	ldd	r9, Y+26	; 0x1a
    8caa:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8cac:	7c 8c       	ldd	r7, Y+28	; 0x1c
    8cae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8cb0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    8cb2:	78 a1       	ldd	r23, Y+32	; 0x20
    8cb4:	fe 01       	movw	r30, r28
    8cb6:	71 96       	adiw	r30, 0x11	; 17
    8cb8:	88 e0       	ldi	r24, 0x08	; 8
    8cba:	df 01       	movw	r26, r30
    8cbc:	1d 92       	st	X+, r1
    8cbe:	8a 95       	dec	r24
    8cc0:	e9 f7       	brne	.-6      	; 0x8cbc <__muldi3+0x184>
    8cc2:	2d 8b       	std	Y+21, r18	; 0x15
    8cc4:	9e 8b       	std	Y+22, r25	; 0x16
    8cc6:	6f 8b       	std	Y+23, r22	; 0x17
    8cc8:	78 8f       	std	Y+24, r23	; 0x18
    8cca:	2d 85       	ldd	r18, Y+13	; 0x0d
    8ccc:	3e 85       	ldd	r19, Y+14	; 0x0e
    8cce:	4f 85       	ldd	r20, Y+15	; 0x0f
    8cd0:	58 89       	ldd	r21, Y+16	; 0x10
    8cd2:	6d a5       	ldd	r22, Y+45	; 0x2d
    8cd4:	7e a5       	ldd	r23, Y+46	; 0x2e
    8cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    8cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    8cda:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    8cde:	7b 01       	movw	r14, r22
    8ce0:	8c 01       	movw	r16, r24
    8ce2:	2d 81       	ldd	r18, Y+5	; 0x05
    8ce4:	3e 81       	ldd	r19, Y+6	; 0x06
    8ce6:	4f 81       	ldd	r20, Y+7	; 0x07
    8ce8:	58 85       	ldd	r21, Y+8	; 0x08
    8cea:	69 a5       	ldd	r22, Y+41	; 0x29
    8cec:	7a a5       	ldd	r23, Y+42	; 0x2a
    8cee:	8b a5       	ldd	r24, Y+43	; 0x2b
    8cf0:	9c a5       	ldd	r25, Y+44	; 0x2c
    8cf2:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <__mulsi3>
    8cf6:	e6 0e       	add	r14, r22
    8cf8:	f7 1e       	adc	r15, r23
    8cfa:	08 1f       	adc	r16, r24
    8cfc:	19 1f       	adc	r17, r25
    8cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    8d00:	7e 89       	ldd	r23, Y+22	; 0x16
    8d02:	8f 89       	ldd	r24, Y+23	; 0x17
    8d04:	98 8d       	ldd	r25, Y+24	; 0x18
    8d06:	6e 0d       	add	r22, r14
    8d08:	7f 1d       	adc	r23, r15
    8d0a:	80 1f       	adc	r24, r16
    8d0c:	91 1f       	adc	r25, r17
    8d0e:	6d 8b       	std	Y+21, r22	; 0x15
    8d10:	7e 8b       	std	Y+22, r23	; 0x16
    8d12:	8f 8b       	std	Y+23, r24	; 0x17
    8d14:	98 8f       	std	Y+24, r25	; 0x18
    8d16:	ee 89       	ldd	r30, Y+22	; 0x16
    8d18:	2a 2d       	mov	r18, r10
    8d1a:	39 2d       	mov	r19, r9
    8d1c:	48 2d       	mov	r20, r8
    8d1e:	57 2d       	mov	r21, r7
    8d20:	7e 2f       	mov	r23, r30
    8d22:	8f 89       	ldd	r24, Y+23	; 0x17
    8d24:	98 8d       	ldd	r25, Y+24	; 0x18
    8d26:	e0 96       	adiw	r28, 0x30	; 48
    8d28:	e2 e1       	ldi	r30, 0x12	; 18
    8d2a:	0c 94 55 4b 	jmp	0x96aa	; 0x96aa <__epilogue_restores__>

00008d2e <__lshrdi3>:
    8d2e:	ef 92       	push	r14
    8d30:	ff 92       	push	r15
    8d32:	0f 93       	push	r16
    8d34:	df 93       	push	r29
    8d36:	cf 93       	push	r28
    8d38:	cd b7       	in	r28, 0x3d	; 61
    8d3a:	de b7       	in	r29, 0x3e	; 62
    8d3c:	60 97       	sbiw	r28, 0x10	; 16
    8d3e:	0f b6       	in	r0, 0x3f	; 63
    8d40:	f8 94       	cli
    8d42:	de bf       	out	0x3e, r29	; 62
    8d44:	0f be       	out	0x3f, r0	; 63
    8d46:	cd bf       	out	0x3d, r28	; 61
    8d48:	a8 2f       	mov	r26, r24
    8d4a:	00 23       	and	r16, r16
    8d4c:	09 f4       	brne	.+2      	; 0x8d50 <__lshrdi3+0x22>
    8d4e:	61 c0       	rjmp	.+194    	; 0x8e12 <__lshrdi3+0xe4>
    8d50:	7e 01       	movw	r14, r28
    8d52:	08 94       	sec
    8d54:	e1 1c       	adc	r14, r1
    8d56:	f1 1c       	adc	r15, r1
    8d58:	88 e0       	ldi	r24, 0x08	; 8
    8d5a:	f7 01       	movw	r30, r14
    8d5c:	11 92       	st	Z+, r1
    8d5e:	8a 95       	dec	r24
    8d60:	e9 f7       	brne	.-6      	; 0x8d5c <__lshrdi3+0x2e>
    8d62:	29 83       	std	Y+1, r18	; 0x01
    8d64:	3a 83       	std	Y+2, r19	; 0x02
    8d66:	4b 83       	std	Y+3, r20	; 0x03
    8d68:	5c 83       	std	Y+4, r21	; 0x04
    8d6a:	6d 83       	std	Y+5, r22	; 0x05
    8d6c:	7e 83       	std	Y+6, r23	; 0x06
    8d6e:	af 83       	std	Y+7, r26	; 0x07
    8d70:	98 87       	std	Y+8, r25	; 0x08
    8d72:	80 e2       	ldi	r24, 0x20	; 32
    8d74:	80 1b       	sub	r24, r16
    8d76:	e8 2f       	mov	r30, r24
    8d78:	ff 27       	eor	r31, r31
    8d7a:	e7 fd       	sbrc	r30, 7
    8d7c:	f0 95       	com	r31
    8d7e:	4d 81       	ldd	r20, Y+5	; 0x05
    8d80:	5e 81       	ldd	r21, Y+6	; 0x06
    8d82:	6f 81       	ldd	r22, Y+7	; 0x07
    8d84:	78 85       	ldd	r23, Y+8	; 0x08
    8d86:	18 16       	cp	r1, r24
    8d88:	84 f0       	brlt	.+32     	; 0x8daa <__lshrdi3+0x7c>
    8d8a:	1d 86       	std	Y+13, r1	; 0x0d
    8d8c:	1e 86       	std	Y+14, r1	; 0x0e
    8d8e:	1f 86       	std	Y+15, r1	; 0x0f
    8d90:	18 8a       	std	Y+16, r1	; 0x10
    8d92:	88 27       	eor	r24, r24
    8d94:	99 27       	eor	r25, r25
    8d96:	8e 1b       	sub	r24, r30
    8d98:	9f 0b       	sbc	r25, r31
    8d9a:	04 c0       	rjmp	.+8      	; 0x8da4 <__lshrdi3+0x76>
    8d9c:	76 95       	lsr	r23
    8d9e:	67 95       	ror	r22
    8da0:	57 95       	ror	r21
    8da2:	47 95       	ror	r20
    8da4:	8a 95       	dec	r24
    8da6:	d2 f7       	brpl	.-12     	; 0x8d9c <__lshrdi3+0x6e>
    8da8:	28 c0       	rjmp	.+80     	; 0x8dfa <__lshrdi3+0xcc>
    8daa:	20 2f       	mov	r18, r16
    8dac:	33 27       	eor	r19, r19
    8dae:	27 fd       	sbrc	r18, 7
    8db0:	30 95       	com	r19
    8db2:	db 01       	movw	r26, r22
    8db4:	ca 01       	movw	r24, r20
    8db6:	02 2e       	mov	r0, r18
    8db8:	04 c0       	rjmp	.+8      	; 0x8dc2 <__lshrdi3+0x94>
    8dba:	b6 95       	lsr	r27
    8dbc:	a7 95       	ror	r26
    8dbe:	97 95       	ror	r25
    8dc0:	87 95       	ror	r24
    8dc2:	0a 94       	dec	r0
    8dc4:	d2 f7       	brpl	.-12     	; 0x8dba <__lshrdi3+0x8c>
    8dc6:	8d 87       	std	Y+13, r24	; 0x0d
    8dc8:	9e 87       	std	Y+14, r25	; 0x0e
    8dca:	af 87       	std	Y+15, r26	; 0x0f
    8dcc:	b8 8b       	std	Y+16, r27	; 0x10
    8dce:	04 c0       	rjmp	.+8      	; 0x8dd8 <__lshrdi3+0xaa>
    8dd0:	44 0f       	add	r20, r20
    8dd2:	55 1f       	adc	r21, r21
    8dd4:	66 1f       	adc	r22, r22
    8dd6:	77 1f       	adc	r23, r23
    8dd8:	ea 95       	dec	r30
    8dda:	d2 f7       	brpl	.-12     	; 0x8dd0 <__lshrdi3+0xa2>
    8ddc:	89 81       	ldd	r24, Y+1	; 0x01
    8dde:	9a 81       	ldd	r25, Y+2	; 0x02
    8de0:	ab 81       	ldd	r26, Y+3	; 0x03
    8de2:	bc 81       	ldd	r27, Y+4	; 0x04
    8de4:	04 c0       	rjmp	.+8      	; 0x8dee <__lshrdi3+0xc0>
    8de6:	b6 95       	lsr	r27
    8de8:	a7 95       	ror	r26
    8dea:	97 95       	ror	r25
    8dec:	87 95       	ror	r24
    8dee:	2a 95       	dec	r18
    8df0:	d2 f7       	brpl	.-12     	; 0x8de6 <__lshrdi3+0xb8>
    8df2:	48 2b       	or	r20, r24
    8df4:	59 2b       	or	r21, r25
    8df6:	6a 2b       	or	r22, r26
    8df8:	7b 2b       	or	r23, r27
    8dfa:	49 87       	std	Y+9, r20	; 0x09
    8dfc:	5a 87       	std	Y+10, r21	; 0x0a
    8dfe:	6b 87       	std	Y+11, r22	; 0x0b
    8e00:	7c 87       	std	Y+12, r23	; 0x0c
    8e02:	29 85       	ldd	r18, Y+9	; 0x09
    8e04:	3a 85       	ldd	r19, Y+10	; 0x0a
    8e06:	4b 85       	ldd	r20, Y+11	; 0x0b
    8e08:	5c 85       	ldd	r21, Y+12	; 0x0c
    8e0a:	6d 85       	ldd	r22, Y+13	; 0x0d
    8e0c:	7e 85       	ldd	r23, Y+14	; 0x0e
    8e0e:	af 85       	ldd	r26, Y+15	; 0x0f
    8e10:	98 89       	ldd	r25, Y+16	; 0x10
    8e12:	8a 2f       	mov	r24, r26
    8e14:	60 96       	adiw	r28, 0x10	; 16
    8e16:	0f b6       	in	r0, 0x3f	; 63
    8e18:	f8 94       	cli
    8e1a:	de bf       	out	0x3e, r29	; 62
    8e1c:	0f be       	out	0x3f, r0	; 63
    8e1e:	cd bf       	out	0x3d, r28	; 61
    8e20:	cf 91       	pop	r28
    8e22:	df 91       	pop	r29
    8e24:	0f 91       	pop	r16
    8e26:	ff 90       	pop	r15
    8e28:	ef 90       	pop	r14
    8e2a:	08 95       	ret

00008e2c <__ashldi3>:
    8e2c:	ef 92       	push	r14
    8e2e:	ff 92       	push	r15
    8e30:	0f 93       	push	r16
    8e32:	df 93       	push	r29
    8e34:	cf 93       	push	r28
    8e36:	cd b7       	in	r28, 0x3d	; 61
    8e38:	de b7       	in	r29, 0x3e	; 62
    8e3a:	60 97       	sbiw	r28, 0x10	; 16
    8e3c:	0f b6       	in	r0, 0x3f	; 63
    8e3e:	f8 94       	cli
    8e40:	de bf       	out	0x3e, r29	; 62
    8e42:	0f be       	out	0x3f, r0	; 63
    8e44:	cd bf       	out	0x3d, r28	; 61
    8e46:	a8 2f       	mov	r26, r24
    8e48:	00 23       	and	r16, r16
    8e4a:	09 f4       	brne	.+2      	; 0x8e4e <__ashldi3+0x22>
    8e4c:	61 c0       	rjmp	.+194    	; 0x8f10 <__ashldi3+0xe4>
    8e4e:	7e 01       	movw	r14, r28
    8e50:	08 94       	sec
    8e52:	e1 1c       	adc	r14, r1
    8e54:	f1 1c       	adc	r15, r1
    8e56:	88 e0       	ldi	r24, 0x08	; 8
    8e58:	f7 01       	movw	r30, r14
    8e5a:	11 92       	st	Z+, r1
    8e5c:	8a 95       	dec	r24
    8e5e:	e9 f7       	brne	.-6      	; 0x8e5a <__ashldi3+0x2e>
    8e60:	29 83       	std	Y+1, r18	; 0x01
    8e62:	3a 83       	std	Y+2, r19	; 0x02
    8e64:	4b 83       	std	Y+3, r20	; 0x03
    8e66:	5c 83       	std	Y+4, r21	; 0x04
    8e68:	6d 83       	std	Y+5, r22	; 0x05
    8e6a:	7e 83       	std	Y+6, r23	; 0x06
    8e6c:	af 83       	std	Y+7, r26	; 0x07
    8e6e:	98 87       	std	Y+8, r25	; 0x08
    8e70:	80 e2       	ldi	r24, 0x20	; 32
    8e72:	80 1b       	sub	r24, r16
    8e74:	e8 2f       	mov	r30, r24
    8e76:	ff 27       	eor	r31, r31
    8e78:	e7 fd       	sbrc	r30, 7
    8e7a:	f0 95       	com	r31
    8e7c:	49 81       	ldd	r20, Y+1	; 0x01
    8e7e:	5a 81       	ldd	r21, Y+2	; 0x02
    8e80:	6b 81       	ldd	r22, Y+3	; 0x03
    8e82:	7c 81       	ldd	r23, Y+4	; 0x04
    8e84:	18 16       	cp	r1, r24
    8e86:	84 f0       	brlt	.+32     	; 0x8ea8 <__ashldi3+0x7c>
    8e88:	19 86       	std	Y+9, r1	; 0x09
    8e8a:	1a 86       	std	Y+10, r1	; 0x0a
    8e8c:	1b 86       	std	Y+11, r1	; 0x0b
    8e8e:	1c 86       	std	Y+12, r1	; 0x0c
    8e90:	88 27       	eor	r24, r24
    8e92:	99 27       	eor	r25, r25
    8e94:	8e 1b       	sub	r24, r30
    8e96:	9f 0b       	sbc	r25, r31
    8e98:	04 c0       	rjmp	.+8      	; 0x8ea2 <__ashldi3+0x76>
    8e9a:	44 0f       	add	r20, r20
    8e9c:	55 1f       	adc	r21, r21
    8e9e:	66 1f       	adc	r22, r22
    8ea0:	77 1f       	adc	r23, r23
    8ea2:	8a 95       	dec	r24
    8ea4:	d2 f7       	brpl	.-12     	; 0x8e9a <__ashldi3+0x6e>
    8ea6:	28 c0       	rjmp	.+80     	; 0x8ef8 <__ashldi3+0xcc>
    8ea8:	20 2f       	mov	r18, r16
    8eaa:	33 27       	eor	r19, r19
    8eac:	27 fd       	sbrc	r18, 7
    8eae:	30 95       	com	r19
    8eb0:	db 01       	movw	r26, r22
    8eb2:	ca 01       	movw	r24, r20
    8eb4:	02 2e       	mov	r0, r18
    8eb6:	04 c0       	rjmp	.+8      	; 0x8ec0 <__ashldi3+0x94>
    8eb8:	88 0f       	add	r24, r24
    8eba:	99 1f       	adc	r25, r25
    8ebc:	aa 1f       	adc	r26, r26
    8ebe:	bb 1f       	adc	r27, r27
    8ec0:	0a 94       	dec	r0
    8ec2:	d2 f7       	brpl	.-12     	; 0x8eb8 <__ashldi3+0x8c>
    8ec4:	89 87       	std	Y+9, r24	; 0x09
    8ec6:	9a 87       	std	Y+10, r25	; 0x0a
    8ec8:	ab 87       	std	Y+11, r26	; 0x0b
    8eca:	bc 87       	std	Y+12, r27	; 0x0c
    8ecc:	04 c0       	rjmp	.+8      	; 0x8ed6 <__ashldi3+0xaa>
    8ece:	76 95       	lsr	r23
    8ed0:	67 95       	ror	r22
    8ed2:	57 95       	ror	r21
    8ed4:	47 95       	ror	r20
    8ed6:	ea 95       	dec	r30
    8ed8:	d2 f7       	brpl	.-12     	; 0x8ece <__ashldi3+0xa2>
    8eda:	8d 81       	ldd	r24, Y+5	; 0x05
    8edc:	9e 81       	ldd	r25, Y+6	; 0x06
    8ede:	af 81       	ldd	r26, Y+7	; 0x07
    8ee0:	b8 85       	ldd	r27, Y+8	; 0x08
    8ee2:	04 c0       	rjmp	.+8      	; 0x8eec <__ashldi3+0xc0>
    8ee4:	88 0f       	add	r24, r24
    8ee6:	99 1f       	adc	r25, r25
    8ee8:	aa 1f       	adc	r26, r26
    8eea:	bb 1f       	adc	r27, r27
    8eec:	2a 95       	dec	r18
    8eee:	d2 f7       	brpl	.-12     	; 0x8ee4 <__ashldi3+0xb8>
    8ef0:	48 2b       	or	r20, r24
    8ef2:	59 2b       	or	r21, r25
    8ef4:	6a 2b       	or	r22, r26
    8ef6:	7b 2b       	or	r23, r27
    8ef8:	4d 87       	std	Y+13, r20	; 0x0d
    8efa:	5e 87       	std	Y+14, r21	; 0x0e
    8efc:	6f 87       	std	Y+15, r22	; 0x0f
    8efe:	78 8b       	std	Y+16, r23	; 0x10
    8f00:	29 85       	ldd	r18, Y+9	; 0x09
    8f02:	3a 85       	ldd	r19, Y+10	; 0x0a
    8f04:	4b 85       	ldd	r20, Y+11	; 0x0b
    8f06:	5c 85       	ldd	r21, Y+12	; 0x0c
    8f08:	6d 85       	ldd	r22, Y+13	; 0x0d
    8f0a:	7e 85       	ldd	r23, Y+14	; 0x0e
    8f0c:	af 85       	ldd	r26, Y+15	; 0x0f
    8f0e:	98 89       	ldd	r25, Y+16	; 0x10
    8f10:	8a 2f       	mov	r24, r26
    8f12:	60 96       	adiw	r28, 0x10	; 16
    8f14:	0f b6       	in	r0, 0x3f	; 63
    8f16:	f8 94       	cli
    8f18:	de bf       	out	0x3e, r29	; 62
    8f1a:	0f be       	out	0x3f, r0	; 63
    8f1c:	cd bf       	out	0x3d, r28	; 61
    8f1e:	cf 91       	pop	r28
    8f20:	df 91       	pop	r29
    8f22:	0f 91       	pop	r16
    8f24:	ff 90       	pop	r15
    8f26:	ef 90       	pop	r14
    8f28:	08 95       	ret

00008f2a <atoi>:
    8f2a:	fc 01       	movw	r30, r24
    8f2c:	88 27       	eor	r24, r24
    8f2e:	99 27       	eor	r25, r25
    8f30:	e8 94       	clt
    8f32:	21 91       	ld	r18, Z+
    8f34:	20 32       	cpi	r18, 0x20	; 32
    8f36:	e9 f3       	breq	.-6      	; 0x8f32 <atoi+0x8>
    8f38:	29 30       	cpi	r18, 0x09	; 9
    8f3a:	10 f0       	brcs	.+4      	; 0x8f40 <atoi+0x16>
    8f3c:	2e 30       	cpi	r18, 0x0E	; 14
    8f3e:	c8 f3       	brcs	.-14     	; 0x8f32 <atoi+0x8>
    8f40:	2b 32       	cpi	r18, 0x2B	; 43
    8f42:	41 f0       	breq	.+16     	; 0x8f54 <atoi+0x2a>
    8f44:	2d 32       	cpi	r18, 0x2D	; 45
    8f46:	39 f4       	brne	.+14     	; 0x8f56 <atoi+0x2c>
    8f48:	68 94       	set
    8f4a:	04 c0       	rjmp	.+8      	; 0x8f54 <atoi+0x2a>
    8f4c:	0e 94 28 48 	call	0x9050	; 0x9050 <__mulhi_const_10>
    8f50:	82 0f       	add	r24, r18
    8f52:	91 1d       	adc	r25, r1
    8f54:	21 91       	ld	r18, Z+
    8f56:	20 53       	subi	r18, 0x30	; 48
    8f58:	2a 30       	cpi	r18, 0x0A	; 10
    8f5a:	c0 f3       	brcs	.-16     	; 0x8f4c <atoi+0x22>
    8f5c:	1e f4       	brtc	.+6      	; 0x8f64 <atoi+0x3a>
    8f5e:	90 95       	com	r25
    8f60:	81 95       	neg	r24
    8f62:	9f 4f       	sbci	r25, 0xFF	; 255
    8f64:	08 95       	ret

00008f66 <strcmp_P>:
    8f66:	fb 01       	movw	r30, r22
    8f68:	dc 01       	movw	r26, r24
    8f6a:	8d 91       	ld	r24, X+
    8f6c:	05 90       	lpm	r0, Z+
    8f6e:	80 19       	sub	r24, r0
    8f70:	01 10       	cpse	r0, r1
    8f72:	d9 f3       	breq	.-10     	; 0x8f6a <strcmp_P+0x4>
    8f74:	99 0b       	sbc	r25, r25
    8f76:	08 95       	ret

00008f78 <strncmp_P>:
    8f78:	fb 01       	movw	r30, r22
    8f7a:	dc 01       	movw	r26, r24
    8f7c:	41 50       	subi	r20, 0x01	; 1
    8f7e:	50 40       	sbci	r21, 0x00	; 0
    8f80:	30 f0       	brcs	.+12     	; 0x8f8e <strncmp_P+0x16>
    8f82:	8d 91       	ld	r24, X+
    8f84:	05 90       	lpm	r0, Z+
    8f86:	80 19       	sub	r24, r0
    8f88:	19 f4       	brne	.+6      	; 0x8f90 <strncmp_P+0x18>
    8f8a:	00 20       	and	r0, r0
    8f8c:	b9 f7       	brne	.-18     	; 0x8f7c <strncmp_P+0x4>
    8f8e:	88 1b       	sub	r24, r24
    8f90:	99 0b       	sbc	r25, r25
    8f92:	08 95       	ret

00008f94 <memcpy>:
    8f94:	fb 01       	movw	r30, r22
    8f96:	dc 01       	movw	r26, r24
    8f98:	02 c0       	rjmp	.+4      	; 0x8f9e <memcpy+0xa>
    8f9a:	01 90       	ld	r0, Z+
    8f9c:	0d 92       	st	X+, r0
    8f9e:	41 50       	subi	r20, 0x01	; 1
    8fa0:	50 40       	sbci	r21, 0x00	; 0
    8fa2:	d8 f7       	brcc	.-10     	; 0x8f9a <memcpy+0x6>
    8fa4:	08 95       	ret

00008fa6 <memset>:
    8fa6:	dc 01       	movw	r26, r24
    8fa8:	01 c0       	rjmp	.+2      	; 0x8fac <memset+0x6>
    8faa:	6d 93       	st	X+, r22
    8fac:	41 50       	subi	r20, 0x01	; 1
    8fae:	50 40       	sbci	r21, 0x00	; 0
    8fb0:	e0 f7       	brcc	.-8      	; 0x8faa <memset+0x4>
    8fb2:	08 95       	ret

00008fb4 <strcat>:
    8fb4:	fb 01       	movw	r30, r22
    8fb6:	dc 01       	movw	r26, r24
    8fb8:	0d 90       	ld	r0, X+
    8fba:	00 20       	and	r0, r0
    8fbc:	e9 f7       	brne	.-6      	; 0x8fb8 <strcat+0x4>
    8fbe:	11 97       	sbiw	r26, 0x01	; 1
    8fc0:	01 90       	ld	r0, Z+
    8fc2:	0d 92       	st	X+, r0
    8fc4:	00 20       	and	r0, r0
    8fc6:	e1 f7       	brne	.-8      	; 0x8fc0 <strcat+0xc>
    8fc8:	08 95       	ret

00008fca <strchr>:
    8fca:	fc 01       	movw	r30, r24
    8fcc:	81 91       	ld	r24, Z+
    8fce:	86 17       	cp	r24, r22
    8fd0:	21 f0       	breq	.+8      	; 0x8fda <strchr+0x10>
    8fd2:	88 23       	and	r24, r24
    8fd4:	d9 f7       	brne	.-10     	; 0x8fcc <strchr+0x2>
    8fd6:	99 27       	eor	r25, r25
    8fd8:	08 95       	ret
    8fda:	31 97       	sbiw	r30, 0x01	; 1
    8fdc:	cf 01       	movw	r24, r30
    8fde:	08 95       	ret

00008fe0 <strcmp>:
    8fe0:	fb 01       	movw	r30, r22
    8fe2:	dc 01       	movw	r26, r24
    8fe4:	8d 91       	ld	r24, X+
    8fe6:	01 90       	ld	r0, Z+
    8fe8:	80 19       	sub	r24, r0
    8fea:	01 10       	cpse	r0, r1
    8fec:	d9 f3       	breq	.-10     	; 0x8fe4 <strcmp+0x4>
    8fee:	99 0b       	sbc	r25, r25
    8ff0:	08 95       	ret

00008ff2 <strcpy>:
    8ff2:	fb 01       	movw	r30, r22
    8ff4:	dc 01       	movw	r26, r24
    8ff6:	01 90       	ld	r0, Z+
    8ff8:	0d 92       	st	X+, r0
    8ffa:	00 20       	and	r0, r0
    8ffc:	e1 f7       	brne	.-8      	; 0x8ff6 <strcpy+0x4>
    8ffe:	08 95       	ret

00009000 <strncmp>:
    9000:	fb 01       	movw	r30, r22
    9002:	dc 01       	movw	r26, r24
    9004:	41 50       	subi	r20, 0x01	; 1
    9006:	50 40       	sbci	r21, 0x00	; 0
    9008:	30 f0       	brcs	.+12     	; 0x9016 <strncmp+0x16>
    900a:	8d 91       	ld	r24, X+
    900c:	01 90       	ld	r0, Z+
    900e:	80 19       	sub	r24, r0
    9010:	19 f4       	brne	.+6      	; 0x9018 <strncmp+0x18>
    9012:	00 20       	and	r0, r0
    9014:	b9 f7       	brne	.-18     	; 0x9004 <strncmp+0x4>
    9016:	88 1b       	sub	r24, r24
    9018:	99 0b       	sbc	r25, r25
    901a:	08 95       	ret

0000901c <strncpy>:
    901c:	fb 01       	movw	r30, r22
    901e:	dc 01       	movw	r26, r24
    9020:	41 50       	subi	r20, 0x01	; 1
    9022:	50 40       	sbci	r21, 0x00	; 0
    9024:	48 f0       	brcs	.+18     	; 0x9038 <strncpy+0x1c>
    9026:	01 90       	ld	r0, Z+
    9028:	0d 92       	st	X+, r0
    902a:	00 20       	and	r0, r0
    902c:	c9 f7       	brne	.-14     	; 0x9020 <strncpy+0x4>
    902e:	01 c0       	rjmp	.+2      	; 0x9032 <strncpy+0x16>
    9030:	1d 92       	st	X+, r1
    9032:	41 50       	subi	r20, 0x01	; 1
    9034:	50 40       	sbci	r21, 0x00	; 0
    9036:	e0 f7       	brcc	.-8      	; 0x9030 <strncpy+0x14>
    9038:	08 95       	ret

0000903a <strrchr>:
    903a:	fc 01       	movw	r30, r24
    903c:	81 e0       	ldi	r24, 0x01	; 1
    903e:	90 e0       	ldi	r25, 0x00	; 0
    9040:	01 90       	ld	r0, Z+
    9042:	06 16       	cp	r0, r22
    9044:	09 f4       	brne	.+2      	; 0x9048 <strrchr+0xe>
    9046:	cf 01       	movw	r24, r30
    9048:	00 20       	and	r0, r0
    904a:	d1 f7       	brne	.-12     	; 0x9040 <strrchr+0x6>
    904c:	01 97       	sbiw	r24, 0x01	; 1
    904e:	08 95       	ret

00009050 <__mulhi_const_10>:
    9050:	7a e0       	ldi	r23, 0x0A	; 10
    9052:	97 9f       	mul	r25, r23
    9054:	90 2d       	mov	r25, r0
    9056:	87 9f       	mul	r24, r23
    9058:	80 2d       	mov	r24, r0
    905a:	91 0d       	add	r25, r1
    905c:	11 24       	eor	r1, r1
    905e:	08 95       	ret

00009060 <sprintf>:
    9060:	ae e0       	ldi	r26, 0x0E	; 14
    9062:	b0 e0       	ldi	r27, 0x00	; 0
    9064:	e6 e3       	ldi	r30, 0x36	; 54
    9066:	f8 e4       	ldi	r31, 0x48	; 72
    9068:	0c 94 47 4b 	jmp	0x968e	; 0x968e <__prologue_saves__+0x1c>
    906c:	0d 89       	ldd	r16, Y+21	; 0x15
    906e:	1e 89       	ldd	r17, Y+22	; 0x16
    9070:	86 e0       	ldi	r24, 0x06	; 6
    9072:	8c 83       	std	Y+4, r24	; 0x04
    9074:	1a 83       	std	Y+2, r17	; 0x02
    9076:	09 83       	std	Y+1, r16	; 0x01
    9078:	8f ef       	ldi	r24, 0xFF	; 255
    907a:	9f e7       	ldi	r25, 0x7F	; 127
    907c:	9e 83       	std	Y+6, r25	; 0x06
    907e:	8d 83       	std	Y+5, r24	; 0x05
    9080:	9e 01       	movw	r18, r28
    9082:	27 5e       	subi	r18, 0xE7	; 231
    9084:	3f 4f       	sbci	r19, 0xFF	; 255
    9086:	ce 01       	movw	r24, r28
    9088:	01 96       	adiw	r24, 0x01	; 1
    908a:	6f 89       	ldd	r22, Y+23	; 0x17
    908c:	78 8d       	ldd	r23, Y+24	; 0x18
    908e:	a9 01       	movw	r20, r18
    9090:	0e 94 54 48 	call	0x90a8	; 0x90a8 <vfprintf>
    9094:	2f 81       	ldd	r18, Y+7	; 0x07
    9096:	38 85       	ldd	r19, Y+8	; 0x08
    9098:	02 0f       	add	r16, r18
    909a:	13 1f       	adc	r17, r19
    909c:	f8 01       	movw	r30, r16
    909e:	10 82       	st	Z, r1
    90a0:	2e 96       	adiw	r28, 0x0e	; 14
    90a2:	e4 e0       	ldi	r30, 0x04	; 4
    90a4:	0c 94 63 4b 	jmp	0x96c6	; 0x96c6 <__epilogue_restores__+0x1c>

000090a8 <vfprintf>:
    90a8:	ab e0       	ldi	r26, 0x0B	; 11
    90aa:	b0 e0       	ldi	r27, 0x00	; 0
    90ac:	ea e5       	ldi	r30, 0x5A	; 90
    90ae:	f8 e4       	ldi	r31, 0x48	; 72
    90b0:	0c 94 39 4b 	jmp	0x9672	; 0x9672 <__prologue_saves__>
    90b4:	3c 01       	movw	r6, r24
    90b6:	2b 01       	movw	r4, r22
    90b8:	5a 01       	movw	r10, r20
    90ba:	fc 01       	movw	r30, r24
    90bc:	17 82       	std	Z+7, r1	; 0x07
    90be:	16 82       	std	Z+6, r1	; 0x06
    90c0:	83 81       	ldd	r24, Z+3	; 0x03
    90c2:	81 fd       	sbrc	r24, 1
    90c4:	03 c0       	rjmp	.+6      	; 0x90cc <vfprintf+0x24>
    90c6:	6f ef       	ldi	r22, 0xFF	; 255
    90c8:	7f ef       	ldi	r23, 0xFF	; 255
    90ca:	c6 c1       	rjmp	.+908    	; 0x9458 <vfprintf+0x3b0>
    90cc:	9a e0       	ldi	r25, 0x0A	; 10
    90ce:	89 2e       	mov	r8, r25
    90d0:	1e 01       	movw	r2, r28
    90d2:	08 94       	sec
    90d4:	21 1c       	adc	r2, r1
    90d6:	31 1c       	adc	r3, r1
    90d8:	f3 01       	movw	r30, r6
    90da:	23 81       	ldd	r18, Z+3	; 0x03
    90dc:	f2 01       	movw	r30, r4
    90de:	23 fd       	sbrc	r18, 3
    90e0:	85 91       	lpm	r24, Z+
    90e2:	23 ff       	sbrs	r18, 3
    90e4:	81 91       	ld	r24, Z+
    90e6:	2f 01       	movw	r4, r30
    90e8:	88 23       	and	r24, r24
    90ea:	09 f4       	brne	.+2      	; 0x90ee <vfprintf+0x46>
    90ec:	b2 c1       	rjmp	.+868    	; 0x9452 <vfprintf+0x3aa>
    90ee:	85 32       	cpi	r24, 0x25	; 37
    90f0:	39 f4       	brne	.+14     	; 0x9100 <vfprintf+0x58>
    90f2:	23 fd       	sbrc	r18, 3
    90f4:	85 91       	lpm	r24, Z+
    90f6:	23 ff       	sbrs	r18, 3
    90f8:	81 91       	ld	r24, Z+
    90fa:	2f 01       	movw	r4, r30
    90fc:	85 32       	cpi	r24, 0x25	; 37
    90fe:	29 f4       	brne	.+10     	; 0x910a <vfprintf+0x62>
    9100:	90 e0       	ldi	r25, 0x00	; 0
    9102:	b3 01       	movw	r22, r6
    9104:	0e 94 47 4a 	call	0x948e	; 0x948e <fputc>
    9108:	e7 cf       	rjmp	.-50     	; 0x90d8 <vfprintf+0x30>
    910a:	98 2f       	mov	r25, r24
    910c:	ff 24       	eor	r15, r15
    910e:	ee 24       	eor	r14, r14
    9110:	99 24       	eor	r9, r9
    9112:	ff e1       	ldi	r31, 0x1F	; 31
    9114:	ff 15       	cp	r31, r15
    9116:	d0 f0       	brcs	.+52     	; 0x914c <vfprintf+0xa4>
    9118:	9b 32       	cpi	r25, 0x2B	; 43
    911a:	69 f0       	breq	.+26     	; 0x9136 <vfprintf+0x8e>
    911c:	9c 32       	cpi	r25, 0x2C	; 44
    911e:	28 f4       	brcc	.+10     	; 0x912a <vfprintf+0x82>
    9120:	90 32       	cpi	r25, 0x20	; 32
    9122:	59 f0       	breq	.+22     	; 0x913a <vfprintf+0x92>
    9124:	93 32       	cpi	r25, 0x23	; 35
    9126:	91 f4       	brne	.+36     	; 0x914c <vfprintf+0xa4>
    9128:	0e c0       	rjmp	.+28     	; 0x9146 <vfprintf+0x9e>
    912a:	9d 32       	cpi	r25, 0x2D	; 45
    912c:	49 f0       	breq	.+18     	; 0x9140 <vfprintf+0x98>
    912e:	90 33       	cpi	r25, 0x30	; 48
    9130:	69 f4       	brne	.+26     	; 0x914c <vfprintf+0xa4>
    9132:	41 e0       	ldi	r20, 0x01	; 1
    9134:	24 c0       	rjmp	.+72     	; 0x917e <vfprintf+0xd6>
    9136:	52 e0       	ldi	r21, 0x02	; 2
    9138:	f5 2a       	or	r15, r21
    913a:	84 e0       	ldi	r24, 0x04	; 4
    913c:	f8 2a       	or	r15, r24
    913e:	28 c0       	rjmp	.+80     	; 0x9190 <vfprintf+0xe8>
    9140:	98 e0       	ldi	r25, 0x08	; 8
    9142:	f9 2a       	or	r15, r25
    9144:	25 c0       	rjmp	.+74     	; 0x9190 <vfprintf+0xe8>
    9146:	e0 e1       	ldi	r30, 0x10	; 16
    9148:	fe 2a       	or	r15, r30
    914a:	22 c0       	rjmp	.+68     	; 0x9190 <vfprintf+0xe8>
    914c:	f7 fc       	sbrc	r15, 7
    914e:	29 c0       	rjmp	.+82     	; 0x91a2 <vfprintf+0xfa>
    9150:	89 2f       	mov	r24, r25
    9152:	80 53       	subi	r24, 0x30	; 48
    9154:	8a 30       	cpi	r24, 0x0A	; 10
    9156:	70 f4       	brcc	.+28     	; 0x9174 <vfprintf+0xcc>
    9158:	f6 fe       	sbrs	r15, 6
    915a:	05 c0       	rjmp	.+10     	; 0x9166 <vfprintf+0xbe>
    915c:	98 9c       	mul	r9, r8
    915e:	90 2c       	mov	r9, r0
    9160:	11 24       	eor	r1, r1
    9162:	98 0e       	add	r9, r24
    9164:	15 c0       	rjmp	.+42     	; 0x9190 <vfprintf+0xe8>
    9166:	e8 9c       	mul	r14, r8
    9168:	e0 2c       	mov	r14, r0
    916a:	11 24       	eor	r1, r1
    916c:	e8 0e       	add	r14, r24
    916e:	f0 e2       	ldi	r31, 0x20	; 32
    9170:	ff 2a       	or	r15, r31
    9172:	0e c0       	rjmp	.+28     	; 0x9190 <vfprintf+0xe8>
    9174:	9e 32       	cpi	r25, 0x2E	; 46
    9176:	29 f4       	brne	.+10     	; 0x9182 <vfprintf+0xda>
    9178:	f6 fc       	sbrc	r15, 6
    917a:	6b c1       	rjmp	.+726    	; 0x9452 <vfprintf+0x3aa>
    917c:	40 e4       	ldi	r20, 0x40	; 64
    917e:	f4 2a       	or	r15, r20
    9180:	07 c0       	rjmp	.+14     	; 0x9190 <vfprintf+0xe8>
    9182:	9c 36       	cpi	r25, 0x6C	; 108
    9184:	19 f4       	brne	.+6      	; 0x918c <vfprintf+0xe4>
    9186:	50 e8       	ldi	r21, 0x80	; 128
    9188:	f5 2a       	or	r15, r21
    918a:	02 c0       	rjmp	.+4      	; 0x9190 <vfprintf+0xe8>
    918c:	98 36       	cpi	r25, 0x68	; 104
    918e:	49 f4       	brne	.+18     	; 0x91a2 <vfprintf+0xfa>
    9190:	f2 01       	movw	r30, r4
    9192:	23 fd       	sbrc	r18, 3
    9194:	95 91       	lpm	r25, Z+
    9196:	23 ff       	sbrs	r18, 3
    9198:	91 91       	ld	r25, Z+
    919a:	2f 01       	movw	r4, r30
    919c:	99 23       	and	r25, r25
    919e:	09 f0       	breq	.+2      	; 0x91a2 <vfprintf+0xfa>
    91a0:	b8 cf       	rjmp	.-144    	; 0x9112 <vfprintf+0x6a>
    91a2:	89 2f       	mov	r24, r25
    91a4:	85 54       	subi	r24, 0x45	; 69
    91a6:	83 30       	cpi	r24, 0x03	; 3
    91a8:	18 f0       	brcs	.+6      	; 0x91b0 <vfprintf+0x108>
    91aa:	80 52       	subi	r24, 0x20	; 32
    91ac:	83 30       	cpi	r24, 0x03	; 3
    91ae:	38 f4       	brcc	.+14     	; 0x91be <vfprintf+0x116>
    91b0:	44 e0       	ldi	r20, 0x04	; 4
    91b2:	50 e0       	ldi	r21, 0x00	; 0
    91b4:	a4 0e       	add	r10, r20
    91b6:	b5 1e       	adc	r11, r21
    91b8:	5f e3       	ldi	r21, 0x3F	; 63
    91ba:	59 83       	std	Y+1, r21	; 0x01
    91bc:	0f c0       	rjmp	.+30     	; 0x91dc <vfprintf+0x134>
    91be:	93 36       	cpi	r25, 0x63	; 99
    91c0:	31 f0       	breq	.+12     	; 0x91ce <vfprintf+0x126>
    91c2:	93 37       	cpi	r25, 0x73	; 115
    91c4:	79 f0       	breq	.+30     	; 0x91e4 <vfprintf+0x13c>
    91c6:	93 35       	cpi	r25, 0x53	; 83
    91c8:	09 f0       	breq	.+2      	; 0x91cc <vfprintf+0x124>
    91ca:	56 c0       	rjmp	.+172    	; 0x9278 <vfprintf+0x1d0>
    91cc:	20 c0       	rjmp	.+64     	; 0x920e <vfprintf+0x166>
    91ce:	f5 01       	movw	r30, r10
    91d0:	80 81       	ld	r24, Z
    91d2:	89 83       	std	Y+1, r24	; 0x01
    91d4:	42 e0       	ldi	r20, 0x02	; 2
    91d6:	50 e0       	ldi	r21, 0x00	; 0
    91d8:	a4 0e       	add	r10, r20
    91da:	b5 1e       	adc	r11, r21
    91dc:	61 01       	movw	r12, r2
    91de:	01 e0       	ldi	r16, 0x01	; 1
    91e0:	10 e0       	ldi	r17, 0x00	; 0
    91e2:	12 c0       	rjmp	.+36     	; 0x9208 <vfprintf+0x160>
    91e4:	f5 01       	movw	r30, r10
    91e6:	c0 80       	ld	r12, Z
    91e8:	d1 80       	ldd	r13, Z+1	; 0x01
    91ea:	f6 fc       	sbrc	r15, 6
    91ec:	03 c0       	rjmp	.+6      	; 0x91f4 <vfprintf+0x14c>
    91ee:	6f ef       	ldi	r22, 0xFF	; 255
    91f0:	7f ef       	ldi	r23, 0xFF	; 255
    91f2:	02 c0       	rjmp	.+4      	; 0x91f8 <vfprintf+0x150>
    91f4:	69 2d       	mov	r22, r9
    91f6:	70 e0       	ldi	r23, 0x00	; 0
    91f8:	42 e0       	ldi	r20, 0x02	; 2
    91fa:	50 e0       	ldi	r21, 0x00	; 0
    91fc:	a4 0e       	add	r10, r20
    91fe:	b5 1e       	adc	r11, r21
    9200:	c6 01       	movw	r24, r12
    9202:	0e 94 3c 4a 	call	0x9478	; 0x9478 <strnlen>
    9206:	8c 01       	movw	r16, r24
    9208:	5f e7       	ldi	r21, 0x7F	; 127
    920a:	f5 22       	and	r15, r21
    920c:	14 c0       	rjmp	.+40     	; 0x9236 <vfprintf+0x18e>
    920e:	f5 01       	movw	r30, r10
    9210:	c0 80       	ld	r12, Z
    9212:	d1 80       	ldd	r13, Z+1	; 0x01
    9214:	f6 fc       	sbrc	r15, 6
    9216:	03 c0       	rjmp	.+6      	; 0x921e <vfprintf+0x176>
    9218:	6f ef       	ldi	r22, 0xFF	; 255
    921a:	7f ef       	ldi	r23, 0xFF	; 255
    921c:	02 c0       	rjmp	.+4      	; 0x9222 <vfprintf+0x17a>
    921e:	69 2d       	mov	r22, r9
    9220:	70 e0       	ldi	r23, 0x00	; 0
    9222:	42 e0       	ldi	r20, 0x02	; 2
    9224:	50 e0       	ldi	r21, 0x00	; 0
    9226:	a4 0e       	add	r10, r20
    9228:	b5 1e       	adc	r11, r21
    922a:	c6 01       	movw	r24, r12
    922c:	0e 94 31 4a 	call	0x9462	; 0x9462 <strnlen_P>
    9230:	8c 01       	movw	r16, r24
    9232:	50 e8       	ldi	r21, 0x80	; 128
    9234:	f5 2a       	or	r15, r21
    9236:	f3 fe       	sbrs	r15, 3
    9238:	07 c0       	rjmp	.+14     	; 0x9248 <vfprintf+0x1a0>
    923a:	1a c0       	rjmp	.+52     	; 0x9270 <vfprintf+0x1c8>
    923c:	80 e2       	ldi	r24, 0x20	; 32
    923e:	90 e0       	ldi	r25, 0x00	; 0
    9240:	b3 01       	movw	r22, r6
    9242:	0e 94 47 4a 	call	0x948e	; 0x948e <fputc>
    9246:	ea 94       	dec	r14
    9248:	8e 2d       	mov	r24, r14
    924a:	90 e0       	ldi	r25, 0x00	; 0
    924c:	08 17       	cp	r16, r24
    924e:	19 07       	cpc	r17, r25
    9250:	a8 f3       	brcs	.-22     	; 0x923c <vfprintf+0x194>
    9252:	0e c0       	rjmp	.+28     	; 0x9270 <vfprintf+0x1c8>
    9254:	f6 01       	movw	r30, r12
    9256:	f7 fc       	sbrc	r15, 7
    9258:	85 91       	lpm	r24, Z+
    925a:	f7 fe       	sbrs	r15, 7
    925c:	81 91       	ld	r24, Z+
    925e:	6f 01       	movw	r12, r30
    9260:	90 e0       	ldi	r25, 0x00	; 0
    9262:	b3 01       	movw	r22, r6
    9264:	0e 94 47 4a 	call	0x948e	; 0x948e <fputc>
    9268:	e1 10       	cpse	r14, r1
    926a:	ea 94       	dec	r14
    926c:	01 50       	subi	r16, 0x01	; 1
    926e:	10 40       	sbci	r17, 0x00	; 0
    9270:	01 15       	cp	r16, r1
    9272:	11 05       	cpc	r17, r1
    9274:	79 f7       	brne	.-34     	; 0x9254 <vfprintf+0x1ac>
    9276:	ea c0       	rjmp	.+468    	; 0x944c <vfprintf+0x3a4>
    9278:	94 36       	cpi	r25, 0x64	; 100
    927a:	11 f0       	breq	.+4      	; 0x9280 <vfprintf+0x1d8>
    927c:	99 36       	cpi	r25, 0x69	; 105
    927e:	69 f5       	brne	.+90     	; 0x92da <vfprintf+0x232>
    9280:	f7 fe       	sbrs	r15, 7
    9282:	08 c0       	rjmp	.+16     	; 0x9294 <vfprintf+0x1ec>
    9284:	f5 01       	movw	r30, r10
    9286:	20 81       	ld	r18, Z
    9288:	31 81       	ldd	r19, Z+1	; 0x01
    928a:	42 81       	ldd	r20, Z+2	; 0x02
    928c:	53 81       	ldd	r21, Z+3	; 0x03
    928e:	84 e0       	ldi	r24, 0x04	; 4
    9290:	90 e0       	ldi	r25, 0x00	; 0
    9292:	0a c0       	rjmp	.+20     	; 0x92a8 <vfprintf+0x200>
    9294:	f5 01       	movw	r30, r10
    9296:	80 81       	ld	r24, Z
    9298:	91 81       	ldd	r25, Z+1	; 0x01
    929a:	9c 01       	movw	r18, r24
    929c:	44 27       	eor	r20, r20
    929e:	37 fd       	sbrc	r19, 7
    92a0:	40 95       	com	r20
    92a2:	54 2f       	mov	r21, r20
    92a4:	82 e0       	ldi	r24, 0x02	; 2
    92a6:	90 e0       	ldi	r25, 0x00	; 0
    92a8:	a8 0e       	add	r10, r24
    92aa:	b9 1e       	adc	r11, r25
    92ac:	9f e6       	ldi	r25, 0x6F	; 111
    92ae:	f9 22       	and	r15, r25
    92b0:	57 ff       	sbrs	r21, 7
    92b2:	09 c0       	rjmp	.+18     	; 0x92c6 <vfprintf+0x21e>
    92b4:	50 95       	com	r21
    92b6:	40 95       	com	r20
    92b8:	30 95       	com	r19
    92ba:	21 95       	neg	r18
    92bc:	3f 4f       	sbci	r19, 0xFF	; 255
    92be:	4f 4f       	sbci	r20, 0xFF	; 255
    92c0:	5f 4f       	sbci	r21, 0xFF	; 255
    92c2:	e0 e8       	ldi	r30, 0x80	; 128
    92c4:	fe 2a       	or	r15, r30
    92c6:	ca 01       	movw	r24, r20
    92c8:	b9 01       	movw	r22, r18
    92ca:	a1 01       	movw	r20, r2
    92cc:	2a e0       	ldi	r18, 0x0A	; 10
    92ce:	30 e0       	ldi	r19, 0x00	; 0
    92d0:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <__ultoa_invert>
    92d4:	d8 2e       	mov	r13, r24
    92d6:	d2 18       	sub	r13, r2
    92d8:	40 c0       	rjmp	.+128    	; 0x935a <vfprintf+0x2b2>
    92da:	95 37       	cpi	r25, 0x75	; 117
    92dc:	29 f4       	brne	.+10     	; 0x92e8 <vfprintf+0x240>
    92de:	1f 2d       	mov	r17, r15
    92e0:	1f 7e       	andi	r17, 0xEF	; 239
    92e2:	2a e0       	ldi	r18, 0x0A	; 10
    92e4:	30 e0       	ldi	r19, 0x00	; 0
    92e6:	1d c0       	rjmp	.+58     	; 0x9322 <vfprintf+0x27a>
    92e8:	1f 2d       	mov	r17, r15
    92ea:	19 7f       	andi	r17, 0xF9	; 249
    92ec:	9f 36       	cpi	r25, 0x6F	; 111
    92ee:	61 f0       	breq	.+24     	; 0x9308 <vfprintf+0x260>
    92f0:	90 37       	cpi	r25, 0x70	; 112
    92f2:	20 f4       	brcc	.+8      	; 0x92fc <vfprintf+0x254>
    92f4:	98 35       	cpi	r25, 0x58	; 88
    92f6:	09 f0       	breq	.+2      	; 0x92fa <vfprintf+0x252>
    92f8:	ac c0       	rjmp	.+344    	; 0x9452 <vfprintf+0x3aa>
    92fa:	0f c0       	rjmp	.+30     	; 0x931a <vfprintf+0x272>
    92fc:	90 37       	cpi	r25, 0x70	; 112
    92fe:	39 f0       	breq	.+14     	; 0x930e <vfprintf+0x266>
    9300:	98 37       	cpi	r25, 0x78	; 120
    9302:	09 f0       	breq	.+2      	; 0x9306 <vfprintf+0x25e>
    9304:	a6 c0       	rjmp	.+332    	; 0x9452 <vfprintf+0x3aa>
    9306:	04 c0       	rjmp	.+8      	; 0x9310 <vfprintf+0x268>
    9308:	28 e0       	ldi	r18, 0x08	; 8
    930a:	30 e0       	ldi	r19, 0x00	; 0
    930c:	0a c0       	rjmp	.+20     	; 0x9322 <vfprintf+0x27a>
    930e:	10 61       	ori	r17, 0x10	; 16
    9310:	14 fd       	sbrc	r17, 4
    9312:	14 60       	ori	r17, 0x04	; 4
    9314:	20 e1       	ldi	r18, 0x10	; 16
    9316:	30 e0       	ldi	r19, 0x00	; 0
    9318:	04 c0       	rjmp	.+8      	; 0x9322 <vfprintf+0x27a>
    931a:	14 fd       	sbrc	r17, 4
    931c:	16 60       	ori	r17, 0x06	; 6
    931e:	20 e1       	ldi	r18, 0x10	; 16
    9320:	32 e0       	ldi	r19, 0x02	; 2
    9322:	17 ff       	sbrs	r17, 7
    9324:	08 c0       	rjmp	.+16     	; 0x9336 <vfprintf+0x28e>
    9326:	f5 01       	movw	r30, r10
    9328:	60 81       	ld	r22, Z
    932a:	71 81       	ldd	r23, Z+1	; 0x01
    932c:	82 81       	ldd	r24, Z+2	; 0x02
    932e:	93 81       	ldd	r25, Z+3	; 0x03
    9330:	44 e0       	ldi	r20, 0x04	; 4
    9332:	50 e0       	ldi	r21, 0x00	; 0
    9334:	08 c0       	rjmp	.+16     	; 0x9346 <vfprintf+0x29e>
    9336:	f5 01       	movw	r30, r10
    9338:	80 81       	ld	r24, Z
    933a:	91 81       	ldd	r25, Z+1	; 0x01
    933c:	bc 01       	movw	r22, r24
    933e:	80 e0       	ldi	r24, 0x00	; 0
    9340:	90 e0       	ldi	r25, 0x00	; 0
    9342:	42 e0       	ldi	r20, 0x02	; 2
    9344:	50 e0       	ldi	r21, 0x00	; 0
    9346:	a4 0e       	add	r10, r20
    9348:	b5 1e       	adc	r11, r21
    934a:	a1 01       	movw	r20, r2
    934c:	0e 94 73 4a 	call	0x94e6	; 0x94e6 <__ultoa_invert>
    9350:	d8 2e       	mov	r13, r24
    9352:	d2 18       	sub	r13, r2
    9354:	8f e7       	ldi	r24, 0x7F	; 127
    9356:	f8 2e       	mov	r15, r24
    9358:	f1 22       	and	r15, r17
    935a:	f6 fe       	sbrs	r15, 6
    935c:	0b c0       	rjmp	.+22     	; 0x9374 <vfprintf+0x2cc>
    935e:	5e ef       	ldi	r21, 0xFE	; 254
    9360:	f5 22       	and	r15, r21
    9362:	d9 14       	cp	r13, r9
    9364:	38 f4       	brcc	.+14     	; 0x9374 <vfprintf+0x2cc>
    9366:	f4 fe       	sbrs	r15, 4
    9368:	07 c0       	rjmp	.+14     	; 0x9378 <vfprintf+0x2d0>
    936a:	f2 fc       	sbrc	r15, 2
    936c:	05 c0       	rjmp	.+10     	; 0x9378 <vfprintf+0x2d0>
    936e:	8f ee       	ldi	r24, 0xEF	; 239
    9370:	f8 22       	and	r15, r24
    9372:	02 c0       	rjmp	.+4      	; 0x9378 <vfprintf+0x2d0>
    9374:	1d 2d       	mov	r17, r13
    9376:	01 c0       	rjmp	.+2      	; 0x937a <vfprintf+0x2d2>
    9378:	19 2d       	mov	r17, r9
    937a:	f4 fe       	sbrs	r15, 4
    937c:	0d c0       	rjmp	.+26     	; 0x9398 <vfprintf+0x2f0>
    937e:	fe 01       	movw	r30, r28
    9380:	ed 0d       	add	r30, r13
    9382:	f1 1d       	adc	r31, r1
    9384:	80 81       	ld	r24, Z
    9386:	80 33       	cpi	r24, 0x30	; 48
    9388:	19 f4       	brne	.+6      	; 0x9390 <vfprintf+0x2e8>
    938a:	99 ee       	ldi	r25, 0xE9	; 233
    938c:	f9 22       	and	r15, r25
    938e:	08 c0       	rjmp	.+16     	; 0x93a0 <vfprintf+0x2f8>
    9390:	1f 5f       	subi	r17, 0xFF	; 255
    9392:	f2 fe       	sbrs	r15, 2
    9394:	05 c0       	rjmp	.+10     	; 0x93a0 <vfprintf+0x2f8>
    9396:	03 c0       	rjmp	.+6      	; 0x939e <vfprintf+0x2f6>
    9398:	8f 2d       	mov	r24, r15
    939a:	86 78       	andi	r24, 0x86	; 134
    939c:	09 f0       	breq	.+2      	; 0x93a0 <vfprintf+0x2f8>
    939e:	1f 5f       	subi	r17, 0xFF	; 255
    93a0:	0f 2d       	mov	r16, r15
    93a2:	f3 fc       	sbrc	r15, 3
    93a4:	14 c0       	rjmp	.+40     	; 0x93ce <vfprintf+0x326>
    93a6:	f0 fe       	sbrs	r15, 0
    93a8:	0f c0       	rjmp	.+30     	; 0x93c8 <vfprintf+0x320>
    93aa:	1e 15       	cp	r17, r14
    93ac:	10 f0       	brcs	.+4      	; 0x93b2 <vfprintf+0x30a>
    93ae:	9d 2c       	mov	r9, r13
    93b0:	0b c0       	rjmp	.+22     	; 0x93c8 <vfprintf+0x320>
    93b2:	9d 2c       	mov	r9, r13
    93b4:	9e 0c       	add	r9, r14
    93b6:	91 1a       	sub	r9, r17
    93b8:	1e 2d       	mov	r17, r14
    93ba:	06 c0       	rjmp	.+12     	; 0x93c8 <vfprintf+0x320>
    93bc:	80 e2       	ldi	r24, 0x20	; 32
    93be:	90 e0       	ldi	r25, 0x00	; 0
    93c0:	b3 01       	movw	r22, r6
    93c2:	0e 94 47 4a 	call	0x948e	; 0x948e <fputc>
    93c6:	1f 5f       	subi	r17, 0xFF	; 255
    93c8:	1e 15       	cp	r17, r14
    93ca:	c0 f3       	brcs	.-16     	; 0x93bc <vfprintf+0x314>
    93cc:	04 c0       	rjmp	.+8      	; 0x93d6 <vfprintf+0x32e>
    93ce:	1e 15       	cp	r17, r14
    93d0:	10 f4       	brcc	.+4      	; 0x93d6 <vfprintf+0x32e>
    93d2:	e1 1a       	sub	r14, r17
    93d4:	01 c0       	rjmp	.+2      	; 0x93d8 <vfprintf+0x330>
    93d6:	ee 24       	eor	r14, r14
    93d8:	04 ff       	sbrs	r16, 4
    93da:	0f c0       	rjmp	.+30     	; 0x93fa <vfprintf+0x352>
    93dc:	80 e3       	ldi	r24, 0x30	; 48
    93de:	90 e0       	ldi	r25, 0x00	; 0
    93e0:	b3 01       	movw	r22, r6
    93e2:	0e 94 47 4a 	call	0x948e	; 0x948e <fputc>
    93e6:	02 ff       	sbrs	r16, 2
    93e8:	1d c0       	rjmp	.+58     	; 0x9424 <vfprintf+0x37c>
    93ea:	01 fd       	sbrc	r16, 1
    93ec:	03 c0       	rjmp	.+6      	; 0x93f4 <vfprintf+0x34c>
    93ee:	88 e7       	ldi	r24, 0x78	; 120
    93f0:	90 e0       	ldi	r25, 0x00	; 0
    93f2:	0e c0       	rjmp	.+28     	; 0x9410 <vfprintf+0x368>
    93f4:	88 e5       	ldi	r24, 0x58	; 88
    93f6:	90 e0       	ldi	r25, 0x00	; 0
    93f8:	0b c0       	rjmp	.+22     	; 0x9410 <vfprintf+0x368>
    93fa:	80 2f       	mov	r24, r16
    93fc:	86 78       	andi	r24, 0x86	; 134
    93fe:	91 f0       	breq	.+36     	; 0x9424 <vfprintf+0x37c>
    9400:	01 ff       	sbrs	r16, 1
    9402:	02 c0       	rjmp	.+4      	; 0x9408 <vfprintf+0x360>
    9404:	8b e2       	ldi	r24, 0x2B	; 43
    9406:	01 c0       	rjmp	.+2      	; 0x940a <vfprintf+0x362>
    9408:	80 e2       	ldi	r24, 0x20	; 32
    940a:	f7 fc       	sbrc	r15, 7
    940c:	8d e2       	ldi	r24, 0x2D	; 45
    940e:	90 e0       	ldi	r25, 0x00	; 0
    9410:	b3 01       	movw	r22, r6
    9412:	0e 94 47 4a 	call	0x948e	; 0x948e <fputc>
    9416:	06 c0       	rjmp	.+12     	; 0x9424 <vfprintf+0x37c>
    9418:	80 e3       	ldi	r24, 0x30	; 48
    941a:	90 e0       	ldi	r25, 0x00	; 0
    941c:	b3 01       	movw	r22, r6
    941e:	0e 94 47 4a 	call	0x948e	; 0x948e <fputc>
    9422:	9a 94       	dec	r9
    9424:	d9 14       	cp	r13, r9
    9426:	c0 f3       	brcs	.-16     	; 0x9418 <vfprintf+0x370>
    9428:	da 94       	dec	r13
    942a:	f1 01       	movw	r30, r2
    942c:	ed 0d       	add	r30, r13
    942e:	f1 1d       	adc	r31, r1
    9430:	80 81       	ld	r24, Z
    9432:	90 e0       	ldi	r25, 0x00	; 0
    9434:	b3 01       	movw	r22, r6
    9436:	0e 94 47 4a 	call	0x948e	; 0x948e <fputc>
    943a:	dd 20       	and	r13, r13
    943c:	a9 f7       	brne	.-22     	; 0x9428 <vfprintf+0x380>
    943e:	06 c0       	rjmp	.+12     	; 0x944c <vfprintf+0x3a4>
    9440:	80 e2       	ldi	r24, 0x20	; 32
    9442:	90 e0       	ldi	r25, 0x00	; 0
    9444:	b3 01       	movw	r22, r6
    9446:	0e 94 47 4a 	call	0x948e	; 0x948e <fputc>
    944a:	ea 94       	dec	r14
    944c:	ee 20       	and	r14, r14
    944e:	c1 f7       	brne	.-16     	; 0x9440 <vfprintf+0x398>
    9450:	43 ce       	rjmp	.-890    	; 0x90d8 <vfprintf+0x30>
    9452:	f3 01       	movw	r30, r6
    9454:	66 81       	ldd	r22, Z+6	; 0x06
    9456:	77 81       	ldd	r23, Z+7	; 0x07
    9458:	cb 01       	movw	r24, r22
    945a:	2b 96       	adiw	r28, 0x0b	; 11
    945c:	e2 e1       	ldi	r30, 0x12	; 18
    945e:	0c 94 55 4b 	jmp	0x96aa	; 0x96aa <__epilogue_restores__>

00009462 <strnlen_P>:
    9462:	fc 01       	movw	r30, r24
    9464:	05 90       	lpm	r0, Z+
    9466:	61 50       	subi	r22, 0x01	; 1
    9468:	70 40       	sbci	r23, 0x00	; 0
    946a:	01 10       	cpse	r0, r1
    946c:	d8 f7       	brcc	.-10     	; 0x9464 <strnlen_P+0x2>
    946e:	80 95       	com	r24
    9470:	90 95       	com	r25
    9472:	8e 0f       	add	r24, r30
    9474:	9f 1f       	adc	r25, r31
    9476:	08 95       	ret

00009478 <strnlen>:
    9478:	fc 01       	movw	r30, r24
    947a:	61 50       	subi	r22, 0x01	; 1
    947c:	70 40       	sbci	r23, 0x00	; 0
    947e:	01 90       	ld	r0, Z+
    9480:	01 10       	cpse	r0, r1
    9482:	d8 f7       	brcc	.-10     	; 0x947a <strnlen+0x2>
    9484:	80 95       	com	r24
    9486:	90 95       	com	r25
    9488:	8e 0f       	add	r24, r30
    948a:	9f 1f       	adc	r25, r31
    948c:	08 95       	ret

0000948e <fputc>:
    948e:	0f 93       	push	r16
    9490:	1f 93       	push	r17
    9492:	cf 93       	push	r28
    9494:	df 93       	push	r29
    9496:	8c 01       	movw	r16, r24
    9498:	eb 01       	movw	r28, r22
    949a:	8b 81       	ldd	r24, Y+3	; 0x03
    949c:	81 ff       	sbrs	r24, 1
    949e:	1b c0       	rjmp	.+54     	; 0x94d6 <fputc+0x48>
    94a0:	82 ff       	sbrs	r24, 2
    94a2:	0d c0       	rjmp	.+26     	; 0x94be <fputc+0x30>
    94a4:	2e 81       	ldd	r18, Y+6	; 0x06
    94a6:	3f 81       	ldd	r19, Y+7	; 0x07
    94a8:	8c 81       	ldd	r24, Y+4	; 0x04
    94aa:	9d 81       	ldd	r25, Y+5	; 0x05
    94ac:	28 17       	cp	r18, r24
    94ae:	39 07       	cpc	r19, r25
    94b0:	64 f4       	brge	.+24     	; 0x94ca <fputc+0x3c>
    94b2:	e8 81       	ld	r30, Y
    94b4:	f9 81       	ldd	r31, Y+1	; 0x01
    94b6:	01 93       	st	Z+, r16
    94b8:	f9 83       	std	Y+1, r31	; 0x01
    94ba:	e8 83       	st	Y, r30
    94bc:	06 c0       	rjmp	.+12     	; 0x94ca <fputc+0x3c>
    94be:	e8 85       	ldd	r30, Y+8	; 0x08
    94c0:	f9 85       	ldd	r31, Y+9	; 0x09
    94c2:	80 2f       	mov	r24, r16
    94c4:	09 95       	icall
    94c6:	89 2b       	or	r24, r25
    94c8:	31 f4       	brne	.+12     	; 0x94d6 <fputc+0x48>
    94ca:	8e 81       	ldd	r24, Y+6	; 0x06
    94cc:	9f 81       	ldd	r25, Y+7	; 0x07
    94ce:	01 96       	adiw	r24, 0x01	; 1
    94d0:	9f 83       	std	Y+7, r25	; 0x07
    94d2:	8e 83       	std	Y+6, r24	; 0x06
    94d4:	02 c0       	rjmp	.+4      	; 0x94da <fputc+0x4c>
    94d6:	0f ef       	ldi	r16, 0xFF	; 255
    94d8:	1f ef       	ldi	r17, 0xFF	; 255
    94da:	c8 01       	movw	r24, r16
    94dc:	df 91       	pop	r29
    94de:	cf 91       	pop	r28
    94e0:	1f 91       	pop	r17
    94e2:	0f 91       	pop	r16
    94e4:	08 95       	ret

000094e6 <__ultoa_invert>:
    94e6:	fa 01       	movw	r30, r20
    94e8:	aa 27       	eor	r26, r26
    94ea:	28 30       	cpi	r18, 0x08	; 8
    94ec:	51 f1       	breq	.+84     	; 0x9542 <__ultoa_invert+0x5c>
    94ee:	20 31       	cpi	r18, 0x10	; 16
    94f0:	81 f1       	breq	.+96     	; 0x9552 <__ultoa_invert+0x6c>
    94f2:	e8 94       	clt
    94f4:	6f 93       	push	r22
    94f6:	6e 7f       	andi	r22, 0xFE	; 254
    94f8:	6e 5f       	subi	r22, 0xFE	; 254
    94fa:	7f 4f       	sbci	r23, 0xFF	; 255
    94fc:	8f 4f       	sbci	r24, 0xFF	; 255
    94fe:	9f 4f       	sbci	r25, 0xFF	; 255
    9500:	af 4f       	sbci	r26, 0xFF	; 255
    9502:	b1 e0       	ldi	r27, 0x01	; 1
    9504:	3e d0       	rcall	.+124    	; 0x9582 <__ultoa_invert+0x9c>
    9506:	b4 e0       	ldi	r27, 0x04	; 4
    9508:	3c d0       	rcall	.+120    	; 0x9582 <__ultoa_invert+0x9c>
    950a:	67 0f       	add	r22, r23
    950c:	78 1f       	adc	r23, r24
    950e:	89 1f       	adc	r24, r25
    9510:	9a 1f       	adc	r25, r26
    9512:	a1 1d       	adc	r26, r1
    9514:	68 0f       	add	r22, r24
    9516:	79 1f       	adc	r23, r25
    9518:	8a 1f       	adc	r24, r26
    951a:	91 1d       	adc	r25, r1
    951c:	a1 1d       	adc	r26, r1
    951e:	6a 0f       	add	r22, r26
    9520:	71 1d       	adc	r23, r1
    9522:	81 1d       	adc	r24, r1
    9524:	91 1d       	adc	r25, r1
    9526:	a1 1d       	adc	r26, r1
    9528:	20 d0       	rcall	.+64     	; 0x956a <__ultoa_invert+0x84>
    952a:	09 f4       	brne	.+2      	; 0x952e <__ultoa_invert+0x48>
    952c:	68 94       	set
    952e:	3f 91       	pop	r19
    9530:	2a e0       	ldi	r18, 0x0A	; 10
    9532:	26 9f       	mul	r18, r22
    9534:	11 24       	eor	r1, r1
    9536:	30 19       	sub	r19, r0
    9538:	30 5d       	subi	r19, 0xD0	; 208
    953a:	31 93       	st	Z+, r19
    953c:	de f6       	brtc	.-74     	; 0x94f4 <__ultoa_invert+0xe>
    953e:	cf 01       	movw	r24, r30
    9540:	08 95       	ret
    9542:	46 2f       	mov	r20, r22
    9544:	47 70       	andi	r20, 0x07	; 7
    9546:	40 5d       	subi	r20, 0xD0	; 208
    9548:	41 93       	st	Z+, r20
    954a:	b3 e0       	ldi	r27, 0x03	; 3
    954c:	0f d0       	rcall	.+30     	; 0x956c <__ultoa_invert+0x86>
    954e:	c9 f7       	brne	.-14     	; 0x9542 <__ultoa_invert+0x5c>
    9550:	f6 cf       	rjmp	.-20     	; 0x953e <__ultoa_invert+0x58>
    9552:	46 2f       	mov	r20, r22
    9554:	4f 70       	andi	r20, 0x0F	; 15
    9556:	40 5d       	subi	r20, 0xD0	; 208
    9558:	4a 33       	cpi	r20, 0x3A	; 58
    955a:	18 f0       	brcs	.+6      	; 0x9562 <__ultoa_invert+0x7c>
    955c:	49 5d       	subi	r20, 0xD9	; 217
    955e:	31 fd       	sbrc	r19, 1
    9560:	40 52       	subi	r20, 0x20	; 32
    9562:	41 93       	st	Z+, r20
    9564:	02 d0       	rcall	.+4      	; 0x956a <__ultoa_invert+0x84>
    9566:	a9 f7       	brne	.-22     	; 0x9552 <__ultoa_invert+0x6c>
    9568:	ea cf       	rjmp	.-44     	; 0x953e <__ultoa_invert+0x58>
    956a:	b4 e0       	ldi	r27, 0x04	; 4
    956c:	a6 95       	lsr	r26
    956e:	97 95       	ror	r25
    9570:	87 95       	ror	r24
    9572:	77 95       	ror	r23
    9574:	67 95       	ror	r22
    9576:	ba 95       	dec	r27
    9578:	c9 f7       	brne	.-14     	; 0x956c <__ultoa_invert+0x86>
    957a:	00 97       	sbiw	r24, 0x00	; 0
    957c:	61 05       	cpc	r22, r1
    957e:	71 05       	cpc	r23, r1
    9580:	08 95       	ret
    9582:	9b 01       	movw	r18, r22
    9584:	ac 01       	movw	r20, r24
    9586:	0a 2e       	mov	r0, r26
    9588:	06 94       	lsr	r0
    958a:	57 95       	ror	r21
    958c:	47 95       	ror	r20
    958e:	37 95       	ror	r19
    9590:	27 95       	ror	r18
    9592:	ba 95       	dec	r27
    9594:	c9 f7       	brne	.-14     	; 0x9588 <__ultoa_invert+0xa2>
    9596:	62 0f       	add	r22, r18
    9598:	73 1f       	adc	r23, r19
    959a:	84 1f       	adc	r24, r20
    959c:	95 1f       	adc	r25, r21
    959e:	a0 1d       	adc	r26, r0
    95a0:	08 95       	ret

000095a2 <__mulsi3>:
    95a2:	62 9f       	mul	r22, r18
    95a4:	d0 01       	movw	r26, r0
    95a6:	73 9f       	mul	r23, r19
    95a8:	f0 01       	movw	r30, r0
    95aa:	82 9f       	mul	r24, r18
    95ac:	e0 0d       	add	r30, r0
    95ae:	f1 1d       	adc	r31, r1
    95b0:	64 9f       	mul	r22, r20
    95b2:	e0 0d       	add	r30, r0
    95b4:	f1 1d       	adc	r31, r1
    95b6:	92 9f       	mul	r25, r18
    95b8:	f0 0d       	add	r31, r0
    95ba:	83 9f       	mul	r24, r19
    95bc:	f0 0d       	add	r31, r0
    95be:	74 9f       	mul	r23, r20
    95c0:	f0 0d       	add	r31, r0
    95c2:	65 9f       	mul	r22, r21
    95c4:	f0 0d       	add	r31, r0
    95c6:	99 27       	eor	r25, r25
    95c8:	72 9f       	mul	r23, r18
    95ca:	b0 0d       	add	r27, r0
    95cc:	e1 1d       	adc	r30, r1
    95ce:	f9 1f       	adc	r31, r25
    95d0:	63 9f       	mul	r22, r19
    95d2:	b0 0d       	add	r27, r0
    95d4:	e1 1d       	adc	r30, r1
    95d6:	f9 1f       	adc	r31, r25
    95d8:	bd 01       	movw	r22, r26
    95da:	cf 01       	movw	r24, r30
    95dc:	11 24       	eor	r1, r1
    95de:	08 95       	ret

000095e0 <__udivmodhi4>:
    95e0:	aa 1b       	sub	r26, r26
    95e2:	bb 1b       	sub	r27, r27
    95e4:	51 e1       	ldi	r21, 0x11	; 17
    95e6:	07 c0       	rjmp	.+14     	; 0x95f6 <__udivmodhi4_ep>

000095e8 <__udivmodhi4_loop>:
    95e8:	aa 1f       	adc	r26, r26
    95ea:	bb 1f       	adc	r27, r27
    95ec:	a6 17       	cp	r26, r22
    95ee:	b7 07       	cpc	r27, r23
    95f0:	10 f0       	brcs	.+4      	; 0x95f6 <__udivmodhi4_ep>
    95f2:	a6 1b       	sub	r26, r22
    95f4:	b7 0b       	sbc	r27, r23

000095f6 <__udivmodhi4_ep>:
    95f6:	88 1f       	adc	r24, r24
    95f8:	99 1f       	adc	r25, r25
    95fa:	5a 95       	dec	r21
    95fc:	a9 f7       	brne	.-22     	; 0x95e8 <__udivmodhi4_loop>
    95fe:	80 95       	com	r24
    9600:	90 95       	com	r25
    9602:	bc 01       	movw	r22, r24
    9604:	cd 01       	movw	r24, r26
    9606:	08 95       	ret

00009608 <__divmodhi4>:
    9608:	97 fb       	bst	r25, 7
    960a:	09 2e       	mov	r0, r25
    960c:	07 26       	eor	r0, r23
    960e:	0a d0       	rcall	.+20     	; 0x9624 <__divmodhi4_neg1>
    9610:	77 fd       	sbrc	r23, 7
    9612:	04 d0       	rcall	.+8      	; 0x961c <__divmodhi4_neg2>
    9614:	e5 df       	rcall	.-54     	; 0x95e0 <__udivmodhi4>
    9616:	06 d0       	rcall	.+12     	; 0x9624 <__divmodhi4_neg1>
    9618:	00 20       	and	r0, r0
    961a:	1a f4       	brpl	.+6      	; 0x9622 <__divmodhi4_exit>

0000961c <__divmodhi4_neg2>:
    961c:	70 95       	com	r23
    961e:	61 95       	neg	r22
    9620:	7f 4f       	sbci	r23, 0xFF	; 255

00009622 <__divmodhi4_exit>:
    9622:	08 95       	ret

00009624 <__divmodhi4_neg1>:
    9624:	f6 f7       	brtc	.-4      	; 0x9622 <__divmodhi4_exit>
    9626:	90 95       	com	r25
    9628:	81 95       	neg	r24
    962a:	9f 4f       	sbci	r25, 0xFF	; 255
    962c:	08 95       	ret

0000962e <__udivmodsi4>:
    962e:	a1 e2       	ldi	r26, 0x21	; 33
    9630:	1a 2e       	mov	r1, r26
    9632:	aa 1b       	sub	r26, r26
    9634:	bb 1b       	sub	r27, r27
    9636:	fd 01       	movw	r30, r26
    9638:	0d c0       	rjmp	.+26     	; 0x9654 <__udivmodsi4_ep>

0000963a <__udivmodsi4_loop>:
    963a:	aa 1f       	adc	r26, r26
    963c:	bb 1f       	adc	r27, r27
    963e:	ee 1f       	adc	r30, r30
    9640:	ff 1f       	adc	r31, r31
    9642:	a2 17       	cp	r26, r18
    9644:	b3 07       	cpc	r27, r19
    9646:	e4 07       	cpc	r30, r20
    9648:	f5 07       	cpc	r31, r21
    964a:	20 f0       	brcs	.+8      	; 0x9654 <__udivmodsi4_ep>
    964c:	a2 1b       	sub	r26, r18
    964e:	b3 0b       	sbc	r27, r19
    9650:	e4 0b       	sbc	r30, r20
    9652:	f5 0b       	sbc	r31, r21

00009654 <__udivmodsi4_ep>:
    9654:	66 1f       	adc	r22, r22
    9656:	77 1f       	adc	r23, r23
    9658:	88 1f       	adc	r24, r24
    965a:	99 1f       	adc	r25, r25
    965c:	1a 94       	dec	r1
    965e:	69 f7       	brne	.-38     	; 0x963a <__udivmodsi4_loop>
    9660:	60 95       	com	r22
    9662:	70 95       	com	r23
    9664:	80 95       	com	r24
    9666:	90 95       	com	r25
    9668:	9b 01       	movw	r18, r22
    966a:	ac 01       	movw	r20, r24
    966c:	bd 01       	movw	r22, r26
    966e:	cf 01       	movw	r24, r30
    9670:	08 95       	ret

00009672 <__prologue_saves__>:
    9672:	2f 92       	push	r2
    9674:	3f 92       	push	r3
    9676:	4f 92       	push	r4
    9678:	5f 92       	push	r5
    967a:	6f 92       	push	r6
    967c:	7f 92       	push	r7
    967e:	8f 92       	push	r8
    9680:	9f 92       	push	r9
    9682:	af 92       	push	r10
    9684:	bf 92       	push	r11
    9686:	cf 92       	push	r12
    9688:	df 92       	push	r13
    968a:	ef 92       	push	r14
    968c:	ff 92       	push	r15
    968e:	0f 93       	push	r16
    9690:	1f 93       	push	r17
    9692:	cf 93       	push	r28
    9694:	df 93       	push	r29
    9696:	cd b7       	in	r28, 0x3d	; 61
    9698:	de b7       	in	r29, 0x3e	; 62
    969a:	ca 1b       	sub	r28, r26
    969c:	db 0b       	sbc	r29, r27
    969e:	0f b6       	in	r0, 0x3f	; 63
    96a0:	f8 94       	cli
    96a2:	de bf       	out	0x3e, r29	; 62
    96a4:	0f be       	out	0x3f, r0	; 63
    96a6:	cd bf       	out	0x3d, r28	; 61
    96a8:	09 94       	ijmp

000096aa <__epilogue_restores__>:
    96aa:	2a 88       	ldd	r2, Y+18	; 0x12
    96ac:	39 88       	ldd	r3, Y+17	; 0x11
    96ae:	48 88       	ldd	r4, Y+16	; 0x10
    96b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    96b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    96b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    96b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    96b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    96ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    96bc:	b9 84       	ldd	r11, Y+9	; 0x09
    96be:	c8 84       	ldd	r12, Y+8	; 0x08
    96c0:	df 80       	ldd	r13, Y+7	; 0x07
    96c2:	ee 80       	ldd	r14, Y+6	; 0x06
    96c4:	fd 80       	ldd	r15, Y+5	; 0x05
    96c6:	0c 81       	ldd	r16, Y+4	; 0x04
    96c8:	1b 81       	ldd	r17, Y+3	; 0x03
    96ca:	aa 81       	ldd	r26, Y+2	; 0x02
    96cc:	b9 81       	ldd	r27, Y+1	; 0x01
    96ce:	ce 0f       	add	r28, r30
    96d0:	d1 1d       	adc	r29, r1
    96d2:	0f b6       	in	r0, 0x3f	; 63
    96d4:	f8 94       	cli
    96d6:	de bf       	out	0x3e, r29	; 62
    96d8:	0f be       	out	0x3f, r0	; 63
    96da:	cd bf       	out	0x3d, r28	; 61
    96dc:	ed 01       	movw	r28, r26
    96de:	08 95       	ret

000096e0 <_exit>:
    96e0:	f8 94       	cli

000096e2 <__stop_program>:
    96e2:	ff cf       	rjmp	.-2      	; 0x96e2 <__stop_program>
